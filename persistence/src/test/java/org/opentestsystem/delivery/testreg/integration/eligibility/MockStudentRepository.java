/*
Educational Online Test Delivery System Copyright (c) 2013 American Institutes for Research

Distributed under the AIR Open Source License, Version 1.0 See accompanying file AIR-License-1_0.txt or at
http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 */

package org.opentestsystem.delivery.testreg.integration.eligibility;

import java.util.List;

import org.opentestsystem.delivery.testreg.domain.HierarchyLevel;
import org.opentestsystem.delivery.testreg.domain.Sb11NonEntity;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.persistence.StudentRepository;
import org.opentestsystem.shared.search.domain.AbstractSearchRequest;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.mongodb.repository.support.SimpleMongoRepository;
import org.springframework.stereotype.Component;

@Component
public class MockStudentRepository extends SimpleMongoRepository<Student, String> implements StudentRepository {

    public MockStudentRepository() {
        super(null, null);
    }

    @Override
    public SearchResponse<Student> search(final AbstractSearchRequest abstractSearchRequest) {
        return null;
    }

    @Override
    public <S extends Student> List<S> save(final Iterable<S> entites) {
        return null;
    }

    @Override
    public List<Student> findAll() {
        return null;
    }

    @Override
    public List<Student> findAll(final Sort sort) {
        return null;
    }

    @Override
    public Page<Student> findAll(final Pageable pageable) {
        return null;
    }

    @Override
    public <S extends Student> S save(final S entity) {
        return null;
    }

    @Override
    public Student findOne(final String id) {
        return null;
    }

    @Override
    public boolean exists(final String id) {
        return false;
    }

    @Override
    public Iterable<Student> findAll(final Iterable<String> ids) {
        return null;
    }

    @Override
    public long count() {
        return 0;
    }

    @Override
    public void delete(final String id) {
    }

    @Override
    public void delete(final Student entity) {
    }

    @Override
    public void delete(final Iterable<? extends Student> entities) {
    }

    @Override
    public void deleteAll() {
    }

    @Override
    public <T extends Sb11NonEntity> T findByAlternateKey(final AbstractSearchRequest searchRequest, final Class<T> clazz) {
        return null;
    }

    @Override
    public Student findByEntityIdAndStateAbbreviation(final String entityId, final String stateAbbreviation) {
        return null;
    }

    @Override
    public Student findByExternalSsidAndStateAbbreviation(final String externalSsid, final String stateAbbreviation) {
        return null;
    }

    @Override
    public List<Student> findByInstitutionIdentifierAndStateAbbreviation(final String institutionIdentifier, final String stateAbbreviation) {
        return null;
    }

    @Override
    public long getStudentCount(final String institutionId) {
        return 0;
    }

    @Override
    public List<Student> findStudentsByInstitutions(final List<String> institutionMongoIdList) {
        return null;
    }

    @Override
    public List<Student> findStudentsByInstitution(final String institutionMongoId) {
        return null;
    }

    @Override
    public List<Student> findStudentsByDistrict(final String districtMongoId) {
        return null;
    }

    @Override
    public List<Student> findStudentsByState(final String stateAbbreviation) {
        return null;
    }

    @Override
    public List<Student> findAllByRangeAndLimitWithInstitutionFilter(final String mongoId, final int pageSize, final List<String> institutionMongoIdList) {
        return null;
    }

    @Override
    public long countByInstitutionFilter(final List<String> institutionMongoIds) {
        return 0;
    }

    @Override
    public void updateEntityForStudentsByEntityFilter(final String oldEntityId, final String newEntityId, final HierarchyLevel hierarchyLevel) {
    }
}
