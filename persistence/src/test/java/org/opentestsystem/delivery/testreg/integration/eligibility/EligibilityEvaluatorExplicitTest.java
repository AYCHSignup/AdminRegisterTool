/*
Educational Online Test Delivery System Copyright (c) 2013 American Institutes for Research

Distributed under the AIR Open Source License, Version 1.0 See accompanying file AIR-License-1_0.txt or at
http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 */

package org.opentestsystem.delivery.testreg.integration.eligibility;

import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.Matchers.contains;
import static org.hamcrest.Matchers.containsInAnyOrder;
import static org.hamcrest.Matchers.hasSize;
import static org.junit.Assert.assertThat;

import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import org.joda.time.DateTime;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.opentestsystem.delivery.testreg.domain.Action;
import org.opentestsystem.delivery.testreg.domain.Assessment;
import org.opentestsystem.delivery.testreg.domain.Assessment.EligibilityType;
import org.opentestsystem.delivery.testreg.domain.CacheMap;
import org.opentestsystem.delivery.testreg.domain.ClientEntity;
import org.opentestsystem.delivery.testreg.domain.DistrictEntity;
import org.opentestsystem.delivery.testreg.domain.EligibleStudent;
import org.opentestsystem.delivery.testreg.domain.ExplicitEligibility;
import org.opentestsystem.delivery.testreg.domain.HierarchyLevel;
import org.opentestsystem.delivery.testreg.domain.ImplicitEligibilityRule;
import org.opentestsystem.delivery.testreg.domain.ImplicitEligibilityRule.RuleType;
import org.opentestsystem.delivery.testreg.domain.StateEntity;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.domain.Student.Gender;
import org.opentestsystem.delivery.testreg.domain.Student.GradeLevel;
import org.opentestsystem.delivery.testreg.eligibility.EligibilityEvaluator;
import org.opentestsystem.delivery.testreg.integration.AbstractPersistenceEmbeddedTest;
import org.opentestsystem.delivery.testreg.persistence.EligibleStudentRepository;
import org.opentestsystem.delivery.testreg.service.CacheMapService;
import org.opentestsystem.delivery.testreg.service.Sb11EntityRepositoryService;
import org.opentestsystem.delivery.testreg.service.TestRegPersister;
import org.opentestsystem.shared.progman.client.ProgManClient;
import org.opentestsystem.shared.progman.client.domain.Tenant;
import org.opentestsystem.shared.progman.client.domain.TenantType;
import org.opentestsystem.shared.security.domain.SbacEntity;
import org.opentestsystem.shared.security.service.TenancyService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import com.google.common.collect.Lists;
import com.google.common.collect.Sets;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "classpath:test-event-consumer-context.xml" })
@ActiveProfiles({ "progman.client.impl.null", "progman.proploc.classpath", "mna.client.null" })
public class EligibilityEvaluatorExplicitTest extends AbstractPersistenceEmbeddedTest {

    @Mock
    private TenancyService tenancyService;

    @Mock
    private ProgManClient progmanClient;

    @Mock
    private Sb11EntityRepositoryService sb11EntityService;

    @Mock
    private CacheMapService cacheMapService;

    @Autowired
    private TestRegPersister persister;

    @Autowired
    private EligibleStudentRepository eligStudentRepo;

    @InjectMocks
    @Autowired
    private EligibilityEvaluator eligEval;

    @Before
    public void setup() {
        MockitoAnnotations.initMocks(this);

        Tenant idIsFive = new Tenant();
        idIsFive.setId("5");
        idIsFive.setName("WI");
        idIsFive.setType(TenantType.STATE);

        Mockito.when(
                tenancyService.getApplicableTenants(Sets.newHashSet(new SbacEntity(TenantType.INSTITUTION, "1",
                        "nothing")))).thenReturn(Lists.newArrayList(idIsFive));

        Mockito.when(progmanClient.getTenantById("5")).thenReturn(idIsFive);

        StateEntity stateOfWi = new StateEntity();
        stateOfWi.setEntityId("WI");
        stateOfWi.setEntityName("Wisconsin");
        stateOfWi.setId("11111");

        Mockito.when(sb11EntityService.findByEntityId("WI", TenantType.STATE)).thenReturn(stateOfWi);

        Map<String, Set<String>> uberMap = new HashMap<>();

        Set<String> wiSet = Sets.newHashSet("1", "2", "3");
        uberMap.put("11111", wiSet);

        CacheMap cacheMap = new CacheMap("UberEntityRelationshipMap", uberMap);

        Mockito.when(cacheMapService.getCacheMap("UberEntityRelationshipMap")).thenReturn(cacheMap);
    }

    @Test
    public void testNewExplicitEligibility() {

        // create student 10th grade
        Student student = new Student();
        student.setBirthDate(new DateTime(1980, 11, 11, 0, 0));
        student.setDistrictIdentifier("1");
        student.setEntityId("123456");
        student.setExternalSsid("111111111");
        student.setFirstName("Bob");
        student.setGender(Gender.Male);
        student.setGradeLevelWhenAssessed(GradeLevel.TENTHGRADE);
        student.setLanguageCode("eng");
        student.setLastName("Test");
        student.setStateAbbreviation("WI");
        student.setAmericanIndianOrAlaskaNative("No");
        student.setAsian("No");
        student.setBlackOrAfricanAmerican("No");
        student.setHispanicOrLatino("No");
        student.setWhite("Yes");
        student.setNativeHawaiianOrPacificIsland("No");
        student.setTwoOrMoreRaces("No");
        student.setDisadvantageStatus("No");
        student.setLepStatus("No");
        student.setInstitutionIdentifier("1");
        student.setSection504Status("No");
        student.setiDEAIndicator("No");

        Student storedStudent = persister.saveDomainObject(student);

        try {
            Thread.sleep(500L);
        } catch (InterruptedException e) {
            // ignore
        }

        // create assessment set to explicit
        Assessment assess = new Assessment();
        assess.setDelayRule(2);
        assess.setEligibilityType(EligibilityType.EXPLICIT);
        assess.setNumGlobalOpportunities(4);
        assess.setTestWindow(new Assessment.TestWindow[] { new Assessment.TestWindow(new DateTime(2013, 12, 1, 0, 0),
                new DateTime(2013, 12, 31, 0, 0), null) });
        assess.setTestName("test1");
        assess.setVersion("1.0");
        assess.setTenantId("5");

        Assessment storedAssessment = persister.saveDomainObject(assess);

        try {
            Thread.sleep(500L);
        } catch (InterruptedException e) {
            // ignore
        }

        ClientEntity client1 = new ClientEntity();
        client1.setEntityId("testclient");
        client1.setEntityName("testclient");

        @SuppressWarnings("unused")
        ClientEntity savedClient = persister.saveDomainObject(client1);

        DistrictEntity district1 = new DistrictEntity();
        district1.setDelete(Action.ADD.name());
        district1.setEntityId("1");
        district1.setEntityName("testdistrict");
        district1.setNationwideIdentifier("11");
        district1.setParentEntityId("testclient");
        district1.setParentEntityType(HierarchyLevel.CLIENT);
        district1.setStateAbbreviation("WI");

        @SuppressWarnings("unused")
        DistrictEntity savedDistrict = persister.saveDomainObject(district1);

        try {
            Thread.sleep(500L);
        } catch (InterruptedException e) {
            // ignore
        }

        // create explicit eligibility between both
        ExplicitEligibility explElig = new ExplicitEligibility();
        explElig.setAdministrationName("adminName");
        explElig.setResponsibleDistrictId("1");
        explElig.setStateAbbreviation("WI");
        explElig.setStudentId("123456");
        explElig.setSubject("MTH");
        explElig.setTestName("test1");
        explElig.setTestVersion("1");

        @SuppressWarnings("unused")
        ExplicitEligibility savedExplElig = persister.saveDomainObject(explElig);

        try {
            Thread.sleep(500L);
        } catch (InterruptedException e) {
            // ignore
        }

        // verify eligiblestudent created
        EligibleStudent foundEligStudent = eligStudentRepo.findByStudentMongoId(storedStudent.getId());
        assertThat(foundEligStudent, notNullValue());
        assertThat(foundEligStudent.getAssessments(), hasSize(1));
        assertThat(foundEligStudent.getAssessments(), contains(storedAssessment));

    }

    @Test
    public void testDeleteExplicitEligibility() {

        // create student1 6th grade
        Student student = new Student();
        student.setBirthDate(new DateTime(1980, 11, 11, 0, 0));
        student.setDistrictIdentifier("1");
        student.setEntityId("123456");
        student.setExternalSsid("111111111");
        student.setFirstName("Bob");
        student.setGender(Gender.Male);
        student.setGradeLevelWhenAssessed(GradeLevel.SIXTHGRADE);
        student.setLanguageCode("eng");
        student.setLastName("Test");
        student.setStateAbbreviation("WI");
        student.setAmericanIndianOrAlaskaNative("No");
        student.setAsian("No");
        student.setBlackOrAfricanAmerican("No");
        student.setHispanicOrLatino("No");
        student.setWhite("Yes");
        student.setNativeHawaiianOrPacificIsland("No");
        student.setTwoOrMoreRaces("No");
        student.setDisadvantageStatus("No");
        student.setLepStatus("No");
        student.setInstitutionIdentifier("1");
        student.setInstitutionEntityMongoId("1");
        student.setSection504Status("No");
        student.setiDEAIndicator("No");

        Student storedStudent = persister.saveDomainObject(student);

        try {
            Thread.sleep(500L);
        } catch (InterruptedException e) {
            // ignore
        }

        // create assessment1 with implicit rule = 6th grade
        Assessment assess = new Assessment();
        assess.setDelayRule(2);
        assess.setEligibilityType(EligibilityType.IMPLICIT);

        ImplicitEligibilityRule eligRule = new ImplicitEligibilityRule("gradeLevelWhenAssessed", "06", RuleType.ENABLER);

        assess.setImplicitEligibilityRules(new ImplicitEligibilityRule[] { eligRule });

        assess.setNumGlobalOpportunities(4);
        assess.setTestWindow(new Assessment.TestWindow[] { new Assessment.TestWindow(new DateTime(2013, 12, 1, 0, 0),
                new DateTime(2013, 12, 31, 0, 0), null) });
        assess.setTestName("test1");
        assess.setVersion("1.0");
        assess.setTenantId("5");

        Assessment storedAssessment = persister.saveDomainObject(assess);

        try {
            Thread.sleep(500L);
        } catch (InterruptedException e) {
            // ignore
        }

        // verify eligiblestudent created associated to assessment
        EligibleStudent foundEligStudent = eligStudentRepo.findByStudentMongoId(storedStudent.getId());
        assertThat(foundEligStudent, notNullValue());
        assertThat(foundEligStudent.getAssessments(), hasSize(1));
        assertThat(foundEligStudent.getAssessments(), contains(storedAssessment));

        // create student2 6th grade
        Student student2 = new Student();
        student2.setBirthDate(new DateTime(1980, 11, 11, 0, 0));
        student2.setDistrictIdentifier("1");
        student2.setEntityId("123457");
        student2.setExternalSsid("111111112");
        student2.setFirstName("Bob");
        student2.setGender(Gender.Male);
        student2.setGradeLevelWhenAssessed(GradeLevel.SIXTHGRADE);
        student2.setLanguageCode("eng");
        student2.setLastName("Test");
        student2.setStateAbbreviation("WI");
        student2.setAmericanIndianOrAlaskaNative("No");
        student2.setAsian("No");
        student2.setBlackOrAfricanAmerican("No");
        student2.setHispanicOrLatino("No");
        student2.setWhite("Yes");
        student2.setNativeHawaiianOrPacificIsland("No");
        student2.setTwoOrMoreRaces("No");
        student2.setDisadvantageStatus("No");
        student2.setLepStatus("No");
        student2.setInstitutionIdentifier("1");
        student2.setSection504Status("No");
        student2.setiDEAIndicator("No");

        Student storedStudent2 = persister.saveDomainObject(student2);

        try {
            Thread.sleep(500L);
        } catch (InterruptedException e) {
            // ignore
        }

        // verify eligiblestudent for student2 created
        EligibleStudent foundEligStudent2 = eligStudentRepo.findByStudentMongoId(storedStudent2.getId());
        assertThat(foundEligStudent2, notNullValue());
        assertThat(foundEligStudent2.getAssessments(), hasSize(1));
        assertThat(foundEligStudent2.getAssessments(), contains(storedAssessment));

        // create assessment2 explicit
        Assessment assess2 = new Assessment();
        assess2.setDelayRule(2);
        assess2.setEligibilityType(EligibilityType.EXPLICIT);
        assess2.setNumGlobalOpportunities(4);
        assess2.setTestWindow(new Assessment.TestWindow[] { new Assessment.TestWindow(new DateTime(2013, 12, 1, 0, 0),
                new DateTime(2013, 12, 31, 0, 0), null) });
        assess2.setTestName("test2");
        assess2.setVersion("1.0");
        assess2.setTenantId("5");

        Assessment storedAssessment2 = persister.saveDomainObject(assess2);

        try {
            Thread.sleep(500L);
        } catch (InterruptedException e) {
            // ignore
        }

        ClientEntity client1 = new ClientEntity();
        client1.setEntityId("testclient");
        client1.setEntityName("testclient");

        @SuppressWarnings("unused")
        ClientEntity savedClient = persister.saveDomainObject(client1);

        DistrictEntity district1 = new DistrictEntity();
        district1.setDelete(Action.ADD.name());
        district1.setEntityId("1");
        district1.setEntityName("testdistrict");
        district1.setNationwideIdentifier("11");
        district1.setParentEntityId("testclient");
        district1.setParentEntityType(HierarchyLevel.CLIENT);
        district1.setStateAbbreviation("WI");

        @SuppressWarnings("unused")
        DistrictEntity savedDistrict = persister.saveDomainObject(district1);

        try {
            Thread.sleep(500L);
        } catch (InterruptedException e) {
            // ignore
        }

        // create explicit eligibility for assessment2 to student2
        ExplicitEligibility explElig = new ExplicitEligibility();
        explElig.setAdministrationName("adminName");
        explElig.setResponsibleDistrictId("1");
        explElig.setStateAbbreviation("WI");
        explElig.setStudentId("123457");
        explElig.setSubject("MTH");
        explElig.setTestName("test2");
        explElig.setTestVersion("1");

        ExplicitEligibility savedExplElig = persister.saveDomainObject(explElig);

        try {
            Thread.sleep(500L);
        } catch (InterruptedException e) {
            // ignore
        }

        // verify eligible student for student2 assoc to both assessment1 and 2
        foundEligStudent2 = eligStudentRepo.findByStudentMongoId(storedStudent2.getId());
        assertThat(foundEligStudent2, notNullValue());
        assertThat(foundEligStudent2.getAssessments(), hasSize(2));
        assertThat(foundEligStudent2.getAssessments(), containsInAnyOrder(storedAssessment, storedAssessment2));

        // delete explicit eligibility
        persister.deleteDomainObject(savedExplElig);

        try {
            Thread.sleep(500L);
        } catch (InterruptedException e) {
            // ignore
        }

        // verify elig student for student 2 only assoc to assess1
        foundEligStudent2 = eligStudentRepo.findByStudentMongoId(storedStudent2.getId());
        assertThat(foundEligStudent2, notNullValue());
        assertThat(foundEligStudent2.getAssessments(), hasSize(1));
        assertThat(foundEligStudent2.getAssessments(), contains(storedAssessment));

    }

}
