/*
Educational Online Test Delivery System Copyright (c) 2013 American Institutes for Research

Distributed under the AIR Open Source License, Version 1.0 See accompanying file AIR-License-1_0.txt or at
http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 */

package org.opentestsystem.delivery.testreg.transformer;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.not;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.Matchers.containsInAnyOrder;
import static org.hamcrest.Matchers.hasSize;
import static org.junit.Assert.assertThat;

import java.io.FileReader;
import java.io.IOException;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Pattern;

import org.joda.time.DateTime;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.Assessment;
import org.opentestsystem.delivery.testreg.domain.Assessment.EligibilityType;
import org.opentestsystem.delivery.testreg.domain.DistrictEntity;
import org.opentestsystem.delivery.testreg.domain.EligibleStudent;
import org.opentestsystem.delivery.testreg.domain.InstitutionEntity;
import org.opentestsystem.delivery.testreg.domain.StateEntity;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.domain.Student.Gender;
import org.opentestsystem.delivery.testreg.domain.Student.GradeLevel;
import org.opentestsystem.delivery.testreg.integration.AbstractPersistenceEmbeddedTestDw;
import org.opentestsystem.delivery.testreg.persistence.DistrictEntityRepository;
import org.opentestsystem.delivery.testreg.persistence.EligibleStudentRepository;
import org.opentestsystem.delivery.testreg.persistence.InstitutionEntityRepository;
import org.opentestsystem.delivery.testreg.persistence.StateEntityRepository;
import org.opentestsystem.delivery.testreg.transformer.domain.DwConfigs;
import org.opentestsystem.delivery.testreg.transformer.domain.DwConfigs.DwConfigType;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.integration.Message;
import org.supercsv.io.CsvListReader;
import org.supercsv.io.ICsvListReader;
import org.supercsv.prefs.CsvPreference;
import org.supercsv.quote.NormalQuoteMode;

import com.fasterxml.jackson.databind.ObjectMapper;

public class DwDataGeneratorTest extends AbstractPersistenceEmbeddedTestDw {

    @Autowired
    private DwDataGenerator dwDataGenerator;

    @Autowired
    private EligibleStudentRepository eligibleStudentRepo;

    @Autowired
    private StateEntityRepository stateRepo;

    @Autowired
    private DistrictEntityRepository districtRepo;

    @Autowired
    private InstitutionEntityRepository institutionRepo;

    @Autowired
    private ObjectMapper objectMapper;

    @Autowired
    private MockTestRegPersister persister;

    @Autowired
    private DwConfigs dwConfigs;

    @SuppressWarnings("unused")
    private static final Logger LOGGER = LoggerFactory.getLogger(DwDataGeneratorTest.class);

    private static final String UUID = "00000000-0000-0000-0000-000000000000";
    private static final String FILE_SUFFIX = "2014-01-01-000000000000";

    @Before
    public void init() {

        persister.reset();

        // create assessment with explicit rule
        Assessment assess = new Assessment();
        assess.setDelayRule(2);
        assess.setEligibilityType(EligibilityType.EXPLICIT);
        assess.setAcademicYear("2012");
        assess.setType(Assessment.AssessmentType.SUMMATIVE.getValue());

        assess.setNumGlobalOpportunities(4);
        assess.setTestWindow(new Assessment.TestWindow[] { new Assessment.TestWindow(new DateTime(2013, 12, 1, 0, 0),
                new DateTime(2013, 12, 31, 0, 0), null) });
        assess.setTestName("test1");
        assess.setVersion("1");
        assess.setTenantId("5");

        Assessment assess2 = new Assessment();
        assess2.setDelayRule(2);
        assess2.setEligibilityType(EligibilityType.EXPLICIT);
        assess2.setAcademicYear("2013");
        assess2.setType(Assessment.AssessmentType.SUMMATIVE.getValue());

        assess2.setNumGlobalOpportunities(4);
        assess2.setTestWindow(new Assessment.TestWindow[] { new Assessment.TestWindow(new DateTime(2013, 12, 1, 0, 0),
                new DateTime(2013, 12, 31, 0, 0), null) });
        assess2.setTestName("test2");
        assess2.setVersion("1");
        assess2.setTenantId("5");

        Assessment assess3 = new Assessment();
        assess3.setDelayRule(2);
        assess3.setEligibilityType(EligibilityType.EXPLICIT);
        assess3.setAcademicYear("2013");
        assess3.setType(Assessment.AssessmentType.SUMMATIVE.getValue());

        assess3.setNumGlobalOpportunities(4);
        assess3.setTestWindow(new Assessment.TestWindow[] { new Assessment.TestWindow(new DateTime(2013, 12, 1, 0, 0),
                new DateTime(2013, 12, 31, 0, 0), null) });
        assess3.setTestName("test3");
        assess3.setVersion("1");
        assess3.setTenantId("5");

        // create student
        Student student = new Student();
        student.setId("533dbd85e4b060f6e8d5adc8");
        student.setBirthDate(new DateTime(1980, 1, 1, 0, 0));
        student.setDistrictIdentifier("1");
        student.setEntityId("123456");
        student.setExternalSsid("111111111");
        student.setFirstName("Bob");
        student.setGender(Gender.Male);
        student.setGradeLevelWhenAssessed(GradeLevel.FIFTHGRADE);
        student.setLanguageCode("eng");
        student.setLastName("Test");
        student.setStateAbbreviation("WI");
        student.setWhite("Yes");
        student.setDisadvantageStatus("No");
        student.setLepStatus("No");
        student.setInstitutionIdentifier("1");
        student.setSection504Status("No");
        student.setiDEAIndicator("No");

        Student student2 = new Student();
        student2.setId("533dbd85e4b060f6e8d5adc9");
        student2.setBirthDate(new DateTime(1980, 1, 1, 0, 0));
        student2.setDistrictIdentifier("1");
        student2.setEntityId("123457");
        student2.setExternalSsid("111111111");
        student2.setFirstName("Bob");
        student2.setGender(Gender.Male);
        student2.setGradeLevelWhenAssessed(GradeLevel.FIFTHGRADE);
        student2.setLanguageCode("eng");
        student2.setLastName("Test");
        student2.setStateAbbreviation("WI");
        student2.setWhite("Yes");
        student2.setDisadvantageStatus("No");
        student2.setLepStatus("No");
        student2.setInstitutionIdentifier("1");
        student2.setSection504Status("No");
        student2.setiDEAIndicator("No");

        Student student3 = new Student();
        student3.setId("533dbd85e4b060f6e8d5adc0");
        student3.setBirthDate(new DateTime(1980, 1, 1, 0, 0));
        student3.setDistrictIdentifier("1");
        student3.setEntityId("123458");
        student3.setExternalSsid("111111111");
        student3.setFirstName("Bob");
        student3.setGender(Gender.Male);
        student3.setGradeLevelWhenAssessed(GradeLevel.FIFTHGRADE);
        student3.setLanguageCode("eng");
        student3.setLastName("Test");
        student3.setStateAbbreviation("WI");
        student3.setWhite("Yes");
        student3.setDisadvantageStatus("No");
        student3.setLepStatus("No");
        student3.setInstitutionIdentifier("1");
        student3.setSection504Status("No");
        student3.setiDEAIndicator("No");

        // create a state
        StateEntity state = new StateEntity();
        state.setEntityId("WI");
        state.setEntityName("Wisconsin");
        state.setParentEntityId("00000");
        state.setParentEntityType("CLIENT");

        stateRepo.save(state);

        // create a district
        DistrictEntity district = new DistrictEntity();
        district.setEntityId("1");
        district.setEntityName("Madison School District");
        district.setNationwideIdentifier("1");
        district.setParentEntityId("WI");
        district.setParentEntityType("STATE");
        district.setStateAbbreviation("WI");

        districtRepo.save(district);

        // create an institution
        InstitutionEntity institution = new InstitutionEntity();
        institution.setEntityId("1");
        institution.setEntityName("Stephens Elementary School");
        institution.setNationwideIdentifier("1");
        institution.setParentEntityId("1");
        institution.setParentEntityType("DISTRICT");
        institution.setStateAbbreviation("WI");

        institutionRepo.save(institution);

        student.setDistrictEntityMongoId(district.getId());
        student.setInstitutionEntityMongoId(institution.getId());

        student2.setDistrictEntityMongoId(district.getId());
        student2.setInstitutionEntityMongoId(institution.getId());

        student3.setDistrictEntityMongoId(district.getId());
        student3.setInstitutionEntityMongoId(institution.getId());

        // create an eligible student to generate data for
        EligibleStudent eligStudent = new EligibleStudent();

        eligStudent.setStudent(student);
        eligStudent.addAssessment(assess);

        eligibleStudentRepo.save(eligStudent);

        EligibleStudent eligStudent2 = new EligibleStudent();

        eligStudent2.setStudent(student2);
        eligStudent2.addAssessment(assess2);

        eligibleStudentRepo.save(eligStudent2);

        EligibleStudent eligStudent3 = new EligibleStudent();

        eligStudent3.setStudent(student3);
        eligStudent3.addAssessment(assess3);

        eligibleStudentRepo.save(eligStudent3);

    }

    @Test
    public void testFindUniqueAcademicYears() {
        List<String> years = dwDataGenerator.findUniqueAcademicYears();

        assertThat(years, containsInAnyOrder("2012", "2013"));

    }

    @Test
    public void testGenerateDwData() {

        persister.setSystemId("0");

        Message<String[]> message = dwDataGenerator.generateDwData("2012", UUID, FILE_SUFFIX, DwConfigType.SBAC);

        String[] output = message.getPayload();

        // verify the filename patterns are correct
        String csvFilenamePatternString = "registration_extract-sbac-\\d{4}-\\d{2}-\\d{2}-\\w{12}.csv";
        String jsonFilenamePatternString = "json_metadata-sbac-\\d{4}-\\d{2}-\\d{2}-\\w{12}.json";

        String csvFilename = new String(output[0]);
        String jsonFilename = new String(output[3]);

        assertThat(Pattern.matches(csvFilenamePatternString, csvFilename), is(true));
        assertThat(Pattern.matches(jsonFilenamePatternString, jsonFilename), is(true));

        // read in the CSV file data and do some verification

        List<List<String>> delimitedrows = new ArrayList<List<String>>();
        ICsvListReader listReader = null;
        CsvPreference csvPrefs = new CsvPreference.Builder('\"', ',', "\n").useQuoteMode(new NormalQuoteMode()).build();
        try {
            listReader = new CsvListReader(new FileReader(output[1]), csvPrefs);

            List<String> singleRow;

            while ((singleRow = listReader.read()) != null) {
                delimitedrows.add(singleRow);
            }

        } catch (IOException e) {
            throw new RuntimeException(e);
        } finally {
            if (listReader != null) {
                try {
                    listReader.close();
                } catch (IOException e) {
                    // ignore
                }
            }
        }

        assertThat(delimitedrows, hasSize(2));

        List<String> headerrow = delimitedrows.get(0);
        assertThat(headerrow, hasSize(33));
        assertThat(headerrow.get(0), is("StateName"));
        assertThat(headerrow.get(32), is("PrimaryDisabilityType"));

        List<String> datarow = delimitedrows.get(1);
        assertThat(datarow, hasSize(34));
        assertThat(datarow.get(0), is("Wisconsin"));

        // this is an sbac dw and the test properties have sharing identity data = false
        // so validate that those fields are null

        assertThat(datarow.get(6), nullValue());
        assertThat(datarow.get(7), nullValue());
        assertThat(datarow.get(8), nullValue());
        assertThat(datarow.get(9), nullValue());
        assertThat(datarow.get(10), nullValue());
        assertThat(datarow.get(12), nullValue());
        // assertThat(datarow.get(12), is("1980-01-01"));

        assertThat(datarow.get(3), is("Madison School District"));
        assertThat(datarow.get(5), is("Stephens Elementary School"));

        // read in JSON data and convert to the object type used and verify

        StringWriter jsonWriter = new StringWriter();
        FileReader jsonFileReader;
        try {
            jsonFileReader = new FileReader(output[4]);
            char[] buf = new char[4096];
            int len;
            while ((len = jsonFileReader.read(buf)) > 0) {
                jsonWriter.write(buf, 0, len);
            }
        } catch (IOException e1) {
            e1.printStackTrace();
        }

        String jsonString = jsonWriter.toString();
        DwDataGenerator.DwJsonMetadata jsonMetadata = null;
        try {
            jsonMetadata = objectMapper.readValue(jsonString, DwDataGenerator.DwJsonMetadata.class);
        } catch (IOException e) {
            e.printStackTrace();
        }

        assertThat(jsonMetadata.getContent(), is("StudentRegistration"));
        assertThat(jsonMetadata.getIdentification().getAcademicYear(), is("2012"));
        assertThat(jsonMetadata.getSource().getTestRegCallbackURL(), notNullValue());

    }

    @Test
    public void testExternalSsidHeaderName() {

        persister.setSystemId("0");

        Message<String[]> message = dwDataGenerator.generateDwData("2012", UUID, FILE_SUFFIX, DwConfigType.SBAC);

        String[] output = message.getPayload();

        // read in the CSV file data and do some verification

        List<List<String>> delimitedrows = new ArrayList<List<String>>();
        ICsvListReader listReader = null;
        CsvPreference csvPrefs = new CsvPreference.Builder('\"', ',', "\n").useQuoteMode(new NormalQuoteMode()).build();
        try {
            listReader = new CsvListReader(new FileReader(output[1]), csvPrefs);

            List<String> singleRow;

            while ((singleRow = listReader.read()) != null) {
                delimitedrows.add(singleRow);
            }

        } catch (IOException e) {
            throw new RuntimeException(e);
        } finally {
            if (listReader != null) {
                try {
                    listReader.close();
                } catch (IOException e) {
                    // ignore
                }
            }
        }

        assertThat(delimitedrows, hasSize(2));

        List<String> headerrow = delimitedrows.get(0);
        assertThat(headerrow.get(7), is("ExternalSSID"));

    }

    @Test
    public void testRespInstitutionIdNotNull() {

        persister.setSystemId("0");

        Message<String[]> message = dwDataGenerator.generateDwData("2012", UUID, FILE_SUFFIX, DwConfigType.SBAC);

        String[] output = message.getPayload();

        // read in the CSV file data and do some verification

        List<List<String>> delimitedrows = new ArrayList<List<String>>();
        ICsvListReader listReader = null;
        CsvPreference csvPrefs = new CsvPreference.Builder('\"', ',', "\n").useQuoteMode(new NormalQuoteMode()).build();
        try {
            listReader = new CsvListReader(new FileReader(output[1]), csvPrefs);

            List<String> singleRow;

            while ((singleRow = listReader.read()) != null) {
                delimitedrows.add(singleRow);
            }

        } catch (IOException e) {
            throw new RuntimeException(e);
        } finally {
            if (listReader != null) {
                try {
                    listReader.close();
                } catch (IOException e) {
                    // ignore
                }
            }
        }

        assertThat(delimitedrows, hasSize(2));

        @SuppressWarnings("unused")
        List<String> headerrow = delimitedrows.get(0);

        List<String> datarow = delimitedrows.get(1);
        assertThat(datarow, hasSize(34));
        assertThat(datarow.get(4), is(not("")));

    }

    @Test
    public void testDemographicsAreNotNull() {

        persister.setSystemId("0");

        Message<String[]> message = dwDataGenerator.generateDwData("2012", UUID, FILE_SUFFIX, DwConfigType.SBAC);

        String[] output = message.getPayload();

        // read in the CSV file data and do some verification

        List<List<String>> delimitedrows = new ArrayList<List<String>>();
        ICsvListReader listReader = null;
        CsvPreference csvPrefs = new CsvPreference.Builder('\"', ',', "\n").useQuoteMode(new NormalQuoteMode()).build();
        try {
            listReader = new CsvListReader(new FileReader(output[1]), csvPrefs);

            List<String> singleRow;

            while ((singleRow = listReader.read()) != null) {
                delimitedrows.add(singleRow);
            }

        } catch (IOException e) {
            throw new RuntimeException(e);
        } finally {
            if (listReader != null) {
                try {
                    listReader.close();
                } catch (IOException e) {
                    // ignore
                }
            }
        }

        assertThat(delimitedrows, hasSize(2));

        @SuppressWarnings("unused")
        List<String> headerrow = delimitedrows.get(0);

        // check 14-19 and 25 to make sure they're not ""

        List<String> datarow = delimitedrows.get(1);
        assertThat(datarow, hasSize(34));
        assertThat(datarow.get(14), is(not("")));
        assertThat(datarow.get(15), is(not("")));
        assertThat(datarow.get(16), is(not("")));
        assertThat(datarow.get(17), is(not("")));
        assertThat(datarow.get(18), is(not("")));
        assertThat(datarow.get(19), is(not("")));
        assertThat(datarow.get(25), is(not("")));

    }

    @Test
    public void testAssessmentTypeFilterNoRecs() {

        persister.setSystemId("0");
        // persister.setAssessmentTypes(Assessment.AssessmentType.FORMATIVE.getValue());

        dwConfigs.addSbacDwConfig("testlandingzone@datarecognitioncorp.com", "ftp.sbac.com", 22, "sbacuser", "sbac",
                false, "formative");

        Message<String[]> message = dwDataGenerator.generateDwData("2012", UUID, FILE_SUFFIX, DwConfigType.SBAC);

        String[] output = message.getPayload();

        // read in the CSV file data and do some verification

        List<List<String>> delimitedrows = new ArrayList<List<String>>();
        ICsvListReader listReader = null;
        CsvPreference csvPrefs = new CsvPreference.Builder('\"', ',', "\n").useQuoteMode(new NormalQuoteMode()).build();
        try {
            listReader = new CsvListReader(new FileReader(output[1]), csvPrefs);

            List<String> singleRow;

            while ((singleRow = listReader.read()) != null) {
                delimitedrows.add(singleRow);
            }

        } catch (IOException e) {
            throw new RuntimeException(e);
        } finally {
            if (listReader != null) {
                try {
                    listReader.close();
                } catch (IOException e) {
                    // ignore
                }
            }
        }

        // only header row
        assertThat(delimitedrows, hasSize(1));

    }

    @Test
    public void testAssessmentTypeFilterOneRec() {

        persister.setSystemId("0");
        // persister.setAssessmentTypes(Assessment.AssessmentType.SUMMATIVE.getValue());

        dwConfigs.addSbacDwConfig("testlandingzone@datarecognitioncorp.com", "ftp.sbac.com", 22, "sbacuser", "sbac",
                false, "summative");

        Message<String[]> message = dwDataGenerator.generateDwData("2012", UUID, FILE_SUFFIX, DwConfigType.SBAC);

        String[] output = message.getPayload();

        // read in the CSV file data and do some verification

        List<List<String>> delimitedrows = new ArrayList<List<String>>();
        ICsvListReader listReader = null;
        CsvPreference csvPrefs = new CsvPreference.Builder('\"', ',', "\n").useQuoteMode(new NormalQuoteMode()).build();
        try {
            listReader = new CsvListReader(new FileReader(output[1]), csvPrefs);

            List<String> singleRow;

            while ((singleRow = listReader.read()) != null) {
                delimitedrows.add(singleRow);
            }

        } catch (IOException e) {
            throw new RuntimeException(e);
        } finally {
            if (listReader != null) {
                try {
                    listReader.close();
                } catch (IOException e) {
                    // ignore
                }
            }
        }

        // only header row
        assertThat(delimitedrows, hasSize(2));

    }

}
