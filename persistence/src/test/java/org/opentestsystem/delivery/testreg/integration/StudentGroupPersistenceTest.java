/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.integration;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.junit.Assert.assertThat;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.DistrictEntity;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.InstitutionEntity;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.domain.Student.Gender;
import org.opentestsystem.delivery.testreg.domain.Student.GradeLevel;
import org.opentestsystem.delivery.testreg.domain.Student.PrimaryDisabilityType;
import org.opentestsystem.delivery.testreg.domain.Student.Title3ProgramType;
import org.opentestsystem.delivery.testreg.domain.StudentGroup;
import org.opentestsystem.delivery.testreg.service.TestRegPersister;
import org.springframework.beans.factory.annotation.Autowired;

public class StudentGroupPersistenceTest extends AbstractPersistenceEmbeddedTest {

    @Autowired
    private TestRegPersister persister;

    private Student student;

    @Before
    public void init() {
        mongoTemplate.insert(new InstitutionEntity.Builder("10001", "MiddletonSchool", "CLIENT", "234", "000000", "CA",
                "ADD").build());
        mongoTemplate.insert(new DistrictEntity.Builder("101", "Middleton School district", "000000", "CLIENT", "2444",
                "CA", "ADD").build());

        student = new Student();
        student.setEntityId("123456");
        student.setStateAbbreviation("WI");
        student.setDistrictIdentifier("101");
        student.setInstitutionIdentifier("10001");
        student.setMiddleName("MS");
        student.setFirstName("Joe");
        student.setLastName("Smith");
        student.setBirthDate("2013-10-10");
        student.setExternalSsid("WI12345");
        student.setGradeLevelWhenAssessed(GradeLevel.EIGHTHGRADE);
        student.setGender(Gender.Male);
        student.setHispanicOrLatino("NO");
        student.setAmericanIndianOrAlaskaNative("NO");
        student.setAsian("NO");
        student.setLanguageCode("eng");
        student.setBlackOrAfricanAmerican("NO");
        student.setWhite("Yes");
        student.setNativeHawaiianOrPacificIsland("NO");
        student.setTwoOrMoreRaces("NO");
        student.setiDEAIndicator("NO");
        student.setLepStatus("NO");
        student.setSection504Status("NO");
        student.setDisadvantageStatus("YES");
        student.setTitle3ProgressStatus("PROFICIENT");
        student.setMigrantStatus("YES");
        student.setFirstEntryDateIntoUsSchool("2014-09-01");
        student.setLepEntryDate("2010-10-10");
        student.setLepExitDate("2010-10-20");
        student.setTitle3ProgramType(Title3ProgramType.DUALLANGUAGE);
        student.setPrimaryDisabilityType(PrimaryDisabilityType.AUT);

        student = persister.saveDomainObject(student);

    }

    @Test
    public void testSave() {

        StudentGroup group = new StudentGroup();
        group.setInstitutionIdentifier("10001");
        group.setDistrictIdentifier("101");
        group.setStateAbbreviation("WI");
        group.setStudentId("123456");
        group.setOwnerEmail("test@test.com");
        group.setStudentGroupName("test group");

        StudentGroup savedGroup = persister.saveDomainObject(group);

        assertThat(savedGroup.getId(), notNullValue());

    }

    @Test
    public void testFind() {
        StudentGroup group = new StudentGroup();
        group.setInstitutionIdentifier("10001");
        group.setDistrictIdentifier("101");
        group.setStateAbbreviation("WI");
        group.setStudentId("123456");
        group.setOwnerEmail("test@test.com");
        group.setStudentGroupName("test group");

        StudentGroup savedGroup = persister.saveDomainObject(group);

        String studentGroupId = savedGroup.getId();
        assertThat(studentGroupId, notNullValue());

        StudentGroup readObj = persister.findById(studentGroupId, FormatType.STUDENTGROUP);

        assertThat(readObj, notNullValue());
        assertThat(readObj.getId(), is(studentGroupId));
        assertThat(readObj.getStudentIds().get(0), is("123456"));

    }

    @Test
    public void testRemove() {
        StudentGroup group = new StudentGroup();
        group.setInstitutionIdentifier("10001");
        group.setDistrictIdentifier("101");
        group.setStateAbbreviation("WI");
        group.setStudentId("123456");
        group.setOwnerEmail("test@test.com");
        group.setStudentGroupName("test group");

        StudentGroup savedGroup = persister.saveDomainObject(group);

        String studentGroupId = savedGroup.getId();
        assertThat(studentGroupId, notNullValue());

        persister.deleteDomainObject(savedGroup);

        StudentGroup readObj = persister.findById(studentGroupId, FormatType.STUDENTGROUP);

        assertThat(readObj, nullValue());
    }

}
