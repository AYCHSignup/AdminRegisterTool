/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.integration;

import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertThat;
import static org.junit.Assert.assertTrue;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import static org.hamcrest.core.IsNull.notNullValue;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.HierarchyLevel;
import org.opentestsystem.delivery.testreg.domain.InstitutionEntity;
import org.opentestsystem.delivery.testreg.domain.User;
import org.opentestsystem.delivery.testreg.domain.User.RoleAssociation;
import org.opentestsystem.delivery.testreg.domain.search.UserSearchRequest;
import org.opentestsystem.delivery.testreg.service.impl.UserServiceImpl;
import org.opentestsystem.shared.search.domain.SearchResponse;

import com.google.common.collect.Maps;


public class UserServiceTest extends AbstractPersistenceEmbeddedTest {

    @Resource(name = "userService")
    private UserServiceImpl<User> userService;

    private User user;

    @Before
    public void init() {
        mongoTemplate.insert(new InstitutionEntity.Builder("10001", "MiddletonSchool", "CLIENT", "234", "000000", "WI", "ADD").build());
        user = new User();
        user.setFirstName("Bob");
        user.setLastName("Smith");
        user.setEmail("bob@smith.com");
        RoleAssociation roles = new RoleAssociation();
        roles.setRole("Admin");
        roles.setStateAbbreviation("WI");
        roles.setLevel(HierarchyLevel.INSTITUTION);
        roles.setAssociatedEntityId("10001");
        user.addRoleAssociation(roles);
    }

    @Test
    public void testSave() {
        List<User> users = new ArrayList<User>();
        users.add(user);
        List<User> savedUsers = userService.saveDomainObjects(users);
        assertNotNull("saved users should not be null", savedUsers);
        assertTrue("saved users should not be empty", savedUsers.size() == 1);
        String userId = savedUsers.get(0).getId();
        assertNotNull("id on saved Item should be not be null", userId);
        assertNotNull("role associated entity mongo id should not be null", savedUsers.get(0).getRoleAssociations().get(0).getAssociatedEntityMongoId());
    }

    // While saving it merges the roles into one user and save it as one user
    @Test
    public void testMergeSaveList() {
        User user1 = new User();
        user1.setFirstName("Bob");
        user1.setLastName("Smith");
        user1.setEmail("bob@smith.com");
        RoleAssociation roles1 = new RoleAssociation();
        roles1.setRole("Test Author");
        roles1.setStateAbbreviation("WI");
        roles1.setLevel(HierarchyLevel.GROUPOFINSTITUTIONS);
        roles1.setAssociatedEntityId("10001");
        user1.addRoleAssociation(roles1);
        List<User> userList = new ArrayList<User>();
        userList.add(user);
        userList.add(user1);
        List<User> savedList = userService.saveDomainObjects(userList);
        assertThat(savedList.size(), is(1));
        User user = savedList.get(0);
        assertThat(user.getRoleAssociations().size(), is(2));
    }

    @Test
    public void testSaveList() {
        User user1 = new User();
        user1.setFirstName("Bob");
        user1.setLastName("Smith");
        user1.setEmail("bobtest@smith.com");
        RoleAssociation roles1 = new RoleAssociation();
        roles1.setRole("Test Author");
        roles1.setStateAbbreviation("WI");
        roles1.setLevel(HierarchyLevel.GROUPOFINSTITUTIONS);
        roles1.setAssociatedEntityId("10001");
        user1.addRoleAssociation(roles1);
        List<User> userList = new ArrayList<User>();
        userList.add(user);
        userList.add(user1);
        List<User> savedList = userService.saveDomainObjects(userList);
        assertThat(savedList.size(), is(2));
    }

    @Test
    public void testUpdate() {
        User u = userService.saveDomainObject(user);
        String origPhone = user.getPhone();
        String userId = u.getId();
        assertNotNull("id on saved Item should be not be null", userId);

        user.setId(null);
        user.setPhone("777-777-7777");
        User v = userService.updateDomainObject(user);
        String updatedUserId = v.getId();
        String updatedPhone = v.getPhone();

        assertThat(updatedUserId, is(userId));
        assertThat(updatedPhone, is("777-777-7777"));
        assertThat(updatedPhone, is(org.hamcrest.CoreMatchers.not(origPhone)));
    }

    @Test
    public void testFindWithEmail() {
        userService.saveDomainObject(user);
        String userId = user.getId();
        assertNotNull("id on saved Item should be not be null", userId);
        User readObj = userService.findById(userId, User.FORMAT_TYPE);
        assertEquals(readObj.getEmail(), "bob@smith.com");
    }

    @Test
    public void testFind() {
        userService.saveDomainObject(user);
        String userId = user.getId();
        assertNotNull("id on saved Item should be not be null", userId);
        @SuppressWarnings("unused")
        User readObj = userService.findById(userId, User.FORMAT_TYPE);
        user.setFirstName("Bob");
        user.setLastName("Smith");
    }

    @Test
    public void testRemove() {
        userService.saveDomainObject(user);
        String userId = user.getId();
        assertNotNull("id on saved Item should be not be null", userId);
        userService.deleteDomainObject(userId, User.FORMAT_TYPE);
        User readObj = userService.findById(userId, User.FORMAT_TYPE);
        assertNull("Item must be null", readObj);
    }

    @Test
    public void testSearchUsers() {
        User savedUser = userService.saveDomainObject(user);
        assertNotNull("Saved Item should be not be null", savedUser);
        Map<String, String[]> requestMap = Maps.newHashMap();
        requestMap.put(UserSearchRequest.SEARCH_KEY_FIRST_NAME, new String[] { "Bob" });
        UserSearchRequest searchRequest = new UserSearchRequest(requestMap);
        SearchResponse<User> users = userService.searchDomainObjects(searchRequest, User.FORMAT_TYPE);
        assertNotNull("User List cannot be null", users.getSearchResults());
    }

    @Test
    public void testMergeRoles() {
        User savedUser = userService.saveDomainObject(user);
        String userId = savedUser.getId();
        assertNotNull("id on saved Item should be not be null", userId);
        assertTrue("roles found not equal to 1", savedUser.getRoleAssociations().size() == 1);
        
        //First User Record
        User user1 = new User();
        user1.setFirstName("Bob");
        user1.setLastName("Smith");
        user1.setEmail("bob@smith.com");
        RoleAssociation roles1 = new RoleAssociation();
        roles1.setRole("Test Author");
        roles1.setStateAbbreviation("WI");
        roles1.setLevel(HierarchyLevel.GROUPOFINSTITUTIONS);
        roles1.setAssociatedEntityId("10001");
        user1.addRoleAssociation(roles1);
        
        //Second UserRecord
        User user2 = new User();
        user2.setFirstName("Bob Sr");
        user2.setLastName("Smithy");
        user2.setPhone("651-786-9988");
        user2.setEmail("bob@smith.com");
        RoleAssociation roles2 = new RoleAssociation();
        roles2.setRole("Test Kingpin");
        roles2.setStateAbbreviation("MN");
        roles2.setLevel(HierarchyLevel.GROUPOFSTATES);
        roles2.setAssociatedEntityId("10001");
        user2.addRoleAssociation(roles2);
        
        List<User> userList = new ArrayList<User>();
        userList.add(user1);
        userList.add(user2);
        
        List<User> savedUsers = userService.updateDomainObjects(userList);
        String userId1 = savedUsers.get(0).getId();
        assertNotNull("id on saved Item should be not be null", userId1);
        assertTrue("roles found not equal to 2", savedUsers.get(0).getRoleAssociations().size() == 3);
        assertEquals(savedUsers.get(0).getFirstName(), "Bob Sr");
        assertEquals(savedUsers.get(0).getLastName(), "Smithy");
        assertEquals(savedUsers.get(0).getPhone(), "651-786-9988");
    }
    
    @Test
    public void testDeleteRoles() {
        User savedUser = userService.saveDomainObject(user);
        String userId = savedUser.getId();
        assertNotNull("id on saved Item should be not be null", userId);
        assertTrue("roles found not equal to 1", savedUser.getRoleAssociations().size() == 1);
        
        User user1 = new User();
        user1.setFirstName("Bob");
        user1.setLastName("Smith");
        user1.setEmail("bob@smith.com");
        user1.setDelete("Yes");
        RoleAssociation roles1 = new RoleAssociation();
        roles1.setRole("Admin");
        roles1.setStateAbbreviation("WI");
        roles1.setLevel(HierarchyLevel.INSTITUTION);
        roles1.setAssociatedEntityId("10001");
        user1.addRoleAssociation(roles1);
        List<User> userList = new ArrayList<User>();
        userList.add(user1);
        userService.deleteDomainObjects(userList);
        
        Map<String, String[]> requestMap = Maps.newHashMap();
        requestMap.put(UserSearchRequest.SEARCH_KEY_EMAIL, new String[] { savedUser.getEmail() });
        UserSearchRequest searchRequest = new UserSearchRequest(requestMap);
        User foundUser = userService.findByAlternateKey(searchRequest, User.class);
        String userId1 = foundUser.getId();
        assertNotNull("id on saved Item should be not be null", userId1);
        assertTrue("roles found not equal to 0", foundUser.getRoleAssociations().size() == 0);
        
    }
    
    @Test
    public void testFindByEmail() {
        userService.saveDomainObject(user);
        User savedUser = userService.findByEmail("bob@smith.com");
        assertThat(savedUser, is(notNullValue()));
    }
}
