/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria.verifiers;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.collection.IsEmptyCollection.empty;
import static org.hamcrest.core.IsNot.not;
import static org.junit.Assert.assertThat;
import static org.springframework.test.util.ReflectionTestUtils.setField;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.GroupOfDistrictsEntity;
import org.opentestsystem.delivery.testreg.domain.HierarchyLevel;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.domain.StateEntity;
import org.opentestsystem.delivery.testreg.domain.User;
import org.opentestsystem.delivery.testreg.persistence.FormatTypeToHierarchyLevelConverter;
import org.opentestsystem.delivery.testreg.persistence.Verifier;
import org.opentestsystem.delivery.testreg.service.UserService;
import org.springframework.core.convert.support.GenericConversionService;
import org.springframework.validation.FieldError;

public class UserAssociationVerifierTest {

    private Verifier<Sb11Entity> verifier;

    @Before
    public void setup() {
        this.verifier = new UserAssociationVerifier();
        final GenericConversionService conversionService = new GenericConversionService();
        conversionService.addConverter(new FormatTypeToHierarchyLevelConverter(conversionService));
        setField(this.verifier, "conversionService", conversionService);
        setField(this.verifier, "userService", new UserService() {
            final List<User> users = new ArrayList<>();

            @Override
            public List<User> findAllByRoleAssociationLevel(final String associatedEntityId, final HierarchyLevel level) {
                if (associatedEntityId.equals("GOD881882") && level == HierarchyLevel.GROUPOFDISTRICTS) {
                    this.users.add(new User());
                }
                return this.users;
            }

            @Override
            public List<User> findUserByLevel(final String associatedEntityId, final String stateAbbreviation, final HierarchyLevel level) {
                return null;
            }

            @Override
            public List<User> findUserByLevel(final String level) {
                return null;
            }

            @Override
            public User findByEmail(final String email) {
                return null;
            }

            @Override
            public List<User> findUsersByRoleName(final String roleName) {
                return null;
            }

            // Refer to UserServiceImpl for the description of this method.
            @Override
            public User getLoggedInUser (Set<String> accessibleIds) {
              return null;
            }

            // Refer to UserServiceImpl for the description of this method.
            @Override
            public User findById (String pkId, FormatType formatType, Set<String> accessibleIds) {
              return null;
            }
            
            // Refer to UserServiceImpl for the description of this method.         
            @Override
            public void deleteDomainObject (String pkId, FormatType formatType, Set<String> accessibleIds) {
            }
        });
    }

    @Test
    public void userAssocationNotFound() {
        // Setup mock data
        final GroupOfDistrictsEntity gode = new GroupOfDistrictsEntity();
        gode.setEntityId("GOD881882");
        gode.setStateAbbreviation("MN");

        // Call method under test
        final List<FieldError> errors = this.verifier.verify(gode);

        // Verify
        assertThat(errors, is(not(empty())));
        assertThat(errors.get(0).getDefaultMessage(),
                is("GroupOfDistrictsIdentifier cannot be deleted because it is associated with other entities. "
                        + "Associated entities must be deleted before deleting this entity"));
    }

    @Test
    public void userAssociationFound() {
        // Setup mock data
        final StateEntity state = new StateEntity();
        state.setEntityId("MN");

        // Call method under test
        final List<FieldError> errors = this.verifier.verify(state);

        // Verify
        assertThat(errors, is(empty()));
    }
}
