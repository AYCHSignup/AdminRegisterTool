/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.integration;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.HierarchyLevel;
import org.opentestsystem.delivery.testreg.domain.SSOAction;
import org.opentestsystem.delivery.testreg.domain.User;
import org.opentestsystem.delivery.testreg.domain.User.RoleAssociation;
import org.opentestsystem.delivery.testreg.domain.UserChangeEvent;
import org.opentestsystem.delivery.testreg.service.UserChangeEventService;
import org.opentestsystem.delivery.testreg.service.impl.UserServiceImpl;
import org.springframework.beans.factory.annotation.Autowired;

import javax.annotation.Resource;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.not;
import static org.hamcrest.Matchers.greaterThan;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertThat;

public class UserChangeEventServiceTest extends AbstractPersistenceEmbeddedTest {

    @Resource(name = "userService")
    private UserServiceImpl<User> userService;

    @Autowired
    private UserChangeEventService userChangeEventService;

    private User user1;
    private User user2;

    @Before
    public void init() {
        initUser1();
        initUser2();
    }

    // create test user 1
    private User initUser1() {
        user1 = new User();
        user1.setFirstName("Bob");
        user1.setLastName("Smith");
        user1.setEmail("bob@smith.com");
        RoleAssociation roles1 = new RoleAssociation();
        roles1.setRole("Admin");
        roles1.setStateAbbreviation("WI");
        roles1.setLevel(HierarchyLevel.INSTITUTION);
        roles1.setAssociatedEntityId("10001");
        user1.addRoleAssociation(roles1);
        return user1;
    }

    // create test user 2
    private User initUser2() {
        user2 = new User();
        user2.setFirstName("Jane");
        user2.setLastName("Doe");
        user2.setEmail("jane@doe.com");
        RoleAssociation roles2 = new RoleAssociation();
        roles2.setRole("Admin");
        roles2.setStateAbbreviation("MN");
        roles2.setLevel(HierarchyLevel.INSTITUTION);
        roles2.setAssociatedEntityId("10002");
        user2.addRoleAssociation(roles2);
        return user2;
    }

    @Test
    public void testUserChangeEvents() {

        // ensure we are starting with no change events
        assertThat("the number of change events that should exist", userChangeEventService.findAll().size(), is(0));

        // ADD - ensure we record the ADD event
        userService.saveDomainObject(user1);
        String userId1 = user1.getId();
        assertNotNull("id on saved User should be not be null", userId1);
        assertThat("the number of change events that should exist", userChangeEventService.findAll().size(), is(1));
        assertThat("the number of change events that should exist", userChangeEventService.findByUserId(userId1).size(), is(1));
        assertThat("the number of change events that should exist", userChangeEventService.findByUserIdAndAction(userId1, SSOAction.ADD).size(), is(1));
        assertThat("the number of change events that should exist", userChangeEventService.findByUserIdAndAction(userId1, SSOAction.MOD).size(), is(0));

        // MOD - ensure we still only have an ADD
        user1.setPhone("123-123-1234");
        userService.saveDomainObject(user1);
        assertThat("the number of change events that should exist", userChangeEventService.findAll().size(), is(1));
        assertThat("the number of change events that should exist", userChangeEventService.findByUserId(userId1).size(), is(1));
        assertThat("the number of change events that should exist", userChangeEventService.findByUserIdAndAction(userId1, SSOAction.ADD).size(), is(1));
        assertThat("the number of change events that should exist", userChangeEventService.findByUserIdAndAction(userId1, SSOAction.MOD).size(), is(0));

        // pretend a sync had occurred, so all change events are removed
        userChangeEventService.deleteAll();

        // MOD - ensure we now have a MOD
        user1.setPhone("123-123-1235");
        userService.saveDomainObject(user1);
        assertThat("the number of change events that should exist", userChangeEventService.findAll().size(), is(1));
        assertThat("the number of change events that should exist", userChangeEventService.findByUserId(userId1).size(), is(1));
        assertThat("the number of change events that should exist", userChangeEventService.findByUserIdAndAction(userId1, SSOAction.ADD).size(), is(0));
        assertThat("the number of change events that should exist", userChangeEventService.findByUserIdAndAction(userId1, SSOAction.MOD).size(), is(1));

        // MOD (again) - ensure we still only have 1 MOD which should just have just an updated timestamp
        UserChangeEvent userChangeEventBefore = userChangeEventService.findByUserIdAndAction(userId1, SSOAction.MOD).get(0);
        user1.setEmail("fake@foo.com");
        userService.saveDomainObject(user1);
        UserChangeEvent userChangeEventAfter = userChangeEventService.findByUserIdAndAction(userId1, SSOAction.MOD).get(0);
        assertThat("the number of change events that should exist", userChangeEventService.findAll().size(), is(1));
        assertThat("the number of change events that should exist", userChangeEventService.findByUserId(userId1).size(), is(1));
        assertThat("the number of change events that should exist", userChangeEventService.findByUserIdAndAction(userId1, SSOAction.ADD).size(), is(0));
        assertThat("the number of change events that should exist", userChangeEventService.findByUserIdAndAction(userId1, SSOAction.MOD).size(), is(1));
        assertThat("the new timestamp is greater than the old timestamp", userChangeEventAfter.getTimestamp(), greaterThan(userChangeEventBefore.getTimestamp()));

        // ADD - ensure we have another ADD
        userService.saveDomainObject(user2);
        String userId2 = user2.getId();
        assertNotNull("id on saved User should be not be null", userId2);
        assertThat("the number of change events that should exist", userChangeEventService.findAll().size(), is(2));
        assertThat("the number of change events that should exist", userChangeEventService.findByUserId(userId2).size(), is(1));
        assertThat("the number of change events that should exist", userChangeEventService.findByUserIdAndAction(userId2, SSOAction.ADD).size(), is(1));

        // DEL - ensure that this would delete all change events for user 2 (since any queued change events are defunct when a DEL event occurs for that userId)
        userService.deleteDomainObject(user2);
        assertThat("the number of change events that should exist", userChangeEventService.findByUserId(userId2).size(), is(0));

        // we should still have the change events for user 1
        assertThat("the number of change events that should exist", userChangeEventService.findAll().size(), is(1));
        assertThat("the number of change events that should exist", userChangeEventService.findByUserId(userId1).size(), is(1));
        assertThat("the number of change events that should exist", userChangeEventService.findByUserIdAndAction(userId1, SSOAction.MOD).size(), is(1));

        // ensure that when we re-create a new user, the ID for that user is different
        String oldUserId2 = userId2;
        initUser2();
        userService.saveDomainObject(user2);
        userId2 = user2.getId();
        assertNotNull("id on saved user should be not be null", userId2);
        assertThat("id on new saved user should be not be equal to the old id", userId2, is(not(oldUserId2)));
        assertThat("the number of change events that should exist", userChangeEventService.findByUserId(userId2).size(), is(1));
        assertThat("the number of change events that should exist", userChangeEventService.findByUserIdAndAction(userId2, SSOAction.ADD).size(), is(1));

        // ensure we now have a MOD and a DEL for user 1
        userService.deleteDomainObject(user1);
        assertThat("the number of change events that should exist", userChangeEventService.findByUserId(userId1).size(), is(1));
        assertThat("the number of change events that should exist", userChangeEventService.findByUserIdAndAction(userId1, SSOAction.MOD).size(), is(0));
        assertThat("the number of change events that should exist", userChangeEventService.findByUserIdAndAction(userId1, SSOAction.DEL).size(), is(1));
    }

}
