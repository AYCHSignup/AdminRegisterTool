/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria;

import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.AddOperation;
import org.opentestsystem.delivery.testreg.domain.DeleteOperation;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.domain.StateEntity;
import org.opentestsystem.delivery.testreg.domain.TestRegistrationBase;
import org.opentestsystem.delivery.testreg.domain.UIValidationGroup;
import org.opentestsystem.delivery.testreg.persistence.criteria.dependencyresolvers.Sb11DependencyResolverInvoker;
import org.opentestsystem.delivery.testreg.persistence.criteria.dependencyresolvers.Sb11DependencyResolverInvokerImpl;
import org.opentestsystem.delivery.testreg.persistence.criteria.dependencyresolvers.StudentDependencyResolver;
import org.opentestsystem.delivery.testreg.persistence.criteria.dependencyresolvers.TestRegistrationEntitiesDependencyResolver;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.validation.BeanPropertyBindingResult;
import org.springframework.validation.Errors;
import org.springframework.validation.ValidationUtils;
import org.springframework.validation.Validator;

public class Sb11GlobalValidatorTest {

    protected Validator globalValidator;

    protected ValidatorInvoker mockFormatValidatorInvoker;
    protected ValidatorInvoker mockBusinessValidatorInvoker;

    protected boolean formatValidatorInvoked;
    protected boolean businessValidatorInvoked;

    private final Errors result = new BeanPropertyBindingResult("", "");

    @Before
    public void setup() {
        globalValidator = new Sb11GlobalValidator();

        setMockFormatValidator(false);

        mockBusinessValidatorInvoker = new ValidatorInvoker() {
            @Override
            public boolean invokeValidator(TestRegistrationBase sb11Entity, Errors errors, Object... hints) {
                businessValidatorInvoked = true;
                return false;
            }
        };

        ReflectionTestUtils.setField(globalValidator, "formatValidatorInvoker", mockFormatValidatorInvoker);
        ReflectionTestUtils.setField(globalValidator, "businessValidatorInvoker", mockBusinessValidatorInvoker);
        
        Sb11DependencyResolverInvoker dependencyInvoker = new Sb11DependencyResolverInvokerImpl();
        ReflectionTestUtils.setField(dependencyInvoker, "testRegistrationEntitiesDependencyResolver", 
                new TestRegistrationEntitiesDependencyResolver[]{new StudentDependencyResolver()});
        ReflectionTestUtils.setField(globalValidator, "sb11DependencyResolverInvoker", dependencyInvoker);
    }

    private void setMockFormatValidator(final boolean value) {
        mockFormatValidatorInvoker = new ValidatorInvoker() {
            @Override
            public boolean invokeValidator(TestRegistrationBase sb11Entity, Errors errors, Object... hints) {
                formatValidatorInvoked = true;
                return value; // No Constraint Violation
            }
        };
    }

    @Test
    public void testValidatorInvoked() {
        Sb11Entity sb11Entity = new StateEntity();
        ValidationUtils.invokeValidator(globalValidator, sb11Entity, result, UIValidationGroup.class,
                AddOperation.class);
        assertThat(formatValidatorInvoked, is(true));
        assertThat(businessValidatorInvoked, is(true));
    }

    @Test
    public void testValidatorInvokedForPreemtiveOperations() {
        Sb11Entity sb11Entity = new StateEntity();
        ValidationUtils.invokeValidator(globalValidator, sb11Entity, result, UIValidationGroup.class,
                DeleteOperation.class);
        assertThat(formatValidatorInvoked, is(false));
        assertThat(businessValidatorInvoked, is(true));
    }

    @Test
    public void testValidatorInvokedForNoBusinessOperations() {
        Sb11Entity sb11Entity = new StateEntity();
        ValidationUtils.invokeValidator(globalValidator, sb11Entity, result, UIValidationGroup.class);
        assertThat(formatValidatorInvoked, is(true));
        assertThat(businessValidatorInvoked, is(false));
    }

    @Test
    public void testValidatorInvokedForFormatFailures() {
        setMockFormatValidator(true);
        Sb11Entity sb11Entity = new StateEntity();
        ValidationUtils.invokeValidator(globalValidator, sb11Entity, result, UIValidationGroup.class);
        assertThat(formatValidatorInvoked, is(true));
        assertThat(businessValidatorInvoked, is(false));
    }

}
