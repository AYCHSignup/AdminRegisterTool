/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.integration.eligibility;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.collection.IsMapContaining.hasKey;
import static org.hamcrest.collection.IsMapContaining.hasValue;
import static org.junit.Assert.assertThat;
import static org.springframework.test.util.ReflectionTestUtils.setField;

import java.util.ArrayList;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.Action;
import org.opentestsystem.delivery.testreg.domain.Assessment;
import org.opentestsystem.delivery.testreg.domain.Assessment.EligibilityType;
import org.opentestsystem.delivery.testreg.domain.EligibleStudent;
import org.opentestsystem.delivery.testreg.domain.ExplicitEligibility;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.domain.event.ExplicitEligibilityModificationEvent;
import org.opentestsystem.delivery.testreg.eligibility.EligibilityEvaluator;
import org.opentestsystem.delivery.testreg.eligibility.EligibilityEvaluatorImpl;
import org.opentestsystem.delivery.testreg.persistence.AssessmentRepository;
import org.opentestsystem.delivery.testreg.persistence.StudentRepository;
import org.opentestsystem.delivery.testreg.service.EligibilityService;

public class EligibilityEvaluatorIntegrationTest {

    EligibilityEvaluator evaluator;

    @Before
    public void setup() {
        evaluator = new EligibilityEvaluatorImpl();
    }

    private void setEvaluatorDependencies(StudentRepository studentRepo, AssessmentRepository assessRepo,
            EligibilityService eligService) {
        setField(evaluator, "studentRepository", studentRepo);
        setField(evaluator, "assessmentRepository", assessRepo);
        setField(evaluator, "eligibilityService", eligService);
    }

    @SuppressWarnings("serial")
    @Test
    public void testEvaluateExplicitEligibilityModification() {
        final Assessment assess = new Assessment() {
            {
                setSubjectCode("ELA");
                setTestName("SUM910");
                setVersion("21.29");
                setEligibilityType(EligibilityType.EXPLICIT);
            }
        };

        final Student student = new Student() {
            {
                setEntityId("123456");
            }
        };

        MockStudentRepository studentRepo = new MockStudentRepository() {
            public Student findByEntityIdAndStateAbbreviation(String entityId, String stateAbbreviation) {
                return student;
            }
        };

        MockAssessmentRepository assessRepo = new MockAssessmentRepository() {
            public List<Assessment> findByTestNameAndVersion(String testName, String version) {
                return new ArrayList<Assessment>() {
                    {
                        add(assess);
                    }
                };
            }
        };

        EligibilityService eligService = new MockEligibilityService() {
            @SuppressWarnings("unused")
            public void saveAssociation(EligibleStudent eligStudent) {
                assertThat(eligStudent.getStudent(), equalTo(student));
                assertThat(eligStudent.getTestNameFormMap().size(), equalTo(1));
                assertThat(eligStudent.getTestNameFormMap(), hasKey("SUM910"));
                assertThat(eligStudent.getTestNameFormMap(), hasValue("TF1001"));
            }
        };

        setEvaluatorDependencies(studentRepo, assessRepo, eligService);
        ExplicitEligibility explicitEligibility = new ExplicitEligibility() {
            {
                setTestForm("TF1001");
                setTestName("SUM910");
                setTestVersion("21.29");
            }
        };
        evaluator.evaluateExplicitEligibilityModification(new ExplicitEligibilityModificationEvent(explicitEligibility,
                Action.UPD));
    }
}
