/*
Educational Online Test Delivery System Copyright (c) 2013 American Institutes for Research

Distributed under the AIR Open Source License, Version 1.0 See accompanying file AIR-License-1_0.txt or at
http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 */

package org.opentestsystem.delivery.testreg.integration.eligibility;

import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;

import java.util.ArrayList;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.opentestsystem.delivery.testreg.domain.Accommodation;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.AmericanSignLanguage;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.ClosedCaptioning;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.ColorContrast;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.Language;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.NonEmbeddedAccommodations;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.PrintOnDemand;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.PrintSize;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.TextToSpeech;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.Translation;
import org.opentestsystem.delivery.testreg.domain.Assessment;
import org.opentestsystem.delivery.testreg.domain.Assessment.EligibilityType;
import org.opentestsystem.delivery.testreg.domain.ImplicitEligibilityRule;
import org.opentestsystem.delivery.testreg.domain.ImplicitEligibilityRule.OperatorType;
import org.opentestsystem.delivery.testreg.domain.ImplicitEligibilityRule.RuleType;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.domain.Student.Gender;
import org.opentestsystem.delivery.testreg.domain.Student.PrimaryDisabilityType;
import org.opentestsystem.delivery.testreg.domain.Student.Section504Status;
import org.opentestsystem.delivery.testreg.domain.Student.Title3ProgramType;
import org.opentestsystem.delivery.testreg.domain.exception.EligibilityException;
import org.opentestsystem.delivery.testreg.eligibility.EligibilityEvaluator;
import org.opentestsystem.shared.mna.client.listener.ClientSpringConfigurator;
import org.opentestsystem.shared.progman.client.ProgManClient;
import org.opentestsystem.shared.progman.init.InitSpringPropertyConfigLoad;
import org.opentestsystem.shared.security.service.TenancyService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "classpath:spring/test-service-context.xml", "classpath:test-context.xml",
        "classpath:test-elig-context.xml", "classpath:/spring/domain-context.xml", "classpath:test-mock-context.xml" }, initializers = {
        InitSpringPropertyConfigLoad.class, ClientSpringConfigurator.class })
@ActiveProfiles({ "progman.client.impl.null", "progman.proploc.classpath", "mna.client.null" })
public class EligibilityEvaluatorTest {

    @Mock
    private TenancyService tenancyService;

    @Mock
    private ProgManClient progmanClient;

    @InjectMocks
    @Autowired
    private EligibilityEvaluator evaluator;

    @Autowired
    private EligibilityTestAspect aspect;

    @Before
    public void init() {

        MockitoAnnotations.initMocks(this);

        this.aspect.resetCount();
    }

    @Test
    public void testEvaluateSingleImplicitEnablerRuleSuccess() {
        // create an assessment with a single implicit enabler rule
        // create a student that will make the implicit rule success

        final Assessment assess = new Assessment();

        assess.setEligibilityType(EligibilityType.IMPLICIT);

        final ImplicitEligibilityRule rule = new ImplicitEligibilityRule();
        rule.setRuleType(RuleType.ENABLER);
        rule.setOperatorType(OperatorType.EQUALS);
        rule.setField("gradeLevelWhenAssessed");
        rule.setValue("08");

        final List<ImplicitEligibilityRule> rules = new ArrayList<ImplicitEligibilityRule>();
        rules.add(rule);

        assess.setImplicitEligibilityRules(rules.toArray(new ImplicitEligibilityRule[0]));

        final Student student = new Student();
        student.setGradeLevelWhenAssessed("EIGHTHGRADE");

        this.evaluator.evaluateImplicitRules(assess, student);

        assertThat(this.aspect.getSaveCount(), is(1));

    }

    @Test
    public void testEvaluateSingleImplicitEnablerRuleFail() {
        // create an assessment with a single implicit enabler rule
        // create a student that will make the implicit rule fail

        final Assessment assess = new Assessment();

        assess.setEligibilityType(EligibilityType.IMPLICIT);

        final ImplicitEligibilityRule rule = new ImplicitEligibilityRule();
        rule.setRuleType(RuleType.ENABLER);
        rule.setOperatorType(OperatorType.EQUALS);
        rule.setField("gradeLevelWhenAssessed");
        rule.setValue("08");

        final List<ImplicitEligibilityRule> rules = new ArrayList<ImplicitEligibilityRule>();
        rules.add(rule);

        assess.setImplicitEligibilityRules(rules.toArray(new ImplicitEligibilityRule[0]));

        final Student student = new Student();
        student.setGradeLevelWhenAssessed("07");

        this.evaluator.evaluateImplicitRules(assess, student);

        assertThat(this.aspect.getSaveCount(), is(0));
    }

    @Test
    public void testEvaluateMultipleImplicitEnablerRuleSuccess() {
        final Assessment assess = new Assessment();

        assess.setEligibilityType(EligibilityType.IMPLICIT);

        ImplicitEligibilityRule rule = new ImplicitEligibilityRule();
        rule.setRuleType(RuleType.ENABLER);
        rule.setOperatorType(OperatorType.EQUALS);
        rule.setField("gradeLevelWhenAssessed");
        rule.setValue("08");

        final List<ImplicitEligibilityRule> rules = new ArrayList<ImplicitEligibilityRule>();
        rules.add(rule);

        rule = new ImplicitEligibilityRule();
        rule.setRuleType(RuleType.ENABLER);
        rule.setOperatorType(OperatorType.EQUALS);
        rule.setField("gender");
        rule.setValue("Male");

        rules.add(rule);

        assess.setImplicitEligibilityRules(rules.toArray(new ImplicitEligibilityRule[0]));

        final Student student = new Student();
        student.setGradeLevelWhenAssessed("EIGHTHGRADE");
        student.setGender("Male");

        this.evaluator.evaluateImplicitRules(assess, student);

        assertThat(this.aspect.getSaveCount(), is(1));
    }

    @Test
    public void testEvaluateMultipleImplicitEnablerRuleFail() {
        final Assessment assess = new Assessment();

        assess.setEligibilityType(EligibilityType.IMPLICIT);

        ImplicitEligibilityRule rule = new ImplicitEligibilityRule();
        rule.setRuleType(RuleType.ENABLER);
        rule.setOperatorType(OperatorType.EQUALS);
        rule.setField("gradeLevelWhenAssessed");
        rule.setValue("08");

        final List<ImplicitEligibilityRule> rules = new ArrayList<ImplicitEligibilityRule>();
        rules.add(rule);

        rule = new ImplicitEligibilityRule();
        rule.setRuleType(RuleType.ENABLER);
        rule.setOperatorType(OperatorType.EQUALS);
        rule.setField("gender");
        rule.setValue("Male");

        rules.add(rule);

        assess.setImplicitEligibilityRules(rules.toArray(new ImplicitEligibilityRule[0]));

        final Student student = new Student();
        student.setGradeLevelWhenAssessed("08");
        student.setGender("Female");

        this.evaluator.evaluateImplicitRules(assess, student);

        assertThat(this.aspect.getSaveCount(), is(0));
    }

    @Test
    public void testEvaluateSingleImplicitDisablerRuleSuccessWithEnablerFail() {
        final Assessment assess = new Assessment();

        assess.setEligibilityType(EligibilityType.IMPLICIT);

        ImplicitEligibilityRule rule = new ImplicitEligibilityRule();
        rule.setRuleType(RuleType.ENABLER);
        rule.setOperatorType(OperatorType.EQUALS);
        rule.setField("gradeLevelWhenAssessed");
        rule.setValue("08");

        final List<ImplicitEligibilityRule> rules = new ArrayList<ImplicitEligibilityRule>();
        rules.add(rule);

        rule = new ImplicitEligibilityRule();
        rule.setRuleType(RuleType.DISABLER);
        rule.setOperatorType(OperatorType.EQUALS);
        rule.setField("gender");
        rule.setValue("Male");

        rules.add(rule);

        assess.setImplicitEligibilityRules(rules.toArray(new ImplicitEligibilityRule[0]));

        final Student student = new Student();
        student.setGradeLevelWhenAssessed("SEVENTHGRADE");
        student.setGender("Male");

        this.evaluator.evaluateImplicitRules(assess, student);

        assertThat(this.aspect.getSaveCount(), is(0));
    }

    @Test
    public void testEvaluateSingleImplicitDisablerRuleFailWithEnablerSuccess() {
        final Assessment assess = new Assessment();

        assess.setEligibilityType(EligibilityType.IMPLICIT);

        ImplicitEligibilityRule rule = new ImplicitEligibilityRule();
        rule.setRuleType(RuleType.ENABLER);
        rule.setOperatorType(OperatorType.EQUALS);
        rule.setField("gradeLevelWhenAssessed");
        rule.setValue("08");

        final List<ImplicitEligibilityRule> rules = new ArrayList<ImplicitEligibilityRule>();
        rules.add(rule);

        rule = new ImplicitEligibilityRule();
        rule.setRuleType(RuleType.DISABLER);
        rule.setOperatorType(OperatorType.EQUALS);
        rule.setField("gender");
        rule.setValue("Male");

        rules.add(rule);

        assess.setImplicitEligibilityRules(rules.toArray(new ImplicitEligibilityRule[0]));

        final Student student = new Student();
        student.setGradeLevelWhenAssessed("EIGHTHGRADE");
        student.setGender("Female");

        this.evaluator.evaluateImplicitRules(assess, student);

        assertThat(this.aspect.getSaveCount(), is(1));
    }

    @Test
    public void testEvaluateSingleImplicitDisablerRuleSuccessWithEnablerSuccess() {
        final Assessment assess = new Assessment();

        assess.setEligibilityType(EligibilityType.IMPLICIT);

        ImplicitEligibilityRule rule = new ImplicitEligibilityRule();
        rule.setRuleType(RuleType.ENABLER);
        rule.setOperatorType(OperatorType.EQUALS);
        rule.setField("gradeLevelWhenAssessed");
        rule.setValue("EIGHTHGRADE");

        final List<ImplicitEligibilityRule> rules = new ArrayList<ImplicitEligibilityRule>();
        rules.add(rule);

        rule = new ImplicitEligibilityRule();
        rule.setRuleType(RuleType.DISABLER);
        rule.setOperatorType(OperatorType.EQUALS);
        rule.setField("gender");
        rule.setValue("Male");

        rules.add(rule);

        assess.setImplicitEligibilityRules(rules.toArray(new ImplicitEligibilityRule[0]));

        final Student student = new Student();
        student.setGradeLevelWhenAssessed("EIGHTHGRADE");
        student.setGender("Male");

        this.evaluator.evaluateImplicitRules(assess, student);

        assertThat(this.aspect.getSaveCount(), is(0));
    }

    @Test
    public void testEvaluateEnablerRuleHispanicNull() {
        // create an assessment with a single implicit enabler rule
        // create a student that will make the implicit rule success
        // rule is on hispanic, this can be yes, no, or null
        // if null, it should NOT throw an exception

        final Assessment assess = new Assessment();

        assess.setEligibilityType(EligibilityType.IMPLICIT);

        final ImplicitEligibilityRule rule = new ImplicitEligibilityRule();
        rule.setRuleType(RuleType.ENABLER);
        rule.setOperatorType(OperatorType.EQUALS);
        rule.setField("hispanicOrLatino");
        rule.setValue("YES");

        final List<ImplicitEligibilityRule> rules = new ArrayList<ImplicitEligibilityRule>();
        rules.add(rule);

        assess.setImplicitEligibilityRules(rules.toArray(new ImplicitEligibilityRule[0]));

        final Student student = new Student();
        // hispanic or latino is null

        this.evaluator.evaluateImplicitRules(assess, student);

        assertThat(this.aspect.getSaveCount(), is(0)); // won't associate, so 0

    }

    @Test
    public void testEvaluateEnablerRuleHispanicYes() {
        // create an assessment with a single implicit enabler rule
        // create a student that will make the implicit rule success
        // rule is on hispanic, this can be yes, no, or null

        final Assessment assess = new Assessment();

        assess.setEligibilityType(EligibilityType.IMPLICIT);

        final ImplicitEligibilityRule rule = new ImplicitEligibilityRule();
        rule.setRuleType(RuleType.ENABLER);
        rule.setOperatorType(OperatorType.EQUALS);
        rule.setField("hispanicOrLatino");
        rule.setValue("YES");

        final List<ImplicitEligibilityRule> rules = new ArrayList<ImplicitEligibilityRule>();
        rules.add(rule);

        assess.setImplicitEligibilityRules(rules.toArray(new ImplicitEligibilityRule[0]));

        final Student student = new Student();
        student.setHispanicOrLatino("YES");

        this.evaluator.evaluateImplicitRules(assess, student);

        assertThat(this.aspect.getSaveCount(), is(1));

    }

    @Test
    public void testEvaluateDisablerRuleHispanicNull() {
        // create an assessment with a single implicit enabler rule
        // create a student that will make the implicit rule success
        // rule is on hispanic, this can be yes, no, or null
        // if null, it should NOT throw an exception

        final Assessment assess = new Assessment();

        assess.setEligibilityType(EligibilityType.IMPLICIT);

        final ImplicitEligibilityRule rule = new ImplicitEligibilityRule();
        rule.setRuleType(RuleType.DISABLER);
        rule.setOperatorType(OperatorType.EQUALS);
        rule.setField("hispanicOrLatino");
        rule.setValue("YES");

        final List<ImplicitEligibilityRule> rules = new ArrayList<ImplicitEligibilityRule>();
        rules.add(rule);

        assess.setImplicitEligibilityRules(rules.toArray(new ImplicitEligibilityRule[0]));

        final Student student = new Student();
        // hispanic or latino is null

        this.evaluator.evaluateImplicitRules(assess, student);

        assertThat(this.aspect.getSaveCount(), is(0)); // won't associate, so 0

    }

    @SuppressWarnings("serial")
    @Test
    public void testEvaluateEnablerRuleAccommodationSubject() {
        // create an assessment with a single implicit enabler rule
        // create a student assessment that will make the implicit rule success
        // rule is on subject, this can be any text

        final Assessment assess = new Assessment();

        assess.setEligibilityType(EligibilityType.IMPLICIT);
        assess.setSubjectCode("English");

        final ImplicitEligibilityRule rule = new ImplicitEligibilityRule();
        rule.setRuleType(RuleType.ENABLER);
        rule.setOperatorType(OperatorType.EQUALS);
        rule.setField("subject");
        rule.setValue("English");

        final List<ImplicitEligibilityRule> rules = new ArrayList<ImplicitEligibilityRule>();
        rules.add(rule);

        assess.setImplicitEligibilityRules(rules.toArray(new ImplicitEligibilityRule[0]));

        final Student student = new Student();
        /*student.setAccommodations(new ArrayList<Accommodation>() {
            {
                add(new Accommodation() {
                    {
                        setSubject("English");
                    }
                });
            }
        });*/
        this.evaluator.evaluateImplicitRules(assess, student);

        assertThat(this.aspect.getSaveCount(), is(1));
    }

    @SuppressWarnings("serial")
    @Test
    public void testEvaluateEnablerRuleMultipleAccommodationSubject() {
        // create an assessment with a single implicit enabler rule
        // create a student assessment that will make the implicit rule success
        // rule is on subject, this can be any text

        final Assessment assess = new Assessment();

        assess.setEligibilityType(EligibilityType.IMPLICIT);
        assess.setSubjectCode("English");

        final ImplicitEligibilityRule rule = new ImplicitEligibilityRule();
        rule.setRuleType(RuleType.ENABLER);
        rule.setOperatorType(OperatorType.EQUALS);
        rule.setField("subject");
        rule.setValue("English");

        final List<ImplicitEligibilityRule> rules = new ArrayList<ImplicitEligibilityRule>();
        rules.add(rule);

        assess.setImplicitEligibilityRules(rules.toArray(new ImplicitEligibilityRule[0]));

        final Student student = new Student();
        /*student.setAccommodations(new ArrayList<Accommodation>() {
            {
                add(new Accommodation() {
                    {
                        setSubject("Math");
                    }
                });

                add(new Accommodation() {
                    {
                        setSubject("English");
                    }
                });
            }
        });*/
        this.evaluator.evaluateImplicitRules(assess, student);

        assertThat(this.aspect.getSaveCount(), is(1));
    }

    @SuppressWarnings("serial")
    @Test
    public void testEvaluateDisablerRuleAccommodationSubject() {
        // create an assessment with a single implicit enabler rule
        // create a student assessment that will make the implicit rule success
        // rule is on AmericanSignLanguage, this can only be allowed values in the enum

        final Assessment assess = new Assessment();

        assess.setEligibilityType(EligibilityType.IMPLICIT);
        assess.setSubjectCode("Math");

        final ImplicitEligibilityRule rule = new ImplicitEligibilityRule();
        rule.setRuleType(RuleType.DISABLER);
        rule.setOperatorType(OperatorType.EQUALS);
        rule.setField("americanSignLanguage");
        rule.setValue("TDS_ASL0");

        final List<ImplicitEligibilityRule> rules = new ArrayList<ImplicitEligibilityRule>();
        rules.add(rule);

        assess.setImplicitEligibilityRules(rules.toArray(new ImplicitEligibilityRule[0]));

        final Student student = new Student();
        /*student.setAccommodations(new ArrayList<Accommodation>() {
            {
                add(new Accommodation() {
                    {
                        setAmericanSignLanguage(AmericanSignLanguage.TDS_ASL0);
                        setSubject("Math");
                    }
                });
            }
        });*/
        this.evaluator.evaluateImplicitRules(assess, student);

        assertThat(this.aspect.getSaveCount(), is(0));

    }

    @SuppressWarnings("serial")
    @Test
    public void testEvaluateDisablerRuleMultiAccommodationSubject() {
        // create an assessment with a single implicit enabler rule
        // create a student assessment that will make the implicit rule success
        // rule is on AmericanSignLanguage, this can only be allowed values in the enum

        final Assessment assess = new Assessment();

        assess.setEligibilityType(EligibilityType.IMPLICIT);
        assess.setSubjectCode("ELA");

        final ImplicitEligibilityRule rule = new ImplicitEligibilityRule();
        rule.setRuleType(RuleType.DISABLER);
        rule.setOperatorType(OperatorType.EQUALS);
        rule.setField("americanSignLanguage");
        rule.setValue("TDS_ASL0");

        final List<ImplicitEligibilityRule> rules = new ArrayList<ImplicitEligibilityRule>();
        rules.add(rule);

        assess.setImplicitEligibilityRules(rules.toArray(new ImplicitEligibilityRule[0]));

        final Student student = new Student();
        /*student.setAccommodations(new ArrayList<Accommodation>() {
            {
                add(new Accommodation() {
                    {
                        setAmericanSignLanguage(AmericanSignLanguage.TDS_ASL1);
                        setSubject("ELA");
                    }
                });

                add(new Accommodation() {
                    {
                        setAmericanSignLanguage(AmericanSignLanguage.TDS_ASL0);
                        setSubject("Math");
                    }
                });
            }
        });*/
        this.evaluator.evaluateImplicitRules(assess, student);

        assertThat(this.aspect.getSaveCount(), is(0));

    }

    @Test(expected = EligibilityException.class)
    public void testEvaluateRuleWithStringGreaterThanInvalid() {

        final Assessment assess = new Assessment();

        assess.setEligibilityType(EligibilityType.IMPLICIT);

        final ImplicitEligibilityRule rule = new ImplicitEligibilityRule();
        rule.setRuleType(RuleType.ENABLER);
        rule.setOperatorType(OperatorType.GREATER_THAN);
        rule.setField("firstName");
        rule.setValue("Bob");

        final List<ImplicitEligibilityRule> rules = new ArrayList<ImplicitEligibilityRule>();
        rules.add(rule);

        assess.setImplicitEligibilityRules(rules.toArray(new ImplicitEligibilityRule[0]));

        final Student student = new Student();
        student.setFirstName("Bob");
        student.setGradeLevelWhenAssessed("EIGHTHGRADE");

        this.evaluator.evaluateImplicitRules(assess, student);

    }

    @Test
    public void testEvaluateRuleWithStringEquals() {

        final Assessment assess = new Assessment();

        assess.setEligibilityType(EligibilityType.IMPLICIT);

        final ImplicitEligibilityRule rule = new ImplicitEligibilityRule();
        rule.setRuleType(RuleType.ENABLER);
        rule.setOperatorType(OperatorType.EQUALS);
        rule.setField("firstName");
        rule.setValue("Bob");

        final List<ImplicitEligibilityRule> rules = new ArrayList<ImplicitEligibilityRule>();
        rules.add(rule);

        assess.setImplicitEligibilityRules(rules.toArray(new ImplicitEligibilityRule[0]));

        final Student student = new Student();
        student.setFirstName("Bob");
        student.setGradeLevelWhenAssessed("EIGHTHGRADE");

        this.evaluator.evaluateImplicitRules(assess, student);

        assertThat(this.aspect.getSaveCount(), is(1));

    }

    @Test
    public void testEvaluateRuleWithDateTimeEquals() {

        final Assessment assess = new Assessment();

        assess.setEligibilityType(EligibilityType.IMPLICIT);

        final ImplicitEligibilityRule rule = new ImplicitEligibilityRule();
        rule.setRuleType(RuleType.ENABLER);
        rule.setOperatorType(OperatorType.EQUALS);
        rule.setField("birthDate");
        rule.setValue("1970-01-06");

        final List<ImplicitEligibilityRule> rules = new ArrayList<ImplicitEligibilityRule>();
        rules.add(rule);

        assess.setImplicitEligibilityRules(rules.toArray(new ImplicitEligibilityRule[0]));

        final Student student = new Student();
        student.setFirstName("Bob");
        student.setGradeLevelWhenAssessed("EIGHTHGRADE");
        student.setBirthDate("1970-01-06");

        this.evaluator.evaluateImplicitRules(assess, student);

        assertThat(this.aspect.getSaveCount(), is(1));

    }

    @Test
    public void testEvaluateRuleWithDateTimeGreaterThan() {

        final Assessment assess = new Assessment();

        assess.setEligibilityType(EligibilityType.IMPLICIT);

        final ImplicitEligibilityRule rule = new ImplicitEligibilityRule();
        rule.setRuleType(RuleType.ENABLER);
        rule.setOperatorType(OperatorType.GREATER_THAN);
        rule.setField("birthDate");
        rule.setValue("1960-01-01");

        final List<ImplicitEligibilityRule> rules = new ArrayList<ImplicitEligibilityRule>();
        rules.add(rule);

        assess.setImplicitEligibilityRules(rules.toArray(new ImplicitEligibilityRule[0]));

        final Student student = new Student();
        student.setFirstName("Bob");
        student.setGradeLevelWhenAssessed("EIGHTHGRADE");
        student.setBirthDate("1970-01-06");

        this.evaluator.evaluateImplicitRules(assess, student);

        assertThat(this.aspect.getSaveCount(), is(1));

    }

    @Test
    public void testEvaluateRuleWithDateTimeGreaterThanOrEqual() {

        final Assessment assess = new Assessment();

        assess.setEligibilityType(EligibilityType.IMPLICIT);

        final ImplicitEligibilityRule rule = new ImplicitEligibilityRule();
        rule.setRuleType(RuleType.ENABLER);
        rule.setOperatorType(OperatorType.GREATER_THAN_EQUALS);
        rule.setField("birthDate");
        rule.setValue("1970-01-06");

        final List<ImplicitEligibilityRule> rules = new ArrayList<ImplicitEligibilityRule>();
        rules.add(rule);

        assess.setImplicitEligibilityRules(rules.toArray(new ImplicitEligibilityRule[0]));

        final Student student = new Student();
        student.setFirstName("Bob");
        student.setGradeLevelWhenAssessed("EIGHTHGRADE");
        student.setBirthDate("1970-01-06");

        this.evaluator.evaluateImplicitRules(assess, student);

        assertThat(this.aspect.getSaveCount(), is(1));

    }

    @Test
    public void testEvaluateRuleWithDateTimeLessThan() {

        final Assessment assess = new Assessment();

        assess.setEligibilityType(EligibilityType.IMPLICIT);

        final ImplicitEligibilityRule rule = new ImplicitEligibilityRule();
        rule.setRuleType(RuleType.ENABLER);
        rule.setOperatorType(OperatorType.LESS_THAN);
        rule.setField("birthDate");
        rule.setValue("1980-01-01");

        final List<ImplicitEligibilityRule> rules = new ArrayList<ImplicitEligibilityRule>();
        rules.add(rule);

        assess.setImplicitEligibilityRules(rules.toArray(new ImplicitEligibilityRule[0]));

        final Student student = new Student();
        student.setFirstName("Bob");
        student.setGradeLevelWhenAssessed("EIGHTHGRADE");
        student.setBirthDate("1970-01-06");

        this.evaluator.evaluateImplicitRules(assess, student);

        assertThat(this.aspect.getSaveCount(), is(1));

    }

    // add enum tests to test all enums to verify that reflection works correctly on all since they're
    // not all consistent

    // Student enums
    // Section504Status

    @Test
    public void testEvaluateRuleWithSection504StatusEnum() {

        final Assessment assess = new Assessment();

        assess.setEligibilityType(EligibilityType.IMPLICIT);

        final ImplicitEligibilityRule rule = new ImplicitEligibilityRule();
        rule.setRuleType(RuleType.ENABLER);
        rule.setOperatorType(OperatorType.EQUALS);
        rule.setField("section504Status");
        rule.setValue("YES");

        final List<ImplicitEligibilityRule> rules = new ArrayList<ImplicitEligibilityRule>();
        rules.add(rule);

        assess.setImplicitEligibilityRules(rules.toArray(new ImplicitEligibilityRule[0]));

        final Student student = new Student();
        student.setFirstName("Bob");
        student.setGradeLevelWhenAssessed("EIGHTHGRADE");
        student.setBirthDate("1970-01-06");
        student.setSection504Status(Section504Status.YES);

        this.evaluator.evaluateImplicitRules(assess, student);

        assertThat(this.aspect.getSaveCount(), is(1));

    }

    // Title3ProgressStatus
    @Test
    public void testEvaluateRuleWithTitle3ProgressStatusEnum() {

        final Assessment assess = new Assessment();

        assess.setEligibilityType(EligibilityType.IMPLICIT);

        final ImplicitEligibilityRule rule = new ImplicitEligibilityRule();
        rule.setRuleType(RuleType.ENABLER);
        rule.setOperatorType(OperatorType.EQUALS);
        rule.setField("title3ProgressStatus");
        rule.setValue("NOPROGRESS");

        final List<ImplicitEligibilityRule> rules = new ArrayList<ImplicitEligibilityRule>();
        rules.add(rule);

        assess.setImplicitEligibilityRules(rules.toArray(new ImplicitEligibilityRule[0]));

        final Student student = new Student();
        student.setFirstName("Bob");
        student.setGradeLevelWhenAssessed("EIGHTHGRADE");
        student.setBirthDate("1970-01-06");
        student.setTitle3ProgressStatus("NOPROGRESS");

        this.evaluator.evaluateImplicitRules(assess, student);

        assertThat(this.aspect.getSaveCount(), is(1));

    }

    // Gender
    @Test
    public void testEvaluateRuleWithGenderEnum() {

        final Assessment assess = new Assessment();

        assess.setEligibilityType(EligibilityType.IMPLICIT);

        final ImplicitEligibilityRule rule = new ImplicitEligibilityRule();
        rule.setRuleType(RuleType.ENABLER);
        rule.setOperatorType(OperatorType.EQUALS);
        rule.setField("gender");
        rule.setValue("Female");

        final List<ImplicitEligibilityRule> rules = new ArrayList<ImplicitEligibilityRule>();
        rules.add(rule);

        assess.setImplicitEligibilityRules(rules.toArray(new ImplicitEligibilityRule[0]));

        final Student student = new Student();
        student.setFirstName("Bob");
        student.setGradeLevelWhenAssessed("EIGHTHGRADE");
        student.setBirthDate("1970-01-06");
        student.setGender(Gender.Female);

        this.evaluator.evaluateImplicitRules(assess, student);

        assertThat(this.aspect.getSaveCount(), is(1));

    }

    // Title3ProgramType
    @Test
    public void testEvaluateRuleWithTitle3ProgramTypeEnum() {

        final Assessment assess = new Assessment();

        assess.setEligibilityType(EligibilityType.IMPLICIT);

        final ImplicitEligibilityRule rule = new ImplicitEligibilityRule();
        rule.setRuleType(RuleType.ENABLER);
        rule.setOperatorType(OperatorType.EQUALS);
        rule.setField("title3ProgramType");
        rule.setValue("TWOWAYIMMERSION");

        final List<ImplicitEligibilityRule> rules = new ArrayList<ImplicitEligibilityRule>();
        rules.add(rule);

        assess.setImplicitEligibilityRules(rules.toArray(new ImplicitEligibilityRule[0]));

        final Student student = new Student();
        student.setFirstName("Bob");
        student.setGradeLevelWhenAssessed("EIGHTHGRADE");
        student.setBirthDate("1970-01-06");
        student.setTitle3ProgramType(Title3ProgramType.TWOWAYIMMERSION);

        this.evaluator.evaluateImplicitRules(assess, student);

        assertThat(this.aspect.getSaveCount(), is(1));

    }

    // PrimaryDisabilityType
    @Test
    public void testEvaluateRuleWithPrimaryDisabilityTypeEnum() {

        final Assessment assess = new Assessment();

        assess.setEligibilityType(EligibilityType.IMPLICIT);

        final ImplicitEligibilityRule rule = new ImplicitEligibilityRule();
        rule.setRuleType(RuleType.ENABLER);
        rule.setOperatorType(OperatorType.EQUALS);
        rule.setField("primaryDisabilityType");
        rule.setValue("ID");

        final List<ImplicitEligibilityRule> rules = new ArrayList<ImplicitEligibilityRule>();
        rules.add(rule);

        assess.setImplicitEligibilityRules(rules.toArray(new ImplicitEligibilityRule[0]));

        final Student student = new Student();
        student.setFirstName("Bob");
        student.setGradeLevelWhenAssessed("EIGHTHGRADE");
        student.setBirthDate("1970-01-06");
        student.setPrimaryDisabilityType(PrimaryDisabilityType.ID);

        this.evaluator.evaluateImplicitRules(assess, student);

        assertThat(this.aspect.getSaveCount(), is(1));

    }

    //
    // Accommodation enums
    // AmericanSignLanguage
    @Test
    public void testEvaluateRuleWithAslVideosEnum() {

        final Assessment assess = new Assessment();

        assess.setSubjectCode("Math");
        assess.setEligibilityType(EligibilityType.IMPLICIT);

        final ImplicitEligibilityRule rule = new ImplicitEligibilityRule();
        rule.setRuleType(RuleType.ENABLER);
        rule.setOperatorType(OperatorType.EQUALS);
        rule.setField("americanSignLanguage");
        rule.setValue("TDS_ASL0");

        final List<ImplicitEligibilityRule> rules = new ArrayList<ImplicitEligibilityRule>();
        rules.add(rule);

        assess.setImplicitEligibilityRules(rules.toArray(new ImplicitEligibilityRule[0]));

        final Student student = new Student();
        student.setFirstName("Bob");
        student.setGradeLevelWhenAssessed("EIGHTHGRADE");
        student.setBirthDate("1970-01-06");
        student.setPrimaryDisabilityType(PrimaryDisabilityType.ID);
        final Accommodation accom = new Accommodation();
        accom.setSubject("Math");
        //accom.setAmericanSignLanguage(AmericanSignLanguage.TDS_ASL0);
        final List<Accommodation> accomList = new ArrayList<Accommodation>();
        accomList.add(accom);
        //student.setAccommodations(accomList);

        this.evaluator.evaluateImplicitRules(assess, student);

        assertThat(this.aspect.getSaveCount(), is(1));

    }

    // ClosedCaptioning
    @Test
    public void testEvaluateRuleWithClosedCaptioningEnum() {

        final Assessment assess = new Assessment();

        assess.setSubjectCode("Math");
        assess.setEligibilityType(EligibilityType.IMPLICIT);

        final ImplicitEligibilityRule rule = new ImplicitEligibilityRule();
        rule.setRuleType(RuleType.ENABLER);
        rule.setOperatorType(OperatorType.EQUALS);
        rule.setField("closedCaptioning");
        rule.setValue("TDS_ClosedCap0");

        final List<ImplicitEligibilityRule> rules = new ArrayList<ImplicitEligibilityRule>();
        rules.add(rule);

        assess.setImplicitEligibilityRules(rules.toArray(new ImplicitEligibilityRule[0]));

        final Student student = new Student();
        student.setFirstName("Bob");
        student.setGradeLevelWhenAssessed("EIGHTHGRADE");
        student.setBirthDate("1970-01-06");
        student.setPrimaryDisabilityType(PrimaryDisabilityType.ID);
        final Accommodation accom = new Accommodation();
        accom.setSubject("Math");
        //accom.setClosedCaptioning(ClosedCaptioning.TDS_ClosedCap0);
        final List<Accommodation> accomList = new ArrayList<Accommodation>();
        accomList.add(accom);
        //student.setAccommodations(accomList);

        this.evaluator.evaluateImplicitRules(assess, student);

        assertThat(this.aspect.getSaveCount(), is(1));

    }

    // ColorContrast
    @Test
    public void testEvaluateRuleWithColorChoiceEnum() {

        final Assessment assess = new Assessment();

        assess.setSubjectCode("Math");
        assess.setEligibilityType(EligibilityType.IMPLICIT);

        final ImplicitEligibilityRule rule = new ImplicitEligibilityRule();
        rule.setRuleType(RuleType.ENABLER);
        rule.setOperatorType(OperatorType.EQUALS);
        rule.setField("colorContrast");
        rule.setValue("TDS_CCYellowB");

        final List<ImplicitEligibilityRule> rules = new ArrayList<ImplicitEligibilityRule>();
        rules.add(rule);

        assess.setImplicitEligibilityRules(rules.toArray(new ImplicitEligibilityRule[0]));

        final Student student = new Student();
        student.setFirstName("Bob");
        student.setGradeLevelWhenAssessed("EIGHTHGRADE");
        student.setBirthDate("1970-01-06");
        student.setPrimaryDisabilityType(PrimaryDisabilityType.ID);
        final Accommodation accom = new Accommodation();
        accom.setSubject("Math");
        //accom.setColorContrast(ColorContrast.TDS_CCYellowB);
        final List<Accommodation> accomList = new ArrayList<Accommodation>();
        accomList.add(accom);
        //student.setAccommodations(accomList);

        this.evaluator.evaluateImplicitRules(assess, student);

        assertThat(this.aspect.getSaveCount(), is(1));

    }

    // TextToSpeech
    @Test
    public void testEvaluateRuleWithTextToSpeechEnum() {

        final Assessment assess = new Assessment();

        assess.setSubjectCode("Math");
        assess.setEligibilityType(EligibilityType.IMPLICIT);

        final ImplicitEligibilityRule rule = new ImplicitEligibilityRule();
        rule.setRuleType(RuleType.ENABLER);
        rule.setOperatorType(OperatorType.EQUALS);
        rule.setField("textToSpeech");
        rule.setValue("TDS_TTS0");

        final List<ImplicitEligibilityRule> rules = new ArrayList<ImplicitEligibilityRule>();
        rules.add(rule);

        assess.setImplicitEligibilityRules(rules.toArray(new ImplicitEligibilityRule[0]));

        final Student student = new Student();
        student.setFirstName("Bob");
        student.setGradeLevelWhenAssessed("EIGHTHGRADE");
        student.setBirthDate("1970-01-06");
        student.setPrimaryDisabilityType(PrimaryDisabilityType.ID);
        final Accommodation accom = new Accommodation();
        accom.setSubject("Math");
        //accom.setTextToSpeech(TextToSpeech.TDS_TTS0);
        final List<Accommodation> accomList = new ArrayList<Accommodation>();
        accomList.add(accom);
        //student.setAccommodations(accomList);

        this.evaluator.evaluateImplicitRules(assess, student);

        assertThat(this.aspect.getSaveCount(), is(1));

    }

    // Language
    @Test
    public void testEvaluateRuleWithLanguageEnum() {

        final Assessment assess = new Assessment();

        assess.setSubjectCode("Math");
        assess.setEligibilityType(EligibilityType.IMPLICIT);

        final ImplicitEligibilityRule rule = new ImplicitEligibilityRule();
        rule.setRuleType(RuleType.ENABLER);
        rule.setOperatorType(OperatorType.EQUALS);
        rule.setField("language");
        rule.setValue("ENU");

        final List<ImplicitEligibilityRule> rules = new ArrayList<ImplicitEligibilityRule>();
        rules.add(rule);

        assess.setImplicitEligibilityRules(rules.toArray(new ImplicitEligibilityRule[0]));

        final Student student = new Student();
        student.setFirstName("Bob");
        student.setGradeLevelWhenAssessed("EIGHTHGRADE");
        student.setBirthDate("1970-01-06");
        student.setPrimaryDisabilityType(PrimaryDisabilityType.ID);
        final Accommodation accom = new Accommodation();
        accom.setSubject("Math");
        //accom.setLanguage(Language.ENU);
        final List<Accommodation> accomList = new ArrayList<Accommodation>();
        accomList.add(accom);
        //student.setAccommodations(accomList);

        this.evaluator.evaluateImplicitRules(assess, student);

        assertThat(this.aspect.getSaveCount(), is(1));

    }

    // Translation
    @Test
    public void testEvaluateRuleWithGlossaryEnum() {

        final Assessment assess = new Assessment();

        assess.setSubjectCode("Math");
        assess.setEligibilityType(EligibilityType.IMPLICIT);

        final ImplicitEligibilityRule rule = new ImplicitEligibilityRule();
        rule.setRuleType(RuleType.ENABLER);
        rule.setOperatorType(OperatorType.EQUALS);
        rule.setField("translation");
        rule.setValue("TDS_WL0");

        final List<ImplicitEligibilityRule> rules = new ArrayList<ImplicitEligibilityRule>();
        rules.add(rule);

        assess.setImplicitEligibilityRules(rules.toArray(new ImplicitEligibilityRule[0]));

        final Student student = new Student();
        student.setFirstName("Bob");
        student.setGradeLevelWhenAssessed("EIGHTHGRADE");
        student.setBirthDate("1970-01-06");
        student.setPrimaryDisabilityType(PrimaryDisabilityType.ID);
        final Accommodation accom = new Accommodation();
        accom.setSubject("Math");
        //accom.setTranslation(Translation.TDS_WL0);
        final List<Accommodation> accomList = new ArrayList<Accommodation>();
        accomList.add(accom);
        //student.setAccommodations(accomList);

        this.evaluator.evaluateImplicitRules(assess, student);

        assertThat(this.aspect.getSaveCount(), is(1));

    }

    @Test
    public void testEvaluateRuleWithNonEmbeddedAccommodationsEnum() {

        final Assessment assess = new Assessment();

        assess.setSubjectCode("Math");
        assess.setEligibilityType(EligibilityType.IMPLICIT);

        final ImplicitEligibilityRule rule = new ImplicitEligibilityRule();
        rule.setRuleType(RuleType.ENABLER);
        rule.setOperatorType(OperatorType.EQUALS);
        rule.setField("nonEmbeddedAccommodations");
        rule.setValue("NEA_AR");

        final List<ImplicitEligibilityRule> rules = new ArrayList<ImplicitEligibilityRule>();
        rules.add(rule);

        assess.setImplicitEligibilityRules(rules.toArray(new ImplicitEligibilityRule[0]));

        final Student student = new Student();
        student.setFirstName("Bob");
        student.setGradeLevelWhenAssessed("EIGHTHGRADE");
        student.setBirthDate("1970-01-06");
        student.setPrimaryDisabilityType(PrimaryDisabilityType.ID);
        final Accommodation accom = new Accommodation();
        accom.setSubject("Math");
        //accom.setNonEmbeddedAccommodations(NonEmbeddedAccommodations.NEA_AR);
        final List<Accommodation> accomList = new ArrayList<Accommodation>();
        accomList.add(accom);
        //student.setAccommodations(accomList);

        this.evaluator.evaluateImplicitRules(assess, student);

        assertThat(this.aspect.getSaveCount(), is(1));

    }

    // PrintOnDemand
    @Test
    public void testEvaluateRuleWithPrintOnRequestEnum() {

        final Assessment assess = new Assessment();

        assess.setSubjectCode("Math");
        assess.setEligibilityType(EligibilityType.IMPLICIT);

        final ImplicitEligibilityRule rule = new ImplicitEligibilityRule();
        rule.setRuleType(RuleType.ENABLER);
        rule.setOperatorType(OperatorType.EQUALS);
        rule.setField("printOnDemand");
        rule.setValue("TDS_PoD0");

        final List<ImplicitEligibilityRule> rules = new ArrayList<ImplicitEligibilityRule>();
        rules.add(rule);

        assess.setImplicitEligibilityRules(rules.toArray(new ImplicitEligibilityRule[0]));

        final Student student = new Student();
        student.setFirstName("Bob");
        student.setGradeLevelWhenAssessed("EIGHTHGRADE");
        student.setBirthDate("1970-01-06");
        student.setPrimaryDisabilityType(PrimaryDisabilityType.ID);
        final Accommodation accom = new Accommodation();
        accom.setSubject("Math");
        //accom.setPrintOnDemand(PrintOnDemand.TDS_PoD0);
        final List<Accommodation> accomList = new ArrayList<Accommodation>();
        accomList.add(accom);
        //student.setAccommodations(accomList);

        this.evaluator.evaluateImplicitRules(assess, student);

        assertThat(this.aspect.getSaveCount(), is(1));

    }

    // PrintSize
    @Test
    public void testEvaluateRuleWithPrintSizeEnum() {

        final Assessment assess = new Assessment();

        assess.setSubjectCode("Math");
        assess.setEligibilityType(EligibilityType.IMPLICIT);

        final ImplicitEligibilityRule rule = new ImplicitEligibilityRule();
        rule.setRuleType(RuleType.ENABLER);
        rule.setOperatorType(OperatorType.EQUALS);
        rule.setField("printSize");
        rule.setValue("TDS_PS_L4");

        final List<ImplicitEligibilityRule> rules = new ArrayList<ImplicitEligibilityRule>();
        rules.add(rule);

        assess.setImplicitEligibilityRules(rules.toArray(new ImplicitEligibilityRule[0]));

        final Student student = new Student();
        student.setFirstName("Bob");
        student.setGradeLevelWhenAssessed("EIGHTHGRADE");
        student.setBirthDate("1970-01-06");
        student.setPrimaryDisabilityType(PrimaryDisabilityType.ID);
        /*final Accommodation accom = new Accommodation();
        accom.setSubject("Math");
        accom.setPrintSize(PrintSize.TDS_PS_L4);
        final List<Accommodation> accomList = new ArrayList<Accommodation>();
        accomList.add(accom);
        student.setAccommodations(accomList);*/

        this.evaluator.evaluateImplicitRules(assess, student);

        assertThat(this.aspect.getSaveCount(), is(1));

    }

    @Test
    public void testEvaluateRuleWithPrintSizeEnumNoMatch() {

        final Assessment assess = new Assessment();

        assess.setSubjectCode("Math");
        assess.setEligibilityType(EligibilityType.IMPLICIT);

        final ImplicitEligibilityRule rule = new ImplicitEligibilityRule();
        rule.setRuleType(RuleType.ENABLER);
        rule.setOperatorType(OperatorType.EQUALS);
        rule.setField("printSize");
        rule.setValue("TDS_PS_L4");

        final List<ImplicitEligibilityRule> rules = new ArrayList<ImplicitEligibilityRule>();
        rules.add(rule);

        assess.setImplicitEligibilityRules(rules.toArray(new ImplicitEligibilityRule[0]));

        final Student student = new Student();
        student.setFirstName("Bob");
        student.setGradeLevelWhenAssessed("EIGHTHGRADE");
        student.setBirthDate("1970-01-06");
        student.setPrimaryDisabilityType(PrimaryDisabilityType.ID);
        /*final Accommodation accom = new Accommodation();
        accom.setSubject("Math");
        accom.setPrintSize(PrintSize.TDS_PS_L2);
        final List<Accommodation> accomList = new ArrayList<Accommodation>();
        accomList.add(accom);
        student.setAccommodations(accomList);*/

        this.evaluator.evaluateImplicitRules(assess, student);

        assertThat(this.aspect.getSaveCount(), is(0));

    }

}
