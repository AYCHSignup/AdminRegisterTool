/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.integration;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.junit.Assert.assertThat;

import org.joda.time.DateTime;
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.opentestsystem.delivery.Sb11TimeZoneBuilder;
import org.opentestsystem.delivery.testreg.domain.Assessment;
import org.opentestsystem.delivery.testreg.domain.Assessment.EligibilityType;
import org.opentestsystem.delivery.testreg.domain.Assessment.TestWindow;
import org.opentestsystem.delivery.testreg.domain.EligibleStudent;
import org.opentestsystem.delivery.testreg.domain.InstitutionEntity;
import org.opentestsystem.delivery.testreg.domain.StateEntity;
import org.opentestsystem.delivery.testreg.persistence.criteria.dependencyresolvers.AssessmentDependencyResolver;
import org.opentestsystem.delivery.testreg.persistence.criteria.dependencyresolvers.TestRegistrationEntitiesDependencyResolver;
import org.opentestsystem.delivery.testreg.service.ParentTreeFinderService;
import org.opentestsystem.delivery.testreg.service.ProctorPackageService;
import org.opentestsystem.delivery.testreg.service.Sb11EntityRepositoryService;
import org.opentestsystem.shared.progman.client.domain.Tenant;
import org.opentestsystem.shared.progman.client.domain.TenantType;
import org.opentestsystem.shared.security.domain.SbacEntity;
import org.opentestsystem.shared.security.service.TenancyService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.util.ReflectionTestUtils;

import com.google.common.collect.Lists;
import com.google.common.collect.Sets;

public class ProctorPackageServiceTest extends AbstractPersistenceEmbeddedTest {

    @InjectMocks
    @Autowired
    private ProctorPackageService proctorPackageService;
    
    @InjectMocks
    @Autowired
    private ParentTreeFinderService parentTreeFinderService;

    @Mock
    private TenancyService tenancyService;

    @Mock
    private Sb11EntityRepositoryService sb11EntityService;

    DateTime beginWindow;

    DateTime beginWindow3;

    @Autowired
    Sb11TimeZoneBuilder sb11TimeZoneBuilder;

    @Before
    public void before() {
        MockitoAnnotations.initMocks(this);

        Mockito.when(sb11EntityService.findAllByEntityId("WI", StateEntity.class)).thenReturn(
                Lists.newArrayList(new StateEntity("WI", "Wisconsin")));
        Mockito.when(sb11EntityService.findAllByEntityId("MN", StateEntity.class)).thenReturn(
                Lists.newArrayList(new StateEntity("MN", "Minnesota")));
        Mockito.when(sb11EntityService.findAllByEntityId("IL", StateEntity.class)).thenReturn(
                Lists.newArrayList(new StateEntity("IL", "Illinois")));

        InstitutionEntity ilSchool = new InstitutionEntity();
        ilSchool.setEntityId("1111");
        ilSchool.setEntityName("IL School");
        ilSchool.setParentEntityId("IL");
        ilSchool.setParentEntityType("STATE");
        ilSchool.setStateAbbreviation("IL");

        Mockito.when(sb11EntityService.findAllByEntityId("1111", InstitutionEntity.class)).thenReturn(
                Lists.newArrayList(ilSchool));

        Tenant stateOfWiTenant = new Tenant();
        stateOfWiTenant.setId("7");
        stateOfWiTenant.setName("WI");
        stateOfWiTenant.setType(TenantType.STATE);

        Tenant stateOfMnTenant = new Tenant();
        stateOfMnTenant.setId("9");
        stateOfMnTenant.setName("MN");
        stateOfMnTenant.setType(TenantType.STATE);

        Tenant stateOfIlTenant = new Tenant();
        stateOfIlTenant.setId("12");
        stateOfIlTenant.setName("IL");
        stateOfIlTenant.setType(TenantType.STATE);

        Mockito.when(
                tenancyService.getApplicableTenants(Sets.newHashSet(new SbacEntity(TenantType.STATE, "WI", "nothing"))))
                .thenReturn(Lists.newArrayList(stateOfWiTenant));
        Mockito.when(
                tenancyService.getApplicableTenants(Sets.newHashSet(new SbacEntity(TenantType.STATE, "MN", "nothing"))))
                .thenReturn(Lists.newArrayList(stateOfMnTenant));
        Mockito.when(
                tenancyService.getApplicableTenants(Sets.newHashSet(new SbacEntity(TenantType.STATE, "IL", "nothing"))))
                .thenReturn(Lists.newArrayList(stateOfIlTenant));
        Mockito.when(
                tenancyService.getApplicableTenants(Sets.newHashSet(new SbacEntity(TenantType.INSTITUTION, "1111",
                        "nothing"), new SbacEntity(TenantType.STATE, "IL", "nothing")))).thenReturn(
                Lists.newArrayList(stateOfIlTenant));

        TestRegistrationEntitiesDependencyResolver<Assessment> trAssessmentDependecyResolver = new AssessmentDependencyResolver();
        ReflectionTestUtils.setField(trAssessmentDependecyResolver, "sb11TimeZoneBuilder", sb11TimeZoneBuilder);
        beginWindow = DateTime.now(sb11TimeZoneBuilder.getDateTimeZone()).minusDays(4).withTimeAtStartOfDay();

        Assessment assessment1 = new Assessment();
        assessment1.setId("53c6f7abe4b0cd2bf712369b");
        assessment1.setEligibilityType(EligibilityType.EXPLICIT);
        assessment1.setDelayRule(3);
        assessment1.setEntityId("10001");
        assessment1.setNumGlobalOpportunities(4);
        assessment1.setSubjectCode("ELA 01");
        assessment1.setTestName("English Language Arts PK");
        assessment1.setVersion("1.0");
        assessment1.setTenantId("7");
        assessment1.setTestWindow(new TestWindow[] { new TestWindow(beginWindow, DateTime.now().plusDays(2), 1),
                new TestWindow(DateTime.now().plusDays(4), DateTime.now().plusDays(6), 3) });
        assessment1.setCategory("CAT1");
        assessment1.setType("Type1");
        trAssessmentDependecyResolver.resolveDependency(assessment1); // Mimic Persistence Criteria. Apply State
                                                                      // Modification workflow because entity is
                                                                      // directly inserted in to datastore
        mongoTemplate.insert(assessment1);

        Assessment assessment2 = new Assessment();
        assessment2.setId("53c6f7b4e4b0cd2bf712369c");
        assessment2.setEligibilityType(EligibilityType.EXPLICIT);
        assessment2.setDelayRule(5);
        assessment2.setEntityId("40001");
        assessment2.setNumGlobalOpportunities(9);
        assessment2.setSubjectCode("MATH-1291");
        assessment2.setTestName("Math Proficiency K12");
        assessment2.setVersion("2.0");
        assessment2.setTenantId("9");
        assessment2.setTestWindow(new TestWindow[] {
                new TestWindow(DateTime.now().plusDays(1), DateTime.now().plusDays(2), 1),
                new TestWindow(DateTime.now().plusDays(4), DateTime.now().plusDays(6), 3) });
        assessment2.setCategory("CAT2");
        assessment2.setType("Type2");
        trAssessmentDependecyResolver.resolveDependency(assessment2); // Mimic Persistence Criteria. Apply State
                                                                      // Modification workflow because entity is
                                                                      // directly inserted in to datastore
        mongoTemplate.insert(assessment2);

        Assessment assessment3 = new Assessment();
        beginWindow3 = DateTime.now(sb11TimeZoneBuilder.getDateTimeZone()).minusDays(1).withTimeAtStartOfDay();

        assessment3.setId("53c6f7f4e4b0cd2bf712369e");
        assessment3.setEligibilityType(EligibilityType.EXPLICIT);
        assessment3.setDelayRule(5);
        assessment3.setEntityId("30001");
        assessment3.setNumGlobalOpportunities(5);
        assessment3.setSubjectCode("SCIENCE-331");
        assessment3.setTestName("Science Test");
        assessment3.setVersion("212.456");
        assessment3.setTenantId("12");
        assessment3.setTestWindow(new TestWindow[] { new TestWindow(beginWindow3, DateTime.now().plusDays(2), 1),
                new TestWindow(DateTime.now().plusDays(4), DateTime.now().plusDays(6), 3) });
        assessment3.setCategory("CAT3");
        assessment3.setType("Type3");
        trAssessmentDependecyResolver.resolveDependency(assessment3); // Mimic Persistence Criteria. Apply State
                                                                      // Modification workflow because entity is
                                                                      // directly inserted in to datastore
        mongoTemplate.insert(assessment3);

        Assessment assessment4 = new Assessment();
        assessment4.setId("53c6fc1ce4b0cd2bf71236a4");
        assessment4.setEligibilityType(EligibilityType.EXPLICIT);
        assessment4.setDelayRule(5);
        assessment4.setEntityId("50001");
        assessment4.setNumGlobalOpportunities(5);
        assessment4.setSubjectCode("UBW-121");
        assessment4.setTestName("UNDERWATER_BASKET-WEAVING-331");
        assessment4.setVersion("22");
        assessment4.setTenantId("12");
        assessment4.setTestWindow(new TestWindow[] {
                new TestWindow(DateTime.now().minusDays(4), DateTime.now().minus(3), 1),
                new TestWindow(DateTime.now().plusDays(4), DateTime.now().plusDays(6), 3) });
        assessment4.setCategory("CAT4");
        assessment4.setType("Type4");
        trAssessmentDependecyResolver.resolveDependency(assessment4);// Mimic Persistence Criteria. Apply State
                                                                     // Modification workflow because entity is directly
                                                                     // inserted in to datastore
        mongoTemplate.insert(assessment4);

        EligibleStudent eligibleStudent = new EligibleStudent();
        eligibleStudent.addAssessment(assessment1);
        eligibleStudent.addAssessment(assessment2);
        eligibleStudent.addAssessment(assessment3);
        eligibleStudent.addAssessment(assessment4);
        mongoTemplate.insert(eligibleStudent);
    }

    // Notes for Future: Here I am using just simple java text compare. Though it looks easy to do but finding the
    // differences between
    // two snippet of xml is tedious. An unit testing called XmlUnit can be used to compare them and would result in
    // identifying
    // the difference in case the tests fail. Other alternative is to take the failure stacktrace and try comparing them
    // using some
    // online text compare tools. (There are tons of them out there.)
    @Test
    public void testExportProctorPackageSingleAssessment() {

        String packageXml = proctorPackageService.exportProctorPackage("STATE", "WI", null, DateTime.now());
        assertThat(packageXml, is(notNullValue()));
        String expectedXml = "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>" + "<ProctorPackage version=\"1.0\">"
                + "<Proctor>" + "<Tests>" + "<Test>" + "<SubjectCode>ELA 01</SubjectCode>"
                + "<TestName>English Language Arts PK</TestName>" + "<TestId>53c6f7abe4b0cd2bf712369b</TestId>"
                + "<Category>CAT1</Category>" + "<Type>Type1</Type>" + "<MaxOpps>4</MaxOpps>"
                + "<DelayRule>3</DelayRule>" + "<WindowOpps>1</WindowOpps>" + "<WindowStart>"
                + beginWindow.toString("yyyy-MM-dd") + "</WindowStart>" + "</Test>" + "</Tests>" + "</Proctor>"
                + "</ProctorPackage>";
        assertThat(packageXml, is(expectedXml));
    }

    @Test
    public void testExportProctorPackageWithSchool() {
        String packageXml = proctorPackageService.exportProctorPackage("INSTITUTION", "1111", "IL", DateTime.now());
        assertThat(packageXml, is(notNullValue()));

        // Here there are two versions of Xml is expected. Since there is no explicit ordering set in the Services to
        // return
        // a predefined order of the test elements, either one of the expected xmls would pass.
        String expectedXml = "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>" + "<ProctorPackage version=\"1.0\">"
                + "<Proctor>" + "<Tests>" + "<Test>" + "<SubjectCode>SCIENCE-331</SubjectCode>"
                + "<TestName>Science Test</TestName>" + "<TestId>53c6f7f4e4b0cd2bf712369e</TestId>"
                + "<Category>CAT3</Category>" + "<Type>Type3</Type>" + "<MaxOpps>5</MaxOpps>"
                + "<DelayRule>5</DelayRule>" + "<WindowOpps>1</WindowOpps>" + "<WindowStart>"
                + beginWindow3.toString("yyyy-MM-dd") + "</WindowStart>" + "</Test>" + "</Tests>" + "</Proctor>"
                + "</ProctorPackage>";

        assertThat(packageXml, is(expectedXml));
    }
}
