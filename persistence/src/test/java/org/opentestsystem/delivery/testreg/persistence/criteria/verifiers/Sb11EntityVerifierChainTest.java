/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria.verifiers;

import static org.hamcrest.core.IsCollectionContaining.hasItems;
import static org.junit.Assert.assertThat;
import static org.springframework.test.util.ReflectionTestUtils.setField;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.InstitutionEntity;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.domain.StateEntity;
import org.opentestsystem.delivery.testreg.persistence.Verifier;
import org.springframework.validation.FieldError;

public class Sb11EntityVerifierChainTest {

    private Verifier<Sb11Entity> verifier;
    
    private List<String> entityVerifierCalledList; 
    
    @Before
    public void setup() {
        verifier = new Sb11EntityVerifierChain();
        entityVerifierCalledList = new ArrayList<>();
        setField(verifier, "sb11EntityVerifier", new MockEmptySb11Verifier("entityVerifierCalled"));
        setField(verifier, "studentAssociationVerifier", new MockEmptySb11Verifier("studentAssociationVerifierCalled"));
        setField(verifier, "userAssociationVerifier", new MockEmptySb11Verifier("userAssociationVerifierCalled"));
        setField(verifier, "facilityExistenceVerifier", new MockEmptySb11Verifier("facilityExistenceVerifierCalled"));
        setField(verifier, "verifierUtils", new VerifierUtils(){
            @SuppressWarnings("unchecked")
            public <T extends Sb11Entity> T getSb11EntityFromDB(T entity) {
                return (T) new StateEntity();
            }
        });
    }
    
    @Test
    public void verifyChain_forState() {
        verifier.verify(new StateEntity());
        assertThat(entityVerifierCalledList, hasItems("entityVerifierCalled", "studentAssociationVerifierCalled", "userAssociationVerifierCalled"));
    }
    
    @Test
    public void verifyChain_forInstitution() {
        verifier.verify(new InstitutionEntity());
        assertThat(entityVerifierCalledList, hasItems("entityVerifierCalled", "studentAssociationVerifierCalled", "userAssociationVerifierCalled", "facilityExistenceVerifierCalled"));
    }
    
    private class MockEmptySb11Verifier implements Verifier<Sb11Entity> {
        private String verifierName;
        
        public MockEmptySb11Verifier(String name) {
            verifierName = name;
        }

        @Override
        public List<FieldError> verify(Sb11Entity b) {
            entityVerifierCalledList.add(verifierName);
            return Collections.emptyList();
        }
    }
}
