/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.user;

import static org.hamcrest.collection.IsCollectionWithSize.hasSize;
import static org.hamcrest.collection.IsEmptyCollection.empty;
import static org.hamcrest.core.Is.is;
import static org.junit.Assert.*;

import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.HierarchyLevel;
import org.opentestsystem.delivery.testreg.domain.User;
import org.opentestsystem.delivery.testreg.domain.User.RoleAssociation;
import org.opentestsystem.delivery.testreg.persistence.Verifier;
import org.springframework.validation.FieldError;

import com.google.common.collect.Lists;

public class DuplicateRoleAssociationVerifierTest {
    
    Verifier<User> verifier;
    
    User user;
    
    @Before
    public void before() {
        verifier = new DuplicateRoleAssociationVerifier();
        user = new User();
    }
    
    @Test
    public void testDuplicates() {

        RoleAssociation role1 = new RoleAssociation();
        role1.setAssociatedEntityId("ABZZ");
        role1.setLevel(HierarchyLevel.CLIENT);
        role1.setRole("TEST_HEAD");
        
        RoleAssociation role2 = new RoleAssociation();
        role2.setAssociatedEntityId("CFGGT");
        role2.setLevel(HierarchyLevel.GROUPOFDISTRICTS);
        role2.setRole("TEST_WALKER");
        role2.setStateAbbreviation("TX");
        
        RoleAssociation role3 = new RoleAssociation(); // dupe with role2
        role3.setAssociatedEntityId("CFGGT");
        role3.setLevel(HierarchyLevel.GROUPOFDISTRICTS);
        role3.setRole("TEST_WALKER");
        role3.setStateAbbreviation("TX");
        
        RoleAssociation role4 = new RoleAssociation(); // dup with role1
        role4.setAssociatedEntityId("ABZZ");
        role4.setLevel(HierarchyLevel.CLIENT);
        role4.setRole("TEST_HEAD");
        role4.setStateAbbreviation("MN"); // will be ignored (invalid with CLIENT level)
        
        user.setRoleAssociations(Lists.newArrayList(role1, role2, role3, role4));
        assertThat(user.getRoleAssociations(), hasSize(2));
        List<FieldError> errors = verifier.verify(user);
        assertThat(errors, is(empty()));
    }
    
    @Test
    public void testDuplicateForIncludedEntities() {

        RoleAssociation role1 = new RoleAssociation();
        role1.setAssociatedEntityId("CFGGT");
        role1.setLevel(HierarchyLevel.GROUPOFDISTRICTS);
        role1.setRole("TEST_WALKER");
        role1.setStateAbbreviation("TX");
        
        RoleAssociation role2 = new RoleAssociation(); // dupe of role1
        role2.setAssociatedEntityId("CFGGT");
        role2.setLevel(HierarchyLevel.GROUPOFDISTRICTS);
        role2.setRole("TEST_WALKER");
        role2.setStateAbbreviation("TX");
        
        RoleAssociation role3 = new RoleAssociation();
        role3.setAssociatedEntityId("CFGGT");
        role3.setLevel(HierarchyLevel.GROUPOFINSTITUTIONS);
        role3.setRole("TEST_WALKER");
        role3.setStateAbbreviation("TX");
        
        user.setRoleAssociations(Lists.newArrayList(role1, role2, role3));
        assertThat(user.getRoleAssociations(), hasSize(2));
        List<FieldError> errors = verifier.verify(user);
        assertThat(errors, is(empty()));

        // Change the level and test the duplicates
        role1.setLevel(HierarchyLevel.INSTITUTION);
        errors = verifier.verify(user);
        assertThat(errors, is(empty()));
    }

}
