/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.integration.eligibility;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.junit.Assert.assertThat;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.joda.time.DateTime;
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.opentestsystem.delivery.testreg.domain.Action;
import org.opentestsystem.delivery.testreg.domain.Assessment;
import org.opentestsystem.delivery.testreg.domain.Assessment.EligibilityType;
import org.opentestsystem.delivery.testreg.domain.CacheMap;
import org.opentestsystem.delivery.testreg.domain.ExplicitEligibility;
import org.opentestsystem.delivery.testreg.domain.ImplicitEligibilityRule;
import org.opentestsystem.delivery.testreg.domain.ImplicitEligibilityRule.RuleType;
import org.opentestsystem.delivery.testreg.domain.StateEntity;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.domain.Student.Gender;
import org.opentestsystem.delivery.testreg.domain.Student.GradeLevel;
import org.opentestsystem.delivery.testreg.domain.event.AssessmentModificationEvent;
import org.opentestsystem.delivery.testreg.domain.event.ExplicitEligibilityModificationEvent;
import org.opentestsystem.delivery.testreg.eligibility.EligibilityEvaluator;
import org.opentestsystem.delivery.testreg.integration.AbstractPersistenceEmbeddedTest;
import org.opentestsystem.delivery.testreg.service.CacheMapService;
import org.opentestsystem.delivery.testreg.service.EligibilityService;
import org.opentestsystem.delivery.testreg.service.Sb11EntityRepositoryService;
import org.opentestsystem.delivery.testreg.service.TestRegPersister;
import org.opentestsystem.shared.progman.client.ProgManClient;
import org.opentestsystem.shared.progman.client.domain.Tenant;
import org.opentestsystem.shared.progman.client.domain.TenantType;
import org.opentestsystem.shared.security.domain.SbacEntity;
import org.opentestsystem.shared.security.service.TenancyService;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.collect.Lists;
import com.google.common.collect.Sets;

public class EligibilityServiceEvaluatorIntegrationTest extends AbstractPersistenceEmbeddedTest { // Integrates Service
                                                                                                  // and
                                                                                                  // EligibilityEvaluation

    @Mock
    private TenancyService tenancyService;

    @Mock
    private ProgManClient progmanClient;

    @Mock
    private Sb11EntityRepositoryService sb11EntityService;

    @Mock
    private CacheMapService cacheMapService;

    @Autowired
    private EligibilityService eligService;

    @Autowired
    private TestRegPersister testRegPersister;

    @InjectMocks
    @Autowired
    private EligibilityEvaluator eligibilityEvaluator;

    @Before
    public void setup() {
        MockitoAnnotations.initMocks(this);

        Tenant idIsFive = new Tenant();
        idIsFive.setId("5");
        idIsFive.setName("WI");
        idIsFive.setType(TenantType.STATE);

        Mockito.when(
                tenancyService.getApplicableTenants(Sets.newHashSet(new SbacEntity(TenantType.INSTITUTION, "1",
                        "nothing")))).thenReturn(Lists.newArrayList(idIsFive));

        Mockito.when(progmanClient.getTenantById("5")).thenReturn(idIsFive);

        StateEntity stateOfWi = new StateEntity();
        stateOfWi.setEntityId("WI");
        stateOfWi.setEntityName("Wisconsin");
        stateOfWi.setId("11111");

        Mockito.when(sb11EntityService.findByEntityId("WI", TenantType.STATE)).thenReturn(stateOfWi);

        Map<String, Set<String>> uberMap = new HashMap<>();

        Set<String> wiSet = Sets.newHashSet("1", "2", "3");
        uberMap.put("11111", wiSet);

        CacheMap cacheMap = new CacheMap("UberEntityRelationshipMap", uberMap);

        Mockito.when(cacheMapService.getCacheMap("UberEntityRelationshipMap")).thenReturn(cacheMap);
    }

    @Test
    public void testFindAllEligibleAssessmentsByStudentIdAndBeginWindow() {
        // 1. create a student
        Student student = new Student();
        student.setBirthDate(new DateTime(1980, 1, 1, 0, 0));
        student.setDistrictIdentifier("1");
        student.setEntityId("123456");
        student.setExternalSsid("111111111");
        student.setFirstName("Bob");
        student.setGender(Gender.Male);
        student.setGradeLevelWhenAssessed(GradeLevel.FOURTHGRADE);
        student.setLanguageCode("eng");
        student.setLastName("Test");
        student.setStateAbbreviation("WI");
        student.setAmericanIndianOrAlaskaNative("No");
        student.setAsian("No");
        student.setBlackOrAfricanAmerican("No");
        student.setHispanicOrLatino("No");
        student.setWhite("Yes");
        student.setNativeHawaiianOrPacificIsland("No");
        student.setTwoOrMoreRaces("No");
        student.setDisadvantageStatus("No");
        student.setLepStatus("No");
        student.setInstitutionIdentifier("1");
        student.setInstitutionEntityMongoId("1");
        student.setSection504Status("No");
        student.setiDEAIndicator("No");
        testRegPersister.saveDomainObject(student);

        // 2. Load Assessments - EXPLICIT Eligibility
        for (int i = 0; i < 5; i++) {
            Assessment assess1 = new Assessment();
            assess1.setDelayRule(2);
            assess1.setEligibilityType(EligibilityType.EXPLICIT);
            assess1.setNumGlobalOpportunities(14);
            assess1.setTestWindow(new Assessment.TestWindow[] {
                    new Assessment.TestWindow(new DateTime(2013, 07, 1, 0, 0), new DateTime(2013, 12, 31, 0, 0), 10),
                    new Assessment.TestWindow(new DateTime(2012, 12, 29, 0, 0), new DateTime(2013, 06, 30, 0, 0), 2),
                    new Assessment.TestWindow(new DateTime(2014, 01, 1, 0, 0), new DateTime(2099, 02, 21, 0, 0), 1) }); // Window
                                                                                                                        // Available
                                                                                                                        // for
                                                                                                                        // a
                                                                                                                        // very
                                                                                                                        // long
                                                                                                                        // time
            assess1.setTestName("ELA-PK-0" + i);
            assess1.setVersion(i + ".0");
            assess1.setTenantId("5");
            assess1.setSubjectCode("ELA01");
            assess1.addTestForm("testForm" + i);
            testRegPersister.saveDomainObject(assess1);
        }

        // Load Some Implicit Eligible Assessments
        Assessment implicitAssessment1 = new Assessment();
        implicitAssessment1.setDelayRule(2);
        implicitAssessment1.setEligibilityType(EligibilityType.IMPLICIT);
        implicitAssessment1.setNumGlobalOpportunities(null);
        implicitAssessment1.setTestWindow(new Assessment.TestWindow[] { new Assessment.TestWindow(new DateTime(2000,
                01, 2, 0, 0), new DateTime(2099, 02, 21, 0, 0), null) });
        implicitAssessment1.setImplicitEligibilityRules(new ImplicitEligibilityRule[] { new ImplicitEligibilityRule(
                "white", "YES", RuleType.ENABLER) });
        implicitAssessment1.setTestName("SAMPLE TEST 1");
        implicitAssessment1.setVersion("2.0");
        implicitAssessment1.setTenantId("5");
        implicitAssessment1.setSubjectCode("ELA01");
        implicitAssessment1.addTestForm(null);
        testRegPersister.saveDomainObject(implicitAssessment1);
        eligibilityEvaluator.evaluateAssessmentModification(new AssessmentModificationEvent(implicitAssessment1, null,
                Action.UPD));

        Assessment implicitAssessment2 = new Assessment();
        implicitAssessment2.setDelayRule(3);
        implicitAssessment2.setEligibilityType(EligibilityType.IMPLICIT);
        implicitAssessment2.setNumGlobalOpportunities(14);
        implicitAssessment2.setTestWindow(new Assessment.TestWindow[] { new Assessment.TestWindow(new DateTime(2000,
                01, 2, 0, 0), new DateTime(2099, 02, 21, 0, 0), null) });
        implicitAssessment2.setImplicitEligibilityRules(new ImplicitEligibilityRule[] { new ImplicitEligibilityRule(
                "white", "YES", RuleType.ENABLER) });
        implicitAssessment2.setTestName("SAMPLE TEST 2");
        implicitAssessment2.setVersion("3.0");
        implicitAssessment2.setTenantId("5");
        implicitAssessment2.setSubjectCode("ELA02");
        implicitAssessment2.addTestForm(null);
        testRegPersister.saveDomainObject(implicitAssessment2);
        eligibilityEvaluator.evaluateAssessmentModification(new AssessmentModificationEvent(implicitAssessment2, null,
                Action.UPD));

        Assessment assess1 = new Assessment();
        assess1.setDelayRule(2);
        assess1.setEligibilityType(EligibilityType.EXPLICIT);
        assess1.setNumGlobalOpportunities(14);
        assess1.setTestWindow(new Assessment.TestWindow[] {
                new Assessment.TestWindow(new DateTime(2013, 07, 31, 0, 0), new DateTime(2013, 12, 31, 0, 0), 10),
                new Assessment.TestWindow(new DateTime(2012, 12, 29, 0, 0), new DateTime(2013, 06, 30, 0, 0), 2),
                new Assessment.TestWindow(new DateTime(2014, 01, 2, 0, 0), new DateTime(2014, 02, 21, 0, 0), 1) });
        assess1.setTestName("MATH-PK-0");
        assess1.setVersion("23.0"); // Version is different
        assess1.setTenantId("5");
        assess1.setSubjectCode("MAT01");
        assess1.addTestForm("mathForm");
        testRegPersister.saveDomainObject(assess1);

        // 3. Load ExplicitEligibility
        ExplicitEligibility explicitElig1 = new ExplicitEligibility();
        explicitElig1.setAdministrationName("Admin100");
        explicitElig1.setResponsibleDistrictId("D10002");
        explicitElig1.setStateAbbreviation("WI");
        explicitElig1.setStudentId("123456");
        explicitElig1.setSubject("ELA01");
        explicitElig1.setTestForm("testForm4");
        explicitElig1.setTestName("ELA-PK-04");
        explicitElig1.setTestVersion("4.0");
        testRegPersister.saveDomainObject(explicitElig1);
        eligibilityEvaluator.evaluateExplicitEligibilityModification(new ExplicitEligibilityModificationEvent(
                explicitElig1, Action.UPD));

        ExplicitEligibility explicitElig2 = new ExplicitEligibility();
        explicitElig2.setAdministrationName("Admin100");
        explicitElig2.setResponsibleDistrictId("D12000");
        explicitElig2.setStateAbbreviation("WI");
        explicitElig2.setStudentId("123456");
        explicitElig2.setSubject("MAT01");
        explicitElig2.setTestForm("mathForm");
        explicitElig2.setTestName("MATH-PK-0");
        explicitElig2.setTestVersion("23.0");
        testRegPersister.saveDomainObject(explicitElig2);
        eligibilityEvaluator.evaluateExplicitEligibilityModification(new ExplicitEligibilityModificationEvent(
                explicitElig2, Action.UPD));

        ExplicitEligibility explicitElig3 = new ExplicitEligibility();
        explicitElig3.setAdministrationName("Admin100");
        explicitElig3.setResponsibleDistrictId("D12000");
        explicitElig3.setStateAbbreviation("WI");
        explicitElig3.setStudentId("123456");
        explicitElig3.setSubject("ELA01");
        explicitElig3.setTestForm("testForm2");
        explicitElig3.setTestName("ELA-PK-02");
        explicitElig3.setTestVersion("2.0");
        testRegPersister.saveDomainObject(explicitElig3);
        eligibilityEvaluator.evaluateExplicitEligibilityModification(new ExplicitEligibilityModificationEvent(
                explicitElig3, Action.UPD));

        Map<ExplicitEligibility, DateTime> map = eligService
                .findAllEligibilityByStudentIdStateAbbreviationAndBeginWindow("123456", "WI", new DateTime());

        assertThat(map, is(notNullValue()));
        assertThat(map.size(), is(4));

        List<String> testForms = new ArrayList<>();
        for (Entry<ExplicitEligibility, DateTime> entry : map.entrySet()) {
            if (entry.getKey().getTestForm() == null) {
                testForms.add("Empty Form - " + entry.getKey().getTestName());
            } else {
                testForms.add(entry.getKey().getTestForm());
            }
        }

        assertThat(testForms.contains("testForm2"), is(true));
        assertThat(testForms.contains("testForm4"), is(true));
        assertThat(testForms.contains("Empty Form - SAMPLE TEST 1"), is(true));
        assertThat(testForms.contains("Empty Form - SAMPLE TEST 2"), is(true));
    }
}
