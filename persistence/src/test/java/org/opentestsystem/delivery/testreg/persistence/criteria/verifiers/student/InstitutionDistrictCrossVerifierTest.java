/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.student;

import static org.hamcrest.collection.IsCollectionWithSize.hasSize;
import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;
import static org.springframework.test.util.ReflectionTestUtils.setField;

import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.DistrictEntity;
import org.opentestsystem.delivery.testreg.domain.InstitutionEntity;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.persistence.Verifier;
import org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.student.InstitutionDistrictCrossVerifier;
import org.springframework.validation.FieldError;

public class InstitutionDistrictCrossVerifierTest {

    Verifier<Student> verifier;
    
    @Before
    public void setup() {
        verifier = new InstitutionDistrictCrossVerifier();
        setField(verifier, "sb11EntityRepositoryService", new MockSb11EntityRepositoryService(){
            @SuppressWarnings("unchecked")
            @Override
            public <S extends Sb11Entity> S findByEntityIdAndStateAbbreviation(String entityId, String stateAbbreviation,
                    Class<S> clazz) {
                if(clazz.equals(InstitutionEntity.class) && entityId.equals("I1000")) {
                    InstitutionEntity institution = new InstitutionEntity();
                    institution.setEntityId("I1000");
                    institution.setParentEntityId("D1000");
                    return (S) institution;
                } else if(clazz.equals(DistrictEntity.class) && entityId.equals("D1000")) {
                    DistrictEntity district = new DistrictEntity();
                    district.setEntityId("D1000");
                    return (S) district;
                } else if(clazz.equals(DistrictEntity.class) && ! entityId.equals("D1000")) {
                    DistrictEntity district = new DistrictEntity();
                    district.setEntityId("DXXXX");
                    return (S) district;
                }
                return null;
            }
        });
    }
    
    @Test
    public void testDistrictInstitutionMatch() {
        //Setup Data
        Student student = new Student();
        student.setInstitutionIdentifier("I1000");
        student.setDistrictIdentifier("D1000");
        
        //Call Test Method
        List<FieldError> errors = verifier.verify(student);
        
        //Verify outcome
        assertThat(errors, hasSize(0));
    }
    
    @Test
    public void testDistrictInstitutionMisMatch() {
      //Setup Data
        Student student = new Student();
        student.setInstitutionIdentifier("I1000");
        student.setDistrictIdentifier("D2000");
        
        //Call Test Method
        List<FieldError> errors = verifier.verify(student);
        
        //Verify outcome
        assertThat(errors, hasSize(1));
        assertThat(errors.get(0).getRejectedValue().toString(), is("I1000"));
    }
    //TODO: Test Null District
}
