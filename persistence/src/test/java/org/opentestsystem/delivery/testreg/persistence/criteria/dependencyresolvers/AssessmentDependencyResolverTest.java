/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria.dependencyresolvers;

import static org.hamcrest.collection.IsArrayWithSize.arrayWithSize;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsNull.notNullValue;
import static org.junit.Assert.assertThat;

import java.util.TimeZone;

import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.Sb11TimeZoneBuilder;
import org.opentestsystem.delivery.testreg.domain.Assessment;
import org.springframework.test.util.ReflectionTestUtils;

public class AssessmentDependencyResolverTest {

    TestRegistrationEntitiesDependencyResolver<Assessment> trDependencyResolver;

    @Before
    public void before() {
        trDependencyResolver = new AssessmentDependencyResolver();
        ReflectionTestUtils.setField(trDependencyResolver, "sb11TimeZoneBuilder", new Sb11TimeZoneBuilder("Pacific/Honolulu")); // (GMT-10)
    }

    @Test
    public void testDependency_UTC() { // Server Time ahead of Configured Timezone
        // Assessment
        @SuppressWarnings("serial")
        Assessment assessment = new Assessment() {
            { // Server Time@UTC (DateTime uses UTC by default)
                setTestWindow(new TestWindow[] {
                        new TestWindow(new DateTime(), new DateTime()),
                        new TestWindow(new DateTime(2012, 12, 22, 12, 25), new DateTime(2014, 02, 28, 0, 45)),
                        new TestWindow(new DateTime(2010, 1, 1, 0, 0), new DateTime(2015, 9, 15, 20, 59))
                });
            }
        };

        trDependencyResolver.resolveDependency(assessment);
        assertThat(assessment.getTestWindow(), is(notNullValue()));
        assertThat(assessment.getTestWindow(), arrayWithSize(3));
        DateTimeZone TZ = DateTimeZone.forTimeZone(TimeZone.getTimeZone("HST"));
        assertThat(assessment.getTestWindow()[0].getBeginWindow(), is(new DateTime(TZ).withTimeAtStartOfDay()));
        assertThat(assessment.getTestWindow()[0].getEndWindow(), is(new DateTime(TZ).withTimeAtStartOfDay()));
        assertThat(assessment.getTestWindow()[1].getBeginWindow(), is(new DateTime(2012, 12, 22, 12, 25, TZ).withTimeAtStartOfDay()));
        assertThat(assessment.getTestWindow()[1].getEndWindow(), is(new DateTime(2014, 02, 27, 0, 45, TZ).withTimeAtStartOfDay())); // There is a day offset because UTC is ahead of HST
        assertThat(assessment.getTestWindow()[2].getBeginWindow(), is(new DateTime(2009, 12, 31, 0, 0, TZ).withTimeAtStartOfDay())); // Previous Year
        assertThat(assessment.getTestWindow()[2].getEndWindow(), is(new DateTime(2015, 9, 15, 20, 59, TZ).withTimeAtStartOfDay()));
    }

    @Test
    public void testDependency_HST() { // Server Time same as Configured Timezone
        final DateTimeZone TZ = DateTimeZone.forTimeZone(TimeZone.getTimeZone("HST")); // Lets Use HST - Hawaii Standard Time(GMT-10)

        // Assessment
        @SuppressWarnings("serial")
        Assessment assessment = new Assessment() {
            { // Server Time@HST
                setTestWindow(new TestWindow[] {
                        new TestWindow(new DateTime(TZ), new DateTime(TZ)),
                        new TestWindow(new DateTime(2012, 12, 22, 12, 25, TZ), new DateTime(2014, 02, 28, 0, 45, TZ)),
                        new TestWindow(new DateTime(2010, 1, 1, 0, 0, TZ), new DateTime(2015, 9, 15, 20, 59, TZ))
                });
            }
        };

        trDependencyResolver.resolveDependency(assessment);
        assertThat(assessment.getTestWindow(), is(notNullValue()));
        assertThat(assessment.getTestWindow(), arrayWithSize(3));
        assertThat(assessment.getTestWindow()[0].getBeginWindow(), is(new DateTime(TZ).withTimeAtStartOfDay()));
        assertThat(assessment.getTestWindow()[0].getEndWindow(), is(new DateTime(TZ).withTimeAtStartOfDay()));
        assertThat(assessment.getTestWindow()[1].getBeginWindow(), is(new DateTime(2012, 12, 22, 0, 0, TZ).withTimeAtStartOfDay()));
        assertThat(assessment.getTestWindow()[1].getEndWindow(), is(new DateTime(2014, 02, 28, 0, 0, TZ).withTimeAtStartOfDay()));
        assertThat(assessment.getTestWindow()[2].getBeginWindow(), is(new DateTime(2010, 1, 1, 0, 0, TZ).withTimeAtStartOfDay()));
        assertThat(assessment.getTestWindow()[2].getEndWindow(), is(new DateTime(2015, 9, 15, 0, 0, TZ).withTimeAtStartOfDay()));
    }

    @Test
    public void testDependency_SST() { // Server Time behind Configured Timezone
        final DateTimeZone SERVER_TZ = DateTimeZone.forTimeZone(TimeZone.getTimeZone("Pacific/Samoa")); // Samoa Standard Time (GMT-11)

        // Assessment
        @SuppressWarnings("serial")
        Assessment assessment = new Assessment() {
            { // Server Time@SST
                setTestWindow(new TestWindow[] {
                        new TestWindow(new DateTime(SERVER_TZ), new DateTime(SERVER_TZ)),
                        new TestWindow(new DateTime(2012, 12, 22, 12, 25, SERVER_TZ), new DateTime(2014, 02, 28, 0, 45, SERVER_TZ)),
                        new TestWindow(new DateTime(2009, 12, 31, 23, 55, SERVER_TZ), new DateTime(2015, 9, 15, 20, 59, SERVER_TZ))
                });
            }
        };

        trDependencyResolver.resolveDependency(assessment);
        assertThat(assessment.getTestWindow(), is(notNullValue()));
        assertThat(assessment.getTestWindow(), arrayWithSize(3));
        final DateTimeZone CONFIGURED_TZ = DateTimeZone.forTimeZone(TimeZone.getTimeZone("HST")); // Hawaii Standard Time
        assertThat(assessment.getTestWindow()[0].getBeginWindow(), is(new DateTime(CONFIGURED_TZ).withTimeAtStartOfDay()));
        assertThat(assessment.getTestWindow()[0].getEndWindow(), is(new DateTime(CONFIGURED_TZ).withTimeAtStartOfDay()));
        assertThat(assessment.getTestWindow()[1].getBeginWindow(), is(new DateTime(2012, 12, 22, 0, 0, CONFIGURED_TZ).withTimeAtStartOfDay()));
        assertThat(assessment.getTestWindow()[1].getEndWindow(), is(new DateTime(2014, 02, 28, 0, 0, CONFIGURED_TZ).withTimeAtStartOfDay()));
        assertThat(assessment.getTestWindow()[2].getBeginWindow(), is(new DateTime(2010, 1, 1, 0, 0, CONFIGURED_TZ).withTimeAtStartOfDay()));
        assertThat(assessment.getTestWindow()[2].getEndWindow(), is(new DateTime(2015, 9, 15, 0, 0, CONFIGURED_TZ).withTimeAtStartOfDay()));
    }

}
