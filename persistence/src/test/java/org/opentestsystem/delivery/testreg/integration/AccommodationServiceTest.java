/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.integration;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.Accommodation;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.ColorContrast;
import org.opentestsystem.delivery.testreg.domain.Sb11NonEntity;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.domain.Student.Gender;
import org.opentestsystem.delivery.testreg.domain.Student.GradeLevel;
import org.opentestsystem.delivery.testreg.domain.Student.PrimaryDisabilityType;
import org.opentestsystem.delivery.testreg.domain.Student.Title3ProgramType;
import org.opentestsystem.delivery.testreg.service.TestRegistrationService;
import org.springframework.beans.factory.annotation.Autowired;

public class AccommodationServiceTest extends AbstractPersistenceEmbeddedTest {

    @Autowired
    private TestRegistrationService<Sb11NonEntity> accommodationService;

    @Autowired
    private TestRegistrationService<Sb11NonEntity> sb11NonEntityService;

    private Accommodation accommodation;

    private Student savedStudent;

    @Before
    public void init() {

        Student student = new Student();
        student.setEntityId("123456");
        student.setStateAbbreviation("WI");
        student.setDistrictIdentifier("101");
        student.setInstitutionIdentifier("10001");
        student.setMiddleName("MS");
        student.setFirstName("Joe");
        student.setLastName("Smith");
        student.setBirthDate("2013-10-10");
        student.setExternalSsid("WI12345");
        student.setGradeLevelWhenAssessed(GradeLevel.EIGHTHGRADE);
        student.setGender(Gender.Male);
        student.setHispanicOrLatino("NO");
        student.setAmericanIndianOrAlaskaNative("NO");
        student.setAsian("NO");
        student.setLanguageCode("eng");
        student.setBlackOrAfricanAmerican("NO");
        student.setWhite("Yes");
        student.setNativeHawaiianOrPacificIsland("NO");
        student.setTwoOrMoreRaces("NO");
        student.setiDEAIndicator("NO");
        student.setLepStatus("NO");
        student.setSection504Status("NO");
        student.setDisadvantageStatus("YES");
        student.setTitle3ProgressStatus("PROFICIENT");
        student.setMigrantStatus("YES");
        student.setFirstEntryDateIntoUsSchool("2014-09-01");
        student.setLepEntryDate("2010-10-10");
        student.setLepExitDate("2010-10-20");
        student.setTitle3ProgramType(Title3ProgramType.DUALLANGUAGE);
        student.setPrimaryDisabilityType(PrimaryDisabilityType.AUT);

        savedStudent = (Student) sb11NonEntityService.saveDomainObject(student);
        assertNotNull("Student not saved", student);
        assertNotNull("Student not saved", student.getId());

        accommodation = new Accommodation();
        accommodation.setStudentId(savedStudent.getEntityId());
        accommodation.setStateAbbreviation("WI");
        accommodation.setSubject("MATH");
        accommodation.setAmericanSignLanguage("TDS_ASL0");
        accommodation.setClosedCaptioning("TDS_ClosedCap1");
        accommodation.setColorContrast("TDS_CCYellowB");
        accommodation.setTextToSpeech("TDS_TTS_Item");
        accommodation.setLanguage("ENU");
        accommodation.setPrintOnDemand("TDS_PoD0");
        accommodation.setPrintSize("TDS_PS_L1");
    }

    @Test
    public void testSave() {
        accommodationService.saveDomainObject(accommodation);
        Student foundStudent = (Student) sb11NonEntityService.findById(savedStudent.getId(), Student.FORMAT_TYPE);
        assertNotNull("Student not found", foundStudent);
        List<Accommodation> accommodations = foundStudent.getAccommodations();
        assertNotNull("Accommodation not found", accommodations);
        assertTrue("Accommodation not found", accommodations.size() == 1);
        assertTrue("Accommodation subject not valid", accommodations.get(0).getSubject().equalsIgnoreCase("MATH"));
    }

    @Test
    public void testUpdate() {
        accommodationService.saveDomainObject(accommodation);
        Student foundStudent = (Student) sb11NonEntityService.findById(savedStudent.getId(), Student.FORMAT_TYPE);
        assertNotNull("Student not found", foundStudent);
        List<Accommodation> accommodations = foundStudent.getAccommodations();
        assertNotNull("Accommodation not found", accommodations);
        assertTrue("Accommodation not found", accommodations.size() == 1);
        assertTrue("Accommodation subject not valid", accommodations.get(0).getSubject().equalsIgnoreCase("MATH"));
        accommodation.setColorContrast(ColorContrast.TDS_CCMagenta.toString());
        accommodationService.updateDomainObject(accommodation);

        Student foundUpdatedStudent = (Student) sb11NonEntityService
                .findById(savedStudent.getId(), Student.FORMAT_TYPE);
        assertNotNull("Student not found", foundStudent);
        List<Accommodation> updatedAccommodations = foundUpdatedStudent.getAccommodations();
        assertNotNull("Accommodation not found", updatedAccommodations);
        assertTrue("Accommodation not found", updatedAccommodations.size() == 1);
        assertTrue("Accommodation subject not valid",
                updatedAccommodations.get(0).getColorContrast() == ColorContrast.TDS_CCMagenta);
    }

}
