/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria.verifiers;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.collection.IsEmptyCollection.empty;
import static org.hamcrest.core.IsNot.not;
import static org.junit.Assert.assertThat;

import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.DistrictEntity;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.InstitutionEntity;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.domain.StateEntity;
import org.opentestsystem.delivery.testreg.domain.TestRegistrationBase;
import org.opentestsystem.delivery.testreg.domain.search.StudentSearchRequest;
import org.opentestsystem.delivery.testreg.integration.service.MockTestRegPersister;
import org.opentestsystem.delivery.testreg.persistence.Verifier;
import org.opentestsystem.shared.search.domain.AbstractSearchRequest;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.validation.FieldError;



public class StudentAssociationVerifierTest {

    private Verifier<Sb11Entity> verifier;
    
    @Before
    public void setup() {
        verifier = new StudentAssociationVerifier();
        ReflectionTestUtils.setField(verifier, "studentService", new MockTestRegPersister(){
            @Override
            public <T extends TestRegistrationBase> SearchResponse<T> searchDomainObjects(
                    final AbstractSearchRequest searchRequest, final FormatType formatType) {
                
                if(searchRequest.getSearchCriteria().containsKey(StudentSearchRequest.SEARCH_KEY_DISTRICT_ID)) {
                    return returnResponse(2);
                    
                } else if(searchRequest.getSearchCriteria().containsKey(StudentSearchRequest.SEARCH_KEY_INSTITUTION_ID)) {
                    return returnResponse(2);
                    
                } else if(searchRequest.getSearchCriteria().containsKey(StudentSearchRequest.SEARCH_KEY_STATE_ID)) {
                    return returnResponse(2);
                }
                
                return returnResponse(0);
            }
            
            @SuppressWarnings("serial")
            private <T extends TestRegistrationBase> SearchResponse<T> returnResponse(final int num) {
                return new SearchResponse<T>(){
                    public long getTotalCount() {
                        return num;
                    } 
                };
            }
        });
    }
    
    
    @Test
    public void stateHasStudents() {
        //Mock Data
        StateEntity se = new StateEntity();
        se.setEntityId("MN");
        
        //SUT
        List<FieldError> errors = verifier.verify(se);
        
        //Verify
        assertThat(errors, is(not(empty())));
        assertThat(errors.get(0).getDefaultMessage(), is("StateAbbreviation cannot be deleted because it is associated with other entities. "
                        + "Associated entities must be deleted before deleting this entity"));
    }
    
    @Test
    public void districtHasStudents() {
        //Mock Data
        DistrictEntity de = new DistrictEntity();
        de.setEntityId("D123");
        de.setStateAbbreviation("WI");
        
        //SUT
        List<FieldError> errors = verifier.verify(de);
        
        //Verify
        assertThat(errors, is(not(empty())));
        assertThat(errors.get(0).getDefaultMessage(), is("LocalEducationAgencyIdentifier cannot be deleted because it is associated with other entities. "
                        + "Associated entities must be deleted before deleting this entity"));
    }
    
    @Test
    public void institutionHasStudents() {
        //Mock Data
        InstitutionEntity ie = new InstitutionEntity();
        ie.setEntityId("11990");
        ie.setStateAbbreviation("MN");
        
        //SUT
        List<FieldError> errors = verifier.verify(ie);
        
        //Verify
        assertThat(errors, is(not(empty())));
        assertThat(errors.get(0).getDefaultMessage(), is("InstitutionIdentifier cannot be deleted because it is associated with other entities. "
                        + "Associated entities must be deleted before deleting this entity"));
    }
}
