/*
Educational Online Test Delivery System Copyright (c) 2013 American Institutes for Research

Distributed under the AIR Open Source License, Version 1.0 See accompanying file AIR-License-1_0.txt or at
http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 */

package org.opentestsystem.delivery.testreg.integration.eligibility;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.junit.Assert.assertThat;

import org.joda.time.DateTime;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.opentestsystem.delivery.testreg.domain.Action;
import org.opentestsystem.delivery.testreg.domain.Assessment;
import org.opentestsystem.delivery.testreg.domain.Assessment.EligibilityType;
import org.opentestsystem.delivery.testreg.domain.event.AssessmentModificationEvent;
import org.opentestsystem.delivery.testreg.eligibility.EligibilityEvaluator;
import org.opentestsystem.delivery.testreg.integration.AbstractPersistenceEmbeddedTest;
import org.opentestsystem.delivery.testreg.service.Sb11EntityRepositoryService;
import org.opentestsystem.delivery.testreg.service.TestRegPersister;
import org.opentestsystem.delivery.testreg.service.TestRegUberEntityRelationshipService;
import org.opentestsystem.shared.progman.client.ProgManClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.messaging.Message;
import org.springframework.integration.channel.QueueChannel;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

// ignore all tests until assessment refactored to use sb11nonentityservice rather than assessmentservice
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "classpath:test-event-noconsumer-context.xml" })
public class AssessmentEventTest extends AbstractPersistenceEmbeddedTest {

    @Mock
    private ProgManClient progmanClient;

    @Mock
    private Sb11EntityRepositoryService sb11EntityService;

    @Mock
    private TestRegUberEntityRelationshipService uberRelationshipService;

    @Autowired
    private QueueChannel testChannel;

    @Autowired
    private TestRegPersister assessService;

    @InjectMocks
    @Autowired
    private EligibilityEvaluator eligibilityEvaluator;

    private Assessment assess;

    @Before
    public void init() {

        MockitoAnnotations.initMocks(this);

        // init objects we use
        assess = new Assessment();
        assess.setEligibilityType(EligibilityType.EXPLICIT);
        assess.setNumGlobalOpportunities(1);
        assess.setTestName("test test");

        Assessment.TestWindow testWindow = new Assessment.TestWindow();
        testWindow.setBeginWindow(new DateTime());
        testWindow.setEndWindow(new DateTime().plusDays(5));

        assess.setTestWindow(new Assessment.TestWindow[] { testWindow });
    }

    @Ignore
    @Test
    public void testAssessmentInsert() {

        Assessment savedAssessment = assessService.saveDomainObject(assess);

        Message<?> message = testChannel.receive();
        assertThat(message, notNullValue());
        assertThat(((AssessmentModificationEvent) message.getPayload()).getSource().getId(),
                is(savedAssessment.getId()));
        assertThat(((AssessmentModificationEvent) message.getPayload()).getAction(), is(Action.ADD));
    }

    @Ignore
    @Test
    public void testAssessmentUpdate() {
        Assessment savedAssessment = assessService.saveDomainObject(assess);

        Message<?> message = testChannel.receive(); // just receive the message and throw away, this is from the insert

        savedAssessment.setTestName("updated name");

        Assessment updatedAssessment = assessService.updateDomainObject(savedAssessment);

        message = testChannel.receive();
        assertThat(message, notNullValue());
        assertThat(((AssessmentModificationEvent) message.getPayload()).getSource().getId(),
                is(updatedAssessment.getId()));
        assertThat(((AssessmentModificationEvent) message.getPayload()).getSource().getTestName(), is("updated name"));
        assertThat(((AssessmentModificationEvent) message.getPayload()).getAction(), is(Action.UPD));

    }

    @Ignore
    @Test
    public void testAssessmentDelete() {
        Assessment savedAssessment = assessService.saveDomainObject(assess);

        Message<?> message = testChannel.receive(); // just receive the message and throw away, this is from the insert

        assessService.deleteDomainObject(savedAssessment);

        message = testChannel.receive();
        assertThat(message, notNullValue());
        assertThat(((AssessmentModificationEvent) message.getPayload()).getSource().getId(),
                is(savedAssessment.getId()));
        assertThat(((AssessmentModificationEvent) message.getPayload()).getAction(), is(Action.DEL));

    }

}
