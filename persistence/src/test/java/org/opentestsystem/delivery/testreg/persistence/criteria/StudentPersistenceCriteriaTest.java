/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria;

import static org.hamcrest.collection.IsCollectionWithSize.hasSize;
import static org.hamcrest.collection.IsEmptyCollection.empty;
import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;
import static org.opentestsystem.delivery.testreg.domain.FormatType.ACCOMMODATIONS;
import static org.opentestsystem.delivery.testreg.domain.FormatType.DISTRICT;
import static org.opentestsystem.delivery.testreg.domain.FormatType.INSTITUTION;
import static org.opentestsystem.delivery.testreg.domain.FormatType.STATE;
import static org.springframework.test.util.ReflectionTestUtils.setField;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.Accommodation;
import org.opentestsystem.delivery.testreg.domain.DistrictEntity;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.HierarchyLevel;
import org.opentestsystem.delivery.testreg.domain.InstitutionEntity;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.domain.Sb11SuperEntity;
import org.opentestsystem.delivery.testreg.domain.StateEntity;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.domain.TestRegistrationBase;
import org.opentestsystem.delivery.testreg.persistence.Verifier;
import org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.DistrictVerifier;
import org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.InstitutionVerifier;
import org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.StateVerifier;
import org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.student.AccommodationVerifier;
import org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.student.GroupOfInstitutionsVerifier;
import org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.student.InstitutionDistrictCrossVerifier;
import org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.student.InstitutionGroupOfInstitutionsCrossVerifier;
import org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.student.InstitutionParentVerifier;
import org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.student.StudentDistrictVerifier;
import org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.student.StudentExternalIdVerifier;
import org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.student.StudentInstitutionVerifier;
import org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.student.StudentStateVerifier;
import org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.student.StudentVerifierChain;
import org.opentestsystem.delivery.testreg.service.Sb11EntityRepositoryService;
import org.opentestsystem.delivery.testreg.service.StudentService;
import org.opentestsystem.shared.progman.client.domain.TenantType;
import org.springframework.validation.ObjectError;

public class StudentPersistenceCriteriaTest {

    StudentPersistenceCriteria studentPersistenceCriteria;
    MockEntityRepositoryService mockSb11EntityRepositoryService;

    @Before
    public void setup() {
        studentPersistenceCriteria = new StudentPersistenceCriteria();
        mockSb11EntityRepositoryService = new MockEntityRepositoryService();

        InstitutionGroupOfInstitutionsCrossVerifier institutionGroupOfInstitutionsCrossVerifier = new InstitutionGroupOfInstitutionsCrossVerifier();
        setSb11EntityRepositoryService(institutionGroupOfInstitutionsCrossVerifier);

        InstitutionDistrictCrossVerifier insCrossVerifier = new InstitutionDistrictCrossVerifier();
        setSb11EntityRepositoryService(insCrossVerifier);

        GroupOfInstitutionsVerifier goiVerifier = new GroupOfInstitutionsVerifier();
        setSb11EntityRepositoryService(goiVerifier);
        setField(goiVerifier, "institutionGroupOfInstitutionsCrossVerifier",
                institutionGroupOfInstitutionsCrossVerifier);

        InstitutionParentVerifier institutionParentVerifier = new InstitutionParentVerifier();
        setSb11EntityRepositoryService(institutionParentVerifier);
        setField(institutionParentVerifier, "groupOfInstitutionsVerifier", goiVerifier);
        setField(institutionParentVerifier, "institutionDistrictCrossVerifier", insCrossVerifier);

        InstitutionVerifier<Student> institutionVerifier = new StudentInstitutionVerifier();
        setSb11EntityRepositoryService(institutionVerifier);
        setField(institutionVerifier, "institutionParentVerifier", institutionParentVerifier);

        DistrictVerifier<Student> districtVerifier = new StudentDistrictVerifier();
        setSb11EntityRepositoryService(districtVerifier);

        StateVerifier<Student> stateVerifier = new StudentStateVerifier();
        setSb11EntityRepositoryService(stateVerifier);

        StudentExternalIdVerifier studentExternalIdVerifier = new StudentExternalIdVerifier();
        setField(studentExternalIdVerifier, "studentService", new MockStudentService());

        StudentVerifierChain studentVerifierChain = new StudentVerifierChain();
        // setField(studentVerifierChain, "stateVerifier", stateVerifier);

        AccommodationVerifier accVerifier = new AccommodationVerifier();
        Map<Class<? extends TestRegistrationBase>, Map<FormatType, Verifier<? extends TestRegistrationBase>>> verifierMap = new HashMap<>();
        Map<FormatType, Verifier<? extends TestRegistrationBase>> studentVerifierMap = new HashMap<>();
        setField(studentVerifierChain, "studentExternalIdVerifier", studentExternalIdVerifier);
        studentVerifierMap.put(STATE, stateVerifier);
        studentVerifierMap.put(DISTRICT, districtVerifier);
        studentVerifierMap.put(INSTITUTION, institutionVerifier);
        studentVerifierMap.put(ACCOMMODATIONS, accVerifier);

        verifierMap.put(Student.class, studentVerifierMap);

        setField(studentVerifierChain, "verifierMap", verifierMap);

        setField(studentPersistenceCriteria, "studentVerifierChain", studentVerifierChain);
    }

    private void setSb11EntityRepositoryService(Verifier<Student> verifier) {
        setField(verifier, "sb11EntityRepositoryService", mockSb11EntityRepositoryService);
    }

    @Test
    public void testValidStudent() {
        StateEntity mn = new StateEntity();
        mn.setEntityId("MN");

        DistrictEntity mdw = new DistrictEntity();
        mdw.setEntityId("01A234");
        mdw.setStateAbbreviation("MN");

        InstitutionEntity ie = new InstitutionEntity();
        ie.setEntityId("001A9919");
        ie.setStateAbbreviation("MN");
        ie.setParentEntityId("01A234");
        ie.setParentEntityType(HierarchyLevel.DISTRICT);

        Student student = new Student();
        student.setStateAbbreviation("MN");
        student.setDistrictIdentifier("01A234");
        student.setInstitutionIdentifier("001A9919");

        mockSb11EntityRepositoryService.setAll(mn, mdw, ie);
        assertThat(studentPersistenceCriteria.validate(student), is(empty()));
    }

    @Test
    public void testNoStateFound() {
        DistrictEntity mdw = new DistrictEntity();
        mdw.setStateAbbreviation("MN");
        mdw.setEntityId("01A234");

        InstitutionEntity ie = new InstitutionEntity();
        ie.setEntityId("001A9919");
        ie.setParentEntityId("01A234");
        ie.setStateAbbreviation("MN");

        Student student = new Student();
        student.setStateAbbreviation("MN");
        student.setDistrictIdentifier("01A234");
        student.setInstitutionIdentifier("001A9919");

        mockSb11EntityRepositoryService.setAll(null, mdw, ie);

        List<? extends ObjectError> errors = studentPersistenceCriteria.validate(student);
        assertThat(errors, hasSize(1));
        assertThat(errors.get(0).getDefaultMessage(), is("State Abbreviation not found in the database"));
    }

    @Test
    public void testNoDistrictFound() {
        StateEntity mn = new StateEntity();
        mn.setEntityId("MN");

        InstitutionEntity ie = new InstitutionEntity();
        ie.setEntityId("001A9919");
        ie.setParentEntityId("01A234");
        ie.setParentEntityType(HierarchyLevel.DISTRICT);

        Student student = new Student();
        student.setStateAbbreviation("MN");
        student.setDistrictIdentifier("01A234");
        student.setInstitutionIdentifier("001A9919");

        mockSb11EntityRepositoryService.setAll(mn, null, ie);

        List<? extends ObjectError> errors = studentPersistenceCriteria.validate(student);
        assertThat(errors, hasSize(1));
        assertThat(errors.get(0).getDefaultMessage(), is("Responsible District Identifier not found in the database"));
    }

    @Test
    public void testInstitutionNotFound() {
        StateEntity mn = new StateEntity();
        mn.setEntityId("MN");

        DistrictEntity mdw = new DistrictEntity();
        mdw.setEntityId("01A234");
        mdw.setStateAbbreviation("MN");

        Student student = new Student();

        mockSb11EntityRepositoryService.setAll(mn, mdw, null);

        List<? extends ObjectError> errors = studentPersistenceCriteria.validate(student);
        assertThat(errors, hasSize(1));
        assertThat(errors.get(0).getDefaultMessage(),
                is("Responsible Institution Identifier not found in the database"));
    }

    /**
     * This is obsolete
     */
    /*
     * @Test public void testDistrictNotInState() { StateEntity mn = new StateEntity(); mn.setEntityId("MN");
     * 
     * DistrictEntity mdw = new DistrictEntity(); mdw.setEntityId("01A234"); mdw.setStateAbbreviation("WI");
     * 
     * InstitutionEntity ie = new InstitutionEntity(); ie.setEntityId("001A9919"); ie.setParentEntityId("01A234");
     * ie.setParentEntityType(HierarchyLevel.DISTRICT);
     * 
     * Student student = new Student(); student.setStateAbbreviation("MN"); student.setDistrictIdentifier("01A234");
     * student.setInstitutionIdentifier("001A9919");
     * 
     * mockSb11EntityRepositoryService.setAll(mn, mdw, ie); List<? extends ObjectError> errors =
     * studentPersistenceCriteria.validate(student); assertThat(errors, hasSize(1));
     * assertThat(errors.get(0).getDefaultMessage(), }
     */

    @Test
    public void testDistrictNotAssociated() {
        StateEntity mn = new StateEntity();
        mn.setEntityId("MN");

        DistrictEntity mdw = new DistrictEntity();
        mdw.setEntityId("01A234");
        mdw.setStateAbbreviation("MN");

        InstitutionEntity ie = new InstitutionEntity();
        ie.setEntityId("001A9919");
        ie.setParentEntityType(HierarchyLevel.DISTRICT);
        ie.setParentEntityId("KL123");

        Student student = new Student();
        student.setStateAbbreviation("MN");
        student.setDistrictIdentifier("01A234");
        student.setInstitutionIdentifier("001A9919");

        mockSb11EntityRepositoryService.setAll(mn, mdw, ie);

        List<? extends ObjectError> errors = studentPersistenceCriteria.validate(student);
        assertThat(errors, hasSize(1));
        assertThat(errors.get(0).getDefaultMessage(),
                is("Institution Identifier is not associated with the District Identifier"));
    }

    @Test
    public void testDuplicateAccommodations() {
        StateEntity mn = new StateEntity();
        mn.setEntityId("MN");

        DistrictEntity mdw = new DistrictEntity();
        mdw.setEntityId("01A234");
        mdw.setStateAbbreviation("MN");

        InstitutionEntity ie = new InstitutionEntity();
        ie.setEntityId("001A9919");
        ie.setParentEntityId("01A234");
        ie.setParentEntityType(HierarchyLevel.DISTRICT);

        Student student = new Student();
        student.setStateAbbreviation("MN");
        student.setDistrictIdentifier("01A234");
        student.setInstitutionIdentifier("001A9919");
        student.setEntityId("110AA");

        List<Accommodation> accommodations = new ArrayList<Accommodation>();
        Accommodation accommodation = new Accommodation();
        accommodation.setStudentId("110AA");
        accommodation.setStateAbbreviation("WI");
        accommodation.setSubject("MATH");
        accommodation.setAmericanSignLanguage("TDS_ASL0");
        accommodation.setClosedCaptioning("TDS_ClosedCap1");
        accommodation.setColorContrast("TDS_CCYellowB");
        accommodation.setTextToSpeech("TDS_TTS_Item");
        accommodation.setLanguage("ENU");
        accommodation.setTranslation("TDS_WL_ILOGlossary");
        accommodation.setPrintOnDemand("TDS_PoD0");
        accommodation.setPrintSize("TDS_PS_L1");

        Accommodation accommodation1 = new Accommodation();
        accommodation1.setStudentId("110AA");
        accommodation1.setStateAbbreviation("WI");
        accommodation1.setSubject("MATH");
        accommodation1.setAmericanSignLanguage("TDS_ASL1");
        accommodation1.setClosedCaptioning("TDS_ClosedCap1");
        accommodation1.setColorContrast("TDS_CCYellowB");
        accommodation1.setTextToSpeech("TDS_TTS_Item");
        accommodation1.setLanguage("ENU");
        accommodation1.setTranslation("TDS_WL_ILOGlossary");
        accommodation1.setPrintOnDemand("TDS_PoD0");
        accommodation1.setPrintSize("TDS_PS_L1");
        accommodations.add(accommodation);
        accommodations.add(accommodation1);
        student.setAccommodations(accommodations);
        mockSb11EntityRepositoryService.setAll(mn, mdw, ie);

        List<? extends ObjectError> errors = studentPersistenceCriteria.validate(student);
        assertThat(errors, hasSize(1));
        assertThat(errors.get(0).getDefaultMessage(), is("Duplicate subject MATH in accommodation"));

    }

    private class MockEntityRepositoryService implements Sb11EntityRepositoryService {

        StateEntity state;
        DistrictEntity district;
        InstitutionEntity institution;

        public MockEntityRepositoryService() {}

        @SuppressWarnings("unused")
        public MockEntityRepositoryService(StateEntity state, DistrictEntity district, InstitutionEntity institution) {
            this.state = state;
            this.district = district;
            this.institution = institution;
        }

        public void setAll(StateEntity state, DistrictEntity district, InstitutionEntity institution) {
            this.state = state;
            this.district = district;
            this.institution = institution;
        }

        @SuppressWarnings("unchecked")
        @Override
        public <S extends Sb11SuperEntity> S findByEntityId(String entityId, Class<S> clazz) {
            if (clazz.equals(StateEntity.class)) {
                return (S) state;
            } else {
                return null;
            }
        }

        @SuppressWarnings("unchecked")
        @Override
        public <S extends Sb11Entity> S findByEntityIdAndStateAbbreviation(String entityId, String stateAbbreviation,
                Class<S> clazz) {
            if (clazz.equals(StateEntity.class)) {
                return (S) state;
            } else if (clazz.equals(DistrictEntity.class)) {
                return (S) district;
            } else if (clazz.equals(InstitutionEntity.class)) {
                return (S) institution;
            } else {
                return null;
            }
        }

        @Override
        public <S extends Sb11Entity> List<S> findAllByParentEntityTypeAndParentEntityId(String parentEntityType,
                String parentEntityId, FormatType formatType) {
            // TODO Auto-generated method stub
            return null;
        }

        @Override
        public <S extends Sb11Entity> List<S> findAllByParentEntityType(String parentEntityType,
                HierarchyLevel hierarchyLevel) {
            // TODO Auto-generated method stub
            return null;
        }

        @Override
        public <S extends Sb11Entity> List<S> findAllByParentEntityTypeAndParentId(String parentEntityType,
                String parentMongoId, Class<S> clazz) {
            // TODO Auto-generated method stub
            return null;
        }

        @Override
        public <S extends Sb11SuperEntity> S findByEntityId(String entityId, TenantType tenantType) {
            return null;
        }

        @Override
        public <S extends Sb11Entity> S findByEntityIdAndStateAbbreviation(String entityId, String stateAbbreviation,
                TenantType tenantType) {
            return null;
        }

        @Override
        public <S extends Sb11Entity> List<S> findAllByEntityId(String entityId, Class<S> clazz) {
            return null;
        }

        @Override
        public <S extends Sb11Entity> List<S> findAllByEntityIdAndEntityName(String entityId, String entityName,
                Class<S> clazz) {
            return null;
        }

        @Override
        public <S extends Sb11Entity> S getParentEntity(S entity) {
            // TODO Auto-generated method stub
            return null;
        }

    }

    private class MockStudentService implements StudentService {

        @Override
        public Student findByStudentIdAndStateAbbreviation(String studentId, String stateAbbreviation) {
            // TODO Auto-generated method stub
            return null;
        }

        @Override
        public Student findByExternalSsidAndStateAbbreviation(String externalSsid, String stateAbbreviation) {
            // TODO Auto-generated method stub
            return null;
        }

        @Override
        public List<Student> findByInstitutionIdentifierAndStateAbbreviation(String institutionIdentifier,
                String stateAbbreviation) {
            return null;
        }

    }

}
