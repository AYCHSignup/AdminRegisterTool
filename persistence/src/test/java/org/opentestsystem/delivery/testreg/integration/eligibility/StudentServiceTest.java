/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.integration.eligibility;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.junit.Assert.assertThat;
import static org.opentestsystem.delivery.testreg.domain.Student.Gender.Female;
import static org.opentestsystem.delivery.testreg.domain.Student.Gender.Male;

import java.util.ArrayList;
import java.util.List;

import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.integration.AbstractPersistenceEmbeddedTest;
import org.opentestsystem.delivery.testreg.service.StudentService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;

public class StudentServiceTest extends AbstractPersistenceEmbeddedTest {

    @Autowired
    private StudentService studentService;

    @Autowired
    private MongoTemplate mongoTemplate;

    private Student createStudentObject() {
        Student student = new Student();
        student.setDistrictIdentifier("101");
        student.setInstitutionIdentifier("10001");
        student.setLastName("LastNameTest");
        student.setFirstName("FNTest");
        student.setMiddleName("MS");
        student.setLanguageCode("tel");
        student.setBirthDate("2013-10-10");
        student.setExternalSsid("WI12345");
        student.setGradeLevelWhenAssessed("THIRDGRADE");
        student.setAmericanIndianOrAlaskaNative("No");
        student.setAsian("No");
        student.setBlackOrAfricanAmerican("No");
        student.setHispanicOrLatino("Yes");
        student.setWhite("No");
        student.setNativeHawaiianOrPacificIsland("No");
        student.setTwoOrMoreRaces("No");
        student.setiDEAIndicator("NO");
        student.setLepStatus("NO");
        student.setSection504Status("NO");
        student.setDisadvantageStatus("YES");
        student.setLanguageCode("tel");
        student.setTitle3ProgressStatus("PROGRESS");
        student.setMigrantStatus("YES");
        student.setFirstEntryDateIntoUsSchool("2014-09-01");
        student.setLepEntryDate("2010-10-10");
        student.setLepExitDate("2010-10-20");
        student.setTitle3ProgramType("DualLanguage");
        student.setPrimaryDisabilityType("AUT");
        student.setDelete("N");
        return student;
    }

    @Test
    public void testFindAStudent() {
        List<Student> students = new ArrayList<Student>();

        Student mnStudent = createStudentObject();
        mnStudent.setEntityId("VIKINGS1234568900109");
        mnStudent.setStateAbbreviation("MN");
        mnStudent.setGender(Male);
        mnStudent.setFirstName(null);

        Student wiStudent = createStudentObject();
        wiStudent.setEntityId("PACK1288237673");
        wiStudent.setStateAbbreviation("WI");
        wiStudent.setGender(Female);

        Student ninersStudent = createStudentObject();
        ninersStudent.setEntityId("SF4908827737676");
        ninersStudent.setStateAbbreviation("CA");
        ninersStudent.setGender(Male);

        Student ridersStudent = createStudentObject();
        ridersStudent.setEntityId("OK8812676266");
        ridersStudent.setExternalSsid("W232334");
        ridersStudent.setStateAbbreviation("CA");
        ridersStudent.setGender(Female);

        Student chargerStudent = createStudentObject();
        chargerStudent.setEntityId("BOLT661662766");
        chargerStudent.setExternalSsid("P232334");
        chargerStudent.setStateAbbreviation("CA");
        chargerStudent.setGender(Male);

        students.add(mnStudent);
        students.add(wiStudent);
        students.add(ninersStudent);
        students.add(ridersStudent);
        students.add(chargerStudent);

        mongoTemplate.insert(students, Student.class);

        Student student = studentService.findByStudentIdAndStateAbbreviation("OK8812676266", "CA");
        assertThat(student, is(notNullValue()));
        assertThat(student.getGender(), is(Female));
        assertThat(student.getFirstName(), is(notNullValue()));

        student = studentService.findByStudentIdAndStateAbbreviation("VIKINGS1234568900109", "MN");
        assertThat(student, is(notNullValue()));
        assertThat(student.getGender(), is(Male));
        assertThat(student.getFirstName(), is(nullValue()));

        student = studentService.findByStudentIdAndStateAbbreviation("PACK1288237673", "CA");
        assertThat(student, is(nullValue()));
    }

}
