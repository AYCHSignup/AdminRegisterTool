/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.user;

import static org.hamcrest.collection.IsCollectionWithSize.hasSize;
import static org.hamcrest.collection.IsEmptyCollection.empty;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsNot.not;
import static org.junit.Assert.assertThat;
import static org.springframework.test.util.ReflectionTestUtils.setField;

import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.HierarchyLevel;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.domain.Sb11SuperEntity;
import org.opentestsystem.delivery.testreg.domain.StateEntity;
import org.opentestsystem.delivery.testreg.domain.User;
import org.opentestsystem.delivery.testreg.domain.User.RoleAssociation;
import org.opentestsystem.delivery.testreg.persistence.Verifier;
import org.opentestsystem.delivery.testreg.service.Sb11EntityRepositoryService;
import org.opentestsystem.shared.progman.client.domain.TenantType;
import org.springframework.validation.FieldError;

public class UserParentVerifierTest {

    Verifier<User> verifier;

    User user;

    @Before
    public void before() {
        this.verifier = new UserParentVerifier();
        setField(this.verifier, "sb11EntityRepositoryService", new MockEntityRepositoryService(false));

        this.user = new User();
        final RoleAssociation roleAss = new RoleAssociation();
        roleAss.setAssociatedEntityId("WI");
        roleAss.setLevel(HierarchyLevel.STATE);
        roleAss.setStateAbbreviation("WI");
        this.user.addRoleAssociation(roleAss);
    }

    @Test
    public void testSuccess() {
        final List<FieldError> errors = this.verifier.verify(this.user);
        assertThat(errors, is(empty()));
    }

    @Test
    public void testFailure() {
        setField(this.verifier, "sb11EntityRepositoryService", new MockEntityRepositoryService(true));
        final List<FieldError> errors = this.verifier.verify(this.user);

        assertThat(errors, is(not(empty())));
        assertThat(errors, hasSize(1));
        assertThat(errors.get(0).getDefaultMessage(),
                is("AssociatedEntityID not found in the database for the type STATE"));
    }

    private class MockEntityRepositoryService implements Sb11EntityRepositoryService {

        boolean returnNull;

        private MockEntityRepositoryService(final boolean nulls) {
            this.returnNull = nulls;
        }

        @SuppressWarnings("unchecked")
        @Override
        public <S extends Sb11SuperEntity> S findByEntityId(final String entityId, final Class<S> clazz) {
            final StateEntity entity = new StateEntity();
            entity.setEntityId("WI");
            return (S) (this.returnNull ? null : entity);
        }

        @SuppressWarnings("unchecked")
        @Override
        public <S extends Sb11Entity> S findByEntityIdAndStateAbbreviation(final String entityId, final String stateAbbreviation, final Class<S> clazz) {
            final StateEntity entity = new StateEntity();
            entity.setEntityId("WI");
            return (S) (this.returnNull ? null : entity);
        }

        @Override
        public <S extends Sb11Entity> List<S> findAllByParentEntityTypeAndParentEntityId(final String parentEntityType, final String parentEntityId, final FormatType formatType) {
            return null;
        }

        @Override
        public <S extends Sb11Entity> List<S> findAllByParentEntityType(final String parentEntityType, final HierarchyLevel hierarchyLevel) {
            return null;
        }

        @Override
        public <S extends Sb11Entity> List<S> findAllByParentEntityTypeAndParentId(final String parentEntityType, final String parentMongoId, final Class<S> clazz) {
            return null;
        }

        @Override
        public <S extends Sb11SuperEntity> S findByEntityId(final String entityId, final TenantType tenantType) {
            return null;
        }

        @Override
        public <S extends Sb11Entity> S findByEntityIdAndStateAbbreviation(final String entityId, final String stateAbbreviation, final TenantType tenantType) {
            return null;
        }

        @Override
        public <S extends Sb11Entity> List<S> findAllByEntityId(final String entityId, final Class<S> clazz) {
            return null;
        }

        @Override
        public <S extends Sb11Entity> List<S> findAllByEntityIdAndEntityName(final String entityId, final String entityName, final Class<S> clazz) {
            return null;
        }

        @Override
        public <S extends Sb11Entity> S getParentEntity(final S entity) {
            return null;
        }
    }
}
