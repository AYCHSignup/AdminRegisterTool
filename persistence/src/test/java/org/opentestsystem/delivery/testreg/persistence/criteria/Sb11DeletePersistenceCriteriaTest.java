/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria;

import static org.hamcrest.collection.IsCollectionWithSize.hasSize;
import static org.hamcrest.collection.IsEmptyCollection.empty;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsNot.not;
import static org.hamcrest.core.IsNull.notNullValue;
import static org.junit.Assert.assertThat;

import java.util.List;

import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.DistrictEntity;
import org.opentestsystem.delivery.testreg.domain.GroupOfStatesEntity;
import org.opentestsystem.delivery.testreg.domain.InstitutionEntity;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.domain.StateEntity;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.domain.User;
import org.opentestsystem.delivery.testreg.domain.User.RoleAssociation;
import org.opentestsystem.delivery.testreg.integration.AbstractPersistenceEmbeddedTest;
import org.opentestsystem.delivery.testreg.persistence.GroupOfStatesEntityRepository;
import org.opentestsystem.delivery.testreg.service.TestRegPersister;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.validation.ObjectError;

public class Sb11DeletePersistenceCriteriaTest extends AbstractPersistenceEmbeddedTest {

    @Autowired
    @Qualifier("sb11DeletePersistenceCriteria")
    private BusinessValidator<Sb11Entity> sb11DeleteValidator;

    @Autowired
    private TestRegPersister sb11EntityService;

    @Autowired
    private GroupOfStatesEntityRepository groupOfStatesRepository;

    @Test
    public void testDeleteSuccess() {
        StateEntity stateEntity = savedStateEntity();
        assertThat(stateEntity, is(notNullValue()));

        Sb11Entity stateEntityForDelete = new StateEntity.Builder("MT", "Montana", "GROUPOFSTATES", "12345", "DEL")
                .build();
        List<? extends ObjectError> errors = sb11DeleteValidator.validate(stateEntityForDelete);
        assertThat(errors, is(empty()));
    }

    @Test
    public void testDeleteFailure() {
        Sb11Entity sb11Entity = new StateEntity.Builder("DE", "Delaware", "GROUPOFSTATES", "12345", "DEL").build();
        List<? extends ObjectError> errors = sb11DeleteValidator.validate(sb11Entity);
        assertThat(errors, is(not(empty())));
        assertThat(errors, hasSize(1));
    }

    @Test
    public void testDeleteFailureWhenChildExists() {
        StateEntity stateEntity = savedStateEntity();
        assertThat(stateEntity, is(notNullValue()));
        // try deleting group of states. This will throw error as there is a state entity associated with this group of
        // states.
        Sb11Entity sb11Entity = new GroupOfStatesEntity.Builder(new Object[] { "12345", "MIDWEST STATES", "CLIENT",
                "000000", "DEL" }).build();
        List<? extends ObjectError> errors = sb11DeleteValidator.validate(sb11Entity);
        assertThat(errors, is(not(empty())));
        assertThat(errors, hasSize(1));
    }

    @Test
    public void testDeleteFailureStudentDependency() { // State is associated with Student
        // Save a the State for Student to use
        StateEntity stateEntity = savedStateEntity();
        assertThat(stateEntity, is(notNullValue()));

        // Save a Student
        Student student = savedStudent();
        assertThat(student, is(notNullValue()));

        // try deleting the State attached to Student
        stateEntity = new StateEntity.Builder("MT", "Montana", "GROUPOFSTATES", "12345", "DEL").build();
        List<? extends ObjectError> errors = sb11DeleteValidator.validate(stateEntity);
        assertThat(errors, is(not(empty())));
        assertThat(errors, hasSize(1));
        assertThat(errors.get(0).getDefaultMessage(),
                is("StateAbbreviation cannot be deleted because it is associated with other entities. "
                        + "Associated entities must be deleted before deleting this entity"));
    }

    @Test
    public void testDeleteFailureUserDependency() {
        // Save an Institution
        InstitutionEntity institution = savedInstitution();
        assertThat(institution, is(notNullValue()));

        // Save a user with dependency to Institution
        User user = savedUser();
        assertThat(user, is(notNullValue()));

        // try deleting the saved institution
        institution = new InstitutionEntity.Builder("123", "Middleton High School", "DISTRICT", "1122", "CA001", "MT",
                "DEL").build();
        List<? extends ObjectError> errors = sb11DeleteValidator.validate(institution);
        assertThat(errors, is(not(empty())));
        assertThat(errors, hasSize(1));
        assertThat(errors.get(0).getDefaultMessage(),
                is("InstitutionIdentifier cannot be deleted because it is associated with other entities. "
                        + "Associated entities must be deleted before deleting this entity"));
    }

    private StateEntity savedStateEntity() {
        groupOfStatesRepository.save(buildGroupOfStatesEntity());
        StateEntity stateEntity = new StateEntity.Builder("MT", "Montana", "GROUPOFSTATES", "12345", "ADD").build();
        return sb11EntityService.saveDomainObject(stateEntity);
    }

    private GroupOfStatesEntity buildGroupOfStatesEntity() {
        GroupOfStatesEntity.Builder groupOfStatesEntity = new GroupOfStatesEntity.Builder(new Object[] { "12345",
                "MIDWEST STATES", "CLIENT", "000000", "ADD" });
        return groupOfStatesEntity.build();
    }

    private Student savedStudent() {
        Student student = new Student();
        student.setEntityId("123456");
        student.setStateAbbreviation("MT");
        student.setDistrictIdentifier("101");
        student.setInstitutionIdentifier("10001");
        student.setLastName("LastNameTest");
        student.setFirstName("FNTest");
        student.setMiddleName("MS");
        student.setLanguageCode("tel");
        student.setBirthDate("2013-10-10");
        student.setExternalSsid("WI12345");
        student.setGradeLevelWhenAssessed("THIRDGRADE");
        student.setGender("MALE");
        student.setHispanicOrLatino("Yes");
        student.setAmericanIndianOrAlaskaNative("NO");
        student.setAsian("NO");
        student.setBlackOrAfricanAmerican("NO");
        student.setWhite("Yes");
        student.setNativeHawaiianOrPacificIsland("NO");
        student.setTwoOrMoreRaces("NO");
        student.setiDEAIndicator("NO");
        student.setLepStatus("NO");
        student.setSection504Status("NO");
        student.setDisadvantageStatus("YES");
        student.setLanguageCode("tel");
        student.setTitle3ProgressStatus("PROGRESS");
        student.setMigrantStatus("YES");
        student.setFirstEntryDateIntoUsSchool("2014-09-01");
        student.setLepEntryDate("2010-10-10");
        student.setLepExitDate("2010-10-20");
        student.setTitle3ProgramType("DualLanguage");
        student.setPrimaryDisabilityType("AUT");
        student.setDelete("N");
        return sb11EntityService.saveDomainObject(student);
    }

    private InstitutionEntity savedInstitution() {
        @SuppressWarnings("unused")
        StateEntity stateEntity = savedStateEntity();
        DistrictEntity district = new DistrictEntity.Builder("CA001", "DISTRICT1001", "1122", "STATE", "MT", "MT", "")
                .build();
        sb11EntityService.saveDomainObject(district);

        InstitutionEntity institution = new InstitutionEntity();
        institution.setEntityId("123");
        institution.setEntityName("Middleton High School");
        institution.setParentEntityType("DISTRICT");
        institution.setNationwideIdentifier("11221");
        institution.setParentEntityId("CA001");
        institution.setStateAbbreviation("MT");
        institution.setDelete("");
        return sb11EntityService.saveDomainObject(institution);
    }

    private User savedUser() {
        User user = new User();
        user.setFirstName("Bob");
        user.setLastName("Smith");
        user.setEmail("bob@smith.com");
        RoleAssociation association = new RoleAssociation();
        user.addRoleAssociation(association);
        user.setFirstName("fName");
        user.setLastName("lName");
        association.setRole("Admin");
        association.setAssociatedEntityId("123");
        association.setLevel("INSTITUTION");
        association.setStateAbbreviation("MO");
        return sb11EntityService.saveDomainObject(user);
    }
}
