/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.student;

import static org.hamcrest.core.IsCollectionContaining.hasItem;
import static org.junit.Assert.assertThat;
import static org.opentestsystem.delivery.testreg.domain.FormatType.DESIGNATEDSUPPORTSANDACCOMMODATIONS;
import static org.opentestsystem.delivery.testreg.domain.FormatType.DISTRICT;
import static org.opentestsystem.delivery.testreg.domain.FormatType.INSTITUTION;
import static org.opentestsystem.delivery.testreg.domain.FormatType.STATE;
import static org.springframework.test.util.ReflectionTestUtils.setField;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.domain.TestRegistrationBase;
import org.opentestsystem.delivery.testreg.persistence.Verifier;
import org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.student.StudentVerifierChain;
import org.springframework.validation.FieldError;

public class StudentVerifierChainTest {

    private Verifier<Student> verifier;
    List<String> invocationList;

    @SuppressWarnings("serial")
    @Before
    public void setup() {
        verifier = new StudentVerifierChain();
        invocationList = new ArrayList<>();
        setField(verifier, "studentExternalIdVerifier", new MockVerifier("studentExternalSsidVerifier"));
        setField(
                verifier,
                "verifierMap",
                new HashMap<Class<? extends TestRegistrationBase>, HashMap<FormatType, Verifier<? extends TestRegistrationBase>>>() {
                    {
                        put(Student.class, new HashMap<FormatType, Verifier<? extends TestRegistrationBase>>() {
                            {
                                put(STATE, new MockVerifier("StateVerifierCalled"));
                                put(DISTRICT, new MockVerifier("DistrictVerifierCalled"));
                                put(INSTITUTION, new MockVerifier("InstitutionVerifierCalled"));
                                put(DESIGNATEDSUPPORTSANDACCOMMODATIONS, new MockVerifier("AccommodationVerifierCalled"));
                            }
                        });

                    }
                });
    }

    @Test
    public void testAllVeifiersCalled() {
        verifier.verify(new Student());
        assertThat(invocationList, hasItem("studentExternalSsidVerifier"));
        assertThat(invocationList, hasItem("StateVerifierCalled"));
        assertThat(invocationList, hasItem("InstitutionVerifierCalled"));
        assertThat(invocationList, hasItem("AccommodationVerifierCalled"));
    }

    private class MockVerifier implements Verifier<Student> {

        private String flagToIdentifyInvocation;

        private MockVerifier(String flagToIdentifyInvocation) {
            this.flagToIdentifyInvocation = flagToIdentifyInvocation;
        }

        @Override
        public List<FieldError> verify(Student b) {
            invocationList.add(flagToIdentifyInvocation);
            return Collections.emptyList();
        }

    }
}
