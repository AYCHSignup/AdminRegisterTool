/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria.dependencyresolvers;

import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;
import static org.springframework.test.util.ReflectionTestUtils.setField;

import java.util.ArrayList;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.DistrictEntity;
import org.opentestsystem.delivery.testreg.domain.HierarchyLevel;
import org.opentestsystem.delivery.testreg.domain.InstitutionEntity;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.domain.User;
import org.opentestsystem.delivery.testreg.service.impl.Sb11EntityServiceImpl;
import org.opentestsystem.shared.security.domain.permission.UserRole;
import org.opentestsystem.shared.security.integration.PermissionClient;

public class UserDependencyResolverTest {

    private TestRegistrationEntitiesDependencyResolver<User> userDependencyResolver;

    @Before
    public void setup() {
        userDependencyResolver = new UserDependencyResolver();
        setField(userDependencyResolver, "sb11EntityRepositoryService", new Sb11EntityServiceImpl<Sb11Entity>() {
            @SuppressWarnings({ "unchecked", "serial" })
            @Override
            public <S extends Sb11Entity> S findByEntityIdAndStateAbbreviation(final String entityId, final String stateAbbreviation, final Class<S> clazz) {
                if (clazz.equals(DistrictEntity.class)) {
                    return (S) new DistrictEntity() {
                        {
                            setId("d12345992abdcf3454244332");
                        }
                    };
                }

                if (clazz.equals(InstitutionEntity.class)) {
                    return (S) new InstitutionEntity() {
                        {
                            setId("i23fge2h3utgh4hrf4fgs234231");
                        }
                    };
                }
                return null;
            }
        });
        setField(userDependencyResolver, "permissionClient", new PermissionClient() {
            public List<UserRole> getRoles() {
                UserRole role1 = new UserRole();
                role1.setRole("ADMINISTRATOR");
                UserRole role2 = new UserRole();
                role2.setRole("TEST LEADER");
                List<UserRole> list = new ArrayList<>();
                list.add(role1);
                list.add(role2);
                return list;
            }
        });
    }

    @Test
    public void testDependency() {
        @SuppressWarnings("serial")
        User user = new User() {
            {
                setRoleAssociations(new ArrayList<RoleAssociation>() {
                    {
                        RoleAssociation role = new RoleAssociation();
                        role.setAssociatedEntityId("I898889");
                        role.setRole("Test Yogi");
                        role.setLevel(HierarchyLevel.INSTITUTION);
                        add(role);
                    }
                });
            }
        };
        userDependencyResolver.resolveDependency(user);
        assertThat(user, is(notNullValue()));
        assertThat(user.getRoleAssociations().get(0).getAssociatedEntityMongoId(), is("i23fge2h3utgh4hrf4fgs234231"));
        assertThat(user.getRoleAssociations().get(0).getRole(), is("Test Yogi"));
    }

    @Test
    public void testRoleName() {
        @SuppressWarnings("serial")
        User user = new User() {
            {
                setRoleAssociations(new ArrayList<RoleAssociation>() {
                    {
                        RoleAssociation role = new RoleAssociation();
                        role.setAssociatedEntityId("I898889");
                        role.setRole("Test leader");
                        role.setLevel(HierarchyLevel.INSTITUTION);
                        add(role);
                    }
                });
            }
        };
        userDependencyResolver.resolveDependency(user);
        assertThat(user, is(notNullValue()));
        assertThat(user.getRoleAssociations().get(0).getAssociatedEntityMongoId(), is("i23fge2h3utgh4hrf4fgs234231"));
        assertThat(user.getRoleAssociations().get(0).getRole(), is("TEST LEADER"));
    }
}
