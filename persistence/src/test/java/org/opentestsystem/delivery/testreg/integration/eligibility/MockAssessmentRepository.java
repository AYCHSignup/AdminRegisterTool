/*
Educational Online Test Delivery System Copyright (c) 2013 American Institutes for Research

Distributed under the AIR Open Source License, Version 1.0 See accompanying file AIR-License-1_0.txt or at
http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 */

package org.opentestsystem.delivery.testreg.integration.eligibility;

import java.util.Collection;
import java.util.List;

import org.joda.time.DateTime;
import org.opentestsystem.delivery.testreg.domain.Assessment;
import org.opentestsystem.delivery.testreg.domain.Sb11NonEntity;
import org.opentestsystem.delivery.testreg.persistence.AssessmentRepository;
import org.opentestsystem.shared.search.domain.AbstractSearchRequest;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.mongodb.core.MongoOperations;
import org.springframework.data.mongodb.repository.query.MongoEntityInformation;
import org.springframework.data.mongodb.repository.support.SimpleMongoRepository;
import org.springframework.stereotype.Component;

@Component
public class MockAssessmentRepository extends SimpleMongoRepository<Assessment, String> implements AssessmentRepository {


    /**
     * Creates a new {@link org.springframework.data.mongodb.repository.support.SimpleMongoRepository} for the given {@link org.springframework.data.mongodb.repository.query.MongoEntityInformation} and {@link MongoTemplate}.
     *
     * @param metadata        must not be {@literal null}.
     * @param mongoOperations must not be {@literal null}.
     */
    public MockAssessmentRepository() {
        super(null, null);
    }

    @Override
    public SearchResponse<Assessment> search(final AbstractSearchRequest abstractSearchRequest) {
        return null;
    }

    @Override
    public <S extends Assessment> List<S> save(final Iterable<S> entites) {
        return null;
    }

    @Override
    public List<Assessment> findAll() {
        return null;
    }

    @Override
    public List<Assessment> findAll(final Sort sort) {
        return null;
    }

    @Override
    public Page<Assessment> findAll(final Pageable pageable) {
        return null;
    }

    @Override
    public <S extends Assessment> S save(final S entity) {
        return null;
    }

    @Override
    public Assessment findOne(final String id) {
        return null;
    }

    @Override
    public boolean exists(final String id) {
        return false;
    }

    @Override
    public Iterable<Assessment> findAll(final Iterable<String> ids) {
        return null;
    }

    @Override
    public long count() {
        return 0;
    }

    @Override
    public void delete(final String id) {
    }

    @Override
    public void delete(final Assessment entity) {
    }

    @Override
    public void delete(final Iterable<? extends Assessment> entities) {
    }

    @Override
    public void deleteAll() {
    }

    @Override
    public <T extends Sb11NonEntity> T findByAlternateKey(final AbstractSearchRequest searchRequest, final Class<T> clazz) {
        return null;
    }

    @Override
    public List<Assessment> findByEligibilityTypeAndTenantIdIsIn(final String eligibiltyType, final List<String> tenantIds) {
        return null;
    }

    @Override
    public List<Assessment> findByTestNameAndVersion(final String testName, final String version) {
        return null;
    }

    @Override
    public List<Assessment> findByTestNameAndTenantId(final String testName, final String tenantId) {
        return null;
    }

    @Override
    public Assessment findByTheAlternateKey(final AbstractSearchRequest searchRequest) {
        return null;
    }

    @Override
    public List<Assessment> findWithPossiblyNullLabel(final String testName, final String testLabel, final String tenantId, final String sourceTsb) {
        return null;
    }

    @Override
    public List<Assessment> findByTenantId(final String tenantId) {
        return null;
    }

    @Override
    public List<Assessment> findByEntityId(final String entityId) {
        return null;
    }

    @Override
    public Assessment findMaxOpportunities() {
        return null;
    }

    @Override
    public List<Assessment> findAllByTenantsAndBeginWindow(final Collection<String> inTenantsList, final DateTime inDate) {
        return null;
    }

}
