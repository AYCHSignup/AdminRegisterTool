/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria.verifiers;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.collection.IsEmptyCollection.empty;
import static org.hamcrest.core.IsNot.not;
import static org.junit.Assert.assertThat;

import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.DistrictEntity;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.InstitutionEntity;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.persistence.Verifier;
import org.opentestsystem.delivery.testreg.service.impl.Sb11EntityServiceImpl;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.validation.FieldError;

public class Sb11EntityAssociationVerifierTest {
    
    private Verifier<Sb11Entity> verifier;
    
    @Before
    public void setup(){
        verifier = new Sb11EntityAssociationVerifier();
        ReflectionTestUtils.setField(verifier, "sb11EntityService", new Sb11EntityServiceImpl<Sb11Entity>(){
            public boolean hasAssociatedEntity(final Sb11Entity entity) {
                if(entity.getFormatType().equals(FormatType.INSTITUTION) && entity.getEntityId().equals("I18889")) { //Setup some test data
                    return true;
                }
                return false;
            }
        });
    }
    
    @Test
    public void testDependencyFound() {
        //Mock data
        InstitutionEntity ie = new InstitutionEntity();
        ie.setEntityId("I18889");
        
        //Call Method under test
        List<FieldError> errors = verifier.verify(ie);
        
        //Verify
        assertThat(errors, is(not(empty())));
        assertThat(errors.get(0).getDefaultMessage(), is("InstitutionIdentifier cannot be deleted because it is associated with other entities. "
                        + "Associated entities must be deleted before deleting this entity"));
        
    }

    @Test
    public void testDependencyNotFound() {
        //Mock data
        DistrictEntity de = new DistrictEntity();
        
        //Call Method under test
        List<FieldError> errors = verifier.verify(de);
        
        //Verify
        assertThat(errors, is(empty()));
    }
}
