/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.assessment;

import static org.hamcrest.collection.IsCollectionWithSize.hasSize;
import static org.hamcrest.collection.IsEmptyCollection.empty;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsNot.not;
import static org.junit.Assert.assertThat;
import static org.springframework.test.util.ReflectionTestUtils.setField;

import java.util.ArrayList;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.Assessment;
import org.opentestsystem.delivery.testreg.domain.ExplicitEligibility;
import org.opentestsystem.delivery.testreg.integration.eligibility.MockAssessmentRepository;
import org.opentestsystem.delivery.testreg.integration.eligibility.MockExplicitEligibilityRepository;
import org.opentestsystem.delivery.testreg.persistence.Verifier;
import org.opentestsystem.shared.search.domain.AbstractSearchRequest;

public class AssessmentEligibilityUpdateVerifierTest {
    Verifier<Assessment> verifier;

    @Before
    public void setup() {
        verifier = new AssessmentEligibilityUpdateVerifier();
        setField(verifier, "assessmentRepository", new MockAssessmentRepository() {

            @Override
            public Assessment findByTheAlternateKey(AbstractSearchRequest createAlternateKeySearchRequest) {
                return new Assessment() {
                    private static final long serialVersionUID = 1L;
                    {
                        setTestName("MATH1.1_Form");
                        setTenantId("110001");
                        setVersion("1.1");

                    }
                };
            }
        });
        setField(verifier, "explicitEligibilityRepository", new MockExplicitEligibilityRepository() {

            @Override
            public List<ExplicitEligibility> findByTestNameAndTestVersion(String testName, String version) {
                List<ExplicitEligibility> eliList = new ArrayList<ExplicitEligibility>();
                ExplicitEligibility obj = new ExplicitEligibility();
                obj.setStateAbbreviation("WI");
                obj.setTestForm("MATH-101-11");
                eliList.add(obj);
                return eliList;
            }
        });
    }

    @Test
    public void testSuccess() {

        Assessment assessment = new Assessment();
        assessment.setTestName("MATH1.1_Form");
        assessment.setTenantId("110001");
        assessment.setVersion("1.1");
        List<String> testForm = new ArrayList<String>();
        testForm.add("MATH-101-11");
        assessment.setTestForm(testForm);
        assertThat(verifier.verify(assessment), is(empty()));
    }

    @Test
    public void testFailure() {
        Assessment assessment = new Assessment();
        assessment.setTestName("MATH1.1_Form");
        assessment.setTenantId("110001");
        assessment.setVersion("1.5");
        List<String> testForm = new ArrayList<String>();
        testForm.add("ENGLISH-101-11");
        assessment.setTestForm(testForm);
        assertThat(verifier.verify(assessment), is(not(empty())));
        assertThat(verifier.verify(assessment), hasSize(1));
        assertThat(verifier.verify(assessment).get(0).getRejectedValue().toString(), is("[ENGLISH-101-11]"));
    }
}
