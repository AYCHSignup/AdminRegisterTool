/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.integration;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;

import java.util.Map;

import org.joda.time.DateTime;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.Assessment;
import org.opentestsystem.delivery.testreg.domain.Assessment.EligibilityType;
import org.opentestsystem.delivery.testreg.domain.Assessment.TestWindow;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.search.AssessmentSearchRequest;
import org.opentestsystem.delivery.testreg.service.TestRegPersister;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.collect.Maps;

public class AssessmentServiceTest extends AbstractPersistenceEmbeddedTest {

    @Autowired
    private TestRegPersister assessmentService;

    private Assessment assessment;

    @Before
    public void init() {
        assessment = new Assessment();
        TestWindow tstWindow = new TestWindow();
        assessment.setNumGlobalOpportunities(2);
        assessment.setDelayRule(1);
        assessment.setEligibilityType(EligibilityType.EXPLICIT);
        tstWindow.setBeginWindow(new DateTime(2014, 1, 1, 10, 30));
        tstWindow.setEndWindow(new DateTime(2014, 1, 1, 10, 50));
        TestWindow[] tstArray = { tstWindow };
        assessment.setTestWindow(tstArray);
        assessment.setTestName("test1");
        assessment.setVersion("1");
    }

    @Test
    public void testSave() {
        assessmentService.saveDomainObject(assessment);
        String assessmentId = assessment.getId();
        assertNotNull("id on saved object should be not be null", assessmentId);
    }

    @Test
    public void testFind() {
        assessmentService.saveDomainObject(assessment);
        String assessmentId = assessment.getId();
        assertNotNull("id on saved object should be not be null", assessmentId);
        Assessment readObj = assessmentService.findById(assessmentId, FormatType.ASSESSMENT);
        assertEquals(readObj.getTestName(), "test1");
    }

    @Test
    public void testRemove() {
        assessmentService.saveDomainObject(assessment);
        String assessmentId = assessment.getId();
        assertNotNull("id on saved object should be not be null", assessmentId);
        assessmentService.deleteDomainObject(assessmentId, FormatType.ASSESSMENT);
        Assessment readObj = assessmentService.findById(assessmentId, FormatType.ASSESSMENT);
        assertNull("object must be null", readObj);
    }

    @Test
    public void testSearchAssessments() {
        Assessment savedAssessment = assessmentService.saveDomainObject(assessment);
        assertNotNull("Saved object should be not be null", savedAssessment);
        Map<String, String[]> requestMap = Maps.newHashMap();
        requestMap.put(AssessmentSearchRequest.SEARCH_RAW_XML, new String[] { "foo" });
        AssessmentSearchRequest searchRequest = new AssessmentSearchRequest(requestMap);
        SearchResponse<Assessment> assessments = assessmentService.searchDomainObjects(searchRequest,
                FormatType.ASSESSMENT);
        assertNotNull("Assessment List cannot be null", assessments.getSearchResults());
    }

}
