/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.integration.service;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertThat;
import static org.junit.Assert.assertTrue;

import java.io.FileInputStream;
import java.io.InputStream;
import java.lang.reflect.Method;
import java.util.List;

import javax.annotation.Resource;

import org.apache.commons.io.IOUtils;
import org.joda.time.DateTime;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.Assessment;
import org.opentestsystem.delivery.testreg.domain.Assessment.EligibilityType;
import org.opentestsystem.delivery.testreg.domain.Assessment.TestWindow;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.integration.AbstractPersistenceEmbeddedTest;
import org.opentestsystem.delivery.testreg.persistence.AssessmentRepository;
import org.opentestsystem.delivery.testreg.service.TestRegistrationService;
import org.opentestsystem.delivery.testreg.service.impl.TestPackageImportServiceImpl;
import org.opentestsystem.delivery.testreg.service.impl.TestPackageParserUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.web.client.MockRestServiceServer;

import uk.co.jemos.podam.api.PodamFactory;
import uk.co.jemos.podam.api.PodamFactoryImpl;

@SuppressWarnings({ "PMD.AbstractClassWithoutAbstractMethod" })
public class TestPackageImportServiceTest extends AbstractPersistenceEmbeddedTest {

    protected MockRestServiceServer mockServer;
    protected static final PodamFactory FACTORY = new PodamFactoryImpl();
    @Resource(name = "testPackageImportService")
    private TestPackageImportServiceImpl testPackageImportService;

    @Resource(name = "sb11NonEntityService")
    private TestRegistrationService<Assessment> sb11NonEntityService;

    @Autowired
    AssessmentRepository assessmentRepository;

    // version compare to existing
    @SuppressWarnings("unused")
    @Test
    public void testNewerVersionFromTSB() throws Exception {
        Assessment savedAssessment = sb11NonEntityService.saveDomainObject(buildAssessmentMatchingXmlForVersion("0.9"));

        List<Assessment> assessments = sb11NonEntityService.findAll(FormatType.ASSESSMENT);

        InputStream is = new FileInputStream(getClass().getResource("/test-package.xml").getFile());
        byte[] bytes = IOUtils.toByteArray(is);
        Assessment xmlAssessment = TestPackageParserUtil.parseTestPackageXml(bytes);

        // add in the "logged in user's" tenant id
        xmlAssessment.setTenantId("WI");
        xmlAssessment.setSourceTsb("http://sb11-tsb-dev.drc-ec2.com/rest");

        Method updateAssessmentStatus = TestPackageImportServiceImpl.class.getDeclaredMethod("updateAssessmentStatus",
                Assessment.class);
        updateAssessmentStatus.setAccessible(true);

        Assessment modifiedAssessment = (Assessment) updateAssessmentStatus.invoke(testPackageImportService,
                xmlAssessment);

        assertThat(modifiedAssessment.isExists(), is(true));
        assertThat(modifiedAssessment.isUpdatedVersion(), is(true));
    }

    @Test
    public void testSameVersionFromTSB() throws Exception {
        Assessment savedAssessment = sb11NonEntityService.saveDomainObject(buildAssessmentMatchingXmlForVersion("1.0"));

        InputStream is = new FileInputStream(getClass().getResource("/test-package.xml").getFile());
        byte[] bytes = IOUtils.toByteArray(is);
        Assessment xmlAssessment = TestPackageParserUtil.parseTestPackageXml(bytes);

        // add in the "logged in user's" tenant id
        xmlAssessment.setTenantId("WI");
        xmlAssessment.setSourceTsb("http://sb11-tsb-dev.drc-ec2.com/rest");

        Method updateAssessmentStatus = TestPackageImportServiceImpl.class.getDeclaredMethod("updateAssessmentStatus",
                Assessment.class);
        updateAssessmentStatus.setAccessible(true);

        Assessment modifiedAssessment = (Assessment) updateAssessmentStatus.invoke(testPackageImportService,
                xmlAssessment);

        assertThat(modifiedAssessment.isExists(), is(true));
        assertThat(modifiedAssessment.isUpdatedVersion(), is(false));

    }

    @Test
    public void testOlderVersionFromTSB() throws Exception {
        Assessment savedAssessment = sb11NonEntityService.saveDomainObject(buildAssessmentMatchingXmlForVersion("1.1"));

        InputStream is = new FileInputStream(getClass().getResource("/test-package.xml").getFile());
        byte[] bytes = IOUtils.toByteArray(is);
        Assessment xmlAssessment = TestPackageParserUtil.parseTestPackageXml(bytes);

        // add in the "logged in user's" tenant id
        xmlAssessment.setTenantId("WI");
        xmlAssessment.setSourceTsb("http://sb11-tsb-dev.drc-ec2.com/rest");

        Method updateAssessmentStatus = TestPackageImportServiceImpl.class.getDeclaredMethod("updateAssessmentStatus",
                Assessment.class);
        updateAssessmentStatus.setAccessible(true);

        Assessment modifiedAssessment = (Assessment) updateAssessmentStatus.invoke(testPackageImportService,
                xmlAssessment);

        assertThat(modifiedAssessment.isExists(), is(true));
        assertThat(modifiedAssessment.isUpdatedVersion(), is(false));
    }

    @Test
    public void getTestPackages() throws Exception {
        InputStream is = new FileInputStream(getClass().getResource("/test-package.xml").getFile());
        byte[] bytes = IOUtils.toByteArray(is);
        Assessment assessment = TestPackageParserUtil.parseTestPackageXml(bytes);
        assertNotNull("Assessment Entity is not null", assessment);
        assertTrue("Does not match updated value", assessment.getSubjectCode().equals("aaa"));

        // name="CC-a-11-12-TEST-I-2" version="1.0" label="CCTest"

        assertThat(assessment.getTestName(), is("CC-a-11-12-TEST-I-2"));
        assertThat(assessment.getVersion(), is("1.0"));
        assertThat(assessment.getTestLabel(), is("CCTest"));

    }

    @Test
    public void testFindAssessmentByTestName() {
        Assessment assessment = buildAssessment();
        Assessment entity = sb11NonEntityService.saveDomainObject(assessment);
        assertNotNull("Assessment Entity is not saved", entity);
        assertNotNull("Assessment entity id is null", entity.getId());
        List<Assessment> searchedAssessment = assessmentRepository.findByTestNameAndTenantId("TSTNAME1", "WI");
        // assertNotNull("Assessment Entity is not saved", searchedAssessment);
        assertThat(searchedAssessment, notNullValue());
        assertThat(searchedAssessment, org.hamcrest.Matchers.hasSize(1));
    }

    @Test
    public void testUpdateVersion() {
        Assessment entity = sb11NonEntityService.saveDomainObject(buildAssessment());
        Assessment assessment1 = buildAssessmentVersion();
        Assessment updatedAssessment = testPackageImportService.updateAssessment(assessment1);
        assertNotNull("Updated Assessment entity id is null", updatedAssessment.getId());
        assertThat(assessment1.getVersion(), is(updatedAssessment.getVersion()));
        assertThat(entity.getNumGlobalOpportunities(), is(updatedAssessment.getNumGlobalOpportunities()));
    }

    private Assessment buildAssessment() {
        Assessment entity = new Assessment("52fe7623e4b028e1625c173d", "<xml/>", "MATH01", "TSTNAME1", "1.1", "WI",
                EligibilityType.EXPLICIT, "label", "http://sb11-tsb-dev.drc-ec2.com/rest");
        entity.setNumGlobalOpportunities(10);
        TestWindow testWindow = new TestWindow();
        TestWindow[] arr = { testWindow };
        testWindow.setBeginWindow(new DateTime(2014, 1, 1, 10, 30));
        testWindow.setEndWindow(new DateTime(2014, 1, 1, 10, 50));

        entity.setTestWindow(arr);
        entity.setDelayRule(2);
        return entity;
    }

    private Assessment buildAssessmentVersion() {
        return new Assessment("52fe7623e4b028e1625c1723", "<xml/>", "MATH01", "TSTNAME1", "1.5", "WI",
                EligibilityType.EXPLICIT, "label", "http://sb11-tsb-dev.drc-ec2.com/rest");
    }

    // identifier in test xml file
    // <identifier uniqueid="53175e56e4b0c84072ea147a" name="CC-a-11-12-TEST-I-2" version="1.0" label="CCTest"/>

    private Assessment buildAssessmentMatchingXmlForVersion(final String version) {
        Assessment entity = new Assessment("53175e56e4b0c84072ea147a", "<xml/>", "MATH01", "CC-a-11-12-TEST-I-2",
                version, "WI", EligibilityType.EXPLICIT, "CCTest", "http://sb11-tsb-dev.drc-ec2.com/rest");
        entity.setNumGlobalOpportunities(10);
        TestWindow testWindow = new TestWindow();
        TestWindow[] arr = { testWindow };
        testWindow.setBeginWindow(new DateTime(2014, 1, 1, 10, 30));
        testWindow.setEndWindow(new DateTime(2014, 1, 1, 10, 50));

        entity.setTestWindow(arr);
        entity.setDelayRule(2);
        return entity;
    }

}
