/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.integration;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.DistrictEntity;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.GroupOfStatesEntity;
import org.opentestsystem.delivery.testreg.domain.HierarchyLevel;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.domain.StateEntity;
import org.opentestsystem.delivery.testreg.domain.search.DistrictEntitySearchRequest;
import org.opentestsystem.delivery.testreg.domain.search.StateEntitySearchRequest;
import org.opentestsystem.delivery.testreg.persistence.GroupOfStatesEntityRepository;
import org.opentestsystem.delivery.testreg.service.TestRegPersister;
import org.opentestsystem.delivery.testreg.service.impl.Sb11EntityServiceImpl;
import org.opentestsystem.shared.exception.LocalizedException;
import org.opentestsystem.shared.search.domain.AbstractSearchRequest;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.Assert.*;

public class Sb11EntityServiceTest extends AbstractPersistenceEmbeddedTest {

    @Autowired
    private TestRegPersister entityService;

    @Autowired
    private Sb11EntityServiceImpl<? extends Sb11Entity> sb11EntityService;

    @Autowired
    private GroupOfStatesEntityRepository groupOfStatesRepository;

    @Before
    public void setUp() throws Exception {
        groupOfStatesRepository.save(buildGroupOfStatesEntity1());
        groupOfStatesRepository.save(buildGroupOfStatesEntity2());
    }

    @Test
    public void testEntitySave() {

        // save state entity
        StateEntity entity = buildStateEntity();
        StateEntity stateEntity = entityService.saveDomainObject(entity);
        assertNotNull("State Entity is not saved", stateEntity);
        assertNotNull("State entity id is null", stateEntity.getId());

        // save district entity
        DistrictEntity entity1 = buildDistrictEntity();
        DistrictEntity districtEntity = entityService.saveDomainObject(entity1);
        assertNotNull("District Entity is not saved", districtEntity);
        assertNotNull("District entity id is null", districtEntity.getId());
    }

    @Test
    public void testEntitiesSave() {
        List<StateEntity> entities = new ArrayList<StateEntity>();
        entities.add(buildStateEntity());
        entities.add(buildStateEntity1());
        // save list of state entities
        List<StateEntity> stateEntities = entityService.saveDomainObjects(entities);
        assertNotNull("State Entity is not saved", stateEntities);

    }

    @Test
    public void testFindEntity() {

        // save state entity
        StateEntity entity = buildStateEntity();
        StateEntity stateEntity = entityService.saveDomainObject(entity);
        assertNotNull("State Entity is not saved", stateEntity);
        assertNotNull("State entity id is null", stateEntity.getId());
        StateEntity foundEntity = entityService.findById(stateEntity.getId(), stateEntity.getFormatType());
        assertNotNull("State Entity not found", foundEntity);
        assertTrue("Id's does not match", stateEntity.getId().equals(foundEntity.getId()));
    }

    @Test
    public void testEntityUpdate() {

        // save state entity
        StateEntity entity = buildStateEntity();
        StateEntity stateEntity = entityService.saveDomainObject(entity);
        assertNotNull("State Entity is not saved", stateEntity);
        assertNotNull("State entity id is null", stateEntity.getId());
        // update some fields
        stateEntity.setEntityName("Minnesota");
        stateEntity.setEntityId("MN");
        StateEntity updatedEntity = entityService.updateDomainObject(stateEntity);

        assertNotNull("Updated Entity is null", updatedEntity);
        assertTrue("Does not match updated value", updatedEntity.getEntityName().equals("Minnesota"));
    }

    @Test
    public void testFindByEntityId() {

        // save state entity
        StateEntity entity = buildStateEntity();
        StateEntity stateEntity = entityService.saveDomainObject(entity);
        assertNotNull("State Entity is not saved", stateEntity);
        assertNotNull("State entity id is null", stateEntity.getId());
        StateEntity foundEntity = sb11EntityService.findByEntityId(stateEntity.getEntityId(), StateEntity.class);
        assertNotNull("State Entity not found", foundEntity);
        assertTrue("Id's does not match", stateEntity.getEntityId().equals(foundEntity.getEntityId()));
    }

    @Test
    public void testEntitiesUpdate() {
        List<StateEntity> entities = new ArrayList<StateEntity>();
        entities.add(buildStateEntity());
        entities.add(buildStateEntity1());
        // save list of state entities
        List<StateEntity> stateEntities = entityService.saveDomainObjects(entities);
        assertNotNull("State Entity is not saved", stateEntities);

        // update some properties of the saved entities and update
        stateEntities.get(0).setParentEntityId("11111");
        stateEntities.get(1).setParentEntityType("GROUPOFSTATES");
        List<StateEntity> updatedEntities = entityService
                .updateDomainObjects(new ArrayList<StateEntity>(stateEntities));
        assertNotNull("Updated Entities is null", updatedEntities);
        assertTrue("Does not match updated value", updatedEntities.get(0).getParentEntityId().equals("11111"));
        assertTrue("Does not match updated value",
                updatedEntities.get(1).getParentEntityType().equals(HierarchyLevel.GROUPOFSTATES));
    }

    @Test
    public void testEntityDelete() {

        // save state entity
        Sb11Entity entity = buildStateEntity();
        Sb11Entity stateEntity = entityService.saveDomainObject(entity);
        assertNotNull("State Entity is not saved", stateEntity);
        assertNotNull("State entity id is null", stateEntity.getId());

        // delete entity
        entityService.deleteDomainObject(stateEntity);
        StateEntity foundEntity = entityService.findById(stateEntity.getId(), stateEntity.getFormatType());
        assertNull("State Entity found", foundEntity);
    }

    @Test
    public void testEntityDeleteById() {

        // save state entity
        Sb11Entity entity = buildStateEntity();
        Sb11Entity stateEntity = entityService.saveDomainObject(entity);
        assertNotNull("State Entity is not saved", stateEntity);
        assertNotNull("State entity id is null", stateEntity.getId());

        // delete entity
        entityService.deleteDomainObject(stateEntity.getId(), StateEntity.FORMAT_TYPE);
        StateEntity foundEntity = entityService.findById(stateEntity.getId(), stateEntity.getFormatType());
        assertNull("State Entity found", foundEntity);
    }

    @Test
    public void testSearchEntity() {

        // save state entity
        Sb11Entity entity = buildDistrictEntity();
        Sb11Entity districtEntity = entityService.saveDomainObject(entity);
        assertNotNull("district Entity is not saved", districtEntity);
        assertNotNull("district entity id is null", districtEntity.getId());

        Map<String, String[]> params = new HashMap<String, String[]>();
        params.put("entityId", new String[] { districtEntity.getEntityId() });
        AbstractSearchRequest searchRequest = new DistrictEntitySearchRequest(params);
        SearchResponse<DistrictEntity> response = entityService.searchDomainObjects(searchRequest,
                DistrictEntity.FORMAT_TYPE);
        assertNotNull("district collection is null", response.getSearchResults());
        assertTrue("district collection is empty", response.getSearchResults().size() == 1);
    }

    @Test
    public void testEntitiesDelete() {
        List<StateEntity> entities = new ArrayList<StateEntity>();
        entities.add(buildStateEntity());
        entities.add(buildStateEntity1());
        // save list of state entities
        List<StateEntity> stateEntities = entityService.saveDomainObjects(entities);
        assertNotNull("State Entity is not saved", stateEntities);

        List<StateEntity> foundSavedEntities = entityService.findAll(FormatType.STATE);
        assertNotNull("found Entities is null", foundSavedEntities);
        assertTrue("found Entities is null", foundSavedEntities.size() == 2);
        // delete entities
        entityService.deleteDomainObjects(new ArrayList<Sb11Entity>(foundSavedEntities));
        List<StateEntity> foundDeletedEntities = entityService.findAll(FormatType.STATE);
        assertTrue("found Entities", foundDeletedEntities.size() == 0);
    }

    @Test
    public void testStateEntityDeleteById() {

        // save state entity
        Sb11Entity entity = buildStateEntity();
        Sb11Entity stateEntity = entityService.saveDomainObject(entity);
        assertNotNull("State Entity is not saved", stateEntity);
        assertNotNull("State entity id is null", stateEntity.getId());

        // delete entity
        entityService.deleteDomainObject(stateEntity.getId(), stateEntity.getFormatType());
        StateEntity foundEntity = entityService.findById(stateEntity.getId(), stateEntity.getFormatType());
        assertNull("State Entity found", foundEntity);

    }

    @Test
    public void testSearchEntities() {

        // save state entity
        Sb11Entity entity = buildStateEntity();
        Sb11Entity stateEntity = entityService.saveDomainObject(entity);
        assertNotNull("State Entity is not saved", stateEntity);
        assertNotNull("State entity id is null", stateEntity.getId());
        Map<String, String[]> map = new HashMap<String, String[]>();
        map.put("entityId", new String[] { stateEntity.getEntityId() });

        StateEntitySearchRequest searchRequest = new StateEntitySearchRequest(map);
        SearchResponse<Sb11Entity> searchResponse = entityService.searchDomainObjects(searchRequest,
                StateEntity.FORMAT_TYPE);
        assertTrue("State Entity Not found", searchResponse.getSearchResults().size() == 1);

    }

    @Test
    public void testHasAssociatedEntities() {
        // save state entity
        StateEntity entity = buildStateEntity();
        StateEntity stateEntity = entityService.saveDomainObject(entity);
        assertNotNull("State Entity is not saved", stateEntity);
        assertNotNull("State entity id is null", stateEntity.getId());
        GroupOfStatesEntity gos = buildGroupOfStatesEntity1();
        assertTrue("No associated entities", entityService.hasAssociatedEntity(gos));
    }

    @Test(expected = LocalizedException.class)
    public void testDuplicateEntity() {
        DistrictEntity district = buildDistrictEntity();
        entityService.saveDomainObject(district);
        DistrictEntity duplicateDistrict = buildDistrictEntity();
        entityService.saveDomainObject(duplicateDistrict);
        fail("it should never come here");
    }

    private StateEntity buildStateEntity() {
        StateEntity.Builder stateEntityBuilder = new StateEntity.Builder(
                new Object[] { "WI", "WISCONSIN", "GROUPOFSTATES", "12345", "ADD" });
        return stateEntityBuilder.build();
    }

    private StateEntity buildStateEntity1() {
        StateEntity.Builder stateEntityBuilder = new StateEntity.Builder(
                new Object[] { "IL", "ILLINOIS", "GROUPOFSTATES", "12345", "ADD" });
        return stateEntityBuilder.build();
    }

    private DistrictEntity buildDistrictEntity() {
        DistrictEntity.Builder districtEntityBuilder = new DistrictEntity.Builder(
                new Object[] { "123", "Middleton School district", "911", "GROUPOFSTATES", "12345", "WI", "ADD" });
        return districtEntityBuilder.build();
    }

    private GroupOfStatesEntity buildGroupOfStatesEntity1() {
        GroupOfStatesEntity.Builder groupOfStatesEntity = new GroupOfStatesEntity.Builder(
                new Object[] { "12345", "MIDWEST STATES", "CLIENT", "000000", "ADD" });
        return groupOfStatesEntity.build();
    }

    private GroupOfStatesEntity buildGroupOfStatesEntity2() {
        GroupOfStatesEntity.Builder groupOfStatesEntity = new GroupOfStatesEntity.Builder(
                new Object[] { "11111", "MIDWEST STATES CONS", "CLIENT", "000000", "ADD" });
        return groupOfStatesEntity.build();
    }
}
