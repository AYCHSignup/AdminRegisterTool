/*
Educational Online Test Delivery System Copyright (c) 2013 American Institutes for Research

Distributed under the AIR Open Source License, Version 1.0 See accompanying file AIR-License-1_0.txt or at
http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 */

package org.opentestsystem.delivery.testreg.integration.eligibility;

import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.Matchers.contains;
import static org.hamcrest.Matchers.hasSize;
import static org.junit.Assert.assertThat;

import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import org.joda.time.DateTime;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.opentestsystem.delivery.testreg.domain.Assessment;
import org.opentestsystem.delivery.testreg.domain.Assessment.EligibilityType;
import org.opentestsystem.delivery.testreg.domain.CacheMap;
import org.opentestsystem.delivery.testreg.domain.EligibleStudent;
import org.opentestsystem.delivery.testreg.domain.ImplicitEligibilityRule;
import org.opentestsystem.delivery.testreg.domain.ImplicitEligibilityRule.RuleType;
import org.opentestsystem.delivery.testreg.domain.StateEntity;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.domain.Student.Gender;
import org.opentestsystem.delivery.testreg.domain.Student.GradeLevel;
import org.opentestsystem.delivery.testreg.eligibility.EligibilityEvaluator;
import org.opentestsystem.delivery.testreg.integration.AbstractPersistenceEmbeddedTest;
import org.opentestsystem.delivery.testreg.persistence.EligibleStudentRepository;
import org.opentestsystem.delivery.testreg.service.CacheMapService;
import org.opentestsystem.delivery.testreg.service.Sb11EntityRepositoryService;
import org.opentestsystem.delivery.testreg.service.TestRegPersister;
import org.opentestsystem.shared.progman.client.ProgManClient;
import org.opentestsystem.shared.progman.client.domain.Tenant;
import org.opentestsystem.shared.progman.client.domain.TenantType;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import com.google.common.collect.Sets;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "classpath:test-event-consumer-context.xml" })
@ActiveProfiles({ "progman.client.impl.null", "progman.proploc.classpath", "mna.client.null" })
public class EligibilityEvaluatorAssessmentTest extends AbstractPersistenceEmbeddedTest {

    @SuppressWarnings("unused")
    private static Logger LOGGER = LoggerFactory.getLogger(EligibilityEvaluatorAssessmentTest.class);

    @Mock
    private ProgManClient progmanClient;

    @Mock
    private Sb11EntityRepositoryService sb11EntityService;

    @Mock
    private CacheMapService cacheMapService;

    @InjectMocks
    @Autowired
    private EligibilityEvaluator eligibilityEvaluator;

    @Autowired
    private TestRegPersister persister;

    @Autowired
    private EligibleStudentRepository eligStudentRepo;

    @Before
    public void init() {
        MockitoAnnotations.initMocks(this);

        Tenant tenantFive = new Tenant();
        tenantFive.setId("5");
        tenantFive.setName("WI");
        tenantFive.setType(TenantType.STATE);

        Mockito.when(progmanClient.getTenantById("5")).thenReturn(tenantFive);

        Tenant tenantTwenty = new Tenant();
        tenantTwenty.setId("20");
        tenantTwenty.setName("MN");
        tenantTwenty.setType(TenantType.STATE);

        Mockito.when(progmanClient.getTenantById("20")).thenReturn(tenantTwenty);

        StateEntity stateOfWi = new StateEntity();
        stateOfWi.setEntityId("WI");
        stateOfWi.setEntityName("Wisconsin");
        stateOfWi.setId("11111");

        StateEntity stateOfMn = new StateEntity();
        stateOfMn.setEntityId("MN");
        stateOfMn.setEntityName("Minnesota");
        stateOfMn.setId("22222");

        Mockito.when(sb11EntityService.findByEntityId("WI", TenantType.STATE)).thenReturn(stateOfWi);

        Mockito.when(sb11EntityService.findByEntityId("MN", TenantType.STATE)).thenReturn(stateOfMn);

        Map<String, Set<String>> uberMap = new HashMap<>();

        Set<String> wiSet = Sets.newHashSet("1", "2", "3", "11111");
        uberMap.put("11111", wiSet);

        Set<String> mnSet = Sets.newHashSet("10", "12", "13", "22222");
        uberMap.put("22222", mnSet);

        CacheMap cacheMap = new CacheMap("UberEntityRelationshipMap", uberMap);

        Mockito.when(cacheMapService.getCacheMap("UberEntityRelationshipMap")).thenReturn(cacheMap);

    }

    @Test
    public void testNewAssessmentImplicit() {

        // create student 10th grade
        Student student = new Student();
        student.setBirthDate(new DateTime(1980, 11, 11, 0, 0));
        student.setDistrictIdentifier("1");
        student.setEntityId("123456");
        student.setExternalSsid("111111111");
        student.setFirstName("Bob");
        student.setGender(Gender.Male);
        student.setGradeLevelWhenAssessed(GradeLevel.TENTHGRADE);
        student.setLanguageCode("eng");
        student.setLastName("Test");
        student.setStateAbbreviation("WI");
        student.setAmericanIndianOrAlaskaNative("No");
        student.setAsian("No");
        student.setBlackOrAfricanAmerican("No");
        student.setHispanicOrLatino("No");
        student.setWhite("Yes");
        student.setNativeHawaiianOrPacificIsland("No");
        student.setTwoOrMoreRaces("No");
        student.setDisadvantageStatus("No");
        student.setLepStatus("No");
        student.setInstitutionIdentifier("1");
        student.setInstitutionEntityMongoId("1");
        student.setSection504Status("No");
        student.setiDEAIndicator("No");

        Student storedStudent = persister.saveDomainObject(student);

        try {
            Thread.sleep(500L);
        } catch (InterruptedException e) {
            // ignore
        }

        // create student 6th grade
        Student student2 = new Student();
        student2.setBirthDate(new DateTime(1980, 11, 11, 0, 0));
        student2.setDistrictIdentifier("1");
        student2.setEntityId("123457");
        student2.setExternalSsid("111111112");
        student2.setFirstName("Bob");
        student2.setGender(Gender.Male);
        student2.setGradeLevelWhenAssessed(GradeLevel.SIXTHGRADE);
        student2.setLanguageCode("eng");
        student2.setLastName("Test");
        student2.setStateAbbreviation("WI");
        student2.setAmericanIndianOrAlaskaNative("No");
        student2.setAsian("No");
        student2.setBlackOrAfricanAmerican("No");
        student2.setHispanicOrLatino("No");
        student2.setWhite("Yes");
        student2.setNativeHawaiianOrPacificIsland("No");
        student2.setTwoOrMoreRaces("No");
        student2.setDisadvantageStatus("No");
        student2.setLepStatus("No");
        student2.setInstitutionIdentifier("1");
        student2.setInstitutionEntityMongoId("1");
        student2.setSection504Status("No");
        student2.setiDEAIndicator("No");

        Student storedStudent2 = persister.saveDomainObject(student2);

        try {
            Thread.sleep(500L);
        } catch (InterruptedException e) {
            // ignore
        }

        // create student 6th grade
        Student student3 = new Student();
        student3.setBirthDate(new DateTime(1980, 11, 11, 0, 0));
        student3.setDistrictIdentifier("1");
        student3.setEntityId("123458");
        student3.setExternalSsid("111111113");
        student3.setFirstName("Bob");
        student3.setGender(Gender.Male);
        student3.setGradeLevelWhenAssessed(GradeLevel.SIXTHGRADE);
        student3.setLanguageCode("eng");
        student3.setLastName("Test");
        student3.setStateAbbreviation("WI");
        student3.setAmericanIndianOrAlaskaNative("No");
        student3.setAsian("No");
        student3.setBlackOrAfricanAmerican("No");
        student3.setHispanicOrLatino("No");
        student3.setWhite("Yes");
        student3.setNativeHawaiianOrPacificIsland("No");
        student3.setTwoOrMoreRaces("No");
        student3.setDisadvantageStatus("No");
        student3.setLepStatus("No");
        student3.setInstitutionIdentifier("1");
        student3.setInstitutionEntityMongoId("1");
        student3.setSection504Status("No");
        student3.setiDEAIndicator("No");

        Student storedStudent3 = persister.saveDomainObject(student3);

        try {
            Thread.sleep(500L);
        } catch (InterruptedException e) {
            // ignore
        }

        // create assessment with implicit rule = 6th grade
        Assessment assess = new Assessment();
        assess.setDelayRule(2);
        assess.setEligibilityType(EligibilityType.IMPLICIT);

        ImplicitEligibilityRule eligRule = new ImplicitEligibilityRule("gradeLevelWhenAssessed", "06", RuleType.ENABLER);

        assess.setImplicitEligibilityRules(new ImplicitEligibilityRule[] { eligRule });

        assess.setNumGlobalOpportunities(4);
        assess.setTestWindow(new Assessment.TestWindow[] { new Assessment.TestWindow(new DateTime(2013, 12, 1, 0, 0),
                new DateTime(2013, 12, 31, 0, 0), null) });
        assess.setTestName("test1");
        assess.setVersion("1");
        assess.setTenantId("5");

        Assessment storedAssessment = persister.saveDomainObject(assess);

        try {
            Thread.sleep(500L);
        } catch (InterruptedException e) {
            // ignore
        }

        // verify that 2 eligiblestudents created each associated to assessment

        EligibleStudent foundStudent1 = eligStudentRepo.findByStudentMongoId(storedStudent.getId());
        assertThat(foundStudent1, nullValue());

        EligibleStudent foundStudent2 = eligStudentRepo.findByStudentMongoId(storedStudent2.getId());
        assertThat(foundStudent2, notNullValue());
        assertThat(foundStudent2.getAssessments(), hasSize(1));
        assertThat(foundStudent2.getAssessments(), contains(storedAssessment));

        EligibleStudent foundStudent3 = eligStudentRepo.findByStudentMongoId(storedStudent3.getId());
        assertThat(foundStudent3, notNullValue());
        assertThat(foundStudent3.getAssessments(), hasSize(1));
        assertThat(foundStudent3.getAssessments(), contains(storedAssessment));

    }

    @Test
    public void testAssessmentModToExplicit() {

        // create student 6th grade
        Student student = new Student();
        student.setBirthDate(new DateTime(1980, 11, 11, 0, 0));
        student.setDistrictIdentifier("1");
        student.setEntityId("123456");
        student.setExternalSsid("111111111");
        student.setFirstName("Bob");
        student.setGender(Gender.Male);
        student.setGradeLevelWhenAssessed(GradeLevel.SIXTHGRADE);
        student.setLanguageCode("eng");
        student.setLastName("Test");
        student.setStateAbbreviation("WI");
        student.setAmericanIndianOrAlaskaNative("No");
        student.setAsian("No");
        student.setBlackOrAfricanAmerican("No");
        student.setHispanicOrLatino("No");
        student.setWhite("Yes");
        student.setNativeHawaiianOrPacificIsland("No");
        student.setTwoOrMoreRaces("No");
        student.setDisadvantageStatus("No");
        student.setLepStatus("No");
        student.setInstitutionIdentifier("1");
        student.setInstitutionEntityMongoId("1");
        student.setSection504Status("No");
        student.setiDEAIndicator("No");

        Student storedStudent = persister.saveDomainObject(student);

        try {
            Thread.sleep(500L);
        } catch (InterruptedException e) {
            // ignore
        }

        // create assessment with implicit rule = 6th grade
        Assessment assess = new Assessment();
        assess.setDelayRule(2);
        assess.setEligibilityType(EligibilityType.IMPLICIT);

        ImplicitEligibilityRule eligRule = new ImplicitEligibilityRule("gradeLevelWhenAssessed", "06", RuleType.ENABLER);

        assess.setImplicitEligibilityRules(new ImplicitEligibilityRule[] { eligRule });

        assess.setNumGlobalOpportunities(4);
        assess.setTestWindow(new Assessment.TestWindow[] { new Assessment.TestWindow(new DateTime(2013, 12, 1, 0, 0),
                new DateTime(2013, 12, 31, 0, 0), null) });
        assess.setTestName("test1");
        assess.setVersion("1");
        assess.setTenantId("5");

        Assessment storedAssessment = persister.saveDomainObject(assess);

        try {
            Thread.sleep(500L);
        } catch (InterruptedException e) {
            // ignore
        }

        // verify eligiblestudent created associated to assessment
        EligibleStudent foundStudent = eligStudentRepo.findByStudentMongoId(storedStudent.getId());
        assertThat(foundStudent, notNullValue());
        assertThat(foundStudent.getAssessments(), hasSize(1));
        assertThat(foundStudent.getAssessments(), contains(storedAssessment));

        // modify assessment change to explicit
        storedAssessment.setEligibilityType(EligibilityType.EXPLICIT);
        storedAssessment.setImplicitEligibilityRules(new ImplicitEligibilityRule[] { });

        storedAssessment = persister.updateDomainObject(storedAssessment);

        try {
            Thread.sleep(500L);
        } catch (InterruptedException e) {
            // ignore
        }

        // verify eligiblestudent removed
        foundStudent = eligStudentRepo.findByStudentMongoId(storedStudent.getId());
        assertThat(foundStudent, nullValue());

    }

    @Test
    public void testAssessmentModToImplicit() {

        // create student 6th grade
        Student student = new Student();
        student.setBirthDate(new DateTime(1980, 11, 11, 0, 0));
        student.setDistrictIdentifier("1");
        student.setEntityId("123456");
        student.setExternalSsid("111111111");
        student.setFirstName("Bob");
        student.setGender(Gender.Male);
        student.setGradeLevelWhenAssessed(GradeLevel.SIXTHGRADE);
        student.setLanguageCode("eng");
        student.setLastName("Test");
        student.setStateAbbreviation("WI");
        student.setAmericanIndianOrAlaskaNative("No");
        student.setAsian("No");
        student.setBlackOrAfricanAmerican("No");
        student.setHispanicOrLatino("No");
        student.setWhite("Yes");
        student.setNativeHawaiianOrPacificIsland("No");
        student.setTwoOrMoreRaces("No");
        student.setDisadvantageStatus("No");
        student.setLepStatus("No");
        student.setInstitutionIdentifier("1");
        student.setInstitutionEntityMongoId("1");
        student.setSection504Status("No");
        student.setiDEAIndicator("No");

        Student storedStudent = persister.saveDomainObject(student);

        try {
            Thread.sleep(500L);
        } catch (InterruptedException e) {
            // ignore
        }

        // create assessment explicit rule
        Assessment assess = new Assessment();
        assess.setDelayRule(2);
        assess.setEligibilityType(EligibilityType.EXPLICIT);
        assess.setNumGlobalOpportunities(4);
        assess.setTestWindow(new Assessment.TestWindow[] { new Assessment.TestWindow(new DateTime(2013, 12, 1, 0, 0),
                new DateTime(2013, 12, 31, 0, 0), null) });
        assess.setTestName("test1");
        assess.setVersion("1");
        assess.setTenantId("5");

        Assessment storedAssessment = persister.saveDomainObject(assess);

        try {
            Thread.sleep(500L);
        } catch (InterruptedException e) {
            // ignore
        }

        // verify eligible student not created
        EligibleStudent foundStudent = eligStudentRepo.findByStudentMongoId(storedStudent.getId());
        assertThat(foundStudent, nullValue());

        // modify assessment change to implicit with rule = 6th grade
        storedAssessment.setEligibilityType(EligibilityType.IMPLICIT);

        ImplicitEligibilityRule eligRule = new ImplicitEligibilityRule("gradeLevelWhenAssessed", "06", RuleType.ENABLER);

        storedAssessment.setImplicitEligibilityRules(new ImplicitEligibilityRule[] { eligRule });

        storedAssessment = persister.updateDomainObject(storedAssessment);

        try {
            Thread.sleep(500L);
        } catch (InterruptedException e) {
            // ignore
        }

        // verify eligiblestudent created associated to assessment
        foundStudent = eligStudentRepo.findByStudentMongoId(storedStudent.getId());
        assertThat(foundStudent, notNullValue());
        assertThat(foundStudent.getAssessments(), hasSize(1));
        assertThat(foundStudent.getAssessments(), contains(storedAssessment));

    }

    @Test
    public void testDeleteAssessment() {
        // create student 6th grade
        Student student = new Student();
        student.setBirthDate(new DateTime(1980, 11, 11, 0, 0));
        student.setDistrictIdentifier("1");
        student.setEntityId("123456");
        student.setExternalSsid("111111111");
        student.setFirstName("Bob");
        student.setGender(Gender.Male);
        student.setGradeLevelWhenAssessed(GradeLevel.SIXTHGRADE);
        student.setLanguageCode("eng");
        student.setLastName("Test");
        student.setStateAbbreviation("WI");
        student.setAmericanIndianOrAlaskaNative("No");
        student.setAsian("No");
        student.setBlackOrAfricanAmerican("No");
        student.setHispanicOrLatino("No");
        student.setWhite("Yes");
        student.setNativeHawaiianOrPacificIsland("No");
        student.setTwoOrMoreRaces("No");
        student.setDisadvantageStatus("No");
        student.setLepStatus("No");
        student.setInstitutionIdentifier("1");
        student.setInstitutionEntityMongoId("1");
        student.setSection504Status("No");
        student.setiDEAIndicator("No");

        Student storedStudent = persister.saveDomainObject(student);

        try {
            Thread.sleep(500L);
        } catch (InterruptedException e) {
            // ignore
        }

        // create assessment with implicit rule = 6th grade
        Assessment assess = new Assessment();
        assess.setDelayRule(2);
        assess.setEligibilityType(EligibilityType.IMPLICIT);

        ImplicitEligibilityRule eligRule = new ImplicitEligibilityRule("gradeLevelWhenAssessed", "06", RuleType.ENABLER);

        assess.setImplicitEligibilityRules(new ImplicitEligibilityRule[] { eligRule });

        assess.setNumGlobalOpportunities(4);
        assess.setTestWindow(new Assessment.TestWindow[] { new Assessment.TestWindow(new DateTime(2013, 12, 1, 0, 0),
                new DateTime(2013, 12, 31, 0, 0), null) });
        assess.setTestName("test1");
        assess.setVersion("1");
        assess.setTenantId("5");

        Assessment storedAssessment = persister.saveDomainObject(assess);

        try {
            Thread.sleep(500L);
        } catch (InterruptedException e) {
            // ignore
        }

        // verify eligiblestudent created associated to assessment
        EligibleStudent foundStudent = eligStudentRepo.findByStudentMongoId(storedStudent.getId());
        assertThat(foundStudent, notNullValue());
        assertThat(foundStudent.getAssessments(), hasSize(1));
        assertThat(foundStudent.getAssessments(), contains(storedAssessment));

        // delete assessment
        persister.deleteDomainObject(storedAssessment);

        try {
            Thread.sleep(500L);
        } catch (InterruptedException e) {
            // ignore
        }

        // verify eligiblestudent removed
        // keep the following
        foundStudent = eligStudentRepo.findByStudentMongoId(storedStudent.getId());
        assertThat(foundStudent, nullValue());

    }

    @Test
    public void testMultiAssessmentsWithMultiTenant() {

        // create student 10th grade
        Student student = new Student();
        student.setBirthDate(new DateTime(1980, 11, 11, 0, 0));
        student.setDistrictIdentifier("1");
        student.setEntityId("123456");
        student.setExternalSsid("111111111");
        student.setFirstName("Bob");
        student.setGender(Gender.Male);
        student.setGradeLevelWhenAssessed(GradeLevel.TENTHGRADE);
        student.setLanguageCode("eng");
        student.setLastName("Test");
        student.setStateAbbreviation("WI");
        student.setAmericanIndianOrAlaskaNative("No");
        student.setAsian("No");
        student.setBlackOrAfricanAmerican("No");
        student.setHispanicOrLatino("No");
        student.setWhite("Yes");
        student.setNativeHawaiianOrPacificIsland("No");
        student.setTwoOrMoreRaces("No");
        student.setDisadvantageStatus("No");
        student.setLepStatus("No");
        student.setInstitutionIdentifier("1");
        student.setInstitutionEntityMongoId("1");
        student.setSection504Status("No");
        student.setiDEAIndicator("No");

        Student storedStudent = persister.saveDomainObject(student);

        try {
            Thread.sleep(500L);
        } catch (InterruptedException e) {
            // ignore
        }

        // create student 10th grade institution 2
        Student student2 = new Student();
        student2.setBirthDate(new DateTime(1980, 11, 11, 0, 0));
        student2.setDistrictIdentifier("1");
        student2.setEntityId("123457");
        student2.setExternalSsid("111111112");
        student2.setFirstName("Bob");
        student2.setGender(Gender.Male);
        student2.setGradeLevelWhenAssessed(GradeLevel.TENTHGRADE);
        student2.setLanguageCode("eng");
        student2.setLastName("Test");
        student2.setStateAbbreviation("WI");
        student2.setAmericanIndianOrAlaskaNative("No");
        student2.setAsian("No");
        student2.setBlackOrAfricanAmerican("No");
        student2.setHispanicOrLatino("No");
        student2.setWhite("Yes");
        student2.setNativeHawaiianOrPacificIsland("No");
        student2.setTwoOrMoreRaces("No");
        student2.setDisadvantageStatus("No");
        student2.setLepStatus("No");
        student2.setInstitutionIdentifier("2");
        student2.setInstitutionEntityMongoId("2");
        student2.setSection504Status("No");
        student2.setiDEAIndicator("No");

        Student storedStudent2 = persister.saveDomainObject(student2);

        try {
            Thread.sleep(500L);
        } catch (InterruptedException e) {
            // ignore
        }

        // create student 10th grade institution 10
        Student student3 = new Student();
        student3.setBirthDate(new DateTime(1980, 11, 11, 0, 0));
        student3.setDistrictIdentifier("1");
        student3.setEntityId("123458");
        student3.setExternalSsid("111111113");
        student3.setFirstName("Bob");
        student3.setGender(Gender.Male);
        student3.setGradeLevelWhenAssessed(GradeLevel.TENTHGRADE);
        student3.setLanguageCode("eng");
        student3.setLastName("Test");
        student3.setStateAbbreviation("WI");
        student3.setAmericanIndianOrAlaskaNative("No");
        student3.setAsian("No");
        student3.setBlackOrAfricanAmerican("No");
        student3.setHispanicOrLatino("No");
        student3.setWhite("Yes");
        student3.setNativeHawaiianOrPacificIsland("No");
        student3.setTwoOrMoreRaces("No");
        student3.setDisadvantageStatus("No");
        student3.setLepStatus("No");
        student3.setInstitutionIdentifier("10");
        student3.setInstitutionEntityMongoId("10");
        student3.setSection504Status("No");
        student3.setiDEAIndicator("No");

        Student storedStudent3 = persister.saveDomainObject(student3);

        try {
            Thread.sleep(500L);
        } catch (InterruptedException e) {
            // ignore
        }

        // create assessment with implicit rule = 10th grade
        Assessment assess = new Assessment();
        assess.setDelayRule(2);
        assess.setEligibilityType(EligibilityType.IMPLICIT);

        ImplicitEligibilityRule eligRule = new ImplicitEligibilityRule("gradeLevelWhenAssessed", "10", RuleType.ENABLER);

        assess.setImplicitEligibilityRules(new ImplicitEligibilityRule[] { eligRule });

        assess.setNumGlobalOpportunities(4);
        assess.setTestWindow(new Assessment.TestWindow[] { new Assessment.TestWindow(new DateTime(2013, 12, 1, 0, 0),
                new DateTime(2013, 12, 31, 0, 0), null) });
        assess.setTestName("test1");
        assess.setVersion("1");
        assess.setTenantId("5");

        Assessment storedAssessment = persister.saveDomainObject(assess);

        try {
            Thread.sleep(500L);
        } catch (InterruptedException e) {
            // ignore
        }

        // create another assessment with implicit rule = 10th grade
        Assessment assess2 = new Assessment();
        assess2.setDelayRule(2);
        assess2.setEligibilityType(EligibilityType.IMPLICIT);

        ImplicitEligibilityRule eligRule2 = new ImplicitEligibilityRule("gradeLevelWhenAssessed", "10",
                RuleType.ENABLER);

        assess2.setImplicitEligibilityRules(new ImplicitEligibilityRule[] { eligRule2 });

        assess2.setNumGlobalOpportunities(4);
        assess2.setTestWindow(new Assessment.TestWindow[] { new Assessment.TestWindow(new DateTime(2013, 12, 1, 0, 0),
                new DateTime(2013, 12, 31, 0, 0), null) });
        assess2.setTestName("test2");
        assess2.setVersion("1");
        assess2.setTenantId("20");

        Assessment storedAssessment2 = persister.saveDomainObject(assess2);

        try {
            Thread.sleep(500L);
        } catch (InterruptedException e) {
            // ignore
        }

        EligibleStudent foundStudent1 = eligStudentRepo.findByStudentMongoId(storedStudent.getId());
        assertThat(foundStudent1, notNullValue());
        assertThat(foundStudent1.getAssessments(), hasSize(1));
        assertThat(foundStudent1.getAssessments(), contains(storedAssessment));

        EligibleStudent foundStudent2 = eligStudentRepo.findByStudentMongoId(storedStudent2.getId());
        assertThat(foundStudent2, notNullValue());
        assertThat(foundStudent2.getAssessments(), hasSize(1));
        assertThat(foundStudent2.getAssessments(), contains(storedAssessment));

        EligibleStudent foundStudent3 = eligStudentRepo.findByStudentMongoId(storedStudent3.getId());
        assertThat(foundStudent3, notNullValue());
        assertThat(foundStudent3.getAssessments(), hasSize(1));
        assertThat(foundStudent3.getAssessments(), contains(storedAssessment2));

    }

}
