/*
Educational Online Test Delivery System Copyright (c) 2013 American Institutes for Research

Distributed under the AIR Open Source License, Version 1.0 See accompanying file AIR-License-1_0.txt or at
http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 */

package org.opentestsystem.delivery.testreg.transformer;

import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;
import static org.junit.Assert.fail;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.security.SignatureException;
import java.util.ArrayList;
import java.util.List;

import org.bouncycastle.openpgp.PGPException;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.integration.AbstractPersistenceEmbeddedTestDw;
import org.opentestsystem.delivery.testreg.transformer.domain.DwConfigs.DwConfigType;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.messaging.Message;

public class GpgEncryptorTest extends AbstractPersistenceEmbeddedTestDw {

    @Autowired
    private GpgVerifier gpgVerifier;

    @Autowired
    private GPGEncryptor encryptor;

    private static final String PLAINTEXT = "this is some test text";

    private static final Logger LOGGER = LoggerFactory.getLogger(GpgEncryptorTest.class);

    private static final String UUID = "00000000-0000-0000-0000-000000000000";
    private static final String FILE_SUFFIX = "2014-01-01-000000000000";
    private static final int RECORDS = 10;

    // ATTENTION: if you would like to run this test outside of the Maven lifecycle, you will need to uncomment
    // the static block below and modify the path to where the test resources directory is kept

    // static {
    // System.setProperty("testreg.secret.passphrase.file",
    // "<path to code>/sb11-test-registration/persistence/src/test/resources/secret_passphrase.properties");
    // }

    @Test
    public void testEncrypt() {

        List<Path> filePaths = new ArrayList<Path>();

        File testFile = null;
        try {
            // testFile = File.createTempFile("tmp_plaintext_file_", "tmp");
            Path testFilePath = Files.createTempFile("tmp_plaintext_file_", "tmp");
            filePaths.add(testFilePath);
            testFile = testFilePath.toFile();
            FileWriter fw = new FileWriter(testFile);
            fw.write(PLAINTEXT);
            fw.flush();
            fw.close();
        } catch (IOException e1) {
            fail("failed to create a temp file");
        }

        Message<File> message = encryptor.encryptStream(testFile, UUID, FILE_SUFFIX, RECORDS, filePaths,
                DwConfigType.SBAC);

        File encryptedFile = message.getPayload();

        // If you have a need to use the command line GPG or some other GPG program to inspect the encrypted file,
        // uncomment the code below and add a file system path to output the signed, encrypted bytes to a file

        // FileOutputStream fout = null;
        //
        // try {
        // fout = new FileOutputStream(
        // "<file system path goes here>/testoutput.gpg");
        //
        // for (int i = 0; i < encryptedbytes.length; i++) {
        // fout.write(encryptedbytes[i]);
        // }
        //
        // fout.flush();
        // fout.close();
        //
        // } catch (IOException e1) {
        //
        // LOGGER.error("Failure to write file: ", e1);
        // }

        try {
            byte[] output = gpgVerifier.decryptAndVerify(encryptedFile);

            assertThat(new String(output), is(PLAINTEXT));

        } catch (SignatureException | IOException | PGPException e) {
            LOGGER.error("Failure to decrypt and verify", e);
            fail("An exception was thrown while decrypting and verifying");
        }

    }

}