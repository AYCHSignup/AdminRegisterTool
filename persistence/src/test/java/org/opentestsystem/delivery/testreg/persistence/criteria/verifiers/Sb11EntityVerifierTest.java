/*******************************************************************************
  * Educational Online Test Delivery System
  * Copyright (c) 2013 American Institutes for Research
  *
  * Distributed under the AIR Open Source License, Version 1.0
  * See accompanying file AIR-License-1_0.txt or at
  * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
  ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria.verifiers;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.DistrictEntity;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.InstitutionEntity;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.domain.StateEntity;
import org.opentestsystem.delivery.testreg.persistence.Verifier;
import org.opentestsystem.delivery.testreg.service.impl.Sb11EntityServiceImpl;
import org.springframework.validation.FieldError;

import java.util.List;

import static org.hamcrest.CoreMatchers.*;
import static org.hamcrest.collection.IsCollectionWithSize.*;
import static org.junit.Assert.*;
import static org.springframework.test.util.ReflectionTestUtils.*;

public class Sb11EntityVerifierTest {

    private boolean isEntityAssociationVerifierCalled;
    private Verifier<Sb11Entity> verifier;

    @Before
    public void setup() {
        verifier = new Sb11EntityVerifier();

        //Setup some test data
        Sb11EntityServiceImpl<Sb11Entity> sb11EntityService = new Sb11EntityServiceImpl<Sb11Entity>() {
            @SuppressWarnings("unchecked")
            @Override
            public Sb11Entity findById(final String pkId, final FormatType formatType) {
                if (pkId.equals("I67652355ABZ") && formatType == FormatType.DISTRICT) {
                    DistrictEntity district = new DistrictEntity();
                    district.setEntityId("D100");
                    return district;
                }
                return null;
            }

            @SuppressWarnings({ "rawtypes", "unchecked" })
            public Sb11Entity findByEntityIdAndStateAbbreviation(final String entityId, final String stateAbbreviation, final Class clazz) {
                if (InstitutionEntity.class.isAssignableFrom(clazz) && stateAbbreviation.equals("WI") && entityId.equals("I19090")) {
                    InstitutionEntity ie = new InstitutionEntity();
                    ie.setEntityId("I19090");
                    ie.setStateAbbreviation("WI");
                    return ie;
                }
                return null;
            }
        };
        VerifierUtils utils = new VerifierUtils();
        setField(utils, "sb11EntityService", sb11EntityService);
        setField(verifier, "verifierUtils", utils);
        setField(verifier, "sb11EntityAssociationVerifier", new Verifier<Sb11Entity>() {
            @Override
            public List<FieldError> verify(Sb11Entity b) {
                isEntityAssociationVerifierCalled = true;
                return null;
            }
        });
    }

    @Test
    public void verifyEntityFromImport() {
        //Setup Import like data. See there is no id while importing
        InstitutionEntity ie = new InstitutionEntity();
        ie.setEntityId("I19090");
        ie.setStateAbbreviation("WI");

        //Call Method under test
        verifier.verify(ie);

        //Verify
        assertThat(isEntityAssociationVerifierCalled, is(true));
    }

    @Test
    public void verifyEntityFromUI() {
        //Setup UI like data. 
        DistrictEntity de = new DistrictEntity();
        de.setId("I67652355ABZ");

        //Call Method under test
        verifier.verify(de);

        //Verify
        assertThat(isEntityAssociationVerifierCalled, is(true));
    }

    @Test
    public void verifyEntityNotFound() {
        //Setup entity
        StateEntity state = new StateEntity();
        state.setId("S44144");
        state.setEntityId("MN");

        //Call Method under test
        List<FieldError> errors = verifier.verify(state);

        //Verify
        assertThat(isEntityAssociationVerifierCalled, is(false));
        assertThat(errors, hasSize(1));
        assertThat(errors.get(0).getDefaultMessage(), is("StateAbbreviation not found in DB for delete"));
    }

}
