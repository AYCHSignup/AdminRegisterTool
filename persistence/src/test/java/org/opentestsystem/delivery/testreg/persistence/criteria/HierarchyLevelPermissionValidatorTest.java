/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria;

import static org.hamcrest.Matchers.hasSize;
import static org.junit.Assert.assertThat;

import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.DistrictEntity;
import org.opentestsystem.delivery.testreg.domain.InstitutionEntity;
import org.opentestsystem.delivery.testreg.domain.StateEntity;
import org.opentestsystem.delivery.testreg.domain.ClientEntity;
import org.opentestsystem.delivery.testreg.integration.AbstractPersistenceEmbeddedTest;
import org.opentestsystem.delivery.testreg.service.TestRegPersister;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.FieldError;

public class HierarchyLevelPermissionValidatorTest extends AbstractPersistenceEmbeddedTest {

    @Autowired
    private HierarchyLevelPermissionValidator levelValidator;

    @Autowired
    private TestRegPersister persister;

    @Before
    public void setup() {

        // insert a client
        ClientEntity clientEntity = new ClientEntity.Builder("1000", "Test Client",
                "21EC2020-3AEA-4069-A2DD-08002B30309D", "true").build();
        persister.saveDomainObject(clientEntity);

        // insert a state of WI
        StateEntity stateEntity = new StateEntity.Builder("WI", "Wisconsin", "CLIENT", "1000", "").build();
        persister.saveDomainObject(stateEntity);

        // insert a state of MN
        stateEntity = new StateEntity.Builder("MN", "Minnesota", "CLIENT", "1000", "").build();
        persister.saveDomainObject(stateEntity);

        // insert a district with id 10, parent of WI
        DistrictEntity districtEntity = new DistrictEntity.Builder("10", "DIST-10", "10", "STATE", "WI", "WI", "")
                .build();
        persister.saveDomainObject(districtEntity);

        // insert a district with id 20, parent of WI
        districtEntity = new DistrictEntity.Builder("20", "DIST-20-WI", "20", "STATE", "WI", "WI", "").build();
        persister.saveDomainObject(districtEntity);

        // insert a district with id 20, parent of MN
        districtEntity = new DistrictEntity.Builder("20", "DIST-20-MN", "21", "STATE", "MN", "MN", "").build();
        persister.saveDomainObject(districtEntity);

        // insert a district with id 30, parent of client, state of WI
        districtEntity = new DistrictEntity.Builder("30", "DIST-30", "30", "CLIENT", "1000", "WI", "").build();
        persister.saveDomainObject(districtEntity);

        // insert a district with id 40, parent of WI
        districtEntity = new DistrictEntity.Builder("40", "DIST-40-WI", "40", "STATE", "WI", "WI", "").build();
        persister.saveDomainObject(districtEntity);

        // insert a district with id 40, parent of client, state of NV
        districtEntity = new DistrictEntity.Builder("40", "DIST-40-CLIENT", "41", "CLIENT", "1000", "NV", "").build();
        persister.saveDomainObject(districtEntity);

    }

    // test insert of institution with parent of district
    // where district has unique id and parent is state
    @Test
    public void testInstDistUniqParentState() {

        InstitutionEntity institutionEntity = new InstitutionEntity.Builder("1", "INST-1", "DISTRICT", "1", "10", "WI",
                "").build();

        List<FieldError> errors = levelValidator.validate(institutionEntity);

        assertThat(errors, hasSize(0));

    }

    // test insert of institution with parent of district (20, WI)
    // where district id is not unique, each district parent is a different state
    @Test
    public void testInstDistNonUniqParentState() {

        InstitutionEntity institutionEntity = new InstitutionEntity.Builder("1", "INST-1", "DISTRICT", "1", "20", "WI",
                "").build();

        List<FieldError> errors = levelValidator.validate(institutionEntity);

        assertThat(errors, hasSize(0));

    }

    // test insert of institution with parent of district
    // where district id is unique and parent is client (30, WI)
    @Test
    public void testInstDistUniqParentClient() {

        InstitutionEntity institutionEntity = new InstitutionEntity.Builder("1", "INST-1", "DISTRICT", "1", "30", "WI",
                "").build();

        List<FieldError> errors = levelValidator.validate(institutionEntity);

        assertThat(errors, hasSize(0));

    }

    // test insert of institution with parent of district
    // where district id is not unique, one district is parented to a state,
    // another directly to the client (40, WI)
    @Test
    public void testInstDistNonUniqParentStateClient() {

        InstitutionEntity institutionEntity = new InstitutionEntity.Builder("1", "INST-1", "DISTRICT", "1", "40", "WI",
                "").build();

        List<FieldError> errors = levelValidator.validate(institutionEntity);

        assertThat(errors, hasSize(0));

    }

    // test insert of institution with parent of state (WI)
    @Test
    public void testInstParentState() {

        InstitutionEntity institutionEntity = new InstitutionEntity.Builder("1", "INST-1", "STATE", "1", "WI", "WI", "")
                .build();

        List<FieldError> errors = levelValidator.validate(institutionEntity);

        assertThat(errors, hasSize(0));

    }

    // test insert of institition with parent of client (1000)
    @Test
    public void testInstParentClient() {

        InstitutionEntity institutionEntity = new InstitutionEntity.Builder("1", "INST-1", "CLIENT", "1", "1000", "WI",
                "").build();

        List<FieldError> errors = levelValidator.validate(institutionEntity);

        assertThat(errors, hasSize(0));

    }

}
