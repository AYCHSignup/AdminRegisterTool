/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria;

import static org.hamcrest.collection.IsCollectionWithSize.hasSize;
import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;

import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.DistrictEntity;
import org.opentestsystem.delivery.testreg.domain.HierarchyLevel;
import org.opentestsystem.delivery.testreg.domain.Sb11NonEntity;
import org.opentestsystem.delivery.testreg.domain.User;
import org.opentestsystem.delivery.testreg.domain.User.RoleAssociation;
import org.opentestsystem.delivery.testreg.service.impl.Sb11NonEntityServiceImpl;
import org.opentestsystem.shared.search.domain.AbstractSearchRequest;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.validation.ObjectError;

public class UserDeletePersistenceCriteriaTest {

    UserDeletePersistenceCriteria userDeletePersistenceCriteria;

    User testUser;

    DistrictEntity testUserLocalEducationAgency;

    final static String TEST_USER_PARENT_ENTITY_ID = "0189801023";
    final static HierarchyLevel TEST_USER_PARENT_ENTITY_TYPE = HierarchyLevel.DISTRICT;

    @Before
    public void setup() throws Exception {
        userDeletePersistenceCriteria = new UserDeletePersistenceCriteria();
        ReflectionTestUtils.setField(userDeletePersistenceCriteria, "sb11NonEntityRepositoryService", new MockSb11NonEntityService());

        // District
        testUserLocalEducationAgency = new DistrictEntity();
        testUserLocalEducationAgency.setEntityId(TEST_USER_PARENT_ENTITY_ID);

        // User
        testUser = new User();
        RoleAssociation roles = new RoleAssociation();
        roles.setRole("SA");
        roles.setAssociatedEntityId(TEST_USER_PARENT_ENTITY_ID);
        roles.setLevel(TEST_USER_PARENT_ENTITY_TYPE);
        testUser.addRoleAssociation(roles);
        testUser.setEmail("test@gmail.com");
    }

    @Test
    public void testInvalidUserForDelete() { // Invalid Role@User
            RoleAssociation roles =new RoleAssociation();
            roles.setAssociatedEntityId(TEST_USER_PARENT_ENTITY_ID);
            roles.setLevel(TEST_USER_PARENT_ENTITY_TYPE);
            roles.setRole("Test Author");
            User testDeleteUser = new User();
            testDeleteUser.addRoleAssociation(roles);
            testDeleteUser.setDelete("Yes");
            testDeleteUser.setEmail("test1@gmail.com");
            List<? extends ObjectError> errors = userDeletePersistenceCriteria.validate(testDeleteUser);
            assertThat(errors, hasSize(1));
            assertThat(errors.get(0).getDefaultMessage(), is("User ElectronicMailAddress not found in DB for delete"));
        
    }
    
    @Test
    public void testNonExistentRoleForDelete() { // Invalid Role@User
            RoleAssociation roles =new RoleAssociation();
            roles.setAssociatedEntityId(TEST_USER_PARENT_ENTITY_ID);
            roles.setLevel(TEST_USER_PARENT_ENTITY_TYPE);
            roles.setRole("Test Author");
            User testDeleteUser = new User();
            testDeleteUser.addRoleAssociation(roles);
            testDeleteUser.setDelete("Yes");
            testDeleteUser.setEmail("test@gmail.com");
            List<? extends ObjectError> errors = userDeletePersistenceCriteria.validate(testDeleteUser);
            assertThat(errors, hasSize(1));
            assertThat(errors.get(0).getDefaultMessage(), is("User RoleAssociation not found in DB for delete"));
        
    }

    private class MockSb11NonEntityService extends Sb11NonEntityServiceImpl<Sb11NonEntity> {

        @Override
        @SuppressWarnings({"unchecked" })
        public <S extends Sb11NonEntity> S findByAlternateKey(final AbstractSearchRequest searchRequest,
                final Class<S> clazz) {
            if(!searchRequest.getSearchCriteria().isEmpty()) {
                String email = searchRequest.getSearchCriteria().get("email")[0];
                if(email.equals(testUser.getEmail())) {
                    return (S)testUser; 
                }
            }
            return null;
        }

    }

}
