/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.studentgroup;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.collection.IsEmptyCollection.empty;
import static org.hamcrest.core.IsNot.not;
import static org.junit.Assert.assertThat;
import static org.springframework.test.util.ReflectionTestUtils.setField;

import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.HierarchyLevel;
import org.opentestsystem.delivery.testreg.domain.StudentGroup;
import org.opentestsystem.delivery.testreg.domain.User;
import org.opentestsystem.delivery.testreg.persistence.Verifier;
import org.opentestsystem.delivery.testreg.service.UserService;
import org.springframework.validation.FieldError;

public class StudentGroupUserVerifierTest {

    private Verifier<StudentGroup> verifier;

    @Before
    public void setup() {
        verifier = new StudentGroupUserVerifier();

        setField(verifier, "userService", new UserService() {

            @Override
            public List<User> findAllByRoleAssociationLevel(String associatedEntityId, HierarchyLevel level) {
                return null;
            }

            @Override
            public List<User> findUserByLevel(String associatedEntityId, String stateAbbreviation, HierarchyLevel level) {
                return null;
            }

            @Override
            public List<User> findUserByLevel(String level) {
                return null;
            }

            @Override
            public User findByEmail(String email) {
                if (email.equals("owner@air.org"))
                    return new User();
                return null;
            }

            @Override
            public List<User> findUsersByRoleName(String roleName) {
                return null;
            }
        });
    }

    @Test
    public void testSuccess() {
        StudentGroup studentGroup = new StudentGroup();
        studentGroup.setOwnerEmail("owner@air.org");

        List<FieldError> errors = verifier.verify(studentGroup);
        assertThat(errors, is(empty()));
    }

    @Test
    public void testFailure() {
        StudentGroup studentGroup = new StudentGroup();
        studentGroup.setOwnerEmail("user@air.org");

        List<FieldError> errors = verifier.verify(studentGroup);
        assertThat(errors, is(not(empty())));
        assertThat(errors.get(0).getDefaultMessage(),
                is("Email address of owner of Student Group must be a user in the system"));
    }
}
