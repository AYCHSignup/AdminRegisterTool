/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.student;

import static org.hamcrest.collection.IsCollectionWithSize.hasSize;
import static org.hamcrest.collection.IsEmptyCollection.empty;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsNot.not;
import static org.junit.Assert.assertThat;
import static org.springframework.test.util.ReflectionTestUtils.setField;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.domain.Sb11SuperEntity;
import org.opentestsystem.delivery.testreg.domain.StateEntity;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.persistence.Verifier;
import org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.student.StudentStateVerifier;

public class StateVerifierTest {

    Verifier<Student> verifier;

    @Before
    public void setup() {
        verifier = new StudentStateVerifier();
        setField(verifier, "sb11EntityRepositoryService", new MockSb11EntityRepositoryService() {
            @SuppressWarnings("unchecked")
            @Override
            public <S extends Sb11Entity> S findByEntityIdAndStateAbbreviation(final String entityId, final String stateAbbreviation, final Class<S> clazz) {
                if (!entityId.equals("MN"))
                    return null;
                return (S) new StateEntity() {
                    private static final long serialVersionUID = 1L;
                    {
                        setEntityId("MN");
                        setEntityName("Minnesota");
                    }
                };
            }

            @SuppressWarnings("unchecked")
            @Override
            public <S extends Sb11SuperEntity> S findByEntityId(final String entityId, final Class<S> clazz) {
                if (!entityId.equals("MN"))
                    return null;
                return (S) new StateEntity() {
                    private static final long serialVersionUID = 1L;
                    {
                        setEntityId("MN");
                        setEntityName("Minnesota");
                    }
                };
            }
        });
    }

    @Test
    public void testSuccess() {
        Student student = new Student();
        student.setStateAbbreviation("MN");
        assertThat(verifier.verify(student), is(empty()));
    }

    @Test
    public void testFailure() {
        Student student = new Student();
        student.setStateAbbreviation("wi");
        assertThat(verifier.verify(student), is(not(empty())));
        assertThat(verifier.verify(student), hasSize(1));
        assertThat(verifier.verify(student).get(0).getRejectedValue().toString(), is("wi"));
    }
}
