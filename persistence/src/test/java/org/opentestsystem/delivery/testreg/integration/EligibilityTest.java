/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.integration;

import static org.hamcrest.CoreMatchers.notNullValue;
import static org.junit.Assert.assertThat;

import java.util.ArrayList;
import java.util.List;

import org.joda.time.DateTime;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.Assessment;
import org.opentestsystem.delivery.testreg.domain.Assessment.EligibilityType;
import org.opentestsystem.delivery.testreg.domain.Assessment.TestWindow;
import org.opentestsystem.delivery.testreg.domain.DistrictEntity;
import org.opentestsystem.delivery.testreg.domain.ExplicitEligibility;
import org.opentestsystem.delivery.testreg.domain.InstitutionEntity;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.domain.Student.Gender;
import org.opentestsystem.delivery.testreg.domain.Student.GradeLevel;
import org.opentestsystem.delivery.testreg.domain.Student.PrimaryDisabilityType;
import org.opentestsystem.delivery.testreg.domain.Student.Title3ProgramType;
import org.opentestsystem.delivery.testreg.service.TestRegPersister;
import org.springframework.beans.factory.annotation.Autowired;

public class EligibilityTest extends AbstractPersistenceEmbeddedTest {

    @Autowired
    private TestRegPersister persister;

    private ExplicitEligibility eligibility;
    private ExplicitEligibility eligibility2;
    private Assessment assessment;
    private Assessment assessment2;
    private Student student;

    @Before
    public void init() {

        mongoTemplate.insert(new InstitutionEntity.Builder("10001", "MiddletonSchool", "CLIENT", "234", "000000", "CA",
                "ADD").build());
        mongoTemplate.insert(new DistrictEntity.Builder("101", "Middleton School district", "000000", "CLIENT", "2444",
                "CA", "ADD").build());

        eligibility = new ExplicitEligibility();
        eligibility.setAdministrationName("testAdminName");
        eligibility.setResponsibleDistrictId("101");
        eligibility.setStateAbbreviation("WI");
        eligibility.setStudentId("123456");
        eligibility.setSubject("MTH");
        eligibility.setTestName("test1");
        eligibility.setTestVersion("1");

        eligibility2 = new ExplicitEligibility();
        eligibility2.setAdministrationName("testAdminName");
        eligibility2.setResponsibleDistrictId("101");
        eligibility2.setStateAbbreviation("WI");
        eligibility2.setStudentId("123456");
        eligibility2.setSubject("MTH");
        eligibility2.setTestName("test2");
        eligibility2.setTestVersion("1");

        assessment = new Assessment();
        TestWindow tstWindow = new TestWindow();
        assessment.setNumGlobalOpportunities(2);
        assessment.setDelayRule(1);
        assessment.setEligibilityType(EligibilityType.EXPLICIT);
        tstWindow.setBeginWindow(new DateTime(2014, 1, 1, 10, 30));
        tstWindow.setEndWindow(new DateTime(2014, 1, 1, 10, 50));
        TestWindow[] tstArray = { tstWindow };
        assessment.setTestWindow(tstArray);
        assessment.setTestName("test1");
        assessment.setVersion("1");

        assessment2 = new Assessment();
        TestWindow tstWindow2 = new TestWindow();
        assessment2.setNumGlobalOpportunities(2);
        assessment2.setDelayRule(1);
        assessment2.setEligibilityType(EligibilityType.EXPLICIT);
        tstWindow2.setBeginWindow(new DateTime(2014, 1, 1, 10, 30));
        tstWindow2.setEndWindow(new DateTime(2014, 1, 1, 10, 50));
        TestWindow[] tstArray2 = { tstWindow2 };
        assessment2.setTestWindow(tstArray2);
        assessment2.setTestName("test2");
        assessment2.setVersion("1");

        student = new Student();
        student.setEntityId("123456");
        student.setStateAbbreviation("WI");
        student.setDistrictIdentifier("101");
        student.setInstitutionIdentifier("10001");
        student.setMiddleName("MS");
        student.setFirstName("Joe");
        student.setLastName("Smith");
        student.setBirthDate("2013-10-10");
        student.setExternalSsid("WI12345");
        student.setGradeLevelWhenAssessed(GradeLevel.EIGHTHGRADE);
        student.setGender(Gender.Male);
        student.setHispanicOrLatino("NO");
        student.setAmericanIndianOrAlaskaNative("NO");
        student.setAsian("NO");
        student.setLanguageCode("eng");
        student.setBlackOrAfricanAmerican("NO");
        student.setWhite("Yes");
        student.setNativeHawaiianOrPacificIsland("NO");
        student.setTwoOrMoreRaces("NO");
        student.setiDEAIndicator("NO");
        student.setLepStatus("NO");
        student.setSection504Status("NO");
        student.setDisadvantageStatus("YES");
        student.setTitle3ProgressStatus("PROFICIENT");
        student.setMigrantStatus("YES");
        student.setFirstEntryDateIntoUsSchool("2014-09-01");
        student.setLepEntryDate("2010-10-10");
        student.setLepExitDate("2010-10-20");
        student.setTitle3ProgramType(Title3ProgramType.DUALLANGUAGE);
        student.setPrimaryDisabilityType(PrimaryDisabilityType.AUT);
    }

    @Test
    public void testSave() {
        persister.saveDomainObject(student);
        persister.saveDomainObject(assessment);
        persister.saveDomainObject(assessment2);

        List<ExplicitEligibility> eligs = new ArrayList<ExplicitEligibility>();
        eligs.add(eligibility);
        eligs.add(eligibility2);

        List<ExplicitEligibility> storedEligs = persister.saveDomainObjects(eligs);

        assertThat(storedEligs.get(0).getId(), notNullValue());
        assertThat(storedEligs.get(1).getId(), notNullValue());
    }

}
