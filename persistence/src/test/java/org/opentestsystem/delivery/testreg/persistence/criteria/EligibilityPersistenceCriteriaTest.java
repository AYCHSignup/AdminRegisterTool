/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.collection.IsCollectionWithSize.hasSize;
import static org.hamcrest.collection.IsEmptyCollection.empty;
import static org.hamcrest.core.IsNot.not;
import static org.junit.Assert.assertThat;
import static org.opentestsystem.delivery.testreg.domain.FormatType.ASSESSMENT;
import static org.opentestsystem.delivery.testreg.domain.FormatType.DISTRICT;
import static org.opentestsystem.delivery.testreg.domain.FormatType.STUDENT;
import static org.springframework.test.util.ReflectionTestUtils.setField;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Set;

import org.joda.time.DateTime;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.Assessment;
import org.opentestsystem.delivery.testreg.domain.Assessment.EligibilityType;
import org.opentestsystem.delivery.testreg.domain.DistrictEntity;
import org.opentestsystem.delivery.testreg.domain.ExplicitEligibility;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.HierarchyLevel;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.domain.Sb11NonEntity;
import org.opentestsystem.delivery.testreg.domain.Sb11SuperEntity;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.domain.TestRegistrationBase;
import org.opentestsystem.delivery.testreg.domain.search.AssessmentSearchRequest;
import org.opentestsystem.delivery.testreg.persistence.AssessmentRepository;
import org.opentestsystem.delivery.testreg.persistence.Verifier;
import org.opentestsystem.delivery.testreg.persistence.criteria.dependencyresolvers.EligibilityDependencyResolver;
import org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.eligibility.EligibilityAssessmentVerifier;
import org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.eligibility.EligibilityDistrictVerifier;
import org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.eligibility.EligibilityStudentVerifier;
import org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.eligibility.EligibilityVerifierChain;
import org.opentestsystem.delivery.testreg.service.Sb11EntityRepositoryService;
import org.opentestsystem.delivery.testreg.service.Sb11NonEntityRepositoryService;
import org.opentestsystem.shared.progman.client.domain.TenantType;
import org.opentestsystem.shared.search.domain.AbstractSearchRequest;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.validation.ObjectError;

public class EligibilityPersistenceCriteriaTest {

    Verifier<ExplicitEligibility> studentVerifier;
    Verifier<ExplicitEligibility> districtverifier;
    Verifier<ExplicitEligibility> assessmentverifier;

    Verifier<ExplicitEligibility> eligibilityVerifierChain;

    EligibilityPersistenceCriteria eligibilityPersistenceCriteria;

    @SuppressWarnings("serial")
    @Before
    public void setup() {
        this.studentVerifier = new EligibilityStudentVerifier();
        this.districtverifier = new EligibilityDistrictVerifier();
        this.assessmentverifier = new EligibilityAssessmentVerifier();
        this.eligibilityVerifierChain = new EligibilityVerifierChain();
        setField(
                this.eligibilityVerifierChain,
                "verifierMap",
                new HashMap<Class<? extends TestRegistrationBase>, HashMap<FormatType, Verifier<? extends TestRegistrationBase>>>() {
                    {
                        put(ExplicitEligibility.class,
                                new HashMap<FormatType, Verifier<? extends TestRegistrationBase>>() {
                            {
                                put(DISTRICT, EligibilityPersistenceCriteriaTest.this.districtverifier);
                                put(STUDENT, EligibilityPersistenceCriteriaTest.this.studentVerifier);
                                put(ASSESSMENT, EligibilityPersistenceCriteriaTest.this.assessmentverifier);
                            }
                        });

                    }
                });
    }

    @Test
    public void testNullDistrcitStudentAssessmentForEligibility() {

        final ExplicitEligibility eligibility = new ExplicitEligibility();
        final DistrictEntity districtEntity = null;
        final Student student = null;
        ReflectionTestUtils.setField(this.districtverifier, "sb11EntityRepositoryService", new MockEntityRepositoryService(districtEntity));
        ReflectionTestUtils.setField(this.studentVerifier, "sb11NonEntityRepositoryService", new MockNonEntityRepositoryService(student));
        ReflectionTestUtils.setField(this.assessmentverifier, "eligibilityDependencyResolver", new EligibilityDependencyResolver());
        assertThat(this.districtverifier.verify(eligibility), hasSize(1));
        assertThat(this.studentVerifier.verify(eligibility), hasSize(1));
        assertThat(this.assessmentverifier.verify(eligibility), hasSize(1));

    }

    @Test
    public void testInValidDistrict() {

        final ExplicitEligibility eligibility = new ExplicitEligibility();
        eligibility.setStudentId("7162817624");
        eligibility.setAdministrationName("FCAT");
        eligibility.setStateAbbreviation("CA");
        eligibility.setResponsibleDistrictId("21312125");
        ;
        eligibility.setSubject("Mathematics");
        eligibility.setTestName("DCAS-EOC");
        eligibility.setTestVersion("1.0RC");
        eligibility.setTestForm("Spring-2012-2013");
        final Student student = new Student();
        student.setEntityId("7162817624");
        student.setStateAbbreviation("CA");
        final Assessment assessment = new Assessment("DCAS-EOC", "1.0RC", null);

        assessment.setEligibilityType(EligibilityType.EXPLICIT);

        ReflectionTestUtils.setField(this.districtverifier, "sb11EntityRepositoryService", new MockEntityRepositoryService(null));
        final List<? extends ObjectError> errors = this.districtverifier.verify(eligibility);
        assertThat(errors, hasSize(1));
        assertThat(errors.get(0).getDefaultMessage(), is("Responsible District Identifier not found in the database"));
    }

    @Test
    public void testInValidStudent() {

        final DistrictEntity dEntity = new DistrictEntity();
        dEntity.setEntityId("21312125");
        final ExplicitEligibility eligibility = new ExplicitEligibility();
        eligibility.setStudentId("7162817624");
        eligibility.setAdministrationName("FCAT");
        eligibility.setStateAbbreviation("CA");
        eligibility.setResponsibleDistrictId("21312125");
        final Student student = null;
        eligibility.setSubject("Mathematics");
        eligibility.setTestName("DCAS-EOC");
        eligibility.setTestVersion("1.0RC");
        eligibility.setTestForm("Spring-2012-2013");
        final Assessment assessment = new Assessment("DCAS-EOC", "1.0RC", null);
        assessment.setEligibilityType(EligibilityType.EXPLICIT);
        ReflectionTestUtils.setField(this.districtverifier, "sb11EntityRepositoryService", new MockEntityRepositoryService(dEntity));
        ReflectionTestUtils.setField(this.studentVerifier, "sb11NonEntityRepositoryService", new MockNonEntityRepositoryService(student));
        EligibilityDependencyResolver res = new EligibilityDependencyResolver();
        ReflectionTestUtils.setField(res, "assessmentRepository", new MockNonEntityRepositoryService(assessment));
        ReflectionTestUtils.setField(this.assessmentverifier, "eligibilityDependencyResolver", res);
        assertThat(this.districtverifier.verify(eligibility), is(empty()));

        final List<? extends ObjectError> errors = this.studentVerifier.verify(eligibility);
        assertThat(errors, hasSize(1));
        assertThat(errors.get(0).getDefaultMessage(), is("Student Identifier not found in the database"));

    }

    @Test
    public void testInValidAssessment() {

        final DistrictEntity dEntity = new DistrictEntity();
        dEntity.setEntityId("21312125");

        final ExplicitEligibility eligibility = new ExplicitEligibility();
        eligibility.setStudentId("7162817624");
        eligibility.setAdministrationName("FCAT");
        eligibility.setStateAbbreviation("CA");
        eligibility.setResponsibleDistrictId("21312125");
        ;
        eligibility.setSubject("Mathematics");
        eligibility.setTestName("DCAS-EOC");
        eligibility.setTestVersion("1.0RC");
        eligibility.setTestForm("Spring-2012-2013");

        final Student student = new Student();
        student.setEntityId("7162817624");
        student.setStateAbbreviation("CA");
        final Assessment assessment = null;
        ReflectionTestUtils.setField(this.districtverifier, "sb11EntityRepositoryService", new MockEntityRepositoryService(dEntity));
        ReflectionTestUtils.setField(this.studentVerifier, "sb11NonEntityRepositoryService", new MockNonEntityRepositoryService(student));
        EligibilityDependencyResolver res = new EligibilityDependencyResolver();
        ReflectionTestUtils.setField(res, "assessmentRepository", new MockNonEntityRepositoryService(assessment));
        ReflectionTestUtils.setField(this.assessmentverifier, "eligibilityDependencyResolver", res);

        assertThat(this.districtverifier.verify(eligibility), is(empty()));
        assertThat(this.studentVerifier.verify(eligibility), is(empty()));
        assertThat(this.assessmentverifier.verify(eligibility), is(not(empty())));
        final List<? extends ObjectError> errors = this.assessmentverifier.verify(eligibility);
        assertThat(errors, hasSize(1));
        assertThat(errors.get(0).getDefaultMessage(), is("Test Name not found in the database"));
    }

    @Test
    public void testInValidExplicitAssessment() {

        final DistrictEntity dEntity = new DistrictEntity();
        dEntity.setEntityId("21312125");

        final ExplicitEligibility eligibility = new ExplicitEligibility();
        eligibility.setStudentId("7162817624");
        eligibility.setAdministrationName("FCAT");
        eligibility.setStateAbbreviation("CA");
        eligibility.setResponsibleDistrictId("21312125");
        ;
        eligibility.setSubject("Mathematics");
        eligibility.setTestName("DCAS-EOC");
        eligibility.setTestVersion("1.0RC");
        eligibility.setTestForm("Spring-2012-2013");

        final Student student = new Student();
        student.setEntityId("7162817624");
        student.setStateAbbreviation("CA");

        final Assessment assessment = new Assessment("DCAS-EOC", "1.0RC", null);
        assessment.setEligibilityType(EligibilityType.IMPLICIT);

        ReflectionTestUtils.setField(this.districtverifier, "sb11EntityRepositoryService", new MockEntityRepositoryService(dEntity));
        ReflectionTestUtils.setField(this.studentVerifier, "sb11NonEntityRepositoryService", new MockNonEntityRepositoryService(student));
        EligibilityDependencyResolver res = new EligibilityDependencyResolver();
        ReflectionTestUtils.setField(res, "assessmentRepository", new MockNonEntityRepositoryService(assessment));
        ReflectionTestUtils.setField(this.assessmentverifier, "eligibilityDependencyResolver", res);
        assertThat(this.districtverifier.verify(eligibility), is(empty()));
        assertThat(this.studentVerifier.verify(eligibility), is(empty()));
        assertThat(this.assessmentverifier.verify(eligibility), is(not(empty())));
        final List<? extends ObjectError> errors = this.assessmentverifier.verify(eligibility);
        assertThat(errors, hasSize(1));
        assertThat(errors.get(0).getDefaultMessage(), is("Eligibility Type for assessment must be explicit"));
    }

    @Test
    public void testValidTestFormForEligibility() {

        final DistrictEntity dEntity = new DistrictEntity();
        dEntity.setEntityId("21312125");

        final ExplicitEligibility eligibility = new ExplicitEligibility();
        eligibility.setStudentId("7162817624");
        eligibility.setAdministrationName("FCAT");
        eligibility.setStateAbbreviation("CA");
        eligibility.setResponsibleDistrictId("21312125");
        ;
        eligibility.setSubject("Mathematics");
        eligibility.setTestName("DCAS-EOC");
        eligibility.setTestVersion("1.0RC");
        eligibility.setTestForm("Spring-2012-2013");

        final Student student = new Student();
        student.setEntityId("7162817624");
        student.setStateAbbreviation("CA");

        final Assessment assessment = new Assessment("DCAS-EOC", "1.0RC", null);
        assessment.setEligibilityType(EligibilityType.EXPLICIT);
        final List<String> testForms = new ArrayList<String>();
        testForms.add("MyTest");
        assessment.setTestForm(testForms);
        assessment.setTenantId("123333");
        ReflectionTestUtils.setField(this.districtverifier, "sb11EntityRepositoryService", new MockEntityRepositoryService(dEntity));
        ReflectionTestUtils.setField(this.studentVerifier, "sb11NonEntityRepositoryService", new MockNonEntityRepositoryService(student));
        EligibilityDependencyResolver res = new EligibilityDependencyResolver();
        ReflectionTestUtils.setField(res, "assessmentRepository", new MockNonEntityRepositoryService(assessment));
        ReflectionTestUtils.setField(this.assessmentverifier, "eligibilityDependencyResolver", res);
        assertThat(this.districtverifier.verify(eligibility), is(empty()));
        assertThat(this.studentVerifier.verify(eligibility), is(empty()));
        assertThat(this.assessmentverifier.verify(eligibility), is(not(empty())));
        final List<? extends ObjectError> errors = this.assessmentverifier.verify(eligibility);
        assertThat(errors, hasSize(1));
        assertThat(errors.get(0).getDefaultMessage(), is("Eligibility record has a invalid TestForm name for the assessment"));

    }

    @Test
    public void testValidEligibility() {

        final DistrictEntity dEntity = new DistrictEntity();
        dEntity.setEntityId("21312125");

        final ExplicitEligibility eligibility = new ExplicitEligibility();
        eligibility.setStudentId("7162817624");
        eligibility.setAdministrationName("FCAT");
        eligibility.setStateAbbreviation("CA");
        eligibility.setResponsibleDistrictId("21312125");
        ;
        eligibility.setSubject("Mathematics");
        eligibility.setTestName("DCAS-EOC");
        eligibility.setTestVersion("1.0RC");
        eligibility.setTestForm("Spring-2012-2013");

        final Student student = new Student();
        student.setEntityId("7162817624");
        student.setStateAbbreviation("CA");

        final Assessment assessment = new Assessment("DCAS-EOC", "1.0RC", null);
        assessment.setEligibilityType(EligibilityType.EXPLICIT);

        ReflectionTestUtils.setField(this.districtverifier, "sb11EntityRepositoryService", new MockEntityRepositoryService(dEntity));
        ReflectionTestUtils.setField(this.studentVerifier, "sb11NonEntityRepositoryService", new MockNonEntityRepositoryService(student));
        EligibilityDependencyResolver res = new EligibilityDependencyResolver();
        ReflectionTestUtils.setField(res, "assessmentRepository", new MockNonEntityRepositoryService(assessment));
        ReflectionTestUtils.setField(this.assessmentverifier, "eligibilityDependencyResolver", res);

        assertThat(this.districtverifier.verify(eligibility), is(empty()));
        assertThat(this.studentVerifier.verify(eligibility), is(empty()));
        assertThat(this.assessmentverifier.verify(eligibility), is(empty()));

    }

    private class MockNonEntityRepositoryService implements Sb11NonEntityRepositoryService, AssessmentRepository {

        Student student;
        Assessment assessment;

        public MockNonEntityRepositoryService(final Student student) {
            this.student = student;
        }

        public MockNonEntityRepositoryService(final Assessment assessment) {
            this.assessment = assessment;
        }

        public MockNonEntityRepositoryService(final Assessment assessment, final Student student) {
            this.assessment = assessment;
            this.student = student;
        }

        @SuppressWarnings("unchecked")
        @Override
        public <T extends Sb11NonEntity> T findByAlternateKey(final AbstractSearchRequest searchRequest, final Class<T> clazz) {

            if (clazz.equals(Student.class)) {
                return (T) this.student;
            }

            if (clazz.equals(Assessment.class)) {
                return (T) this.assessment;
            }
            return null;
        }

        @Override
        public SearchResponse<Assessment> search(final AbstractSearchRequest inAbstractSearchRequest) {
            SearchResponse<Assessment> ment = new SearchResponse<Assessment>(new ArrayList<Assessment>(), new AssessmentSearchRequest(new HashMap<String, String[]>()), 1);
            ment.getSearchResults().add(assessment);
            return ment;
        }

        @Override
        public <S extends Assessment> List<S> save(final Iterable<S> inEntites) {
            return null;
        }

        @Override
        public List<Assessment> findAll() {
            return null;
        }

        @Override
        public List<Assessment> findAll(final Sort inSort) {
            return null;
        }

        @Override
        public Page<Assessment> findAll(final Pageable inPageable) {
            return null;
        }

        @Override
        public <S extends Assessment> S save(final S inEntity) {
            return null;
        }

        @Override
        public Assessment findOne(final String inId) {
            return null;
        }

        @Override
        public boolean exists(final String inId) {
            return false;
        }

        @Override
        public Iterable<Assessment> findAll(final Iterable<String> inIds) {
            return null;
        }

        @Override
        public long count() {
            return 0;
        }

        @Override
        public void delete(final String inId) {

        }

        @Override
        public void delete(final Assessment inEntity) {
        }

        @Override
        public void delete(final Iterable<? extends Assessment> inEntities) {
        }

        @Override
        public void deleteAll() {
        }

        @Override
        public Assessment findByTheAlternateKey(final AbstractSearchRequest inSearchRequest) {
            return null;
        }

        @Override
        public List<Assessment> findWithPossiblyNullLabel(final String inTestName, final String inTestLabel, final String inTenantId, final String inSourceTsb) {
            return null;
        }

        @Override
        public Assessment findMaxOpportunities() {
            return null;
        }

        @Override
        public List<Assessment> findAllByTenantsAndBeginWindow(final Collection<String> inTenantsList, final DateTime inDate) {
            return null;
        }

        @Override
        public List<Assessment> findByEligibilityTypeAndTenantIdIsIn(final String inEligibilityType, final List<String> inTenantIds) {
            return null;
        }

        @Override
        public List<Assessment> findByTestNameAndVersion(final String inTestName, final String inVersion) {
            return null;
        }

        @Override
        public List<Assessment> findByTestNameAndTenantId(final String inTestName, final String inTenantId) {
            return null;
        }

        @Override
        public List<Assessment> findByTenantId(final String inTenantId) {
            return null;
        }

    }

    private class MockEntityRepositoryService implements Sb11EntityRepositoryService {

        DistrictEntity district;

        public MockEntityRepositoryService(final DistrictEntity district) {
            this.district = district;
        }

        @SuppressWarnings("unchecked")
        @Override
        public <S extends Sb11Entity> S findByEntityIdAndStateAbbreviation(final String entityId, final String stateAbbreviation,
                final Class<S> clazz) {
            if (entityId != null && entityId.equals("21312125")) {
                return (S) this.district;
            }
            return null;
        }

        @Override
        public <S extends Sb11SuperEntity> S findByEntityId(final String entityId, final Class<S> clazz) {
            return null;
        }

        @Override
        public <S extends Sb11Entity> List<S> findAllByParentEntityTypeAndParentEntityId(final String parentEntityType, final String parentEntityId, final FormatType formatType) {
            return null;
        }

        @Override
        public <S extends Sb11Entity> List<S> findAllByParentEntityType(final String parentEntityType, final HierarchyLevel hierarchyLevel) {
            return null;
        }

        @Override
        public <S extends Sb11Entity> List<S> findAllByParentEntityTypeAndParentId(final String parentEntityType, final String parentMongoId, final Class<S> clazz) {
            return null;
        }

        @Override
        public <S extends Sb11SuperEntity> S findByEntityId(final String entityId, final TenantType tenantType) {
            return null;
        }

        @Override
        public <S extends Sb11Entity> S findByEntityIdAndStateAbbreviation(final String entityId, final String stateAbbreviation, final TenantType tenantType) {
            return null;
        }

        @Override
        public <S extends Sb11Entity> List<S> findAllByEntityId(final String entityId, final Class<S> clazz) {
            return null;
        }

        @Override
        public <S extends Sb11Entity> List<S> findAllByEntityIdAndEntityName(final String entityId, final String entityName, final Class<S> clazz) {
            return null;
        }

        @Override
        public <S extends Sb11Entity> S getParentEntity(final S entity) {
            return null;
        }

        /* (non-Javadoc)
         * @see Sb11EntityRepositoryService for the description of this method.( org.opentestsystem.delivery.testreg.service.Sb11EntityRepositoryService#findById(java.util.Set, java.lang.Class))
         */
        @Override
        public <S extends Sb11Entity> List<S> findById (Set<String> entityIds, Class<S> clazz) {
          // TODO Auto-generated method stub
          return null;
        }
    }

}
