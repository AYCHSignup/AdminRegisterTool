/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.collection.IsCollectionWithSize.hasSize;
import static org.hamcrest.collection.IsEmptyCollection.empty;
import static org.hamcrest.core.IsNot.not;
import static org.junit.Assert.assertThat;
import static org.opentestsystem.delivery.testreg.domain.FormatType.ASSESSMENT;
import static org.opentestsystem.delivery.testreg.domain.FormatType.DISTRICT;
import static org.opentestsystem.delivery.testreg.domain.FormatType.STUDENT;
import static org.springframework.test.util.ReflectionTestUtils.setField;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.Assessment;
import org.opentestsystem.delivery.testreg.domain.Assessment.EligibilityType;
import org.opentestsystem.delivery.testreg.domain.DistrictEntity;
import org.opentestsystem.delivery.testreg.domain.ExplicitEligibility;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.HierarchyLevel;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.domain.Sb11NonEntity;
import org.opentestsystem.delivery.testreg.domain.Sb11SuperEntity;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.domain.TestRegistrationBase;
import org.opentestsystem.delivery.testreg.persistence.Verifier;
import org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.eligibility.EligibilityAssessmentVerifier;
import org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.eligibility.EligibilityDistrictVerifier;
import org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.eligibility.EligibilityStudentVerifier;
import org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.eligibility.EligibilityVerifierChain;
import org.opentestsystem.delivery.testreg.service.Sb11EntityRepositoryService;
import org.opentestsystem.delivery.testreg.service.Sb11NonEntityRepositoryService;
import org.opentestsystem.shared.progman.client.domain.TenantType;
import org.opentestsystem.shared.search.domain.AbstractSearchRequest;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.validation.ObjectError;

public class EligibilityPersistenceCriteriaTest {

    Verifier<ExplicitEligibility> studentVerifier;
    Verifier<ExplicitEligibility> districtverifier;
    Verifier<ExplicitEligibility> assessmentverifier;

    Verifier<ExplicitEligibility> eligibilityVerifierChain;

    EligibilityPersistenceCriteria eligibilityPersistenceCriteria;

    @SuppressWarnings("serial")
    @Before
    public void setup() {
        studentVerifier = new EligibilityStudentVerifier();
        districtverifier = new EligibilityDistrictVerifier();
        assessmentverifier = new EligibilityAssessmentVerifier();
        eligibilityVerifierChain = new EligibilityVerifierChain();
        setField(
                eligibilityVerifierChain,
                "verifierMap",
                new HashMap<Class<? extends TestRegistrationBase>, HashMap<FormatType, Verifier<? extends TestRegistrationBase>>>() {
                    {
                        put(ExplicitEligibility.class,
                                new HashMap<FormatType, Verifier<? extends TestRegistrationBase>>() {
                                    {
                                        put(DISTRICT, districtverifier);
                                        put(STUDENT, studentVerifier);
                                        put(ASSESSMENT, assessmentverifier);
                                    }
                                });

                    }
                });
    }

    @Test
    public void testNullDistrcitStudentAssessmentForEligibility() {

        ExplicitEligibility eligibility = new ExplicitEligibility();
        DistrictEntity districtEntity = null;
        Student student = null;
        Assessment assessment = null;
        ReflectionTestUtils.setField(districtverifier, "sb11EntityRepositoryService", new MockEntityRepositoryService(
                districtEntity));
        ReflectionTestUtils.setField(studentVerifier, "sb11NonEntityRepositoryService",
                new MockNonEntityRepositoryService(student));
        ReflectionTestUtils.setField(assessmentverifier, "sb11NonEntityRepositoryService",
                new MockNonEntityRepositoryService(assessment));
        assertThat(districtverifier.verify(eligibility), hasSize(1));
        assertThat(studentVerifier.verify(eligibility), hasSize(1));
        assertThat(assessmentverifier.verify(eligibility), hasSize(1));

    }

    @Test
    public void testInValidDistrict() {

        ExplicitEligibility eligibility = new ExplicitEligibility();
        eligibility.setStudentId("7162817624");
        eligibility.setAdministrationName("FCAT");
        eligibility.setStateAbbreviation("CA");
        eligibility.setResponsibleDistrictId("21312125");;
        eligibility.setSubject("Mathematics");
        eligibility.setTestName("DCAS-EOC");
        eligibility.setTestVersion("1.0RC");
        eligibility.setTestForm("Spring-2012-2013");
        Student student = new Student();
        student.setEntityId("7162817624");
        student.setStateAbbreviation("CA");
        Assessment assessment = new Assessment("DCAS-EOC", "1.0RC", null);

        assessment.setEligibilityType(EligibilityType.EXPLICIT);

        ReflectionTestUtils.setField(districtverifier, "sb11EntityRepositoryService", new MockEntityRepositoryService(
                null));
        List<? extends ObjectError> errors = districtverifier.verify(eligibility);
        assertThat(errors, hasSize(1));
        assertThat(errors.get(0).getDefaultMessage(), is("Responsible District Identifier not found in the database"));
    }

    @Test
    public void testInValidStudent() {

        DistrictEntity dEntity = new DistrictEntity();
        dEntity.setEntityId("21312125");
        ExplicitEligibility eligibility = new ExplicitEligibility();
        eligibility.setStudentId("7162817624");
        eligibility.setAdministrationName("FCAT");
        eligibility.setStateAbbreviation("CA");
        eligibility.setResponsibleDistrictId("21312125");
        Student student = null;
        eligibility.setSubject("Mathematics");
        eligibility.setTestName("DCAS-EOC");
        eligibility.setTestVersion("1.0RC");
        eligibility.setTestForm("Spring-2012-2013");
        Assessment assessment = new Assessment("DCAS-EOC", "1.0RC", null);
        assessment.setEligibilityType(EligibilityType.EXPLICIT);
        ReflectionTestUtils.setField(districtverifier, "sb11EntityRepositoryService", new MockEntityRepositoryService(
                dEntity));
        ReflectionTestUtils.setField(studentVerifier, "sb11NonEntityRepositoryService",
                new MockNonEntityRepositoryService(student));
        ReflectionTestUtils.setField(assessmentverifier, "sb11NonEntityRepositoryService",
                new MockNonEntityRepositoryService(assessment));

        assertThat(districtverifier.verify(eligibility), is(empty()));

        List<? extends ObjectError> errors = studentVerifier.verify(eligibility);
        assertThat(errors, hasSize(1));
        assertThat(errors.get(0).getDefaultMessage(), is("Student Identifier not found in the database"));

    }

    @Test
    public void testInValidAssessment() {

        DistrictEntity dEntity = new DistrictEntity();
        dEntity.setEntityId("21312125");

        ExplicitEligibility eligibility = new ExplicitEligibility();
        eligibility.setStudentId("7162817624");
        eligibility.setAdministrationName("FCAT");
        eligibility.setStateAbbreviation("CA");
        eligibility.setResponsibleDistrictId("21312125");;
        eligibility.setSubject("Mathematics");
        eligibility.setTestName("DCAS-EOC");
        eligibility.setTestVersion("1.0RC");
        eligibility.setTestForm("Spring-2012-2013");

        Student student = new Student();
        student.setEntityId("7162817624");
        student.setStateAbbreviation("CA");
        Assessment assessment = null;
        ReflectionTestUtils.setField(districtverifier, "sb11EntityRepositoryService", new MockEntityRepositoryService(
                dEntity));
        ReflectionTestUtils.setField(studentVerifier, "sb11NonEntityRepositoryService",
                new MockNonEntityRepositoryService(student));
        ReflectionTestUtils.setField(assessmentverifier, "sb11NonEntityRepositoryService",
                new MockNonEntityRepositoryService(assessment));

        assertThat(districtverifier.verify(eligibility), is(empty()));
        assertThat(studentVerifier.verify(eligibility), is(empty()));
        assertThat(assessmentverifier.verify(eligibility), is(not(empty())));
        List<? extends ObjectError> errors = assessmentverifier.verify(eligibility);
        assertThat(errors, hasSize(1));
        assertThat(errors.get(0).getDefaultMessage(), is("Test Name not found in the database"));
    }

    @Test
    public void testInValidExplicitAssessment() {

        DistrictEntity dEntity = new DistrictEntity();
        dEntity.setEntityId("21312125");

        ExplicitEligibility eligibility = new ExplicitEligibility();
        eligibility.setStudentId("7162817624");
        eligibility.setAdministrationName("FCAT");
        eligibility.setStateAbbreviation("CA");
        eligibility.setResponsibleDistrictId("21312125");;
        eligibility.setSubject("Mathematics");
        eligibility.setTestName("DCAS-EOC");
        eligibility.setTestVersion("1.0RC");
        eligibility.setTestForm("Spring-2012-2013");

        Student student = new Student();
        student.setEntityId("7162817624");
        student.setStateAbbreviation("CA");

        Assessment assessment = new Assessment("DCAS-EOC", "1.0RC", null);
        assessment.setEligibilityType(EligibilityType.IMPLICIT);

        ReflectionTestUtils.setField(districtverifier, "sb11EntityRepositoryService", new MockEntityRepositoryService(
                dEntity));
        ReflectionTestUtils.setField(studentVerifier, "sb11NonEntityRepositoryService",
                new MockNonEntityRepositoryService(student));
        ReflectionTestUtils.setField(assessmentverifier, "sb11NonEntityRepositoryService",
                new MockNonEntityRepositoryService(assessment, student));

        assertThat(districtverifier.verify(eligibility), is(empty()));
        assertThat(studentVerifier.verify(eligibility), is(empty()));
        assertThat(assessmentverifier.verify(eligibility), is(not(empty())));
        List<? extends ObjectError> errors = assessmentverifier.verify(eligibility);
        assertThat(errors, hasSize(1));
        assertThat(errors.get(0).getDefaultMessage(), is("Eligibility Type for assessment must be explicit"));
    }

    @Test
    public void testValidTestFormForEligibility() {

        DistrictEntity dEntity = new DistrictEntity();
        dEntity.setEntityId("21312125");

        ExplicitEligibility eligibility = new ExplicitEligibility();
        eligibility.setStudentId("7162817624");
        eligibility.setAdministrationName("FCAT");
        eligibility.setStateAbbreviation("CA");
        eligibility.setResponsibleDistrictId("21312125");;
        eligibility.setSubject("Mathematics");
        eligibility.setTestName("DCAS-EOC");
        eligibility.setTestVersion("1.0RC");
        eligibility.setTestForm("Spring-2012-2013");

        Student student = new Student();
        student.setEntityId("7162817624");
        student.setStateAbbreviation("CA");

        Assessment assessment = new Assessment("DCAS-EOC", "1.0RC", null);
        assessment.setEligibilityType(EligibilityType.EXPLICIT);
        List<String> testForms = new ArrayList<String>();
        testForms.add("MyTest");
        assessment.setTestForm(testForms);
        assessment.setTenantId("123333");
        ReflectionTestUtils.setField(districtverifier, "sb11EntityRepositoryService", new MockEntityRepositoryService(
                dEntity));
        ReflectionTestUtils.setField(studentVerifier, "sb11NonEntityRepositoryService",
                new MockNonEntityRepositoryService(student));
        ReflectionTestUtils.setField(assessmentverifier, "sb11NonEntityRepositoryService",
                new MockNonEntityRepositoryService(assessment, student));

        assertThat(districtverifier.verify(eligibility), is(empty()));
        assertThat(studentVerifier.verify(eligibility), is(empty()));
        assertThat(assessmentverifier.verify(eligibility), is(not(empty())));
        List<? extends ObjectError> errors = assessmentverifier.verify(eligibility);
        assertThat(errors, hasSize(1));
        assertThat(errors.get(0).getDefaultMessage(),
                is("Eligibility record has a invalid TestForm name for the assessment"));

    }

    @Test
    public void testValidEligibility() {

        DistrictEntity dEntity = new DistrictEntity();
        dEntity.setEntityId("21312125");

        ExplicitEligibility eligibility = new ExplicitEligibility();
        eligibility.setStudentId("7162817624");
        eligibility.setAdministrationName("FCAT");
        eligibility.setStateAbbreviation("CA");
        eligibility.setResponsibleDistrictId("21312125");;
        eligibility.setSubject("Mathematics");
        eligibility.setTestName("DCAS-EOC");
        eligibility.setTestVersion("1.0RC");
        eligibility.setTestForm("Spring-2012-2013");

        Student student = new Student();
        student.setEntityId("7162817624");
        student.setStateAbbreviation("CA");

        Assessment assessment = new Assessment("DCAS-EOC", "1.0RC", null);
        assessment.setEligibilityType(EligibilityType.EXPLICIT);

        ReflectionTestUtils.setField(districtverifier, "sb11EntityRepositoryService", new MockEntityRepositoryService(
                dEntity));
        ReflectionTestUtils.setField(studentVerifier, "sb11NonEntityRepositoryService",
                new MockNonEntityRepositoryService(student));
        ReflectionTestUtils.setField(assessmentverifier, "sb11NonEntityRepositoryService",
                new MockNonEntityRepositoryService(assessment, student));

        assertThat(districtverifier.verify(eligibility), is(empty()));
        assertThat(studentVerifier.verify(eligibility), is(empty()));
        assertThat(assessmentverifier.verify(eligibility), is(empty()));

    }

    private class MockNonEntityRepositoryService implements Sb11NonEntityRepositoryService {

        Student student;
        Assessment assessment;

        public MockNonEntityRepositoryService(Student student) {
            this.student = student;
        }

        public MockNonEntityRepositoryService(Assessment assessment) {
            this.assessment = assessment;
        }

        public MockNonEntityRepositoryService(Assessment assessment, Student student) {
            this.assessment = assessment;
            this.student = student;
        }

        @SuppressWarnings("unchecked")
        @Override
        public <T extends Sb11NonEntity> T findByAlternateKey(AbstractSearchRequest searchRequest, Class<T> clazz) {

            if (clazz.equals(Student.class)) {
                return (T) student;
            }

            if (clazz.equals(Assessment.class)) {
                return (T) assessment;
            }
            return null;
        }

    }

    private class MockEntityRepositoryService implements Sb11EntityRepositoryService {

        DistrictEntity district;

        public MockEntityRepositoryService(DistrictEntity district) {
            this.district = district;
        }

        @SuppressWarnings("unchecked")
        @Override
        public <S extends Sb11Entity> S findByEntityIdAndStateAbbreviation(String entityId, String stateAbbreviation,
                Class<S> clazz) {
            if (entityId != null && entityId.equals("21312125")) {
                return (S) district;
            }
            return null;
        }

        @Override
        public <S extends Sb11SuperEntity> S findByEntityId(String entityId, Class<S> clazz) {
            // TODO Auto-generated method stub
            return null;
        }

        @Override
        public <S extends Sb11Entity> List<S> findAllByParentEntityTypeAndParentEntityId(String parentEntityType,
                String parentEntityId, FormatType formatType) {
            // TODO Auto-generated method stub!=
            return null;
        }

        @Override
        public <S extends Sb11Entity> List<S> findAllByParentEntityType(String parentEntityType,
                HierarchyLevel hierarchyLevel) {
            // TODO Auto-generated method stub
            return null;
        }

        @Override
        public <S extends Sb11Entity> List<S> findAllByParentEntityTypeAndParentId(String parentEntityType,
                String parentMongoId, Class<S> clazz) {
            // TODO Auto-generated method stub
            return null;
        }

        @Override
        public <S extends Sb11SuperEntity> S findByEntityId(String entityId, TenantType tenantType) {
            return null;
        }

        @Override
        public <S extends Sb11Entity> S findByEntityIdAndStateAbbreviation(String entityId, String stateAbbreviation,
                TenantType tenantType) {
            return null;
        }

        @Override
        public <S extends Sb11Entity> List<S> findAllByEntityId(String entityId, Class<S> clazz) {
            return null;
        }

        @Override
        public <S extends Sb11Entity> List<S> findAllByEntityIdAndEntityName(String entityId, String entityName,
                Class<S> clazz) {
            return null;
        }

        @Override
        public <S extends Sb11Entity> S getParentEntity(S entity) {
            // TODO Auto-generated method stub
            return null;
        }
    }

}
