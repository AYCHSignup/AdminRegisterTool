/*
Educational Online Test Delivery System Copyright (c) 2013 American Institutes for Research

Distributed under the AIR Open Source License, Version 1.0 See accompanying file AIR-License-1_0.txt or at
http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 */

package org.opentestsystem.delivery.testreg.integration.eligibility;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.Matchers.anyOf;
import static org.hamcrest.Matchers.containsInAnyOrder;
import static org.hamcrest.Matchers.empty;
import static org.hamcrest.Matchers.hasItems;
import static org.hamcrest.Matchers.hasProperty;
import static org.hamcrest.Matchers.hasSize;
import static org.junit.Assert.assertThat;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Set;

import org.joda.time.DateTime;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.Accommodation;
import org.opentestsystem.delivery.testreg.domain.Assessment;
import org.opentestsystem.delivery.testreg.domain.Assessment.EligibilityType;
import org.opentestsystem.delivery.testreg.domain.EligibleStudent;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.domain.Student.Gender;
import org.opentestsystem.delivery.testreg.domain.Student.GradeLevel;
import org.opentestsystem.delivery.testreg.domain.exception.EligibilityException;
import org.opentestsystem.delivery.testreg.integration.AbstractPersistenceEmbeddedTest;
import org.opentestsystem.delivery.testreg.persistence.EligibleStudentRepository;
import org.opentestsystem.delivery.testreg.service.EligibilityService;
import org.opentestsystem.delivery.testreg.service.TestRegPersister;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;

public class EligibilityServiceTest extends AbstractPersistenceEmbeddedTest {

    @Autowired
    private EligibilityService eligService;

    @Autowired
    private TestRegPersister testRegPersister;

    @Autowired
    private EligibleStudentRepository eligStudentRepo;

    @Test
    public void testAddStudentEligibleForAssessment() {
        // create an assessment

        Assessment assess = new Assessment();
        assess.setDelayRule(2);
        assess.setEligibilityType(EligibilityType.EXPLICIT);
        assess.setNumGlobalOpportunities(4);
        assess.setTestWindow(new Assessment.TestWindow[] { new Assessment.TestWindow(new DateTime(2013, 12, 1, 0, 0),
                new DateTime(2013, 12, 31, 0, 0), null) });
        assess.setTestName("test1");
        assess.setVersion("1");
        assess.setTenantId("5");

        Assessment storedAssessment = testRegPersister.saveDomainObject(assess);

        // create a student

        Student student = new Student();
        student.setBirthDate(new DateTime(1980, 11, 11, 0, 0));
        student.setDistrictIdentifier("1");
        student.setEntityId("123456");
        student.setExternalSsid("111111111");
        student.setFirstName("Bob");
        student.setGender(Gender.Male);
        student.setGradeLevelWhenAssessed(GradeLevel.FOURTHGRADE);
        student.setLanguageCode("eng");
        student.setLastName("Test");
        student.setStateAbbreviation("WI");
        student.setAmericanIndianOrAlaskaNative("No");
        student.setAsian("No");
        student.setBlackOrAfricanAmerican("No");
        student.setHispanicOrLatino("No");
        student.setWhite("Yes");
        student.setNativeHawaiianOrPacificIsland("No");
        student.setTwoOrMoreRaces("No");
        student.setDisadvantageStatus("No");
        student.setLepStatus("No");
        student.setInstitutionIdentifier("1");
        student.setSection504Status("No");
        student.setiDEAIndicator("No");

        Student storedStudent = testRegPersister.saveDomainObject(student);

        // associate the 2 together

        eligService.saveAssociation(storedAssessment, storedStudent);

        // verify that Student->Assessment records created correctly

        EligibleStudent foundEligibleStudent = eligStudentRepo.findByStudentMongoId(storedStudent.getId());

        assertThat(foundEligibleStudent, notNullValue());
        assertThat(foundEligibleStudent.getAssessments(), hasSize(1));
        assertThat(foundEligibleStudent.getAssessmentsAsList().get(0).getId(), is(storedAssessment.getId()));

    }

    @Test
    public void testAddStudentsEligibleForAssessment() {
        // create an assessment

        Assessment assess = new Assessment();
        assess.setDelayRule(2);
        assess.setEligibilityType(EligibilityType.EXPLICIT);
        assess.setNumGlobalOpportunities(4);
        assess.setTestWindow(new Assessment.TestWindow[] { new Assessment.TestWindow(new DateTime(2013, 12, 1, 0, 0),
                new DateTime(2013, 12, 31, 0, 0), null) });
        assess.setTestName("test2");
        assess.setVersion("1");
        assess.setTenantId("5");

        Assessment storedAssessment = testRegPersister.saveDomainObject(assess);

        // create multiple students

        Student student = new Student();
        student.setBirthDate(new DateTime(1980, 11, 11, 0, 0));
        student.setDistrictIdentifier("1");
        student.setEntityId("123457");
        student.setExternalSsid("111111114");
        student.setFirstName("Bob");
        student.setGender(Gender.Male);
        student.setGradeLevelWhenAssessed(GradeLevel.FOURTHGRADE);
        student.setLanguageCode("eng");
        student.setLastName("Test");
        student.setStateAbbreviation("WI");
        student.setAmericanIndianOrAlaskaNative("No");
        student.setAsian("No");
        student.setBlackOrAfricanAmerican("No");
        student.setHispanicOrLatino("No");
        student.setWhite("Yes");
        student.setNativeHawaiianOrPacificIsland("No");
        student.setTwoOrMoreRaces("No");
        student.setDisadvantageStatus("No");
        student.setLepStatus("No");
        student.setInstitutionIdentifier("1");
        student.setSection504Status("No");
        student.setiDEAIndicator("No");

        Student storedStudent = testRegPersister.saveDomainObject(student);

        Student student2 = new Student();
        student2.setBirthDate(new DateTime(1980, 11, 11, 0, 0));
        student2.setDistrictIdentifier("1");
        student2.setEntityId("123458");
        student2.setExternalSsid("111111113");
        student2.setFirstName("Bob");
        student2.setGender(Gender.Male);
        student2.setGradeLevelWhenAssessed(GradeLevel.FOURTHGRADE);
        student2.setLanguageCode("eng");
        student2.setLastName("Test");
        student2.setStateAbbreviation("WI");
        student2.setAmericanIndianOrAlaskaNative("No");
        student2.setAsian("No");
        student2.setBlackOrAfricanAmerican("No");
        student2.setHispanicOrLatino("No");
        student2.setWhite("Yes");
        student2.setNativeHawaiianOrPacificIsland("No");
        student2.setTwoOrMoreRaces("No");
        student2.setDisadvantageStatus("No");
        student2.setLepStatus("No");
        student2.setInstitutionIdentifier("1");
        student2.setSection504Status("No");
        student2.setiDEAIndicator("No");

        Student storedStudent2 = testRegPersister.saveDomainObject(student2);

        // associate

        List<Student> studentsToAssociate = new ArrayList<Student>();
        studentsToAssociate.add(storedStudent);
        studentsToAssociate.add(storedStudent2);

        eligService.saveAssociations(assess, studentsToAssociate);

        // verify that Student->Assessment records created correctly

        EligibleStudent foundEligibleStudent = eligStudentRepo.findByStudentMongoId(storedStudent.getId());

        assertThat(foundEligibleStudent, notNullValue());
        assertThat(foundEligibleStudent.getAssessments(), hasSize(1));
        assertThat(foundEligibleStudent.getAssessmentsAsList().get(0).getId(), is(storedAssessment.getId()));

        EligibleStudent foundEligibleStudent2 = eligStudentRepo.findByStudentMongoId(storedStudent2.getId());

        assertThat(foundEligibleStudent2, notNullValue());
        assertThat(foundEligibleStudent2.getAssessments(), hasSize(1));
        assertThat(foundEligibleStudent2.getAssessmentsAsList().get(0).getId(), is(storedAssessment.getId()));
    }

    @Test
    public void testFindEligibleAssessmentsForStudent() {
        // create a couple of assessments

        Assessment assess = new Assessment();
        assess.setDelayRule(2);
        assess.setEligibilityType(EligibilityType.EXPLICIT);
        assess.setNumGlobalOpportunities(4);
        assess.setTestWindow(new Assessment.TestWindow[] { new Assessment.TestWindow(new DateTime(2013, 12, 1, 0, 0),
                new DateTime(2013, 12, 31, 0, 0), null) });
        assess.setVersion("1");
        assess.setTenantId("WI");
        assess.setTestName("test3");

        Assessment storedAssessment = testRegPersister.saveDomainObject(assess);

        Assessment assess2 = new Assessment();
        assess2.setDelayRule(2);
        assess2.setEligibilityType(EligibilityType.EXPLICIT);
        assess2.setNumGlobalOpportunities(2);
        assess2.setTestWindow(new Assessment.TestWindow[] { new Assessment.TestWindow(new DateTime(2013, 12, 1, 0, 0),
                new DateTime(2013, 12, 31, 0, 0), null) });
        assess2.setVersion("1");
        assess2.setTenantId("MN");
        assess2.setTestName("test4");

        Assessment storedAssessment2 = testRegPersister.saveDomainObject(assess2);

        // create a student

        Student student = new Student();
        student.setBirthDate(new DateTime(1980, 11, 11, 0, 0));
        student.setDistrictIdentifier("1");
        student.setEntityId("123459");
        student.setExternalSsid("111111111");
        student.setFirstName("Bob");
        student.setGender(Gender.Male);
        student.setGradeLevelWhenAssessed(GradeLevel.FOURTHGRADE);
        student.setLanguageCode("eng");
        student.setLastName("Test");
        student.setStateAbbreviation("WI");
        student.setAmericanIndianOrAlaskaNative("No");
        student.setAsian("No");
        student.setBlackOrAfricanAmerican("No");
        student.setHispanicOrLatino("No");
        student.setWhite("Yes");
        student.setNativeHawaiianOrPacificIsland("No");
        student.setTwoOrMoreRaces("No");
        student.setDisadvantageStatus("No");
        student.setLepStatus("No");
        student.setInstitutionIdentifier("1");
        student.setSection504Status("No");
        student.setiDEAIndicator("No");

        Student storedStudent = testRegPersister.saveDomainObject(student);

        // associate
        eligService.saveAssociation(assess, student);
        eligService.saveAssociation(assess2, student);

        // use service api to get assessments for a student

        List<Assessment> associatedAssessments = eligService.findEligibleAssessmentsByStudent(storedStudent.getId());

        // verify assessments returned are correct

        assertThat(associatedAssessments, hasSize(2));
        assertThat(associatedAssessments.get(0).getId(),
                anyOf(is(storedAssessment.getId()), is(storedAssessment2.getId())));
        assertThat(associatedAssessments.get(1).getId(),
                anyOf(is(storedAssessment.getId()), is(storedAssessment2.getId())));
    }

    @Test
    public void testFindEligibleAssessmentsForTestWindow() {
        // create a couple of assessments

        Assessment assess = new Assessment();
        assess.setDelayRule(2);
        assess.setEligibilityType(EligibilityType.EXPLICIT);
        assess.setNumGlobalOpportunities(4);
        assess.setTestWindow(new Assessment.TestWindow[] { new Assessment.TestWindow(new DateTime(2013, 12, 1, 0, 0),
                new DateTime().plusDays(1), null) });
        assess.setVersion("1");
        assess.setTenantId("WI");
        assess.setTestName("window test 1");

        Assessment storedAssessment = testRegPersister.saveDomainObject(assess);

        Assessment assess2 = new Assessment();
        assess2.setDelayRule(2);
        assess2.setEligibilityType(EligibilityType.EXPLICIT);
        assess2.setNumGlobalOpportunities(2);
        assess2.setTestWindow(new Assessment.TestWindow[] { new Assessment.TestWindow(new DateTime().plusYears(2),
                new DateTime().plusYears(3), null) });
        assess2.setVersion("1");
        assess2.setTenantId("MN");
        assess2.setTestName("window test 2");

        Assessment storedAssessment2 = testRegPersister.saveDomainObject(assess2);

        // create a student

        Student student = new Student();
        student.setBirthDate(new DateTime(1980, 11, 11, 0, 0));
        student.setDistrictIdentifier("1");
        student.setEntityId("123459");
        student.setExternalSsid("111111111");
        student.setFirstName("Bob");
        student.setGender(Gender.Male);
        student.setGradeLevelWhenAssessed(GradeLevel.FOURTHGRADE);
        student.setLanguageCode("eng");
        student.setLastName("Test");
        student.setStateAbbreviation("WI");
        student.setAmericanIndianOrAlaskaNative("No");
        student.setAsian("No");
        student.setBlackOrAfricanAmerican("No");
        student.setHispanicOrLatino("No");
        student.setWhite("Yes");
        student.setNativeHawaiianOrPacificIsland("No");
        student.setTwoOrMoreRaces("No");
        student.setDisadvantageStatus("No");
        student.setLepStatus("No");
        student.setInstitutionIdentifier("1");
        student.setSection504Status("No");
        student.setiDEAIndicator("No");

        testRegPersister.saveDomainObject(student);

        // associate
        eligService.saveAssociation(assess, student);
        eligService.saveAssociation(assess2, student);

        // use service api to get assessments for a student

        List<Assessment> associatedAssessments = eligService.findEligibleAssessmentsByTestWindow(student.getEntityId(),
                student.getStateAbbreviation());

        // verify assessments returned are correct

        assertThat(associatedAssessments, hasSize(1));
        assertThat(associatedAssessments.get(0).getId(),
                anyOf(is(storedAssessment.getId()), is(storedAssessment2.getId())));

    }

    @Test
    public void testFindEligibleStudentsForAssessment() {
        // create an assessment

        Assessment assess = new Assessment();
        assess.setDelayRule(2);
        assess.setEligibilityType(EligibilityType.EXPLICIT);
        assess.setNumGlobalOpportunities(4);
        assess.setTestWindow(new Assessment.TestWindow[] { new Assessment.TestWindow(new DateTime(2013, 12, 1, 0, 0),
                new DateTime(2013, 12, 31, 0, 0), null) });
        assess.setTestName("test5");
        assess.setVersion("1");
        assess.setTenantId("5");

        Assessment storedAssessment = testRegPersister.saveDomainObject(assess);

        // create a couple of students

        Student student = new Student();
        student.setBirthDate(new DateTime(1980, 11, 11, 0, 0));
        student.setDistrictIdentifier("1");
        student.setEntityId("123451");
        student.setExternalSsid("111111111");
        student.setFirstName("Bob");
        student.setGender(Gender.Male);
        student.setGradeLevelWhenAssessed(GradeLevel.FOURTHGRADE);
        student.setLanguageCode("eng");
        student.setLastName("Test");
        student.setStateAbbreviation("WI");
        student.setAmericanIndianOrAlaskaNative("No");
        student.setAsian("No");
        student.setBlackOrAfricanAmerican("No");
        student.setHispanicOrLatino("No");
        student.setWhite("Yes");
        student.setNativeHawaiianOrPacificIsland("No");
        student.setTwoOrMoreRaces("No");
        student.setDisadvantageStatus("No");
        student.setLepStatus("No");
        student.setInstitutionIdentifier("1");
        student.setSection504Status("No");
        student.setiDEAIndicator("No");

        Student storedStudent = testRegPersister.saveDomainObject(student);

        Student student2 = new Student();
        student2.setBirthDate(new DateTime(1980, 11, 11, 0, 0));
        student2.setDistrictIdentifier("1");
        student2.setEntityId("123452");
        student2.setExternalSsid("111111112");
        student2.setFirstName("Bob");
        student2.setGender(Gender.Male);
        student2.setGradeLevelWhenAssessed(GradeLevel.FOURTHGRADE);
        student2.setLanguageCode("eng");
        student2.setLastName("Test");
        student2.setStateAbbreviation("WI");
        student2.setAmericanIndianOrAlaskaNative("No");
        student2.setAsian("No");
        student2.setBlackOrAfricanAmerican("No");
        student2.setHispanicOrLatino("No");
        student2.setWhite("Yes");
        student2.setNativeHawaiianOrPacificIsland("No");
        student2.setTwoOrMoreRaces("No");
        student2.setDisadvantageStatus("No");
        student2.setLepStatus("No");
        student2.setInstitutionIdentifier("1");
        student2.setSection504Status("No");
        student2.setiDEAIndicator("No");

        Student storedStudent2 = testRegPersister.saveDomainObject(student2);

        // associate

        List<Student> studentsToAssociate = new ArrayList<Student>();
        studentsToAssociate.add(storedStudent);
        studentsToAssociate.add(storedStudent2);

        eligService.saveAssociations(assess, studentsToAssociate);

        // use service api to get students for a assessment

        List<Student> associatedStudents = findEligibleStudentsByAssessment(storedAssessment.getId());

        // verify students returned are correct

        assertThat(associatedStudents, hasSize(2));
        assertThat(associatedStudents.get(0).getId(), anyOf(is(storedStudent.getId()), is(storedStudent2.getId())));
        assertThat(associatedStudents.get(1).getId(), anyOf(is(storedStudent.getId()), is(storedStudent2.getId())));
    }

    @Test
    public void testRemoveAssociation() {
        // create an assessment

        Assessment assess = new Assessment();
        assess.setDelayRule(2);
        assess.setEligibilityType(EligibilityType.EXPLICIT);
        assess.setNumGlobalOpportunities(4);
        assess.setTestWindow(new Assessment.TestWindow[] { new Assessment.TestWindow(new DateTime(2013, 12, 1, 0, 0),
                new DateTime(2013, 12, 31, 0, 0), null) });
        assess.setTestName("test6");
        assess.setVersion("1");
        assess.setTenantId("5");

        Assessment storedAssessment = testRegPersister.saveDomainObject(assess);

        // create a couple of students

        Student student = new Student();
        student.setBirthDate(new DateTime(1980, 11, 11, 0, 0));
        student.setDistrictIdentifier("1");
        student.setEntityId("123451");
        student.setExternalSsid("111111111");
        student.setFirstName("Bob");
        student.setGender(Gender.Male);
        student.setGradeLevelWhenAssessed(GradeLevel.FOURTHGRADE);
        student.setLanguageCode("eng");
        student.setLastName("Test");
        student.setStateAbbreviation("WI");
        student.setAmericanIndianOrAlaskaNative("No");
        student.setAsian("No");
        student.setBlackOrAfricanAmerican("No");
        student.setHispanicOrLatino("No");
        student.setWhite("Yes");
        student.setNativeHawaiianOrPacificIsland("No");
        student.setTwoOrMoreRaces("No");
        student.setDisadvantageStatus("No");
        student.setLepStatus("No");
        student.setInstitutionIdentifier("1");
        student.setSection504Status("No");
        student.setiDEAIndicator("No");

        Student storedStudent = testRegPersister.saveDomainObject(student);

        Student student2 = new Student();
        student2.setBirthDate(new DateTime(1980, 11, 11, 0, 0));
        student2.setDistrictIdentifier("1");
        student2.setEntityId("123452");
        student2.setExternalSsid("111111112");
        student2.setFirstName("Bob");
        student2.setGender(Gender.Male);
        student2.setGradeLevelWhenAssessed(GradeLevel.FOURTHGRADE);
        student2.setLanguageCode("eng");
        student2.setLastName("Test");
        student2.setStateAbbreviation("WI");
        student2.setAmericanIndianOrAlaskaNative("No");
        student2.setAsian("No");
        student2.setBlackOrAfricanAmerican("No");
        student2.setHispanicOrLatino("No");
        student2.setWhite("Yes");
        student2.setNativeHawaiianOrPacificIsland("No");
        student2.setTwoOrMoreRaces("No");
        student2.setDisadvantageStatus("No");
        student2.setLepStatus("No");
        student2.setInstitutionIdentifier("1");
        student2.setSection504Status("No");
        student2.setiDEAIndicator("No");

        Student storedStudent2 = testRegPersister.saveDomainObject(student2);

        // associate

        List<Student> studentsToAssociate = new ArrayList<Student>();
        studentsToAssociate.add(storedStudent);
        studentsToAssociate.add(storedStudent2);

        eligService.saveAssociations(assess, studentsToAssociate);

        // use service api to get students for a assessment

        List<Student> associatedStudents = findEligibleStudentsByAssessment(storedAssessment.getId());

        // verify students returned are correct

        assertThat(associatedStudents, hasSize(2));
        assertThat(associatedStudents.get(0).getId(), anyOf(is(storedStudent.getId()), is(storedStudent2.getId())));
        assertThat(associatedStudents.get(1).getId(), anyOf(is(storedStudent.getId()), is(storedStudent2.getId())));

        // remove student 1
        eligService.removeAssociation(storedAssessment, storedStudent);

        // get associated students again and verify that only 1 student is returned and the id is correct

        associatedStudents = findEligibleStudentsByAssessment(storedAssessment.getId());
        assertThat(associatedStudents, hasSize(1));
        assertThat(associatedStudents.get(0).getId(), is(storedStudent2.getId()));

    }

    // remove associations test

    @Test
    public void testRemoveAssociations() {
        // create an assessment

        Assessment assess = new Assessment();
        assess.setDelayRule(2);
        assess.setEligibilityType(EligibilityType.EXPLICIT);
        assess.setNumGlobalOpportunities(4);
        assess.setTestWindow(new Assessment.TestWindow[] { new Assessment.TestWindow(new DateTime(2013, 12, 1, 0, 0),
                new DateTime(2013, 12, 31, 0, 0), null) });
        assess.setTestName("test7");
        assess.setVersion("1");
        assess.setTenantId("5");

        Assessment storedAssessment = testRegPersister.saveDomainObject(assess);

        // create 3 students

        Student student = new Student();
        student.setBirthDate(new DateTime(1980, 11, 11, 0, 0));
        student.setDistrictIdentifier("1");
        student.setEntityId("123451");
        student.setExternalSsid("111111111");
        student.setFirstName("Bob");
        student.setGender(Gender.Male);
        student.setGradeLevelWhenAssessed(GradeLevel.FOURTHGRADE);
        student.setLanguageCode("eng");
        student.setLastName("Test");
        student.setStateAbbreviation("WI");
        student.setAmericanIndianOrAlaskaNative("No");
        student.setAsian("No");
        student.setBlackOrAfricanAmerican("No");
        student.setHispanicOrLatino("No");
        student.setWhite("Yes");
        student.setNativeHawaiianOrPacificIsland("No");
        student.setTwoOrMoreRaces("No");
        student.setDisadvantageStatus("No");
        student.setLepStatus("No");
        student.setInstitutionIdentifier("1");
        student.setSection504Status("No");
        student.setiDEAIndicator("No");

        Student storedStudent = testRegPersister.saveDomainObject(student);

        Student student2 = new Student();
        student2.setBirthDate(new DateTime(1980, 11, 11, 0, 0));
        student2.setDistrictIdentifier("1");
        student2.setEntityId("123452");
        student2.setExternalSsid("111111112");
        student2.setFirstName("Bob");
        student2.setGender(Gender.Male);
        student2.setGradeLevelWhenAssessed(GradeLevel.FOURTHGRADE);
        student2.setLanguageCode("eng");
        student2.setLastName("Test");
        student2.setStateAbbreviation("WI");
        student2.setAmericanIndianOrAlaskaNative("No");
        student2.setAsian("No");
        student2.setBlackOrAfricanAmerican("No");
        student2.setHispanicOrLatino("No");
        student2.setWhite("Yes");
        student2.setNativeHawaiianOrPacificIsland("No");
        student2.setTwoOrMoreRaces("No");
        student2.setDisadvantageStatus("No");
        student2.setLepStatus("No");
        student2.setInstitutionIdentifier("1");
        student2.setSection504Status("No");
        student2.setiDEAIndicator("No");

        Student storedStudent2 = testRegPersister.saveDomainObject(student2);

        Student student3 = new Student();
        student3.setBirthDate(new DateTime(1980, 11, 11, 0, 0));
        student3.setDistrictIdentifier("1");
        student3.setEntityId("123460");
        student3.setExternalSsid("111111119");
        student3.setFirstName("Bob");
        student3.setGender(Gender.Male);
        student3.setGradeLevelWhenAssessed(GradeLevel.FOURTHGRADE);
        student3.setLanguageCode("eng");
        student3.setLastName("Test");
        student3.setStateAbbreviation("WI");
        student3.setAmericanIndianOrAlaskaNative("No");
        student3.setAsian("No");
        student3.setBlackOrAfricanAmerican("No");
        student3.setHispanicOrLatino("No");
        student3.setWhite("Yes");
        student3.setNativeHawaiianOrPacificIsland("No");
        student3.setTwoOrMoreRaces("No");
        student3.setDisadvantageStatus("No");
        student3.setLepStatus("No");
        student3.setInstitutionIdentifier("1");
        student3.setSection504Status("No");
        student3.setiDEAIndicator("No");

        Student storedStudent3 = testRegPersister.saveDomainObject(student3);

        // associate

        List<Student> studentsToAssociate = new ArrayList<Student>();
        studentsToAssociate.add(storedStudent);
        studentsToAssociate.add(storedStudent2);
        studentsToAssociate.add(storedStudent3);

        eligService.saveAssociations(storedAssessment, studentsToAssociate);

        // use service api to get students for a assessment

        List<Student> associatedStudents = findEligibleStudentsByAssessment(storedAssessment.getId());

        // verify students returned are correct

        assertThat(associatedStudents, hasSize(3));
        assertThat(associatedStudents.get(0).getId(),
                anyOf(is(storedStudent.getId()), is(storedStudent2.getId()), is(storedStudent3.getId())));
        assertThat(associatedStudents.get(1).getId(),
                anyOf(is(storedStudent.getId()), is(storedStudent2.getId()), is(storedStudent3.getId())));

        // remove student 1 and student 2

        List<Student> studentsToRemove = new ArrayList<Student>();
        studentsToRemove.add(student);
        studentsToRemove.add(student2);

        eligService.removeAssociations(storedAssessment, studentsToRemove);

        // get associated students again and verify that only 1 student is returned and the id is correct

        associatedStudents = findEligibleStudentsByAssessment(storedAssessment.getId());
        assertThat(associatedStudents, hasSize(1));
        assertThat(associatedStudents.get(0).getId(), is(storedStudent3.getId()));

    }

    // add assoc test that verifies that it won't add duplicate students

    @Test
    public void testStudentNotAddedTwice() {
        // create an assessment

        Assessment assess = new Assessment();
        assess.setDelayRule(2);
        assess.setEligibilityType(EligibilityType.EXPLICIT);
        assess.setNumGlobalOpportunities(4);
        assess.setTestWindow(new Assessment.TestWindow[] { new Assessment.TestWindow(new DateTime(2013, 12, 1, 0, 0),
                new DateTime(2013, 12, 31, 0, 0), null) });
        assess.setTestName("test8");
        assess.setVersion("1");
        assess.setTenantId("5");

        Assessment storedAssessment = testRegPersister.saveDomainObject(assess);

        // create a student

        Student student = new Student();
        student.setBirthDate(new DateTime(1980, 11, 11, 0, 0));
        student.setDistrictIdentifier("1");
        student.setEntityId("123456");
        student.setExternalSsid("111111111");
        student.setFirstName("Bob");
        student.setGender(Gender.Male);
        student.setGradeLevelWhenAssessed(GradeLevel.FOURTHGRADE);
        student.setLanguageCode("eng");
        student.setLastName("Test");
        student.setStateAbbreviation("WI");
        student.setAmericanIndianOrAlaskaNative("No");
        student.setAsian("No");
        student.setBlackOrAfricanAmerican("No");
        student.setHispanicOrLatino("No");
        student.setWhite("Yes");
        student.setNativeHawaiianOrPacificIsland("No");
        student.setTwoOrMoreRaces("No");
        student.setDisadvantageStatus("No");
        student.setLepStatus("No");
        student.setInstitutionIdentifier("1");
        student.setSection504Status("No");
        student.setiDEAIndicator("No");

        Student storedStudent = testRegPersister.saveDomainObject(student);

        // associate the 2 together

        eligService.saveAssociation(storedAssessment, storedStudent);

        // verify that Student->Assessment records created correctly

        List<EligibleStudent> foundEligibleStudents = eligStudentRepo.findByAssessmentMongoId(storedAssessment.getId(),
                new PageRequest(0, 100));
        assertThat(foundEligibleStudents, hasSize(1));
        assertThat(foundEligibleStudents.get(0).getStudent().getId(), is(storedStudent.getId()));

        // try associating the same student again
        eligService.saveAssociation(storedAssessment, storedStudent);

        // verify that we still only get a single associated student with the assessment

        foundEligibleStudents = eligStudentRepo.findByAssessmentMongoId(storedAssessment.getId(), new PageRequest(0,
                100));
        assertThat(foundEligibleStudents, hasSize(1));

    }

    // adding an association for assessment that doesn't exist does not throw an error
    // it will print a WARN message and not create an association
    @Test(expected = EligibilityException.class)
    public void testAssocWithNonexistantAssessment() {

        // create an assessment, give it an id
        Assessment assess = new Assessment();
        assess.setId("a5322344f");
        assess.setDelayRule(2);
        assess.setEligibilityType(EligibilityType.EXPLICIT);
        assess.setNumGlobalOpportunities(4);
        assess.setTestWindow(new Assessment.TestWindow[] { new Assessment.TestWindow(new DateTime(2013, 12, 1, 0, 0),
                new DateTime(2013, 12, 31, 0, 0), null) });
        assess.setTestName("test9");
        assess.setVersion("1");
        assess.setTenantId("5");

        // oops, not persisted

        // create and persist a student
        Student student = new Student();
        student.setBirthDate(new DateTime(1980, 11, 11, 0, 0));
        student.setDistrictIdentifier("1");
        student.setEntityId("123456999");
        student.setExternalSsid("111111111");
        student.setFirstName("Bob");
        student.setGender(Gender.Male);
        student.setGradeLevelWhenAssessed(GradeLevel.FOURTHGRADE);
        student.setLanguageCode("eng");
        student.setLastName("Test");
        student.setStateAbbreviation("WI");
        student.setAmericanIndianOrAlaskaNative("No");
        student.setAsian("No");
        student.setBlackOrAfricanAmerican("No");
        student.setHispanicOrLatino("No");
        student.setWhite("Yes");
        student.setNativeHawaiianOrPacificIsland("No");
        student.setTwoOrMoreRaces("No");
        student.setDisadvantageStatus("No");
        student.setLepStatus("No");
        student.setInstitutionIdentifier("1");
        student.setSection504Status("No");
        student.setiDEAIndicator("No");

        Student storedStudent = testRegPersister.saveDomainObject(student);

        // associate the 2 together, should throw exception here

        eligService.saveAssociation(assess, storedStudent);

    }

    // adding an association for student that doesn't exist throws error
    @Test(expected = EligibilityException.class)
    public void testAssocWithNonexistantStudent() {
        // create an assessment
        Assessment assess = new Assessment();
        assess.setDelayRule(2);
        assess.setEligibilityType(EligibilityType.EXPLICIT);
        assess.setNumGlobalOpportunities(4);
        assess.setTestWindow(new Assessment.TestWindow[] { new Assessment.TestWindow(new DateTime(2013, 12, 1, 0, 0),
                new DateTime(2013, 12, 31, 0, 0), null) });
        assess.setTestName("test10");
        assess.setVersion("1");
        assess.setTenantId("5");

        Assessment storedAssessment = testRegPersister.saveDomainObject(assess);

        // create and persist a student
        Student student = new Student();
        student.setId("ff3483264d");
        student.setBirthDate(new DateTime(1980, 11, 11, 0, 0));
        student.setDistrictIdentifier("1");
        student.setEntityId("123456999");
        student.setExternalSsid("111111111");
        student.setFirstName("Bob");
        student.setGender(Gender.Male);
        student.setGradeLevelWhenAssessed(GradeLevel.FOURTHGRADE);
        student.setLanguageCode("eng");
        student.setLastName("Test");
        student.setStateAbbreviation("WI");
        student.setAmericanIndianOrAlaskaNative("No");
        student.setAsian("No");
        student.setBlackOrAfricanAmerican("No");
        student.setHispanicOrLatino("No");
        student.setWhite("Yes");
        student.setNativeHawaiianOrPacificIsland("No");
        student.setTwoOrMoreRaces("No");
        student.setDisadvantageStatus("No");
        student.setLepStatus("No");
        student.setInstitutionIdentifier("1");
        student.setSection504Status("No");
        student.setiDEAIndicator("No");

        // oops, forgot to persist student

        // associate the 2 together, should throw exception here

        eligService.saveAssociation(storedAssessment, student);

    }

    @Test(expected = EligibilityException.class)
    public void testNullAssessment() {
        Student student = new Student();
        student.setId("65f389a");

        eligService.saveAssociation(null, student);
    }

    @Test(expected = EligibilityException.class)
    public void testAssessmentNoId() {

        Assessment assess = new Assessment();

        Student student = new Student();
        student.setId("65f389a");

        eligService.saveAssociation(assess, student);

    }

    @Test(expected = EligibilityException.class)
    public void testNullStudent() {

        Assessment assess = new Assessment();
        assess.setId("876538367");

        eligService.saveAssociation(assess, null);
    }

    @Test(expected = EligibilityException.class)
    public void testStudentNoId() {

        Assessment assess = new Assessment();
        assess.setId("876538367");

        Student student = new Student();

        eligService.saveAssociation(assess, student);
    }

    // remove student from existing eligible association where associated student does exist, but this id is not in
    // there
    @Test(expected = EligibilityException.class)
    public void testRemoveAssocStudentCollNoStudentExists() {
        Assessment assess = new Assessment();
        assess.setDelayRule(2);
        assess.setEligibilityType(EligibilityType.EXPLICIT);
        assess.setNumGlobalOpportunities(4);
        assess.setTestWindow(new Assessment.TestWindow[] { new Assessment.TestWindow(new DateTime(2013, 12, 1, 0, 0),
                new DateTime(2013, 12, 31, 0, 0), null) });
        assess.setTestName("test11");
        assess.setVersion("1");
        assess.setTenantId("5");

        Assessment storedAssessment = testRegPersister.saveDomainObject(assess);

        // create a student

        Student student = new Student();
        student.setBirthDate(new DateTime(1980, 11, 11, 0, 0));
        student.setDistrictIdentifier("1");
        student.setEntityId("12345687654");
        student.setExternalSsid("111111111");
        student.setFirstName("Bob");
        student.setGender(Gender.Male);
        student.setGradeLevelWhenAssessed(GradeLevel.FOURTHGRADE);
        student.setLanguageCode("eng");
        student.setLastName("Test");
        student.setStateAbbreviation("WI");
        student.setAmericanIndianOrAlaskaNative("No");
        student.setAsian("No");
        student.setBlackOrAfricanAmerican("No");
        student.setHispanicOrLatino("No");
        student.setWhite("Yes");
        student.setNativeHawaiianOrPacificIsland("No");
        student.setTwoOrMoreRaces("No");
        student.setDisadvantageStatus("No");
        student.setLepStatus("No");
        student.setInstitutionIdentifier("1");
        student.setSection504Status("No");
        student.setiDEAIndicator("No");

        Student storedStudent = testRegPersister.saveDomainObject(student);

        // associate the 2 together

        eligService.saveAssociation(storedAssessment, storedStudent);

        Student student2 = new Student();
        student2.setBirthDate(new DateTime(1980, 11, 11, 0, 0));
        student2.setDistrictIdentifier("1");
        student2.setEntityId("123456afdb");
        student2.setExternalSsid("111111112");
        student2.setFirstName("Bob");
        student2.setGender(Gender.Male);
        student2.setGradeLevelWhenAssessed(GradeLevel.FOURTHGRADE);
        student2.setLanguageCode("eng");
        student2.setLastName("Test");
        student2.setStateAbbreviation("WI");
        student2.setAmericanIndianOrAlaskaNative("No");
        student2.setAsian("No");
        student2.setBlackOrAfricanAmerican("No");
        student2.setHispanicOrLatino("No");
        student2.setWhite("Yes");
        student2.setNativeHawaiianOrPacificIsland("No");
        student2.setTwoOrMoreRaces("No");
        student2.setDisadvantageStatus("No");
        student2.setLepStatus("No");
        student2.setInstitutionIdentifier("1");
        student2.setSection504Status("No");
        student2.setiDEAIndicator("No");

        Student storedStudent2 = testRegPersister.saveDomainObject(student2);

        eligService.removeAssociation(storedAssessment, storedStudent2);
    }

    // removing student from association where there is no association (no eligible assessment) throws error

    @Test(expected = EligibilityException.class)
    public void testRemoveNoEligAssessment() {
        Assessment assess = new Assessment();
        assess.setDelayRule(2);
        assess.setEligibilityType(EligibilityType.EXPLICIT);
        assess.setNumGlobalOpportunities(4);
        assess.setTestWindow(new Assessment.TestWindow[] { new Assessment.TestWindow(new DateTime(2013, 12, 1, 0, 0),
                new DateTime(2013, 12, 31, 0, 0), null) });
        assess.setTestName("test12");
        assess.setVersion("1");
        assess.setTenantId("5");

        Assessment storedAssessment = testRegPersister.saveDomainObject(assess);

        // create a student

        Student student = new Student();
        student.setBirthDate(new DateTime(1980, 11, 11, 0, 0));
        student.setDistrictIdentifier("1");
        student.setEntityId("123fccc323");
        student.setExternalSsid("111111111");
        student.setFirstName("Bob");
        student.setGender(Gender.Male);
        student.setGradeLevelWhenAssessed(GradeLevel.FOURTHGRADE);
        student.setLanguageCode("eng");
        student.setLastName("Test");
        student.setStateAbbreviation("WI");
        student.setAmericanIndianOrAlaskaNative("No");
        student.setAsian("No");
        student.setBlackOrAfricanAmerican("No");
        student.setHispanicOrLatino("No");
        student.setWhite("Yes");
        student.setNativeHawaiianOrPacificIsland("No");
        student.setTwoOrMoreRaces("No");
        student.setDisadvantageStatus("No");
        student.setLepStatus("No");
        student.setInstitutionIdentifier("1");
        student.setSection504Status("No");
        student.setiDEAIndicator("No");

        Student storedStudent = testRegPersister.saveDomainObject(student);

        eligService.removeAssociation(storedAssessment, storedStudent);
    }

    @Test
    public void testRemoveAllAssociationsForStudent() {
        // create an assessment

        Assessment assess = new Assessment();
        assess.setDelayRule(2);
        assess.setEligibilityType(EligibilityType.EXPLICIT);
        assess.setNumGlobalOpportunities(4);
        assess.setTestWindow(new Assessment.TestWindow[] { new Assessment.TestWindow(new DateTime(2013, 12, 1, 0, 0),
                new DateTime(2013, 12, 31, 0, 0), null) });
        assess.setTestName("test7");
        assess.setVersion("1");
        assess.setTenantId("5");

        testRegPersister.saveDomainObject(assess);

        // create another assessment

        Assessment assess2 = new Assessment();
        assess2.setDelayRule(2);
        assess2.setEligibilityType(EligibilityType.EXPLICIT);
        assess2.setNumGlobalOpportunities(4);
        assess2.setTestWindow(new Assessment.TestWindow[] { new Assessment.TestWindow(new DateTime(2013, 12, 1, 0, 0),
                new DateTime(2013, 12, 31, 0, 0), null) });
        assess2.setTestName("test99");
        assess2.setVersion("1");
        assess2.setTenantId("5");

        @SuppressWarnings("unused")
        Assessment storedAssessment2 = testRegPersister.saveDomainObject(assess2);

        // create 3 students

        Student student = new Student();
        student.setBirthDate(new DateTime(1980, 11, 11, 0, 0));
        student.setDistrictIdentifier("1");
        student.setEntityId("123451");
        student.setExternalSsid("111111111");
        student.setFirstName("Bob");
        student.setGender(Gender.Male);
        student.setGradeLevelWhenAssessed(GradeLevel.FOURTHGRADE);
        student.setLanguageCode("eng");
        student.setLastName("Test");
        student.setStateAbbreviation("WI");
        student.setAmericanIndianOrAlaskaNative("No");
        student.setAsian("No");
        student.setBlackOrAfricanAmerican("No");
        student.setHispanicOrLatino("No");
        student.setWhite("Yes");
        student.setNativeHawaiianOrPacificIsland("No");
        student.setTwoOrMoreRaces("No");
        student.setDisadvantageStatus("No");
        student.setLepStatus("No");
        student.setInstitutionIdentifier("1");
        student.setSection504Status("No");
        student.setiDEAIndicator("No");

        Student storedStudent = testRegPersister.saveDomainObject(student);

        Student student2 = new Student();
        student2.setBirthDate(new DateTime(1980, 11, 11, 0, 0));
        student2.setDistrictIdentifier("1");
        student2.setEntityId("123452");
        student2.setExternalSsid("111111112");
        student2.setFirstName("Bob");
        student2.setGender(Gender.Male);
        student2.setGradeLevelWhenAssessed(GradeLevel.FOURTHGRADE);
        student2.setLanguageCode("eng");
        student2.setLastName("Test");
        student2.setStateAbbreviation("WI");
        student2.setAmericanIndianOrAlaskaNative("No");
        student2.setAsian("No");
        student2.setBlackOrAfricanAmerican("No");
        student2.setHispanicOrLatino("No");
        student2.setWhite("Yes");
        student2.setNativeHawaiianOrPacificIsland("No");
        student2.setTwoOrMoreRaces("No");
        student2.setDisadvantageStatus("No");
        student2.setLepStatus("No");
        student2.setInstitutionIdentifier("1");
        student2.setSection504Status("No");
        student2.setiDEAIndicator("No");

        Student storedStudent2 = testRegPersister.saveDomainObject(student2);

        Student student3 = new Student();
        student3.setBirthDate(new DateTime(1980, 11, 11, 0, 0));
        student3.setDistrictIdentifier("1");
        student3.setEntityId("123460");
        student3.setExternalSsid("111111119");
        student3.setFirstName("Bob");
        student3.setGender(Gender.Male);
        student3.setGradeLevelWhenAssessed(GradeLevel.FOURTHGRADE);
        student3.setLanguageCode("eng");
        student3.setLastName("Test");
        student3.setStateAbbreviation("WI");
        student3.setAmericanIndianOrAlaskaNative("No");
        student3.setAsian("No");
        student3.setBlackOrAfricanAmerican("No");
        student3.setHispanicOrLatino("No");
        student3.setWhite("Yes");
        student3.setNativeHawaiianOrPacificIsland("No");
        student3.setTwoOrMoreRaces("No");
        student3.setDisadvantageStatus("No");
        student3.setLepStatus("No");
        student3.setInstitutionIdentifier("1");
        student3.setSection504Status("No");
        student3.setiDEAIndicator("No");

        Student storedStudent3 = testRegPersister.saveDomainObject(student3);

        // associate

        List<Student> studentsToAssociate = new ArrayList<Student>();
        studentsToAssociate.add(storedStudent);
        studentsToAssociate.add(storedStudent2);
        studentsToAssociate.add(storedStudent3);

        eligService.saveAssociations(assess, studentsToAssociate);

        // associate assessment 2 to student 3
        eligService.saveAssociation(assess2, storedStudent3);

        // call removeAllAssociationsForStudent(student3)
        eligService.removeAllAssociationsForStudent(storedStudent3);

        // verify that EligibleStudent for student3 no longer exists
        EligibleStudent foundStudent3 = eligStudentRepo.findByStudentMongoId(storedStudent3.getId());
        assertThat(foundStudent3, nullValue());

        // verify that EligibleAssessment for assess does not have student 3

        List<Student> assessEligStudents = findEligibleStudentsByAssessment(assess.getId());
        assertThat(assessEligStudents, hasSize(2));
        assertThat(assessEligStudents, hasItems(storedStudent, storedStudent2));

    }

    @Test
    public void testRemoveAllAssociationsForAssessment() {
        // create an assessment

        Assessment assess = new Assessment();
        assess.setDelayRule(2);
        assess.setEligibilityType(EligibilityType.EXPLICIT);
        assess.setNumGlobalOpportunities(4);
        assess.setTestWindow(new Assessment.TestWindow[] { new Assessment.TestWindow(new DateTime(2013, 12, 1, 0, 0),
                new DateTime(2013, 12, 31, 0, 0), null) });
        assess.setTestName("test7");
        assess.setVersion("1");
        assess.setTenantId("5");

        @SuppressWarnings("unused")
        Assessment storedAssessment = testRegPersister.saveDomainObject(assess);

        // create another assessment

        Assessment assess2 = new Assessment();
        assess2.setDelayRule(2);
        assess2.setEligibilityType(EligibilityType.EXPLICIT);
        assess2.setNumGlobalOpportunities(4);
        assess2.setTestWindow(new Assessment.TestWindow[] { new Assessment.TestWindow(new DateTime(2013, 12, 1, 0, 0),
                new DateTime(2013, 12, 31, 0, 0), null) });
        assess2.setTestName("test99");
        assess2.setVersion("1");
        assess2.setTenantId("5");

        Assessment storedAssessment2 = testRegPersister.saveDomainObject(assess2);

        // create 3 students

        Student student = new Student();
        student.setBirthDate(new DateTime(1980, 11, 11, 0, 0));
        student.setDistrictIdentifier("1");
        student.setEntityId("123451");
        student.setExternalSsid("111111111");
        student.setFirstName("Bob");
        student.setGender(Gender.Male);
        student.setGradeLevelWhenAssessed(GradeLevel.FOURTHGRADE);
        student.setLanguageCode("eng");
        student.setLastName("Test");
        student.setStateAbbreviation("WI");
        student.setAmericanIndianOrAlaskaNative("No");
        student.setAsian("No");
        student.setBlackOrAfricanAmerican("No");
        student.setHispanicOrLatino("No");
        student.setWhite("Yes");
        student.setNativeHawaiianOrPacificIsland("No");
        student.setTwoOrMoreRaces("No");
        student.setDisadvantageStatus("No");
        student.setLepStatus("No");
        student.setInstitutionIdentifier("1");
        student.setSection504Status("No");
        student.setiDEAIndicator("No");

        Student storedStudent = testRegPersister.saveDomainObject(student);

        Student student2 = new Student();
        student2.setBirthDate(new DateTime(1980, 11, 11, 0, 0));
        student2.setDistrictIdentifier("1");
        student2.setEntityId("123452");
        student2.setExternalSsid("111111112");
        student2.setFirstName("Bob");
        student2.setGender(Gender.Male);
        student2.setGradeLevelWhenAssessed(GradeLevel.FOURTHGRADE);
        student2.setLanguageCode("eng");
        student2.setLastName("Test");
        student2.setStateAbbreviation("WI");
        student2.setAmericanIndianOrAlaskaNative("No");
        student2.setAsian("No");
        student2.setBlackOrAfricanAmerican("No");
        student2.setHispanicOrLatino("No");
        student2.setWhite("Yes");
        student2.setNativeHawaiianOrPacificIsland("No");
        student2.setTwoOrMoreRaces("No");
        student2.setDisadvantageStatus("No");
        student2.setLepStatus("No");
        student2.setInstitutionIdentifier("1");
        student2.setSection504Status("No");
        student2.setiDEAIndicator("No");

        Student storedStudent2 = testRegPersister.saveDomainObject(student2);

        Student student3 = new Student();
        student3.setBirthDate(new DateTime(1980, 11, 11, 0, 0));
        student3.setDistrictIdentifier("1");
        student3.setEntityId("123460");
        student3.setExternalSsid("111111119");
        student3.setFirstName("Bob");
        student3.setGender(Gender.Male);
        student3.setGradeLevelWhenAssessed(GradeLevel.FOURTHGRADE);
        student3.setLanguageCode("eng");
        student3.setLastName("Test");
        student3.setStateAbbreviation("WI");
        student3.setAmericanIndianOrAlaskaNative("No");
        student3.setAsian("No");
        student3.setBlackOrAfricanAmerican("No");
        student3.setHispanicOrLatino("No");
        student3.setWhite("Yes");
        student3.setNativeHawaiianOrPacificIsland("No");
        student3.setTwoOrMoreRaces("No");
        student3.setDisadvantageStatus("No");
        student3.setLepStatus("No");
        student3.setInstitutionIdentifier("1");
        student3.setSection504Status("No");
        student3.setiDEAIndicator("No");

        Student storedStudent3 = testRegPersister.saveDomainObject(student3);

        // associate

        List<Student> studentsToAssociate = new ArrayList<Student>();
        studentsToAssociate.add(storedStudent);
        studentsToAssociate.add(storedStudent2);
        studentsToAssociate.add(storedStudent3);

        eligService.saveAssociations(assess, studentsToAssociate);

        // associate assessment 2 to student 3
        eligService.saveAssociation(assess2, storedStudent3);

        // call removeAllAssociationsForAssessment(assess)
        eligService.removeAllAssociationsForAssessment(assess);

        // verify that EligibleStudent for student no longer exists
        EligibleStudent foundStudent = eligStudentRepo.findByStudentMongoId(storedStudent.getId());
        assertThat(foundStudent, nullValue());

        // verify that EligibleStudent for student2 no longer exists
        EligibleStudent foundStudent2 = eligStudentRepo.findByStudentMongoId(storedStudent2.getId());
        assertThat(foundStudent2, nullValue());

        // verify that EligibleStudent for student3 still exists
        // and only has one associated Assessment, assess2
        EligibleStudent foundStudent3 = eligStudentRepo.findByStudentMongoId(storedStudent3.getId());
        assertThat(foundStudent3, notNullValue());
        assertThat(foundStudent3.getAssessments(), hasSize(1));
        assertThat(foundStudent3.getAssessments(), hasItems(storedAssessment2));

    }

    @Test
    public void testFindEligibleAssessmentsByStudentIdAndState() {
        // create an assessment

        Assessment assess = new Assessment();
        assess.setDelayRule(2);
        assess.setEligibilityType(EligibilityType.EXPLICIT);
        assess.setNumGlobalOpportunities(4);
        assess.setTestWindow(new Assessment.TestWindow[] { new Assessment.TestWindow(new DateTime(2013, 12, 1, 0, 0),
                new DateTime(2013, 12, 31, 0, 0), null) });
        assess.setTestName("test7");
        assess.setVersion("1");
        assess.setTenantId("5");

        Assessment storedAssessment = testRegPersister.saveDomainObject(assess);

        // create another assessment

        Assessment assess2 = new Assessment();
        assess2.setDelayRule(2);
        assess2.setEligibilityType(EligibilityType.EXPLICIT);
        assess2.setNumGlobalOpportunities(4);
        assess2.setTestWindow(new Assessment.TestWindow[] { new Assessment.TestWindow(new DateTime(2013, 12, 1, 0, 0),
                new DateTime(2013, 12, 31, 0, 0), null) });
        assess2.setTestName("test99");
        assess2.setVersion("1");
        assess2.setTenantId("5");

        Assessment storedAssessment2 = testRegPersister.saveDomainObject(assess2);

        // create 3 students

        Student student = new Student();
        student.setBirthDate(new DateTime(1980, 11, 11, 0, 0));
        student.setDistrictIdentifier("1");
        student.setEntityId("123451");
        student.setExternalSsid("111111111");
        student.setFirstName("Bob");
        student.setGender(Gender.Male);
        student.setGradeLevelWhenAssessed(GradeLevel.FOURTHGRADE);
        student.setLanguageCode("eng");
        student.setLastName("Test");
        student.setStateAbbreviation("WI");
        student.setAmericanIndianOrAlaskaNative("No");
        student.setAsian("No");
        student.setBlackOrAfricanAmerican("No");
        student.setHispanicOrLatino("No");
        student.setWhite("Yes");
        student.setNativeHawaiianOrPacificIsland("No");
        student.setTwoOrMoreRaces("No");
        student.setDisadvantageStatus("No");
        student.setLepStatus("No");
        student.setInstitutionIdentifier("1");
        student.setSection504Status("No");
        student.setiDEAIndicator("No");

        Student storedStudent = testRegPersister.saveDomainObject(student);

        Student student2 = new Student();
        student2.setBirthDate(new DateTime(1980, 11, 11, 0, 0));
        student2.setDistrictIdentifier("1");
        student2.setEntityId("123452");
        student2.setExternalSsid("111111112");
        student2.setFirstName("Bob");
        student2.setGender(Gender.Male);
        student2.setGradeLevelWhenAssessed(GradeLevel.FOURTHGRADE);
        student2.setLanguageCode("eng");
        student2.setLastName("Test");
        student2.setStateAbbreviation("WI");
        student2.setAmericanIndianOrAlaskaNative("No");
        student2.setAsian("No");
        student2.setBlackOrAfricanAmerican("No");
        student2.setHispanicOrLatino("No");
        student2.setWhite("Yes");
        student2.setNativeHawaiianOrPacificIsland("No");
        student2.setTwoOrMoreRaces("No");
        student2.setDisadvantageStatus("No");
        student2.setLepStatus("No");
        student2.setInstitutionIdentifier("1");
        student2.setSection504Status("No");
        student2.setiDEAIndicator("No");

        Student storedStudent2 = testRegPersister.saveDomainObject(student2);

        Student student3 = new Student();
        student3.setBirthDate(new DateTime(1980, 11, 11, 0, 0));
        student3.setDistrictIdentifier("1");
        student3.setEntityId("123460");
        student3.setExternalSsid("111111119");
        student3.setFirstName("Bob");
        student3.setGender(Gender.Male);
        student3.setGradeLevelWhenAssessed(GradeLevel.FOURTHGRADE);
        student3.setLanguageCode("eng");
        student3.setLastName("Test");
        student3.setStateAbbreviation("WI");
        student3.setAmericanIndianOrAlaskaNative("No");
        student3.setAsian("No");
        student3.setBlackOrAfricanAmerican("No");
        student3.setHispanicOrLatino("No");
        student3.setWhite("Yes");
        student3.setNativeHawaiianOrPacificIsland("No");
        student3.setTwoOrMoreRaces("No");
        student3.setDisadvantageStatus("No");
        student3.setLepStatus("No");
        student3.setInstitutionIdentifier("1");
        student3.setSection504Status("No");
        student3.setiDEAIndicator("No");

        Student storedStudent3 = testRegPersister.saveDomainObject(student3);

        // associate

        List<Student> studentsToAssociate = new ArrayList<Student>();
        studentsToAssociate.add(storedStudent);
        studentsToAssociate.add(storedStudent2);
        studentsToAssociate.add(storedStudent3);

        eligService.saveAssociations(assess, studentsToAssociate);

        // associate assessment 2 to student 3
        eligService.saveAssociation(assess2, storedStudent3);

        List<Assessment> eligAssessments = eligService.findEligibleAssessmentsByStudentIdAndState(
                student3.getEntityId(), student3.getStateAbbreviation());

        // verify that eligAssessments is size 2
        assertThat(eligAssessments, hasSize(2));

        // verify that eligAssessments has storedAssessment and storedAssessment2
        assertThat(eligAssessments, hasItems(storedAssessment, storedAssessment2));

    }

    @Test
    public void testFindAssessmentsByInvalidStudentId() {

        List<Assessment> foundAssessments = eligService.findEligibleAssessmentsByStudent("111");

        assertThat(foundAssessments, notNullValue());
        assertThat(foundAssessments, empty());

    }

    @Test
    public void testFindStudentsByInvalidAssessmentId() {

        List<Student> foundStudents = findEligibleStudentsByAssessment("111");

        assertThat(foundStudents, notNullValue());
        assertThat(foundStudents, empty());

    }

    @Test
    public void testFindAssessmentsByNonexistentStudentId() {

        List<Assessment> foundAssessments = eligService.findEligibleAssessmentsByStudent("555555555555555555555555");

        assertThat(foundAssessments, notNullValue());
        assertThat(foundAssessments, empty());

    }

    @Test
    public void testFindStudentsByNonexistentAssessmentId() {

        List<Student> foundStudents = findEligibleStudentsByAssessment("555555555555555555555555");

        assertThat(foundStudents, notNullValue());
        assertThat(foundStudents, empty());

    }

    @SuppressWarnings("unchecked")
    @Test
    public void testFindAllByTenantsAndBeginWindow() {
        // create an assessment1
        Assessment assess1 = new Assessment();
        assess1.setDelayRule(2);
        assess1.setEligibilityType(EligibilityType.EXPLICIT);
        assess1.setNumGlobalOpportunities(14);
        assess1.setTestWindow(new Assessment.TestWindow[] {
                new Assessment.TestWindow(new DateTime(2013, 01, 1, 0, 0), new DateTime(2013, 12, 31, 0, 0), 10),
                new Assessment.TestWindow(new DateTime(2012, 12, 29, 0, 0), new DateTime(2013, 01, 1, 0, 0), 2),
                new Assessment.TestWindow(new DateTime(2014, 01, 2, 0, 0), new DateTime(2014, 02, 21, 0, 0), 1) });
        assess1.setTestName("ELA-PK-01");
        assess1.setVersion("1.0");
        assess1.setTenantId("5");
        Assessment storedAssessment1 = testRegPersister.saveDomainObject(assess1);

        // create a student
        Student student = new Student();
        student.setBirthDate(new DateTime(1980, 11, 11, 0, 0));
        student.setDistrictIdentifier("1");
        student.setEntityId("123456");
        student.setExternalSsid("111111111");
        student.setFirstName("Bob");
        student.setGender(Gender.Male);
        student.setGradeLevelWhenAssessed(GradeLevel.FOURTHGRADE);
        student.setLanguageCode("eng");
        student.setLastName("Test");
        student.setStateAbbreviation("WI");
        student.setAmericanIndianOrAlaskaNative("No");
        student.setAsian("No");
        student.setBlackOrAfricanAmerican("No");
        student.setHispanicOrLatino("No");
        student.setWhite("Yes");
        student.setNativeHawaiianOrPacificIsland("No");
        student.setTwoOrMoreRaces("No");
        student.setDisadvantageStatus("No");
        student.setLepStatus("No");
        student.setInstitutionIdentifier("1");
        student.setSection504Status("No");
        student.setiDEAIndicator("No");
        Student storedStudent = testRegPersister.saveDomainObject(student);

        // associate the 2 together
        eligService.saveAssociation(storedAssessment1, storedStudent);

        // Create Assessment2
        Assessment assess2 = new Assessment();
        assess2.setDelayRule(2);
        assess2.setEligibilityType(EligibilityType.EXPLICIT);
        assess2.setNumGlobalOpportunities(4);
        assess2.setTestWindow(new Assessment.TestWindow[] { new Assessment.TestWindow(new DateTime(2014, 12, 1, 0, 0),
                new DateTime(2014, 12, 31, 0, 0), null) });
        assess2.setTestName("test1");
        assess2.setVersion("1");
        assess2.setTenantId("7");
        Assessment storedAssessment2 = testRegPersister.saveDomainObject(assess2);
        eligService.saveAssociation(storedAssessment2, storedStudent);

        // Create Assessment3
        Assessment assess3 = new Assessment();
        assess3.setDelayRule(2);
        assess3.setEligibilityType(EligibilityType.EXPLICIT);
        assess3.setNumGlobalOpportunities(4);
        assess3.setTestWindow(new Assessment.TestWindow[] {
                new Assessment.TestWindow(new DateTime(2013, 01, 1, 0, 0), new DateTime(2014, 11, 30, 0, 0), 2),
                new Assessment.TestWindow(new DateTime(2014, 12, 1, 0, 0), new DateTime(2015, 11, 30, 0, 0), 1),
                new Assessment.TestWindow(new DateTime(2015, 12, 1, 0, 0), new DateTime(2015, 12, 31, 0, 0), 1) });
        assess3.setTestName("MATH-12-001");
        assess3.setVersion("14.453");
        assess3.setTenantId("7");
        Assessment storedAssessment3 = testRegPersister.saveDomainObject(assess3);
        eligService.saveAssociation(storedAssessment3, storedStudent);

        List<String> tenantids = new ArrayList<>();
        tenantids.add("5");
        tenantids.add("7");

        Set<Assessment> assessmentSet = eligService.findAllAssessmentsByTenantsAndBeginWindow(tenantids, new DateTime(
                2013, 01, 1, 0, 0));
        assertThat(assessmentSet, is(notNullValue()));
        assertThat(assessmentSet, hasSize(2));

        assertThat(
                assessmentSet,
                containsInAnyOrder(hasProperty("id", is(storedAssessment1.getId())),
                        hasProperty("id", is(storedAssessment3.getId()))));

        Assessment assessMatching1 = null;
        Assessment assessMatching3 = null;

        for (Assessment assess : assessmentSet) {
            if (assess.getId().equals(storedAssessment1.getId())) {
                assessMatching1 = assess;
            } else if (assess.getId().equals(storedAssessment3.getId())) {
                assessMatching3 = assess;
            }
        }

        assertThat(assessMatching1.getTestWindow().length, is(2));
        assertThat(assessMatching1.getTestWindow()[0].getBeginWindow(), is(new DateTime(2013, 01, 1, 0, 0)));
        assertThat(assessMatching1.getTestWindow()[1].getBeginWindow(), is(new DateTime(2012, 12, 29, 0, 0)));

        assertThat(assessMatching3.getTestWindow().length, is(1));
        assertThat(assessMatching3.getTestWindow()[0].getBeginWindow(), is(new DateTime(2013, 01, 1, 0, 0)));

    }

    private List<Student> findEligibleStudentsByAssessment(final String assessmentId) {
        // lookup in elig student repo by assess id

        try {

            long numEligStudents = eligStudentRepo.countByAssessmentMongoId(assessmentId);

            long numPages = numEligStudents / 100;
            long remain = numEligStudents % 100;

            if (remain > 0) {
                numPages++;
            }

            List<EligibleStudent> eligStudents = new ArrayList<EligibleStudent>();

            for (long curPage = 0; curPage < numPages; curPage++) {
                eligStudents.addAll(eligStudentRepo.findByAssessmentMongoId(assessmentId, new PageRequest(
                        (int) curPage, 100)));
            }

            if (eligStudents == null || eligStudents.isEmpty()) {
                return Collections.emptyList();
            }

            List<Student> returnStudents = new ArrayList<Student>();

            for (EligibleStudent eligibleStudent : eligStudents) {
                returnStudents.add(eligibleStudent.getStudent());
            }

            return returnStudents;
        } catch (IllegalArgumentException e) {
            return Collections.emptyList();
        }
    }

    @Test
    public void testInvalidSubjectWithAssessmentRemoval() {
        Assessment assess = new Assessment();
        assess.setDelayRule(2);
        assess.setEligibilityType(EligibilityType.EXPLICIT);
        assess.setNumGlobalOpportunities(4);
        assess.setTestWindow(new Assessment.TestWindow[] { new Assessment.TestWindow(new DateTime(2013, 12, 1, 0, 0),
                new DateTime(2013, 12, 31, 0, 0), null) });
        assess.setTestName("test6");
        assess.setVersion("1");
        assess.setTenantId("5");
        assess.setSubjectCode("ONE");

        Assessment storedAssessment = testRegPersister.saveDomainObject(assess);

        Assessment assess2 = new Assessment();
        assess2.setDelayRule(2);
        assess2.setEligibilityType(EligibilityType.EXPLICIT);
        assess2.setNumGlobalOpportunities(4);
        assess2.setTestWindow(new Assessment.TestWindow[] { new Assessment.TestWindow(new DateTime(2013, 12, 1, 0, 0),
                new DateTime(2013, 12, 31, 0, 0), null) });
        assess2.setTestName("test7");
        assess2.setVersion("1");
        assess2.setTenantId("5");
        assess2.setSubjectCode("TWO");

        Assessment storedAssessment2 = testRegPersister.saveDomainObject(assess2);

        // create a couple of students

        Student student = new Student();
        student.setBirthDate(new DateTime(1980, 11, 11, 0, 0));
        student.setDistrictIdentifier("1");
        student.setEntityId("123451");
        student.setExternalSsid("111111111");
        student.setFirstName("Bob");
        student.setGender(Gender.Male);
        student.setGradeLevelWhenAssessed(GradeLevel.FOURTHGRADE);
        student.setLanguageCode("eng");
        student.setLastName("Test");
        student.setStateAbbreviation("WI");
        student.setAmericanIndianOrAlaskaNative("No");
        student.setAsian("No");
        student.setBlackOrAfricanAmerican("No");
        student.setHispanicOrLatino("No");
        student.setWhite("Yes");
        student.setNativeHawaiianOrPacificIsland("No");
        student.setTwoOrMoreRaces("No");
        student.setDisadvantageStatus("No");
        student.setLepStatus("No");
        student.setInstitutionIdentifier("1");
        student.setSection504Status("No");
        student.setiDEAIndicator("No");

        Accommodation accom1 = new Accommodation();
        accom1.setStudentId(student.getEntityId());
        accom1.setStateAbbreviation("WI");
        accom1.setSubject("ONE");
        //accom1.setOther("other accom");

        Accommodation accom2 = new Accommodation();
        accom2.setStudentId(student.getEntityId());
        accom2.setStateAbbreviation("WI");
        accom2.setSubject("TWO");
       // accom2.setOther("other accom");

        List<Accommodation> accoms = new ArrayList<Accommodation>();
        accoms.add(accom1);
        accoms.add(accom2);

        //student.setAccommodations(accoms);

        Student storedStudent = testRegPersister.saveDomainObject(student);

        // associate

        eligService.saveAssociation(storedAssessment, storedStudent);
        eligService.saveAssociation(storedAssessment2, storedStudent);

        // get student for "student"

        EligibleStudent foundEligStudent = eligStudentRepo.findByStudentMongoId(storedStudent.getId());

        // verify that it does not have an invalid subject
        assertThat(foundEligStudent.getStudent().isInValidAccommodationsSubject(), is(false));

        // remove association to assessment 2
        eligService.removeAssociation(storedAssessment2, storedStudent);

        // get student for "student"
        foundEligStudent = eligStudentRepo.findByStudentMongoId(storedStudent.getId());

        // verify that it _does_ have an invalid subject
        assertThat(foundEligStudent.getStudent().isInValidAccommodationsSubject(), is(true));

    }

}
