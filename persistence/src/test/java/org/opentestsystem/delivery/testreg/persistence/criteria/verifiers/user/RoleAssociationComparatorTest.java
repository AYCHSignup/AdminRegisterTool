/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.user;

import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;

import java.util.Comparator;

import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.HierarchyLevel;
import org.opentestsystem.delivery.testreg.domain.User.RoleAssociation;
import org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.user.RoleAssociationComparator;

public class RoleAssociationComparatorTest {
    
    private final Comparator<RoleAssociation> roleAssociationComparator = new RoleAssociationComparator();
    
    
    //EXCLUDE ENTITIES - CLIENT, GROUPOFSTATES, STATE

    @Test
    public void testEqualIncludeEntitiy() {//State Abbreviation is considered
        
        RoleAssociation role1 = new RoleAssociation();
        role1.setAssociatedEntityId("ABZr152454551");
        role1.setLevel(HierarchyLevel.GROUPOFDISTRICTS);
        role1.setRole("TESTER DUDE");
        role1.setStateAbbreviation("WI");
        
        RoleAssociation role2 = new RoleAssociation();
        role2.setAssociatedEntityId("ABZr152454551");
        role2.setLevel(HierarchyLevel.GROUPOFDISTRICTS);
        role2.setRole("TESTER DUDE");
        role2.setStateAbbreviation("WI");
        
        assertThat(roleAssociationComparator.compare(role1, role2), is(0));
    }
    
    @Test
    public void testEqualExcludeEntity() {//State Abbreviation is not considered
        RoleAssociation role1 = new RoleAssociation();
        role1.setAssociatedEntityId("ABZr152454551");
        role1.setLevel(HierarchyLevel.CLIENT);
        role1.setRole("TESTER DUDE");
        role1.setStateAbbreviation("WI");
        
        RoleAssociation role2 = new RoleAssociation();
        role2.setAssociatedEntityId("ABZr152454551");
        role2.setLevel(HierarchyLevel.CLIENT);
        role2.setRole("TESTER DUDE");
        role2.setStateAbbreviation("TX");
        
        assertThat(roleAssociationComparator.compare(role1, role2), is(0));
    }
    
    @Test
    public void testNotEqualIncludedEntitiy() {
        RoleAssociation role1 = new RoleAssociation();
        role1.setAssociatedEntityId("ABZr152454551");
        role1.setLevel(HierarchyLevel.GROUPOFDISTRICTS);
        role1.setRole("TESTER DUDE");
        role1.setStateAbbreviation("TX");
        
        RoleAssociation role2 = new RoleAssociation();
        role2.setAssociatedEntityId("ABZr152454551");
        role2.setLevel(HierarchyLevel.GROUPOFDISTRICTS);
        role2.setRole("TESTER DUDE");
        role2.setStateAbbreviation("WI");
        
        assertThat(roleAssociationComparator.compare(role1, role2), is(1));
    }
    
    @Test
    public void testNotEqualExcludedEntitiy() {
        RoleAssociation role1 = new RoleAssociation();
        role1.setAssociatedEntityId("ABZr152454551");
        role1.setLevel(HierarchyLevel.CLIENT);
        role1.setRole("TESTER DUDE");
        role1.setStateAbbreviation("WI");
        
        RoleAssociation role2 = new RoleAssociation();
        role2.setAssociatedEntityId("ABZr152454551");
        role2.setLevel(HierarchyLevel.GROUPOFSTATES);
        role2.setRole("TESTER DUDE");
        role2.setStateAbbreviation("TX");
        
        assertThat(roleAssociationComparator.compare(role1, role2), is(1));
    }
}
