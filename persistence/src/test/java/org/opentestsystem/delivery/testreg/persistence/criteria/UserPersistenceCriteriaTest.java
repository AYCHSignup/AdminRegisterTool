/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testadmin.domain.ProctorRole;
import org.opentestsystem.delivery.testadmin.domain.search.ProctorRoleSearchRequest;
import org.opentestsystem.delivery.testadmin.service.ProctorRoleService;
import org.opentestsystem.delivery.testreg.domain.DistrictEntity;
import org.opentestsystem.delivery.testreg.domain.HierarchyLevel;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.domain.Sb11SuperEntity;
import org.opentestsystem.delivery.testreg.domain.User;
import org.opentestsystem.delivery.testreg.domain.User.RoleAssociation;
import org.opentestsystem.delivery.testreg.persistence.Verifier;
import org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.user.DuplicateRoleAssociationVerifier;
import org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.user.UserParentVerifier;
import org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.user.UserRoleLevelAssociationVerifier;
import org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.user.UserRoleVerifier;
import org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.user.UserVerifierChain;
import org.opentestsystem.delivery.testreg.service.impl.Sb11EntityServiceImpl;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.opentestsystem.shared.security.domain.permission.SbacPermissionEntity;
import org.opentestsystem.shared.security.domain.permission.UserRole;
import org.opentestsystem.shared.security.integration.PermissionClient;
import org.springframework.validation.ObjectError;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import static org.hamcrest.collection.IsCollectionWithSize.*;
import static org.hamcrest.collection.IsEmptyCollection.*;
import static org.hamcrest.core.Is.*;
import static org.junit.Assert.*;
import static org.springframework.test.util.ReflectionTestUtils.*;

public class UserPersistenceCriteriaTest {

    UserPersistenceCriteria userPersistenceCriteria;

    User testUser;

    DistrictEntity testUserLocalEducationAgency;

    final static String TEST_USER_PARENT_ENTITY_ID = "0189801023";
    final static HierarchyLevel TEST_USER_PARENT_ENTITY_TYPE = HierarchyLevel.DISTRICT;

    private List<UserRole> mockUserRoles() {
        // Entities
        SbacPermissionEntity deEntity = new SbacPermissionEntity();
        deEntity.setEntity(HierarchyLevel.DISTRICT.name());

        SbacPermissionEntity stEntity = new SbacPermissionEntity();
        stEntity.setEntity(HierarchyLevel.STATE.name());

        SbacPermissionEntity instEntity = new SbacPermissionEntity();
        instEntity.setEntity(HierarchyLevel.INSTITUTION.name());

        List<UserRole> userRoles = new ArrayList<UserRole>();

        // Test Administrator - TA
        UserRole testAdmin = new UserRole();
        List<SbacPermissionEntity> testAdminAllowableEntities = new ArrayList<SbacPermissionEntity>();
        testAdminAllowableEntities.add(deEntity);
        testAdminAllowableEntities.add(instEntity);
        testAdmin.setAllowableEntities(testAdminAllowableEntities);
        testAdmin.setRole("TA");

        // Super Admin - SA
        UserRole superAdmin = new UserRole();
        List<SbacPermissionEntity> superAdminAllowableEntities = new ArrayList<SbacPermissionEntity>();
        superAdminAllowableEntities.add(stEntity);
        superAdminAllowableEntities.add(deEntity);
        superAdminAllowableEntities.add(instEntity);
        superAdmin.setAllowableEntities(superAdminAllowableEntities);
        superAdmin.setRole("SA");

        userRoles.add(superAdmin);
        userRoles.add(testAdmin);

        return userRoles;
    }

    @Before
    public void setup() throws Exception {

        // UserRole
        Verifier<User> userRoleAssociationVerifier = new UserRoleLevelAssociationVerifier();
        setField(userRoleAssociationVerifier, "permissionClient", new MockPermissionClient(mockUserRoles()));
        setField(userRoleAssociationVerifier, "proctorRoleService", new MockProctorRoleService());

        Verifier<User> userRoleVerifier = new UserRoleVerifier();
        setField(userRoleVerifier, "userRoleLevelAssociationVerifier", userRoleAssociationVerifier);
        setField(userRoleVerifier, "permissionClient", new MockPermissionClient(mockUserRoles()));
        setField(userRoleVerifier, "proctorRoleService", new MockProctorRoleService());

        // UserParent
        Verifier<User> userParentVerifier = new UserParentVerifier();
        setField(userParentVerifier, "sb11EntityRepositoryService", new MockSb11EntityService());

        // DuplicatrRoleAssociation
        Verifier<User> duplicateRoleAssociationVerifier = new DuplicateRoleAssociationVerifier();

        // Veifier Map
        Map<String, Verifier<User>> verifierMap = Maps.newHashMap();
        verifierMap.put("userRole", userRoleVerifier);
        verifierMap.put("userParent", userParentVerifier);
        verifierMap.put("userDuplicateRoleAssociation", duplicateRoleAssociationVerifier);

        // Verifier Chain
        Verifier<User> userVerifierChain = new UserVerifierChain();
        setField(userVerifierChain, "verifierMap", verifierMap);

        // Persistence Criteria
        userPersistenceCriteria = new UserPersistenceCriteria();
        setField(userPersistenceCriteria, "userVerifierChain", userVerifierChain);

        // District
        testUserLocalEducationAgency = new DistrictEntity();
        testUserLocalEducationAgency.setEntityId(TEST_USER_PARENT_ENTITY_ID);
        testUserLocalEducationAgency.setStateAbbreviation("WI");

        // User
        testUser = new User();
        RoleAssociation roles = new RoleAssociation();
        roles.setRole("SA");
        roles.setAssociatedEntityId(TEST_USER_PARENT_ENTITY_ID);
        roles.setLevel(TEST_USER_PARENT_ENTITY_TYPE);
        roles.setStateAbbreviation("WI");
        testUser.addRoleAssociation(roles);
    }

    @Test
    public void testValidUser() { // Role Exists. Parent Id and Type are valid
        assertThat(userPersistenceCriteria.validate(testUser), is(empty()));
    }

    @Test
    public void testInvalidHierarchyLevel() { // Invalid Level@User
        RoleAssociation roles = new RoleAssociation();
        roles.setRole("SA");
        roles.setAssociatedEntityId(TEST_USER_PARENT_ENTITY_ID);
        roles.setLevel(HierarchyLevel.STATE);
        testUser.addRoleAssociation(roles);
        List<? extends ObjectError> errors = userPersistenceCriteria.validate(testUser);
        assertThat(errors, hasSize(1));
        assertThat(errors.get(0).getDefaultMessage(),
                is("AssociatedEntityID not found in the database for the type STATE"));

    }

    @Test
    public void testInvalidRole() { // Invalid Role@User
        RoleAssociation roles = new RoleAssociation();
        roles.setAssociatedEntityId(TEST_USER_PARENT_ENTITY_ID);
        roles.setLevel(TEST_USER_PARENT_ENTITY_TYPE);
        roles.setRole("Test Author");
        roles.setStateAbbreviation("WI");

        testUser.addRoleAssociation(roles);
        List<? extends ObjectError> errors = userPersistenceCriteria.validate(testUser);
        assertThat(errors, hasSize(1));
        assertThat(errors.get(0).getDefaultMessage(), is("Test Author is not a valid Role"));

    }

    @Test
    public void testInvalidRoleVsHierarchyLevel() { // Invalid RoleVsLevel
        RoleAssociation roles = new RoleAssociation();
        roles.setRole("SA");
        roles.setAssociatedEntityId(TEST_USER_PARENT_ENTITY_ID);
        roles.setLevel(HierarchyLevel.CLIENT);
        testUser.addRoleAssociation(roles);
        List<? extends ObjectError> errors = userPersistenceCriteria.validate(testUser);
        assertThat(errors, hasSize(2));
        assertThat(errors.get(0).getDefaultMessage(), is("SA is not a valid Role for CLIENT"));

    }

    private class MockPermissionClient extends PermissionClient {

        private final List<UserRole> userRoles;

        public MockPermissionClient(final List<UserRole> userRoles) {
            this.userRoles = userRoles;
        }

        @Override
        public UserRole getRole(final String rolename) {
            for (UserRole userRole : userRoles) {
                if (userRole.getRole().equals(rolename)) {
                    return userRole;
                }
            }
            return null;
        }
    }

    private class MockProctorRoleService implements ProctorRoleService {

        @Override
        public ProctorRole saveProctorRole(ProctorRole proctorRole) {
            return null;
        }

        @Override
        public ProctorRole getProctorRole(String proctorRoleId) {
            return null;
        }

        @Override
        public void removeProctorRole(String proctorRoleId) {
        }

        @Override
        public SearchResponse<ProctorRole> searchProctorRoles(ProctorRoleSearchRequest proctorRoleSearchRequest) {
            return null;
        }

        @Override
        public List<ProctorRole> getAllProctorRolesAvailable() {
            return null;
        }

        @Override
        public List<ProctorRole> getRolesByName(String rolename) {
            if (rolename.equals("TestProctor")) {
                ProctorRole pr = new ProctorRole();
                pr.setName("TestProctor");
                return Lists.newArrayList(pr);
            }
            return new ArrayList<>();
        }

    }

    private class MockSb11EntityService extends Sb11EntityServiceImpl<Sb11Entity> {

        @SuppressWarnings({ "rawtypes", "unchecked" })
        @Override
        public Sb11SuperEntity findByEntityId(final String entityId, final Class clazz) {
            return null;
        }

        @SuppressWarnings({ "rawtypes", "unchecked" })
        @Override
        public Sb11Entity findByEntityIdAndStateAbbreviation(final String entityId, String stateAbbreviation, final Class clazz) {
            if (entityId.equals(TEST_USER_PARENT_ENTITY_ID) && clazz.equals(TEST_USER_PARENT_ENTITY_TYPE.getEntityClass())) {
                return testUserLocalEducationAgency;
            }
            return null;
        }
    }

}
