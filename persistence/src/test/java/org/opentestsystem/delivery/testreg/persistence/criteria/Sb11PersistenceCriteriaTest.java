/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria;

import static org.hamcrest.collection.IsCollectionWithSize.hasSize;
import static org.hamcrest.collection.IsEmptyCollection.empty;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsNot.not;
import static org.hamcrest.core.IsNull.notNullValue;
import static org.junit.Assert.assertThat;

import java.util.List;

import org.junit.Test;
import org.opentestsystem.delivery.CachedClientEntity;
import org.opentestsystem.delivery.testreg.domain.GroupOfStatesEntity;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.domain.StateEntity;
import org.opentestsystem.delivery.testreg.integration.AbstractPersistenceEmbeddedTest;
import org.opentestsystem.delivery.testreg.persistence.GroupOfStatesEntityRepository;
import org.opentestsystem.delivery.testreg.service.TestRegPersister;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.validation.ObjectError;

public class Sb11PersistenceCriteriaTest extends AbstractPersistenceEmbeddedTest {

    @Autowired
    @Qualifier("sb11PersistenceCriteria")
    private BusinessValidator<Sb11Entity> sb11UpdateValidator;

    @Autowired
    private TestRegPersister sb11EntityService;

    @Autowired
    private GroupOfStatesEntityRepository groupOfStatesRepository;
    
    @Autowired
    private CachedClientEntity cachedClientEntity;
       
    private String getClientId() {
       return cachedClientEntity.getClient().getEntityId();
    }

    @Test
    public void testUpsertSuccess() {
        groupOfStatesRepository.save(buildParentEntity());
        StateEntity stateEntity = savedStateEntity();
        //savedClientEntity();
        assertThat(stateEntity, is(notNullValue()));

        // DELETE column is empty - UPSERT(update or insert) semantics
        Sb11Entity sb11Entity = new StateEntity.Builder("MO", "Montana", "CLIENT", getClientId(), "").build();
        List<? extends ObjectError> errors = sb11UpdateValidator.validate(sb11Entity);
        assertThat(errors, is(empty()));

        // Check if DELETE Column can be null
        sb11Entity = new StateEntity.Builder("MO", "Montana", "CLIENT", getClientId(), null).build();
        errors = sb11UpdateValidator.validate(sb11Entity);
        assertThat(errors, is(empty()));

        // Still Hierarchy is validated
        errors = sb11UpdateValidator.validate(new StateEntity.Builder("MO", "Montana", "GROUPOFSTATES", "1235", "").build());
        assertThat(errors, is(not(empty())));
        assertThat(errors, hasSize(1));
        assertThat(errors.get(0).getDefaultMessage(), is("ParentExternalId not found in the database for the type GROUPOFSTATES"));

        // Delete the entity saved
        sb11EntityService.deleteDomainObject(stateEntity);
    }

    @Test
    public void testUpsertFailure() {// Various Upsert failures - see DELETE Column values
        Sb11Entity sb11Entity = new StateEntity.Builder("DE", "Delaware", "GROUPOFSTATES", "12345", "UPD").build();
        List<? extends ObjectError> errors = sb11UpdateValidator.validate(sb11Entity);
        assertThat(errors, hasSize(1));

        sb11Entity = new StateEntity.Builder("DE", "Delaware", "GROUPOFSTATES", "12345", "UPDATE").build();
        errors = sb11UpdateValidator.validate(sb11Entity);
        assertThat(errors, hasSize(1));

        sb11Entity = new StateEntity.Builder("DE", "Delaware", "GROUPOFSTATES", "12345", "U P D A T E").build();
        errors = sb11UpdateValidator.validate(sb11Entity);
        assertThat(errors, hasSize(1));

        sb11Entity = new StateEntity.Builder("DE", "Delaware", "GROUPOFSTATES", "12345", "ADD").build();
        errors = sb11UpdateValidator.validate(sb11Entity);
        assertThat(errors, hasSize(1));

        sb11Entity = new StateEntity.Builder("DE", "Delaware", "GROUPOFSTATES", "12345", "ADDITION").build();
        errors = sb11UpdateValidator.validate(sb11Entity);
        assertThat(errors, hasSize(1));

        sb11Entity = new StateEntity.Builder("DE", "Delaware", "GROUPOFSTATES", "12345", "A D D").build();
        errors = sb11UpdateValidator.validate(sb11Entity);
        assertThat(errors, hasSize(1));
    }

    private StateEntity savedStateEntity() {
        StateEntity stateEntity = new StateEntity.Builder("MT", "Montana", "GROUPOFSTATES", "12345", "").build();
        return sb11EntityService.saveDomainObject(stateEntity);
    }

    private GroupOfStatesEntity buildParentEntity() {
        GroupOfStatesEntity gose = new GroupOfStatesEntity.Builder("12345", "Midwest Sates", "CLIENT", getClientId(), "")
        .build();
        return gose;
    }
}
