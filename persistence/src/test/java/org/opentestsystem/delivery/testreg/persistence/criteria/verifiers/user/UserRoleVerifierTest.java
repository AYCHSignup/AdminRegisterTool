/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.user;

import static org.hamcrest.collection.IsEmptyCollection.empty;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsNot.not;
import static org.junit.Assert.assertThat;
import static org.springframework.test.util.ReflectionTestUtils.setField;

import java.util.ArrayList;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testadmin.domain.ProctorRole;
import org.opentestsystem.delivery.testadmin.domain.search.ProctorRoleSearchRequest;
import org.opentestsystem.delivery.testadmin.service.ProctorRoleService;
import org.opentestsystem.delivery.testreg.domain.HierarchyLevel;
import org.opentestsystem.delivery.testreg.domain.User;
import org.opentestsystem.delivery.testreg.domain.User.RoleAssociation;
import org.opentestsystem.delivery.testreg.persistence.Verifier;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.opentestsystem.shared.security.integration.PermissionClient;
import org.springframework.validation.FieldError;

import com.google.common.collect.Lists;

public class UserRoleVerifierTest {
    
    Verifier<User> verifier;
    User user;
    
    PermissionClient permissionClient;
    
    ProctorRoleService proctorRoleService;
    
    @Before
    public void before() {
        verifier = new UserRoleVerifier();
        
        user = new User();
        RoleAssociation roleAss = new RoleAssociation();
        roleAss.setAssociatedEntityId("ABZZ");
        roleAss.setLevel(HierarchyLevel.STATE);
        roleAss.setRole("Unit Tester");
        user.addRoleAssociation(roleAss);
    }
    
    private void setDependencies(boolean hasRole, boolean hasRoleAndLevel){
        permissionClient   = new MockPermissionClient(hasRole, hasRoleAndLevel);
        proctorRoleService = new MockProctorRoleService(false); //Always not a proctor for now
        setField(verifier, "permissionClient", permissionClient);
        Verifier<User> roleAssVerifier = new UserRoleLevelAssociationVerifier();
        
        setField(roleAssVerifier, "permissionClient", permissionClient);
        setField(verifier, "userRoleLevelAssociationVerifier", roleAssVerifier);
        setField(verifier, "proctorRoleService", proctorRoleService);
    }
    
    @Test
    public void testSuccess() {
        //Prepare Mock Data
        setDependencies(true, true);
        
        //Run SUT
        List<FieldError> errors= verifier.verify(user);

        //Validate Result
        assertThat(errors, is(empty()));
    }
    
    @Test
    public void testUserRoleFailure() {
        //Prepare Mock Data
        setDependencies(false, false);
        
        //Run SUT
        List<FieldError> errors= verifier.verify(user);
        
        //Validate Result
        assertThat(errors, is(not(empty())));
        assertThat(errors.get(0).getDefaultMessage(), is("Unit Tester is not a valid Role"));
    }
    
    @Test
    public void testUserRoleLevelFailure() {
        //Prepare Mock Data
        setDependencies(true, false);
        
        //Run SUT
        List<FieldError> errors= verifier.verify(user);
        
        //Validate Result
        assertThat(errors, is(not(empty())));
        assertThat(errors.get(0).getDefaultMessage(), is("Unit Tester is not a valid Role for STATE"));
    }
    
    private class MockProctorRoleService implements ProctorRoleService {
        
        private boolean hasRoleAndLevel;

        private MockProctorRoleService(boolean hasRoleAndLevel) {
            this.hasRoleAndLevel = hasRoleAndLevel;
        }
        
        @Override
        public ProctorRole saveProctorRole(ProctorRole proctorRole) {
            return null;
        }

        @Override
        public ProctorRole getProctorRole(String proctorRoleId) {
            return null;
        }

        @Override
        public void removeProctorRole(String proctorRoleId) {
        }

        @Override
        public SearchResponse<ProctorRole> searchProctorRoles(ProctorRoleSearchRequest proctorRoleSearchRequest) {
            return null;
        }

        @Override
        public List<ProctorRole> getAllProctorRolesAvailable() {
            return null;
        }

        @Override
        public List<ProctorRole> getRolesByName(String rolename) {
            if(!hasRoleAndLevel) return new ArrayList<ProctorRole>();
            ProctorRole pr = new ProctorRole();
            pr.setName("Unit Proctor");
            return Lists.newArrayList(pr);
        }
        
    }
}
