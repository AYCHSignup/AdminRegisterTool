/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.student;

import static org.hamcrest.collection.IsEmptyCollection.empty;
import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;
import static org.springframework.test.util.ReflectionTestUtils.setField;

import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.HierarchyLevel;
import org.opentestsystem.delivery.testreg.domain.InstitutionEntity;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.persistence.Verifier;
import org.springframework.validation.FieldError;

public class InstitutionParentVerifierTest {

    Verifier<Student> verifier;
    boolean isInstitutionDistrictCrossVerifierCalled = false;
    boolean isGroupOfInstitutionsVerifier = false;

    InstitutionEntity fakeInstitution;

    @Before
    public void setup() {
        fakeInstitution = new InstitutionEntity();
        fakeInstitution.setEntityId("I1000");

        verifier = new InstitutionParentVerifier();
        setField(verifier, "institutionDistrictCrossVerifier", new Verifier<Student>() {
            @Override
            public List<FieldError> verify(Student b) {
                isInstitutionDistrictCrossVerifierCalled = true;
                return null;
            }
        });
        setField(verifier, "groupOfInstitutionsVerifier", new Verifier<Student>() {
            @Override
            public List<FieldError> verify(Student b) {
                isGroupOfInstitutionsVerifier = true;
                return null;
            }
        });
        setField(verifier, "sb11EntityRepositoryService", new MockSb11EntityRepositoryService() {
            @SuppressWarnings("unchecked")
            @Override
            public <S extends Sb11Entity> S findByEntityIdAndStateAbbreviation(String entityId,
                    String stateAbbreviation, Class<S> clazz) {
                if (!entityId.equals("I1000"))
                    return null;
                return (S) fakeInstitution;
            }
        });
    }

    @Test
    public void testDistrictParent() {
        // Setup Data
        fakeInstitution.setParentEntityType(HierarchyLevel.DISTRICT);
        Student student = new Student();
        student.setInstitutionIdentifier("I1000");

        // Invoke Test Method
        verifier.verify(student);

        // Verify outcome
        assertThat(isInstitutionDistrictCrossVerifierCalled, is(true));
    }

    @Test
    public void testGroupOfInstitutionsParent() {
        // Setup Data
        fakeInstitution.setParentEntityType(HierarchyLevel.GROUPOFINSTITUTIONS);
        Student student = new Student();
        student.setInstitutionIdentifier("I1000");

        // Invoke Test Method
        verifier.verify(student);

        // Verify outcome
        assertThat(isGroupOfInstitutionsVerifier, is(true));
    }

    @Test
    public void testFailureInvalidHierarchy() {
        // Setup Data
        fakeInstitution.setParentEntityType(HierarchyLevel.CLIENT);
        Student student = new Student();
        student.setInstitutionIdentifier("I1000");

        assertThat(verifier.verify(student), is((empty())));
    }

}
