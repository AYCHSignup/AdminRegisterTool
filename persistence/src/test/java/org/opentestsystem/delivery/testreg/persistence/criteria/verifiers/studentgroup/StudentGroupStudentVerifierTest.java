/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.studentgroup;

import static org.hamcrest.collection.IsCollectionWithSize.hasSize;
import static org.hamcrest.collection.IsEmptyCollection.empty;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsNot.not;
import static org.junit.Assert.assertThat;
import static org.springframework.test.util.ReflectionTestUtils.setField;

import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.Sb11NonEntity;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.domain.StudentGroup;
import org.opentestsystem.delivery.testreg.domain.search.StudentSearchRequest;
import org.opentestsystem.delivery.testreg.persistence.Verifier;
import org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.student.MockSb11NonEntityRepositoryService;
import org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.studentgroup.StudentGroupStudentVerifier;
import org.opentestsystem.shared.search.domain.AbstractSearchRequest;

public class StudentGroupStudentVerifierTest {

    Verifier<StudentGroup> verifier;

    @Before
    public void setup() {
        verifier = new StudentGroupStudentVerifier();
        setField(verifier, "sb11NonEntityRepositoryService", new MockSb11NonEntityRepositoryService() {
            @SuppressWarnings("unchecked")
            public <T extends Sb11NonEntity> T findByAlternateKey(AbstractSearchRequest searchRequest, Class<T> clazz) {
                Map<String, String[]> criteria = searchRequest.getSearchCriteria();
                String[] entityIds = criteria.get(StudentSearchRequest.SEARCH_KEY_ENTITY_ID);
                String[] stateIds = criteria.get(StudentSearchRequest.SEARCH_KEY_STATE_ID);

                if (!entityIds[0].equals("123456") || !stateIds[0].equals("WI")) {
                    return null;
                }
                return (T) new Student() {
                    private static final long serialVersionUID = 1L;
                    {
                        setEntityId("123456");
                        setStateAbbreviation("WI");
                    }
                };
            }
        });
    }

    @Test
    public void testSuccess() {
        StudentGroup studentgroup = new StudentGroup();
        studentgroup.setStateAbbreviation("WI");
        studentgroup.setStudentId("123456");
        assertThat(verifier.verify(studentgroup), is(empty()));
    }

    @Test
    public void testFailure() {
        StudentGroup studentgroup = new StudentGroup();
        studentgroup.setStateAbbreviation("wi");
        studentgroup.setStudentId("9999");
        assertThat(verifier.verify(studentgroup), is(not(empty())));
        assertThat(verifier.verify(studentgroup), hasSize(1));
        assertThat(verifier.verify(studentgroup).get(0).getRejectedValue().toString(), is("9999"));
    }
}
