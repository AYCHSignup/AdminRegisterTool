/*
Educational Online Test Delivery System Copyright (c) 2013 American Institutes for Research

Distributed under the AIR Open Source License, Version 1.0 See accompanying file AIR-License-1_0.txt or at
http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 */

package org.opentestsystem.delivery.testreg.integration.eligibility;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.junit.Assert.assertThat;

import org.joda.time.DateTime;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.delivery.testreg.domain.Action;
import org.opentestsystem.delivery.testreg.domain.Assessment;
import org.opentestsystem.delivery.testreg.domain.Assessment.EligibilityType;
import org.opentestsystem.delivery.testreg.domain.Assessment.TestWindow;
import org.opentestsystem.delivery.testreg.domain.ClientEntity;
import org.opentestsystem.delivery.testreg.domain.DistrictEntity;
import org.opentestsystem.delivery.testreg.domain.ExplicitEligibility;
import org.opentestsystem.delivery.testreg.domain.HierarchyLevel;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.domain.Student.Gender;
import org.opentestsystem.delivery.testreg.domain.Student.GradeLevel;
import org.opentestsystem.delivery.testreg.domain.Student.PrimaryDisabilityType;
import org.opentestsystem.delivery.testreg.domain.Student.Title3ProgramType;
import org.opentestsystem.delivery.testreg.domain.event.ExplicitEligibilityModificationEvent;
import org.opentestsystem.delivery.testreg.integration.AbstractPersistenceEmbeddedTest;
import org.opentestsystem.delivery.testreg.service.TestRegPersister;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.integration.Message;
import org.springframework.integration.channel.QueueChannel;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "classpath:test-event-noconsumer-context.xml" })
public class EligibilityExplicitEventTest extends AbstractPersistenceEmbeddedTest {

    @Autowired
    private QueueChannel testChannel;

    @Autowired
    private TestRegPersister persister;

    private ExplicitEligibility elig1;

    @Before
    public void init() {

        // need to insert an assessment, district, and student
        Assessment assess1 = new Assessment();
        assess1.setEligibilityType(EligibilityType.EXPLICIT);
        assess1.setNumGlobalOpportunities(1);
        assess1.setSubjectCode("MTH");
        assess1.setTenantId("1");
        assess1.setTestName("mathtest");
        assess1.setVersion("1");
        assess1.setTestWindow(new TestWindow[] { new TestWindow(new DateTime(), new DateTime().plusDays(1), null) });

        @SuppressWarnings("unused")
        Assessment savedAssessment = persister.saveDomainObject(assess1);

        ClientEntity client1 = new ClientEntity();
        client1.setEntityId("testclient");
        client1.setEntityName("testclient");

        @SuppressWarnings("unused")
        ClientEntity savedClient = persister.saveDomainObject(client1);

        DistrictEntity district1 = new DistrictEntity();
        district1.setDelete(Action.ADD.name());
        district1.setEntityId("1");
        district1.setEntityName("testdistrict");
        district1.setNationwideIdentifier("11");
        district1.setParentEntityId("testclient");
        district1.setParentEntityType(HierarchyLevel.CLIENT);
        district1.setStateAbbreviation("WI");

        @SuppressWarnings("unused")
        DistrictEntity savedDistrict = persister.saveDomainObject(district1);

        Student student1 = new Student();
        student1.setEntityId("123456");
        student1.setStateAbbreviation("WI");
        student1.setDistrictIdentifier("1");
        student1.setInstitutionIdentifier("10001");
        student1.setMiddleName("MS");
        student1.setFirstName("Joe");
        student1.setLastName("Smith");
        student1.setBirthDate("2013-10-10");
        student1.setExternalSsid("WI12345");
        student1.setGradeLevelWhenAssessed(GradeLevel.EIGHTHGRADE);
        student1.setGender(Gender.Male);
        student1.setHispanicOrLatino("NO");
        student1.setAmericanIndianOrAlaskaNative("NO");
        student1.setAsian("NO");
        student1.setLanguageCode("eng");
        student1.setBlackOrAfricanAmerican("NO");
        student1.setWhite("Yes");
        student1.setNativeHawaiianOrPacificIsland("NO");
        student1.setTwoOrMoreRaces("NO");
        student1.setiDEAIndicator("NO");
        student1.setLepStatus("NO");
        student1.setSection504Status("NO");
        student1.setDisadvantageStatus("YES");
        student1.setTitle3ProgressStatus("PROFICIENT");
        student1.setMigrantStatus("YES");
        student1.setFirstEntryDateIntoUsSchool("2014-09-01");
        student1.setLepEntryDate("2010-10-10");
        student1.setLepExitDate("2010-10-20");
        student1.setTitle3ProgramType(Title3ProgramType.DUALLANGUAGE);
        student1.setPrimaryDisabilityType(PrimaryDisabilityType.AUT);

        @SuppressWarnings("unused")
        Student savedStudent = persister.saveDomainObject(student1);

        // init objects we use
        elig1 = new ExplicitEligibility();
        elig1.setAdministrationName("test");
        elig1.setResponsibleDistrictId("1");
        elig1.setStateAbbreviation("WI");
        elig1.setStudentId("123456");
        elig1.setSubject("MTH");
        elig1.setTestName("mathtest");
        elig1.setTestVersion("1");

    }

    @Test
    public void testExplicitEligibilityInsert() {
        Message<?> message = testChannel.receive(); // just receive the message and throw away, this is from the
                                                    // assessment insert
        message = testChannel.receive(); // just receive the message and throw away, this is from the student insert

        ExplicitEligibility savedElig = persister.saveDomainObject(elig1);

        message = testChannel.receive();
        assertThat(message, notNullValue());
        assertThat(((ExplicitEligibilityModificationEvent) message.getPayload()).getSource().getId(),
                is(savedElig.getId()));
        assertThat(((ExplicitEligibilityModificationEvent) message.getPayload()).getAction(), is(Action.UPD));
    }

    @Test
    public void testExplicitEligibilityDelete() {
        Message<?> message = testChannel.receive(); // just receive the message and throw away, this is from the
                                                    // assessment insert
        message = testChannel.receive(); // just receive the message and throw away, this is from the student insert

        ExplicitEligibility savedElig = persister.saveDomainObject(elig1);

        message = testChannel.receive(); // just receive the message and throw away, this is from the insert

        persister.deleteDomainObject(savedElig);

        message = testChannel.receive();
        assertThat(message, notNullValue());
        assertThat(((ExplicitEligibilityModificationEvent) message.getPayload()).getSource().getId(),
                is(savedElig.getId()));
        assertThat(((ExplicitEligibilityModificationEvent) message.getPayload()).getAction(), is(Action.DEL));

    }

}
