/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.eligibility;

import static org.hamcrest.core.IsCollectionContaining.hasItem;
import static org.junit.Assert.assertThat;
import static org.opentestsystem.delivery.testreg.domain.FormatType.ASSESSMENT;
import static org.opentestsystem.delivery.testreg.domain.FormatType.DISTRICT;
import static org.opentestsystem.delivery.testreg.domain.FormatType.EXPLICITELIGIBILITY;
import static org.opentestsystem.delivery.testreg.domain.FormatType.STUDENT;
import static org.springframework.test.util.ReflectionTestUtils.setField;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.ExplicitEligibility;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.TestRegistrationBase;
import org.opentestsystem.delivery.testreg.persistence.Verifier;
import org.springframework.validation.FieldError;

public class EligibilityVerifierChainTest {

    private Verifier<ExplicitEligibility> verifier;
    List<String> invocationList;

    @Before
    public void setup() {
        verifier = new EligibilityVerifierChain();
        invocationList = new ArrayList<>();
        Map<FormatType, Verifier<? extends TestRegistrationBase>> tmp = new HashMap<FormatType, Verifier<? extends TestRegistrationBase>>();
        tmp.put(DISTRICT, new MockVerifier("DistrictVerifierCalled"));
        tmp.put(STUDENT, new MockVerifier("StudentVerifierCalled"));
        tmp.put(ASSESSMENT, new MockVerifier("AssessmentVerifierCalled"));
        tmp.put(EXPLICITELIGIBILITY, new MockVerifier("SubjectVerifierCalled"));
        setField(verifier, "verifierMap", tmp);

    }

    @Test
    public void testAllVerifiersCalled() {
        verifier.verify(new ExplicitEligibility());
        assertThat(invocationList, hasItem("DistrictVerifierCalled"));
        assertThat(invocationList, hasItem("StudentVerifierCalled"));
        assertThat(invocationList, hasItem("AssessmentVerifierCalled"));
        assertThat(invocationList, hasItem("SubjectVerifierCalled"));
    }

    private class MockVerifier implements Verifier<ExplicitEligibility> {

        private String flagToIdentifyInvocation;

        private MockVerifier(String flagToIdentifyInvocation) {
            this.flagToIdentifyInvocation = flagToIdentifyInvocation;
        }

        @Override
        public List<FieldError> verify(ExplicitEligibility b) {
            invocationList.add(flagToIdentifyInvocation);
            return Collections.emptyList();
        }

    }
}
