/*
Educational Online Test Delivery System Copyright (c) 2013 American Institutes for Research

Distributed under the AIR Open Source License, Version 1.0 See accompanying file AIR-License-1_0.txt or at
http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 */

package org.opentestsystem.delivery.testreg.integration.eligibility;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.junit.Assert.assertThat;

import org.joda.time.DateTime;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.opentestsystem.delivery.testreg.domain.Action;
import org.opentestsystem.delivery.testreg.domain.Assessment;
import org.opentestsystem.delivery.testreg.domain.Assessment.EligibilityType;
import org.opentestsystem.delivery.testreg.domain.Assessment.TestWindow;
import org.opentestsystem.delivery.testreg.domain.event.AssessmentModificationEvent;
import org.opentestsystem.delivery.testreg.eligibility.EligibilityEvaluator;
import org.opentestsystem.delivery.testreg.integration.AbstractPersistenceEmbeddedTest;
import org.opentestsystem.delivery.testreg.service.Sb11EntityRepositoryService;
import org.opentestsystem.delivery.testreg.service.TestRegPersister;
import org.opentestsystem.shared.progman.client.ProgManClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.messaging.Message;
import org.springframework.integration.channel.QueueChannel;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "classpath:test-event-noconsumer-context.xml" })
public class EligibilityAssessmentEventTest extends AbstractPersistenceEmbeddedTest {

    @Mock
    private ProgManClient progmanClient;

    @Mock
    private Sb11EntityRepositoryService sb11EntityService;

    @InjectMocks
    @Autowired
    private EligibilityEvaluator eligibilityEvaluator;

    @Autowired
    private QueueChannel testChannel;

    @Autowired
    private TestRegPersister persister;

    private Assessment assess1;

    @Before
    public void init() {

        MockitoAnnotations.initMocks(this);

        // init objects we use
        assess1 = new Assessment();
        assess1.setEligibilityType(EligibilityType.EXPLICIT);
        assess1.setNumGlobalOpportunities(1);
        assess1.setSubjectCode("MTH");
        assess1.setTenantId("1");
        assess1.setTestName("mathtest");
        assess1.setVersion("1");
        assess1.setTestWindow(new TestWindow[] { new TestWindow(new DateTime(), new DateTime().plusDays(1), null) });
    }

    @Test
    public void testAssessmentInsert() {

        Assessment savedAssessment = persister.saveDomainObject(assess1);

        Message<?> message = testChannel.receive();
        assertThat(message, notNullValue());
        assertThat(((AssessmentModificationEvent) message.getPayload()).getSource().getId(),
                is(savedAssessment.getId()));
        assertThat(((AssessmentModificationEvent) message.getPayload()).getAction(), is(Action.UPD));
    }

    @Test
    public void testAssessmentUpdate() {
        Assessment savedAssessment = persister.saveDomainObject(assess1);

        Message<?> message = testChannel.receive(); // just receive the message and throw away, this is from the insert

        savedAssessment.setNumGlobalOpportunities(5);
        savedAssessment.setDelayRule(1);
        Assessment updatedAssessment = persister.updateDomainObject(savedAssessment);

        message = testChannel.receive();
        assertThat(message, notNullValue());
        assertThat(((AssessmentModificationEvent) message.getPayload()).getSource().getId(),
                is(updatedAssessment.getId()));
        assertThat(((AssessmentModificationEvent) message.getPayload()).getSource().getNumGlobalOpportunities(), is(5));
        assertThat(((AssessmentModificationEvent) message.getPayload()).getAction(), is(Action.UPD));

    }

    @Test
    public void testAssessmentDelete() {
        Assessment savedAssessment = persister.saveDomainObject(assess1);

        Message<?> message = testChannel.receive(); // just receive the message and throw away, this is from the insert

        persister.deleteDomainObject(savedAssessment);

        message = testChannel.receive();
        assertThat(message, notNullValue());
        assertThat(((AssessmentModificationEvent) message.getPayload()).getSource().getId(),
                is(savedAssessment.getId()));
        assertThat(((AssessmentModificationEvent) message.getPayload()).getAction(), is(Action.DEL));

    }

}
