package org.opentestsystem.delivery.testreg.external;

/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2016 Regents of the University of California
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 *
 * SmarterApp Open Source Assessment Software Project: http://smarterapp.org
 * Developed by Fairway Technologies, Inc. (http://fairwaytech.com)
 * for the Smarter Balanced Assessment Consortium (http://smarterbalanced.org)
 ******************************************************************************/

import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.User;
import org.opentestsystem.delivery.testreg.domain.UserUpsert;
import org.opentestsystem.delivery.testreg.service.ExternalUserService;
import org.opentestsystem.delivery.testreg.service.TestRegPersister;
import org.opentestsystem.delivery.testreg.service.TestRegUserDetailsService;
import org.opentestsystem.delivery.testreg.service.UserService;
import org.opentestsystem.delivery.testreg.service.impl.ExternalUserServiceImpl;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;

import static org.mockito.AdditionalAnswers.returnsFirstArg;
import static org.mockito.Matchers.*;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
 * Created by fairway on 8/30/16.
 */
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "classpath:spring/domain-context.xml", "classpath:test-domain-context.xml" })
public class ExternalUserServiceTest {

    private UserService userService;
    private TestRegUserDetailsService testRegUserDetailsService;
    private TestRegPersister testRegPersister;
    private ExternalUserService externalUserService;

    @Before
    public void setup() {
        userService = mock(UserService.class);
        testRegUserDetailsService = mock(TestRegUserDetailsService.class);
        testRegPersister = mock(TestRegPersister.class);
        externalUserService = new ExternalUserServiceImpl(userService, testRegUserDetailsService, testRegPersister);
    }

    @After
    public void tearDown() {

    }

    private User buildUser() {
        User user = new User();
        user.setEmail("foo.bar@example.com");
        user.setFirstName("foo");
        user.setLastName("bar");
        user.setPhone("111-222-3333");
        ArrayList<User.RoleAssociation> userRoles = new ArrayList<>();
        User.RoleAssociation roleAssociation = new User.RoleAssociation();
        roleAssociation.setAssociatedEntityId("98765");
        roleAssociation.setRole("Administrator");
        roleAssociation.setLevel("CLIENT");
        userRoles.add(roleAssociation);
        user.setRoleAssociations(userRoles);
        return user;
    }

    @Test
    public void insertTestSuccessful() {
        //Arrange
        User user = buildUser();

        when(userService.findByEmail(anyString())).thenReturn(null);
        when(testRegPersister.saveDomainObject(any(User.class))).thenReturn(user);

        //Act
        UserUpsert userUpsert = externalUserService.upsertUser(user);

        //Assert
        Assert.assertNotNull(userUpsert);
        Assert.assertTrue(userUpsert.isInsert());
        Assert.assertNotNull(userUpsert.getUser());
        Assert.assertEquals(userUpsert.getUser().getEmail(), "foo.bar@example.com");
    }

    @Test
    public void updateTestSuccessful() {
        //Arrange
        User user = buildUser();
        User existingUser = buildUser();
        existingUser.setId("12345");
        ArrayList<User.RoleAssociation> roleAssociations = (ArrayList<User.RoleAssociation>) user.getRoleAssociations();
        User.RoleAssociation roleAssociation = new User.RoleAssociation();
        roleAssociation.setAssociatedEntityId("87654");
        roleAssociation.setRole("Tester");
        roleAssociation.setLevel("CLIENT");
        roleAssociations.add(roleAssociation);
        existingUser.setRoleAssociations(roleAssociations);

        when(userService.findByEmail(anyString())).thenReturn(existingUser);
        when(testRegPersister.saveDomainObject(any(User.class))).then(returnsFirstArg());

        //Act
        UserUpsert userUpsert = externalUserService.upsertUser(user);

        //Assert
        User assertUser = userUpsert.getUser();
        List<User.RoleAssociation> assertRoleAssociations = assertUser.getRoleAssociations();

        Assert.assertNotNull(userUpsert);
        Assert.assertFalse(userUpsert.isInsert());
        Assert.assertNotNull(assertUser);
        Assert.assertEquals(assertUser.getEmail(), "foo.bar@example.com");
        Assert.assertEquals(assertUser.getId(), "12345");
        Assert.assertEquals(assertRoleAssociations.size(), 2);
        Assert.assertEquals(assertRoleAssociations.get(0).getAssociatedEntityId(), "98765");
        Assert.assertEquals(assertRoleAssociations.get(1).getAssociatedEntityId(), "87654");
    }

    @Test
    public void deleteTestSuccessful() {
        //Arrange
        String email = "foo.bar@example.com";

        when(userService.findByEmail(anyString())).thenReturn(buildUser());
        Mockito.doNothing().when(userService).deleteDomainObject(anyString(), any(FormatType.class), anySetOf(String.class));
        when(testRegUserDetailsService.getMongoIdsOfEntitiesCurrentUserHasAccessTo()).thenReturn(new HashSet<String>());

        //Act
        boolean result = externalUserService.deleteUser(email);

        //Assert
        Assert.assertTrue(result);
    }

    @Test
    public void deleteTestUnsuccessful() {
        //Arrange
        String email = "foo.bar@example.com";

        when(userService.findByEmail(anyString())).thenReturn(null);

        //Act
        boolean result = externalUserService.deleteUser(email);

        //Assert
        Assert.assertFalse(result);
    }

}

