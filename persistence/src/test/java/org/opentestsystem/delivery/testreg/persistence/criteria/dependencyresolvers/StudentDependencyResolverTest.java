/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria.dependencyresolvers;

import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.collection.IsCollectionWithSize.hasSize;
import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;
import static org.springframework.test.util.ReflectionTestUtils.setField;

import java.util.ArrayList;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.Accommodation;
import org.opentestsystem.delivery.testreg.domain.DistrictEntity;
import org.opentestsystem.delivery.testreg.domain.InstitutionEntity;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.service.StudentService;
import org.opentestsystem.delivery.testreg.service.impl.Sb11EntityServiceImpl;

public class StudentDependencyResolverTest {

    private StudentDependencyResolver studentDependencyResolver;

    @SuppressWarnings("rawtypes")
    @Before
    public void setup() {
        this.studentDependencyResolver = new StudentDependencyResolver();
        setField(this.studentDependencyResolver, "sb11EntityService", new Sb11EntityServiceImpl() {
            @SuppressWarnings({ "serial" })
            @Override
            public Sb11Entity findByEntityIdAndStateAbbreviation(final String entityId, final String stateAbbreviation, final Class clazz) {
                if (clazz.equals(DistrictEntity.class)) {
                    return new DistrictEntity() {
                        {
                            setId("d12345992abdcf3454244332");
                        }
                    };
                }

                if (clazz.equals(InstitutionEntity.class)) {
                    return new InstitutionEntity() {
                        {
                            setId("i23fge2h3utgh4hrf4fgs234231");
                        }
                    };
                }
                return null;
            }
        });
        setField(this.studentDependencyResolver, "studentService", new StudentService() {
            @Override
            public Student findByStudentIdAndStateAbbreviation(final String studentId, final String stateAbbreviation) {
                if (studentId.equals("555") && stateAbbreviation.equals("MN")) {
                    final Student student = new Student();
                    final Accommodation acc1 = new Accommodation();
                    final Accommodation acc2 = new Accommodation();
                    final List<Accommodation> accList = new ArrayList<>();
                    accList.add(acc1);
                    accList.add(acc2);
                    student.setAccommodations(accList);
                    return student;
                }

                return null;
            }

            @Override
            public Student findByExternalSsidAndStateAbbreviation(final String externalSsid, final String stateAbbreviation) {
                return null;
            }

            @Override
            public List<Student> findByInstitutionIdentifierAndStateAbbreviation(final String institutionIdentifier, final String stateId) {
                return null;
            }

        });
    }

    @Test
    public void testDependency() {
        @SuppressWarnings("serial")
        final Student student = new Student() {
            {
                setDistrictIdentifier("2344");
                setInstitutionIdentifier("5455");
                setId("211");
            }
        };
        this.studentDependencyResolver.resolveDependency(student);
        assertThat(student, is(notNullValue()));
        assertThat(student.getDistrictEntityMongoId(), is("d12345992abdcf3454244332"));
        assertThat(student.getInstitutionEntityMongoId(), is("i23fge2h3utgh4hrf4fgs234231"));
    }

    /**
     * 1)
     */
    @Test
    public void checkAccommodationPreservedForStudentImport() {
        // This method would test if a Student exists in the DB and a file is imported to update the Student
        // Check if the Accommodations that existed for Student is preserved and not overwritten during import
        @SuppressWarnings("serial")
        final Student student = new Student() {
            {
                setDistrictIdentifier("2344");
                setInstitutionIdentifier("5455");
                setStateAbbreviation("MN");
                setId(null); // Pretend Student is imported from a file.
                setEntityId("555"); // Student Exists in DB for this identifier
            }
        };
        this.studentDependencyResolver.resolveDependency(student);
        assertThat(student, is(notNullValue()));
        assertThat(student.getAccommodations(), is(notNullValue()));
        assertThat(student.getAccommodations(), hasSize(2));
    }

    @Test
    public void checkAccommodationIsPreservedFromUI() {
        // This method would test if a Student exists in the DB an updated from UI
        // Check if the Accommodations that existed for Student is updated properly during the process
        @SuppressWarnings("serial")
        final Student student = new Student() {
            {
                setDistrictIdentifier("2344");
                setInstitutionIdentifier("5455");
                setStateAbbreviation("MN");
                setId("155"); // Pretend Student is updated from UI

                // Lets updated Accommodations. These accommodation mimics as if they are updated from UI
                final Accommodation acc1 = new Accommodation();
                acc1.setId("ACC1");
                final List<Accommodation> accList = new ArrayList<>();
                accList.add(acc1);
                setAccommodations(accList);
            }
        };
        this.studentDependencyResolver.resolveDependency(student);
        assertThat(student, is(notNullValue()));
        assertThat(student.getAccommodations(), is(notNullValue()));
        assertThat(student.getAccommodations(), hasSize(1));
    }
}
