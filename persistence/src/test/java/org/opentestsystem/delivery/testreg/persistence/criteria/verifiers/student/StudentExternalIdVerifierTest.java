/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.student;

import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;

import java.util.List;

import static org.hamcrest.collection.IsEmptyCollection.*;

import static org.hamcrest.core.IsNot.*;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.persistence.Verifier;
import org.opentestsystem.delivery.testreg.service.StudentService;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.validation.FieldError;

public class StudentExternalIdVerifierTest {
    
    private Verifier<Student> verifier;
    
    @Before
    public void setup() {
        verifier = new StudentExternalIdVerifier();        
    }
    
    private void setStudent(Student student) {
        ReflectionTestUtils.setField(verifier, "studentService", new MockStudentService(student));
    }
    
    @Test
    public void testSuccess_case1() {
        //Setup Mock to return expected condition
        setStudent(null);
       
        //Mimic an input condition
        Student studentFrom = new Student();
        studentFrom.setExternalSsid("SXWC67166");
        List<FieldError> errors = verifier.verify(studentFrom);
        
        //Expect the result
        assertThat(errors, is(empty()));       
    }
    
    @Test
    public void testSuccess_case2() {
        //Setup Mock to return expected condition
        Student student = new Student();
        student.setEntityId("S12344");
        student.setExternalSsid("SXWC67166");
        setStudent(student);
       
        //Mimic an input condition
        Student studentFrom = new Student();
        studentFrom.setEntityId("S12344");
        studentFrom.setExternalSsid("SXWC67166");
        List<FieldError> errors = verifier.verify(studentFrom);
        
        //Expect the result
        assertThat(errors, is(empty()));       
    }
    
    @Test
    public  void testFailure() {
      //Setup Mock to return expected condition
        Student student = new Student();
        student.setEntityId("SS12345");
        student.setExternalSsid("SXWC67166");
        setStudent(student);
       
        //Mimic an input condition
        Student studentFrom = new Student();
        studentFrom.setEntityId("KI891882");
        studentFrom.setExternalSsid("SXWC67166");
        List<FieldError> errors = verifier.verify(studentFrom);
        
        //Expect the result
        assertThat(errors, is(not(empty())));    
        assertThat(errors.get(0).getDefaultMessage(), is("There is already a Student with this External SSID."));
    }
    
    private class MockStudentService implements StudentService {
        
        Student student;
        
        public MockStudentService(Student student) {
            this.student = student;
        }

        @Override
        public Student findByStudentIdAndStateAbbreviation(String studentId, String stateAbbreviation) {
            // TODO Auto-generated method stub
            return null;
        }

        @Override
        public Student findByExternalSsidAndStateAbbreviation(String externalSsid, String stateAbbreviation) {
            // TODO Auto-generated method stub
            return student;
        }

        @Override
        public List<Student> findByInstitutionIdentifierAndStateAbbreviation(String institutionIdentifier,
                String stateAbbreviation) {
            return null;
        }
        
        
    }

}
