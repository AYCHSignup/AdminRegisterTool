/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.student;

import static org.hamcrest.collection.IsEmptyCollection.empty;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsNot.not;
import static org.junit.Assert.assertThat;

import java.util.List;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.persistence.Verifier;
import org.opentestsystem.delivery.testreg.service.StudentService;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.validation.FieldError;

public class StudentExternalIdVerifierTest {

    private Verifier<Student> verifier;

    @Before
    public void setup() {
        this.verifier = new StudentExternalIdVerifier();
    }

    private void setStudent(final Student student) {
        ReflectionTestUtils.setField(this.verifier, "studentService", new MockStudentService(student));
    }

    @Test
    public void testSuccess_case1() {
        // Setup Mock to return expected condition
        setStudent(null);

        // Mimic an input condition
        final Student studentFrom = new Student();
        studentFrom.setExternalSsid("SXWC67166");
        final List<FieldError> errors = this.verifier.verify(studentFrom);

        // Expect the result
        assertThat(errors, is(empty()));
    }

    @Test
    public void testSuccess_case2() {
        // Setup Mock to return expected condition
        final Student student = new Student();
        student.setEntityId("S12344");
        student.setExternalSsid("SXWC67166");
        setStudent(student);

        // Mimic an input condition
        final Student studentFrom = new Student();
        studentFrom.setEntityId("S12344");
        studentFrom.setExternalSsid("SXWC67166");
        final List<FieldError> errors = this.verifier.verify(studentFrom);

        // Expect the result
        assertThat(errors, is(empty()));
    }

    @Test
    public void testFailure() {
        // Setup Mock to return expected condition
        final Student student = new Student();
        student.setEntityId("SS12345");
        student.setExternalSsid("SXWC67166");
        setStudent(student);

        // Mimic an input condition
        final Student studentFrom = new Student();
        studentFrom.setEntityId("KI891882");
        studentFrom.setExternalSsid("SXWC67166");
        final List<FieldError> errors = this.verifier.verify(studentFrom);

        // Expect the result
        assertThat(errors, is(not(empty())));
        assertThat(errors.get(0).getDefaultMessage(), is("There is already a Student with this External SSID."));
    }

    private class MockStudentService implements StudentService {

        Student student;

        public MockStudentService(final Student student) {
            this.student = student;
        }

        @Override
        public Student findByStudentIdAndStateAbbreviation(final String studentId, final String stateAbbreviation) {
            return null;
        }

        @Override
        public Student findByExternalSsidAndStateAbbreviation(final String externalSsid, final String stateAbbreviation) {
            return this.student;
        }

        @Override
        public List<Student> findByInstitutionIdentifierAndStateAbbreviation(final String institutionIdentifier, final String stateAbbreviation) {
            return null;
        }

        /* (non-Javadoc)
         * @see org.opentestsystem.delivery.testreg.service.StudentService#saveAccommodation(java.lang.String, java.lang.String, java.lang.Object[])
         */
        @Override
        public Student saveAccommodation (String studentId, String stateAbbreviation, Map<String, Object> accommodation) {
          // TODO Auto-generated method stub
          return null;
        }
    }

}
