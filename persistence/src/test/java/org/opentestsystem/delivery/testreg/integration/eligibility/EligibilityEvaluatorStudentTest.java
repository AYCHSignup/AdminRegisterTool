/*
Educational Online Test Delivery System Copyright (c) 2013 American Institutes for Research

Distributed under the AIR Open Source License, Version 1.0 See accompanying file AIR-License-1_0.txt or at
http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 */

package org.opentestsystem.delivery.testreg.integration.eligibility;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.Matchers.hasSize;
import static org.junit.Assert.assertThat;

import org.joda.time.DateTime;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.opentestsystem.delivery.testreg.domain.Assessment;
import org.opentestsystem.delivery.testreg.domain.Assessment.EligibilityType;
import org.opentestsystem.delivery.testreg.domain.EligibleStudent;
import org.opentestsystem.delivery.testreg.domain.ImplicitEligibilityRule;
import org.opentestsystem.delivery.testreg.domain.ImplicitEligibilityRule.RuleType;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.domain.Student.Gender;
import org.opentestsystem.delivery.testreg.domain.Student.GradeLevel;
import org.opentestsystem.delivery.testreg.eligibility.EligibilityEvaluator;
import org.opentestsystem.delivery.testreg.integration.AbstractPersistenceEmbeddedTest;
import org.opentestsystem.delivery.testreg.persistence.EligibleStudentRepository;
import org.opentestsystem.delivery.testreg.service.TestRegPersister;
import org.opentestsystem.shared.progman.client.domain.Tenant;
import org.opentestsystem.shared.progman.client.domain.TenantType;
import org.opentestsystem.shared.security.domain.SbacEntity;
import org.opentestsystem.shared.security.service.TenancyService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import com.google.common.collect.Lists;
import com.google.common.collect.Sets;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "classpath:test-event-consumer-context.xml" })
@ActiveProfiles({ "progman.client.impl.null", "progman.proploc.classpath", "mna.client.null" })
public class EligibilityEvaluatorStudentTest extends AbstractPersistenceEmbeddedTest {

    @Mock
    private TenancyService tenancyService;

    @Autowired
    private TestRegPersister persister;

    @Autowired
    private EligibleStudentRepository eligStudentRepo;

    @InjectMocks
    @Autowired
    private EligibilityEvaluator eligEval;

    @Before
    public void setup() {
        MockitoAnnotations.initMocks(this);

        Tenant idIsFive = new Tenant();
        idIsFive.setId("5");

        Mockito.when(
                tenancyService.getApplicableTenants(Sets.newHashSet(new SbacEntity(TenantType.INSTITUTION, "1",
                        "nothing")))).thenReturn(Lists.newArrayList(idIsFive));
    }

    @Test
    public void testStudentOrAccommodationModified() {

        // create assessment with implicit rule
        Assessment assess = new Assessment();
        assess.setDelayRule(2);
        assess.setEligibilityType(EligibilityType.IMPLICIT);

        ImplicitEligibilityRule eligRule = new ImplicitEligibilityRule("gradeLevelWhenAssessed", "05", RuleType.ENABLER);

        assess.setImplicitEligibilityRules(new ImplicitEligibilityRule[] { eligRule });

        assess.setNumGlobalOpportunities(4);
        assess.setTestWindow(new Assessment.TestWindow[] { new Assessment.TestWindow(new DateTime(2013, 12, 1, 0, 0),
                new DateTime(2013, 12, 31, 0, 0), null) });
        assess.setTestName("test1");
        assess.setVersion("1");
        assess.setTenantId("5");

        @SuppressWarnings("unused")
        Assessment storedAssessment = persister.saveDomainObject(assess);

        try {
            Thread.sleep(500L);
        } catch (InterruptedException e) {
            // ignore
        }

        // create student such that it will be eligible

        Student student = new Student();
        student.setBirthDate(new DateTime(1980, 11, 11, 0, 0));
        student.setDistrictIdentifier("1");
        student.setEntityId("123456");
        student.setExternalSsid("111111111");
        student.setFirstName("Bob");
        student.setGender(Gender.Male);
        student.setGradeLevelWhenAssessed(GradeLevel.FIFTHGRADE);
        student.setLanguageCode("eng");
        student.setLastName("Test");
        student.setStateAbbreviation("WI");
        student.setAmericanIndianOrAlaskaNative("No");
        student.setAsian("No");
        student.setBlackOrAfricanAmerican("No");
        student.setHispanicOrLatino("No");
        student.setWhite("Yes");
        student.setNativeHawaiianOrPacificIsland("No");
        student.setTwoOrMoreRaces("No");
        student.setDisadvantageStatus("No");
        student.setLepStatus("No");
        student.setInstitutionIdentifier("1");
        student.setSection504Status("No");
        student.setiDEAIndicator("No");

        Student storedStudent = persister.saveDomainObject(student);

        try {
            Thread.sleep(500L);
        } catch (InterruptedException e) {
            // ignore
        }

        // verify that eligibleStudent created correctly

        EligibleStudent foundEligStudent = eligStudentRepo.findByStudentMongoId(storedStudent.getId());
        assertThat(foundEligStudent, notNullValue());

        // create student such that it will NOT be eligible

        Student student2 = new Student();
        student2.setBirthDate(new DateTime(1980, 11, 11, 0, 0));
        student2.setDistrictIdentifier("1");
        student2.setEntityId("123455");
        student2.setExternalSsid("111111112");
        student2.setFirstName("Bob");
        student2.setGender(Gender.Male);
        student2.setGradeLevelWhenAssessed(GradeLevel.FOURTHGRADE);
        student2.setLanguageCode("eng");
        student2.setLastName("Test");
        student2.setStateAbbreviation("WI");
        student2.setAmericanIndianOrAlaskaNative("No");
        student2.setAsian("No");
        student2.setBlackOrAfricanAmerican("No");
        student2.setHispanicOrLatino("No");
        student2.setWhite("Yes");
        student2.setNativeHawaiianOrPacificIsland("No");
        student2.setTwoOrMoreRaces("No");
        student2.setDisadvantageStatus("No");
        student2.setLepStatus("No");
        student2.setInstitutionIdentifier("1");
        student2.setSection504Status("No");
        student2.setiDEAIndicator("No");

        Student storedStudent2 = persister.saveDomainObject(student2);

        try {
            Thread.sleep(500L);
        } catch (InterruptedException e) {
            // ignore
        }

        // verify that no new student added to eligible assessment and no new eligiblestudent created

        EligibleStudent foundEligStudent2 = eligStudentRepo.findByStudentMongoId(storedStudent2.getId());
        assertThat(foundEligStudent2, nullValue());

        // modify 2nd student so that it is now eligible

        storedStudent2.setGradeLevelWhenAssessed(GradeLevel.FIFTHGRADE);
        persister.updateDomainObject(storedStudent2);

        try {
            Thread.sleep(500L);
        } catch (InterruptedException e) {
            // ignore
        }

        // verify new student added to eligible assessment and new eligible student created
        foundEligStudent2 = eligStudentRepo.findByStudentMongoId(storedStudent2.getId());
        assertThat(foundEligStudent2, notNullValue());

    }

    @Test
    public void testStudentDeleted() {

        // create assessment with implicit rule
        Assessment assess = new Assessment();
        assess.setDelayRule(2);
        assess.setEligibilityType(EligibilityType.IMPLICIT);

        ImplicitEligibilityRule eligRule = new ImplicitEligibilityRule("gradeLevelWhenAssessed", "05", RuleType.ENABLER);

        assess.setImplicitEligibilityRules(new ImplicitEligibilityRule[] { eligRule });

        assess.setNumGlobalOpportunities(4);
        assess.setTestWindow(new Assessment.TestWindow[] { new Assessment.TestWindow(new DateTime(2013, 12, 1, 0, 0),
                new DateTime(2013, 12, 31, 0, 0), null) });
        assess.setTestName("test1");
        assess.setVersion("1");
        assess.setTenantId("5");

        @SuppressWarnings("unused")
        Assessment storedAssessment = persister.saveDomainObject(assess);

        try {
            Thread.sleep(500L);
        } catch (InterruptedException e) {
            // ignore
        }

        // create student such that it will be eligible

        Student student = new Student();
        student.setBirthDate(new DateTime(1980, 11, 11, 0, 0));
        student.setDistrictIdentifier("1");
        student.setEntityId("123456");
        student.setExternalSsid("111111111");
        student.setFirstName("Bob");
        student.setGender(Gender.Male);
        student.setGradeLevelWhenAssessed(GradeLevel.FIFTHGRADE);
        student.setLanguageCode("eng");
        student.setLastName("Test");
        student.setStateAbbreviation("WI");
        student.setAmericanIndianOrAlaskaNative("No");
        student.setAsian("No");
        student.setBlackOrAfricanAmerican("No");
        student.setHispanicOrLatino("No");
        student.setWhite("Yes");
        student.setNativeHawaiianOrPacificIsland("No");
        student.setTwoOrMoreRaces("No");
        student.setDisadvantageStatus("No");
        student.setLepStatus("No");
        student.setInstitutionIdentifier("1");
        student.setSection504Status("No");
        student.setiDEAIndicator("No");

        Student storedStudent = persister.saveDomainObject(student);

        try {
            Thread.sleep(500L);
        } catch (InterruptedException e) {
            // ignore
        }

        // verify that eligibleAssessment and eligibleStudent created correctly

        EligibleStudent foundEligStudent = eligStudentRepo.findByStudentMongoId(storedStudent.getId());
        assertThat(foundEligStudent, notNullValue());

        // delete student

        persister.deleteDomainObject(storedStudent);

        try {
            Thread.sleep(500L);
        } catch (InterruptedException e) {
            // ignore
        }

        // verify that both eligible assessment and eligible student are deleted

        foundEligStudent = eligStudentRepo.findByStudentMongoId(storedStudent.getId());
        assertThat(foundEligStudent, nullValue());

    }

    @Test
    public void testStudentEntityIdUpdate() {

        // create assessment with implicit rule
        Assessment assess = new Assessment();
        assess.setDelayRule(2);
        assess.setEligibilityType(EligibilityType.IMPLICIT);

        ImplicitEligibilityRule eligRule = new ImplicitEligibilityRule("gradeLevelWhenAssessed", "05", RuleType.ENABLER);

        assess.setImplicitEligibilityRules(new ImplicitEligibilityRule[] { eligRule });

        assess.setNumGlobalOpportunities(4);
        assess.setTestWindow(new Assessment.TestWindow[] { new Assessment.TestWindow(new DateTime(2013, 12, 1, 0, 0),
                new DateTime(2013, 12, 31, 0, 0), null) });
        assess.setTestName("test1");
        assess.setVersion("1");
        assess.setTenantId("5");
        assess.setAcademicYear("2014");

        @SuppressWarnings("unused")
        Assessment storedAssessment = persister.saveDomainObject(assess);

        try {
            Thread.sleep(500L);
        } catch (InterruptedException e) {
            // ignore
        }

        // create student such that it will be eligible

        Student student = new Student();
        student.setBirthDate(new DateTime(1980, 11, 11, 0, 0));
        student.setDistrictIdentifier("1");
        student.setEntityId("123456");
        student.setExternalSsid("111111111");
        student.setFirstName("Bob");
        student.setGender(Gender.Male);
        student.setGradeLevelWhenAssessed(GradeLevel.FIFTHGRADE);
        student.setLanguageCode("eng");
        student.setLastName("Test");
        student.setStateAbbreviation("WI");
        student.setAmericanIndianOrAlaskaNative("No");
        student.setAsian("No");
        student.setBlackOrAfricanAmerican("No");
        student.setHispanicOrLatino("No");
        student.setWhite("Yes");
        student.setNativeHawaiianOrPacificIsland("No");
        student.setTwoOrMoreRaces("No");
        student.setDisadvantageStatus("No");
        student.setLepStatus("No");
        student.setInstitutionIdentifier("1");
        student.setSection504Status("No");
        student.setiDEAIndicator("No");

        Student storedStudent = persister.saveDomainObject(student);

        try {
            Thread.sleep(500L);
        } catch (InterruptedException e) {
            // ignore
        }

        // verify that eligibleStudent created correctly

        EligibleStudent foundEligStudent = eligStudentRepo.findByStudentMongoId(storedStudent.getId());
        assertThat(foundEligStudent, notNullValue());

        // modify student's entity id

        storedStudent.setEntityId("123457");
        persister.updateDomainObject(storedStudent);

        try {
            Thread.sleep(500L);
        } catch (InterruptedException e) {
            // ignore
        }

        // verify student can be found with new entity id and no record exists for the old id
        foundEligStudent = eligStudentRepo.findByStudentIdAndState("123457", "WI");
        assertThat(foundEligStudent, notNullValue());
        assertThat(foundEligStudent.getStudent().getEntityId(), is("123457"));

        foundEligStudent = eligStudentRepo.findByStudentIdAndState("123456", "WI");
        assertThat(foundEligStudent, nullValue());

    }

    @Test
    public void testStudentOrAccommodationModifiedMultipleTenantAssessments() {

        // create assessment with implicit rule
        Assessment assess = new Assessment();
        assess.setDelayRule(2);
        assess.setEligibilityType(EligibilityType.IMPLICIT);

        ImplicitEligibilityRule eligRule = new ImplicitEligibilityRule("gradeLevelWhenAssessed", "05", RuleType.ENABLER);

        assess.setImplicitEligibilityRules(new ImplicitEligibilityRule[] { eligRule });

        assess.setNumGlobalOpportunities(4);
        assess.setTestWindow(new Assessment.TestWindow[] { new Assessment.TestWindow(new DateTime(2013, 12, 1, 0, 0),
                new DateTime(2013, 12, 31, 0, 0), null) });
        assess.setTestName("test1");
        assess.setVersion("1");
        assess.setTenantId("5");

        @SuppressWarnings("unused")
        Assessment storedAssessment = persister.saveDomainObject(assess);

        try {
            Thread.sleep(500L);
        } catch (InterruptedException e) {
            // ignore
        }

        // create another assessment with implicit rule but with a different tenant
        Assessment assess2 = new Assessment();
        assess2.setDelayRule(2);
        assess2.setEligibilityType(EligibilityType.IMPLICIT);

        ImplicitEligibilityRule eligRule2 = new ImplicitEligibilityRule("gradeLevelWhenAssessed", "05",
                RuleType.ENABLER);

        assess2.setImplicitEligibilityRules(new ImplicitEligibilityRule[] { eligRule2 });

        assess2.setNumGlobalOpportunities(4);
        assess2.setTestWindow(new Assessment.TestWindow[] { new Assessment.TestWindow(new DateTime(2013, 12, 1, 0, 0),
                new DateTime(2013, 12, 31, 0, 0), null) });
        assess2.setTestName("test1");
        assess2.setVersion("1");
        assess2.setTenantId("6");

        @SuppressWarnings("unused")
        Assessment storedAssessment2 = persister.saveDomainObject(assess2);

        try {
            Thread.sleep(500L);
        } catch (InterruptedException e) {
            // ignore
        }

        // create student such that it will be eligible for both assessments

        Student student = new Student();
        student.setBirthDate(new DateTime(1980, 11, 11, 0, 0));
        student.setDistrictIdentifier("1");
        student.setEntityId("123456");
        student.setExternalSsid("111111111");
        student.setFirstName("Bob");
        student.setGender(Gender.Male);
        student.setGradeLevelWhenAssessed(GradeLevel.FIFTHGRADE);
        student.setLanguageCode("eng");
        student.setLastName("Test");
        student.setStateAbbreviation("WI");
        student.setAmericanIndianOrAlaskaNative("No");
        student.setAsian("No");
        student.setBlackOrAfricanAmerican("No");
        student.setHispanicOrLatino("No");
        student.setWhite("Yes");
        student.setNativeHawaiianOrPacificIsland("No");
        student.setTwoOrMoreRaces("No");
        student.setDisadvantageStatus("No");
        student.setLepStatus("No");
        student.setInstitutionIdentifier("1");
        student.setSection504Status("No");
        student.setiDEAIndicator("No");

        Student storedStudent = persister.saveDomainObject(student);

        try {
            Thread.sleep(500L);
        } catch (InterruptedException e) {
            // ignore
        }

        // verify that eligibleStudent created correctly

        EligibleStudent foundEligStudent = eligStudentRepo.findByStudentMongoId(storedStudent.getId());
        assertThat(foundEligStudent, notNullValue());

        // verify that the eligible student is ONLY eligible for the assessment with tenant "5" and not for the
        // assessment with tenant "6"

        assertThat(foundEligStudent.getAssessments(), hasSize(1));
        assertThat(foundEligStudent.getAssessmentsAsList().get(0).getTenantId(), is("5"));

    }

}
