/*
Educational Online Test Delivery System Copyright (c) 2013 American Institutes for Research

Distributed under the AIR Open Source License, Version 1.0 See accompanying file AIR-License-1_0.txt or at
http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 */

package org.opentestsystem.delivery.testreg.integration.eligibility;

import java.util.List;

import org.opentestsystem.delivery.testreg.domain.ExplicitEligibility;
import org.opentestsystem.delivery.testreg.domain.Sb11NonEntity;
import org.opentestsystem.delivery.testreg.persistence.ExplicitEligibilityRepository;
import org.opentestsystem.shared.search.domain.AbstractSearchRequest;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Component;

@Component
public class MockExplicitEligibilityRepository implements ExplicitEligibilityRepository {

    public MockExplicitEligibilityRepository() {
    }

    @Override
    public SearchResponse<ExplicitEligibility> search(final AbstractSearchRequest abstractSearchRequest) {
        return null;
    }

    @Override
    public <S extends ExplicitEligibility> List<S> save(final Iterable<S> entites) {
        return null;
    }

    @Override
    public List<ExplicitEligibility> findAll() {
        return null;
    }

    @Override
    public List<ExplicitEligibility> findAll(final Sort sort) {
        return null;
    }

    @Override
    public Page<ExplicitEligibility> findAll(final Pageable pageable) {
        return null;
    }

    @Override
    public <S extends ExplicitEligibility> S save(final S entity) {
        return null;
    }

    @Override
    public ExplicitEligibility findOne(final String id) {
        return null;
    }

    @Override
    public boolean exists(final String id) {
        return false;
    }

    @Override
    public Iterable<ExplicitEligibility> findAll(final Iterable<String> ids) {
        return null;
    }

    @Override
    public long count() {
        return 0;
    }

    @Override
    public void delete(final String id) {
    }

    @Override
    public void delete(final ExplicitEligibility entity) {
    }

    @Override
    public void delete(final Iterable<? extends ExplicitEligibility> entities) {
    }

    @Override
    public void deleteAll() {
    }

    @Override
    public <T extends Sb11NonEntity> T findByAlternateKey(final AbstractSearchRequest searchRequest, final Class<T> clazz) {
        return null;
    }

    @Override
    public List<ExplicitEligibility> findByTestNameAndTestVersion(final String testName, final String testVersion) {
        return null;
    }

    @Override
    public ExplicitEligibility findByStudentIdAndStateAbbreviationAndTestNameAndTestVersion(final String studentId, final String stateAbbreviation, final String testName, final String testVersion) {
        return null;
    }

    @Override
    public List<ExplicitEligibility> findByStudentIdAndStateAbbreviation(final String studentId, final String stateAbbreviation) {
        return null;
    }

}
