/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria;

import static org.hamcrest.collection.IsEmptyCollection.empty;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsNull.notNullValue;
import static org.junit.Assert.assertThat;

import java.util.List;

import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.Sb11NonEntity;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.integration.AbstractPersistenceEmbeddedTest;
import org.opentestsystem.delivery.testreg.persistence.StudentRepository;
import org.opentestsystem.delivery.testreg.service.TestRegPersister;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.validation.ObjectError;

public class StudentDeletePersistenceCriteriaTest extends AbstractPersistenceEmbeddedTest {

    @Autowired
    @Qualifier("studentDeletePersistenceCriteria")
    private BusinessValidator<Sb11NonEntity> studentDelValidator;

    @Autowired
    private TestRegPersister sb11NonEntityService;

    @Autowired
    private StudentRepository studentRepository;

    @Test
    public void testDeleteSuccess() {
        Student studentEntity = saveStudent();
        assertThat(studentEntity, is(notNullValue()));

        Student studentEntityForDelete = buildStudent();
        studentEntityForDelete.setDelete("DELETE");
        List<? extends ObjectError> errors = studentDelValidator.validate(studentEntityForDelete);
        assertThat(errors, is(empty()));
    }

    @Test
    public void testDeleteFailure() {
        Student studentEntityForDelete = buildStudent();
        studentEntityForDelete.setDelete("DELETE");
        List<? extends ObjectError> errors = studentDelValidator.validate(studentEntityForDelete);
        assertThat(errors.size(), is(1));
        assertThat(errors.get(0).getDefaultMessage(), is("StudentIdentifier not found in DB for delete"));

    }

    private Student saveStudent() {
        return studentRepository.save(buildStudent());
    }

    private Student buildStudent() {
        Student student = new Student();
        student.setEntityId("11101");
        student.setStateAbbreviation("WI");
        student.setDistrictIdentifier("101");
        student.setInstitutionIdentifier("10001");
        student.setLastName("LastNameTest");
        student.setFirstName("FNTest");
        student.setMiddleName("MS");
        student.setLanguageCode("tel");
        student.setBirthDate("2013-10-10");
        student.setExternalSsid("WI12345");
        student.setGradeLevelWhenAssessed("THIRDGRADE");
        student.setGender("MALE");
        student.setAmericanIndianOrAlaskaNative("No");
        student.setAsian("No");
        student.setBlackOrAfricanAmerican("No");
        student.setHispanicOrLatino("Yes");
        student.setWhite("Yes");
        student.setNativeHawaiianOrPacificIsland("No");
        student.setTwoOrMoreRaces("No");

        student.setiDEAIndicator("NO");
        student.setLepStatus("NO");
        student.setSection504Status("NO");
        student.setDisadvantageStatus("YES");
        student.setLanguageCode("tel");
        student.setTitle3ProgressStatus("PROGRESS");
        student.setMigrantStatus("YES");
        student.setFirstEntryDateIntoUsSchool("2014-09-01");
        student.setLepEntryDate("2010-10-10");
        student.setLepExitDate("2010-10-20");
        student.setTitle3ProgramType("DualLanguage");
        student.setPrimaryDisabilityType("AUT");
        return student;
    }
}
