/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.integration;

import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.greaterThan;
import static org.hamcrest.Matchers.is;
import static org.junit.Assert.assertThat;
import static org.springframework.test.web.client.match.MockRestRequestMatchers.method;
import static org.springframework.test.web.client.match.MockRestRequestMatchers.requestTo;
import static org.springframework.test.web.client.response.MockRestResponseCreators.withStatus;
import static org.springframework.test.web.client.response.MockRestResponseCreators.withSuccess;

import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.delivery.testreg.domain.HierarchyLevel;
import org.opentestsystem.shared.security.domain.SbacPermission;
import org.opentestsystem.shared.security.domain.permission.UserRole;
import org.opentestsystem.shared.security.integration.PermissionClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.web.client.MockRestServiceServer;
import org.springframework.web.client.RestTemplate;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "classpath:test-context.xml" })
public class PermissionClientTest {

    @Autowired
    private PermissionClient client;

    @Value("${role.response}")
    private String roleResponse;

    @Value("${permission.response}")
    private String permissionResponse;

    private MockRestServiceServer mockServer;


    @Before
    public void setUp() {
        //create a mock Server instance for RestTemplate
        mockServer = MockRestServiceServer.createServer((RestTemplate)client.getRestTemplate());
    }

    @Test
    public void testGetAllRoles() {
        mockServer.expect(requestTo(client.getBaseUri().concat("/role")))
        .andExpect(method(HttpMethod.GET)).andRespond(withSuccess(roleResponse, MediaType.APPLICATION_JSON));
        List<UserRole> roles = client.getRoles();
        mockServer.verify();
        assertThat("No roles found", roles,  notNullValue());
        assertThat("No roles found", roles.size(), greaterThan(0));

    }

    @Test
    public void testGetRole() {
        mockServer.expect(requestTo(client.getBaseUri().concat("/role?role=Test%20Author")))
        .andExpect(method(HttpMethod.GET)).andRespond(withSuccess(roleResponse, MediaType.APPLICATION_JSON));
        UserRole role = client.getRole("Test Author");
        assertThat("No roles found", role,  notNullValue());
        assertThat("Invalid role", role.getRole(), equalTo("Test Author"));
    }

    @Test
    public void testGetAllPermissions() {
        mockServer.expect(requestTo(client.getBaseUri().concat("/permission")))
        .andExpect(method(HttpMethod.GET)).andRespond(withSuccess(permissionResponse, MediaType.APPLICATION_JSON));
        List<SbacPermission> permissions = client.getPermissions();
        assertThat("No permissions found", permissions,  notNullValue());
        assertThat("No permissions found", permissions.size(), greaterThan(0));
    }

    @Test
    public void testRoleExists() {
        mockServer.expect(requestTo(client.getBaseUri().concat("/role?role=Test%20Author")))
        .andExpect(method(HttpMethod.GET)).andRespond(withSuccess(roleResponse, MediaType.APPLICATION_JSON));
        boolean exists = client.hasRole("Test Author");
        assertThat("Invalid role", exists, is(true));
    }

    @Test
    public void testInvalidRole() {
        mockServer.expect(requestTo(client.getBaseUri().concat("/role?role=ADFSDFSD")))
        .andExpect(method(HttpMethod.GET)).andRespond(withStatus(HttpStatus.NOT_FOUND));
        boolean exists = client.hasRole("ADFSDFSD");
        assertThat("role", exists, is(false));
    }

    @Test
    public void testRoleAndLevelExists() {
        mockServer.expect(requestTo(client.getBaseUri().concat("/role?role=Test%20Author")))
        .andExpect(method(HttpMethod.GET)).andRespond(withSuccess(roleResponse, MediaType.APPLICATION_JSON));
        boolean exists = client.hasRoleAndLevel("Test Author", HierarchyLevel.STATE.name());
        assertThat("Invalid role and level", exists, is(true));
    }

    @Test
    public void testInvalidRoleAndLevelExists() {
        mockServer.expect(requestTo(client.getBaseUri().concat("/role?role=Test%20Author")))
        .andExpect(method(HttpMethod.GET)).andRespond(withSuccess(roleResponse, MediaType.APPLICATION_JSON));
        boolean exists = client.hasRoleAndLevel("Test Author", HierarchyLevel.DISTRICT.name());
        assertThat("role and level", exists, is(false));
    }
}
