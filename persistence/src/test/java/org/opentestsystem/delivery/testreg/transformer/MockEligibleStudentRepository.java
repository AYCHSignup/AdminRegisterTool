/*
Educational Online Test Delivery System Copyright (c) 2013 American Institutes for Research

Distributed under the AIR Open Source License, Version 1.0 See accompanying file AIR-License-1_0.txt or at
http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 */

package org.opentestsystem.delivery.testreg.transformer;

import java.util.List;

import org.opentestsystem.delivery.testreg.domain.EligibleStudent;
import org.opentestsystem.delivery.testreg.persistence.EligibleStudentRepository;
import org.opentestsystem.delivery.testreg.persistence.EligibleStudentRepositoryCustom;
import org.opentestsystem.shared.search.domain.AbstractSearchRequest;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.mongodb.repository.support.SimpleMongoRepository;

//@Component
public class MockEligibleStudentRepository extends SimpleMongoRepository<EligibleStudent, String> implements EligibleStudentRepository, EligibleStudentRepositoryCustom {

    public MockEligibleStudentRepository() {
        super(null, null);
    }

    @Override
    public SearchResponse<EligibleStudent> search(final AbstractSearchRequest abstractSearchRequest) {
        return null;
    }

    @Override
    public <S extends EligibleStudent> List<S> save(final Iterable<S> entites) {
        return null;
    }

    @Override
    public List<EligibleStudent> findAll() {
        return null;
    }

    @Override
    public List<EligibleStudent> findAll(final Sort sort) {
        return null;
    }

    @Override
    public Page<EligibleStudent> findAll(final Pageable pageable) {
        return null;
    }

    @Override
    public <S extends EligibleStudent> S save(final S entity) {
        return null;
    }

    @Override
    public EligibleStudent findOne(final String id) {
        return null;
    }

    @Override
    public boolean exists(final String id) {
        return false;
    }

    @Override
    public Iterable<EligibleStudent> findAll(final Iterable<String> ids) {
        return null;
    }

    @Override
    public long count() {
        return 0;
    }

    @Override
    public void delete(final String id) {
    }

    @Override
    public void delete(final EligibleStudent entity) {
    }

    @Override
    public void delete(final Iterable<? extends EligibleStudent> entities) {
    }

    @Override
    public void deleteAll() {
    }

    @Override
    public EligibleStudent findByStudentMongoId(final String studentId) {
        return null;
    }

    @Override
    public EligibleStudent findByStudentIdAndState(final String studentId, final String state) {
        return null;
    }

    @Override
    public List<String> findUniqueAcademicYears() {
        return null;
    }

    @Override
    public List<EligibleStudent> findByAssessmentMongoId(final String assessmentId, final Pageable page) {
        return null;
    }

    @Override
    public void dropCollection() {
    }

    @Override
    public long countByAssessmentMongoId(final String assessmentMongoId) {
        return 0;
    }

    @Override
    public List<EligibleStudent> findByAcademicYearAndType(final String academicYear, final String[] types,
            final String eligStudentMongoId, final String sortCol, final int pageSize) {
        return null;
    }

    @Override
    public long countByAcademicYearAndType(final String academicYear, final String[] types) {
        return 0;
    }

    @Override
    public List<EligibleStudent> findByStudentInstitutionEntityMongoId(final String institutionEntityMongoId) {
        return null;
    }

    @Override
    public List<String> findByIdInstitutionIdAndAssessmentId(final String institutionEntityMongoId, final String assessmentId) {
        return null;
    }

    @Override
    public List<EligibleStudent> findByInstitutionIdAndAssessmentId(final String institutionEntityMongoId, final String assessmentId) {
        return null;
    }

    @Override
    public boolean findAtLeastOneEligibleStudent(final String inAssessmentId) {
        return false;
    }

}
