/*
Educational Online Test Delivery System Copyright (c) 2013 American Institutes for Research

Distributed under the AIR Open Source License, Version 1.0 See accompanying file AIR-License-1_0.txt or at
http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 */

package org.opentestsystem.delivery.testreg.transformer;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.Matchers.arrayContaining;
import static org.junit.Assert.assertThat;

import org.joda.time.DateTime;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.warehouse.DwCallbackObject;
import org.opentestsystem.delivery.testreg.domain.warehouse.DwExtract;
import org.opentestsystem.delivery.testreg.integration.AbstractPersistenceEmbeddedTestDw;
import org.opentestsystem.delivery.testreg.persistence.DwExtractRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;

public class DwBatchHandlerTest extends AbstractPersistenceEmbeddedTestDw {

    @Autowired
    private DwBatchHandler dwBatchHandler;

    @Autowired
    private DwExtractRepository dwExtractRepo;

    @Autowired
    private MockTestRegPersister persister;

    @SuppressWarnings("unused")
    private static final Logger LOGGER = LoggerFactory.getLogger(DwBatchHandlerTest.class);

    private static final String UUID = "a348fc12-7654-1234-9999-629b3cef8400";
    private static final String SYSTEM_UUID = "a348fc12-7654-1234-9999-629b3cef8401";
    private static final int NUM_RECS = 15;

    @Before
    public void reset() {
        persister.reset();
    }

    @Test
    public void testPersistBatch() {

        dwBatchHandler.persistBatch(UUID, NUM_RECS);

        DwExtract extract = dwExtractRepo.findByExtractId(UUID);

        assertThat(extract, notNullValue());
        assertThat(extract.getExtractId(), is(UUID));
        assertThat(extract.getExtractStatus(), is("SENT"));

    }

    @Test
    public void testHandleCallbackNoExtractExisted() {

        persister.setSystemId(SYSTEM_UUID);

        DwCallbackObject callbackObject = new DwCallbackObject();
        callbackObject.setId(UUID);
        callbackObject.setRowCount(NUM_RECS);
        callbackObject.setStatus("Success");
        callbackObject.setTestRegistrationId(SYSTEM_UUID);

        dwBatchHandler.handleCallback(callbackObject);

        DwExtract extract = dwExtractRepo.findByExtractId(UUID);

        assertThat(extract, notNullValue());
        assertThat(extract.getExtractStatus(), is("RESPONSEWITHNOBATCH"));
        assertThat(extract.getRecordsProcessed(), is(NUM_RECS));

    }

    @Test
    public void testHandleCallbackExtractAlreadyProcessed() {

        DwExtract saveExtract = new DwExtract();
        saveExtract.setExtractCreated(new DateTime());
        saveExtract.setExtractId(UUID);
        saveExtract.setExtractProcessed(new DateTime());
        saveExtract.setExtractStatus("FAILED");
        saveExtract.setRecordsSent(NUM_RECS);
        saveExtract.setRecordsProcessed(0);

        dwExtractRepo.save(saveExtract);

        persister.setSystemId(SYSTEM_UUID);

        DwCallbackObject callbackObject = new DwCallbackObject();
        callbackObject.setId(UUID);
        callbackObject.setRowCount(NUM_RECS);
        callbackObject.setStatus("Success");
        callbackObject.setTestRegistrationId(SYSTEM_UUID);

        dwBatchHandler.handleCallback(callbackObject);

        DwExtract extract = dwExtractRepo.findByExtractId(UUID);

        assertThat(extract, notNullValue());
        assertThat(extract.getExtractStatus(), is("INVALIDPREVSTATUSOFFAILED"));
        assertThat(extract.getRecordsProcessed(), is(NUM_RECS));

    }

    @Test
    public void testHandleCallbackFail() {

        DwExtract saveExtract = new DwExtract();
        saveExtract.setExtractCreated(new DateTime());
        saveExtract.setExtractId(UUID);
        saveExtract.setExtractStatus("SENT");
        saveExtract.setRecordsSent(NUM_RECS);

        dwExtractRepo.save(saveExtract);

        persister.setSystemId(SYSTEM_UUID);

        DwCallbackObject callbackObject = new DwCallbackObject();
        callbackObject.setId(UUID);
        callbackObject.setRowCount(0);
        callbackObject.setStatus("Failed");
        callbackObject.setTestRegistrationId(SYSTEM_UUID);
        callbackObject.setMessage(new String[] { "Bad data was sent" });

        dwBatchHandler.handleCallback(callbackObject);

        DwExtract extract = dwExtractRepo.findByExtractId(UUID);

        assertThat(extract, notNullValue());
        assertThat(extract.getExtractStatus(), is("FAILED"));
        assertThat(extract.getRecordsProcessed(), is(0));
        assertThat(extract.getErrorMessages(), arrayContaining("Bad data was sent"));

    }

    @Test
    public void testHandleCallbackRecordCountMismatch() {

        DwExtract saveExtract = new DwExtract();
        saveExtract.setExtractCreated(new DateTime());
        saveExtract.setExtractId(UUID);
        saveExtract.setExtractStatus("SENT");
        saveExtract.setRecordsSent(NUM_RECS);

        dwExtractRepo.save(saveExtract);

        persister.setSystemId(SYSTEM_UUID);

        DwCallbackObject callbackObject = new DwCallbackObject();
        callbackObject.setId(UUID);
        callbackObject.setRowCount(3);
        callbackObject.setStatus("Success");
        callbackObject.setTestRegistrationId(SYSTEM_UUID);
        callbackObject.setMessage(new String[] { "All is good" });

        dwBatchHandler.handleCallback(callbackObject);

        DwExtract extract = dwExtractRepo.findByExtractId(UUID);

        assertThat(extract, notNullValue());
        assertThat(extract.getExtractStatus(), is("SUCCESSRECORDCOUNTMISMATCH"));
        assertThat(extract.getRecordsProcessed(), is(3));
        assertThat(extract.getErrorMessages(), arrayContaining("All is good"));

    }

    @Test
    public void testHandleCallbackSuccess() {

        DwExtract saveExtract = new DwExtract();
        saveExtract.setExtractCreated(new DateTime());
        saveExtract.setExtractId(UUID);
        saveExtract.setExtractStatus("SENT");
        saveExtract.setRecordsSent(NUM_RECS);

        dwExtractRepo.save(saveExtract);

        persister.setSystemId(SYSTEM_UUID);

        DwCallbackObject callbackObject = new DwCallbackObject();
        callbackObject.setId(UUID);
        callbackObject.setRowCount(NUM_RECS);
        callbackObject.setStatus("Success");
        callbackObject.setTestRegistrationId(SYSTEM_UUID);
        callbackObject.setMessage(new String[] { "All is good" });

        dwBatchHandler.handleCallback(callbackObject);

        DwExtract extract = dwExtractRepo.findByExtractId(UUID);

        assertThat(extract, notNullValue());
        assertThat(extract.getExtractStatus(), is("SUCCESS"));
        assertThat(extract.getRecordsProcessed(), is(NUM_RECS));
        assertThat(extract.getErrorMessages(), arrayContaining("All is good"));

    }

    @Test
    public void testSystemIdMismatch() {
        DwExtract saveExtract = new DwExtract();
        saveExtract.setExtractCreated(new DateTime());
        saveExtract.setExtractId(UUID);
        saveExtract.setExtractStatus("SENT");
        saveExtract.setRecordsSent(NUM_RECS);

        dwExtractRepo.save(saveExtract);

        persister.setSystemId("00");

        DwCallbackObject callbackObject = new DwCallbackObject();
        callbackObject.setId(UUID);
        callbackObject.setRowCount(NUM_RECS);
        callbackObject.setStatus("Success");
        callbackObject.setTestRegistrationId(SYSTEM_UUID);
        callbackObject.setMessage(new String[] { "All is good" });

        dwBatchHandler.handleCallback(callbackObject);

        DwExtract extract = dwExtractRepo.findByExtractId(UUID);

        assertThat(extract, notNullValue());
        assertThat(extract.getExtractStatus(), is("SYSTEMIDNOMATCH"));

    }

    @Test
    public void testNoSystemIdSet() {
        DwExtract saveExtract = new DwExtract();
        saveExtract.setExtractCreated(new DateTime());
        saveExtract.setExtractId(UUID);
        saveExtract.setExtractStatus("SENT");
        saveExtract.setRecordsSent(NUM_RECS);

        dwExtractRepo.save(saveExtract);

        DwCallbackObject callbackObject = new DwCallbackObject();
        callbackObject.setId(UUID);
        callbackObject.setRowCount(NUM_RECS);
        callbackObject.setStatus("Success");
        callbackObject.setTestRegistrationId(SYSTEM_UUID);
        callbackObject.setMessage(new String[] { "All is good" });

        dwBatchHandler.handleCallback(callbackObject);

        DwExtract extract = dwExtractRepo.findByExtractId(UUID);

        assertThat(extract, notNullValue());
        assertThat(extract.getExtractStatus(), is("NOSYSTEMID"));

    }

}
