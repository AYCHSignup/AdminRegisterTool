/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.student;

import static org.hamcrest.collection.IsCollectionWithSize.hasSize;
import static org.hamcrest.collection.IsEmptyCollection.empty;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsNot.not;
import static org.junit.Assert.assertThat;
import static org.springframework.test.util.ReflectionTestUtils.setField;

import java.util.Collections;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.HierarchyLevel;
import org.opentestsystem.delivery.testreg.domain.InstitutionEntity;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.domain.Sb11SuperEntity;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.persistence.Verifier;
import org.opentestsystem.delivery.testreg.service.Sb11EntityRepositoryService;
import org.opentestsystem.shared.progman.client.domain.TenantType;
import org.springframework.validation.FieldError;

public class InstitutionVerifierTest {

    Verifier<Student> verifier;

    boolean isInstitutionParentVerifierCalled = false;

    @Before
    public void setup() {
        this.verifier = new StudentInstitutionVerifier();
        setField(this.verifier, "institutionParentVerifier", new Verifier<Student>() {
            @Override
            public List<FieldError> verify(final Student b) {
                InstitutionVerifierTest.this.isInstitutionParentVerifierCalled = true;
                return Collections.emptyList();
            }
        });

        setField(this.verifier, "sb11EntityRepositoryService", new MockSb11EntityRepositoryService());
    }

    @Test
    public void testSuccess() {
        final Student student = new Student();
        student.setInstitutionIdentifier("I100");
        assertThat(this.verifier.verify(student), is(empty()));
        assertThat(this.isInstitutionParentVerifierCalled, is(true));
    }

    @Test
    public void testFailure() {
        final Student student = new Student();
        student.setInstitutionIdentifier("I1990");
        assertThat(this.verifier.verify(student), is(not(empty())));
        assertThat(this.verifier.verify(student), hasSize(1));
        assertThat(this.verifier.verify(student).get(0).getRejectedValue().toString(), is("I1990"));
    }

    private class MockSb11EntityRepositoryService implements Sb11EntityRepositoryService {

        @Override
        public <S extends Sb11SuperEntity> S findByEntityId(final String entityId, final Class<S> clazz) {
            return null;
        }

        @SuppressWarnings("unchecked")
        @Override
        public <S extends Sb11Entity> S findByEntityIdAndStateAbbreviation(final String entityId, final String stateAbbreviation, final Class<S> clazz) {
            if (!entityId.equals("I100")) {
                return null;
            }
            return (S) new InstitutionEntity() {
                private static final long serialVersionUID = 1L;
                {
                    setEntityId("I100");
                    setEntityName("Institution100");
                }
            };
        }

        @Override
        public <S extends Sb11Entity> List<S> findAllByParentEntityTypeAndParentEntityId(final String parentEntityType, final String parentEntityId, final FormatType formatType) {
            return null;
        }

        @Override
        public <S extends Sb11Entity> List<S> findAllByParentEntityType(final String parentEntityType, final HierarchyLevel hierarchyLevel) {
            return null;
        }

        @Override
        public <S extends Sb11Entity> List<S> findAllByParentEntityTypeAndParentId(final String parentEntityType, final String parentMongoId, final Class<S> clazz) {
            return null;
        }

        @Override
        public <S extends Sb11SuperEntity> S findByEntityId(final String entityId, final TenantType tenantType) {
            return null;
        }

        @Override
        public <S extends Sb11Entity> S findByEntityIdAndStateAbbreviation(final String entityId, final String stateAbbreviation, final TenantType tenantType) {
            return null;
        }

        @Override
        public <S extends Sb11Entity> List<S> findAllByEntityId(final String entityId, final Class<S> clazz) {
            return null;
        }

        @Override
        public <S extends Sb11Entity> List<S> findAllByEntityIdAndEntityName(final String entityId, final String entityName, final Class<S> clazz) {
            return null;
        }

        @Override
        public <S extends Sb11Entity> S getParentEntity(final S entity) {
            return null;
        }
    }
}
