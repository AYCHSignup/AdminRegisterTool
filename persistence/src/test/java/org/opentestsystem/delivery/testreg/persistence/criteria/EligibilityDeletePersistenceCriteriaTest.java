/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria;

import static org.hamcrest.collection.IsEmptyCollection.empty;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsNull.notNullValue;
import static org.junit.Assert.assertThat;

import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.ExplicitEligibility;
import org.opentestsystem.delivery.testreg.domain.Sb11NonEntity;
import org.opentestsystem.delivery.testreg.integration.AbstractPersistenceEmbeddedTest;
import org.opentestsystem.delivery.testreg.persistence.ExplicitEligibilityRepository;
import org.opentestsystem.delivery.testreg.persistence.Verifier;
import org.opentestsystem.delivery.testreg.service.Sb11NonEntityRepositoryService;
import org.opentestsystem.shared.search.domain.AbstractSearchRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.validation.ObjectError;

public class EligibilityDeletePersistenceCriteriaTest extends AbstractPersistenceEmbeddedTest {

    @Autowired
    Verifier<ExplicitEligibility> explicitEligibilityVerifier;

    @Autowired
    private ExplicitEligibilityRepository eligibilityRepository;

    @Before
    public void setup() {
        explicitEligibilityVerifier = new ExplicitEligibilityVerifier();
    }

    @Test
    public void testDeleteSuccess() {
        ExplicitEligibility eligibilityEntity = saveExplicitEligibility();
        assertThat(eligibilityEntity, is(notNullValue()));

        ExplicitEligibility eligibilityEntityForDelete = buildExplicitEligibility();
        eligibilityEntityForDelete.setDelete("DELETE");
        ReflectionTestUtils.setField(explicitEligibilityVerifier, "sb11NonEntityRepositoryService", new MockEntityRepositoryService(eligibilityEntity));
        List<? extends ObjectError> errors = explicitEligibilityVerifier.verify(eligibilityEntityForDelete);
        assertThat(errors, is(empty()));
    }

    @Test
    public void testDeleteFailure() {
        ExplicitEligibility eligibility = buildExplicitEligibility();
        eligibility.setStateAbbreviation("IL");
        eligibility.setDelete("DELETE");
        ReflectionTestUtils.setField(explicitEligibilityVerifier, "sb11NonEntityRepositoryService", new MockEntityRepositoryService(eligibility));
        List<? extends ObjectError> errors = explicitEligibilityVerifier.verify(eligibility);
        assertThat(errors.size(), is(1));
        assertThat(
                errors.get(0).getDefaultMessage(),
                is("StudentIdentifier:" + eligibility.getStudentId() + " , StateAbbreviation:"
                        + eligibility.getStateAbbreviation() + " , TestName:" + eligibility.getTestName()
                        + " and TestVersion:" + eligibility.getTestVersion() + " not found in DB for delete"));

    }

    private ExplicitEligibility saveExplicitEligibility() {
        return eligibilityRepository.save(buildExplicitEligibility());
    }

    private ExplicitEligibility buildExplicitEligibility() {
        ExplicitEligibility explicitEligibility = new ExplicitEligibility();
        explicitEligibility.setStudentId("7162817624");
        explicitEligibility.setAdministrationName("FCAT");
        explicitEligibility.setStateAbbreviation("WI");
        explicitEligibility.setResponsibleDistrictId("21312125");
        explicitEligibility.setSubject("MATH");
        explicitEligibility.setTestName("MATH-TEST-1");
        explicitEligibility.setTestVersion("1.1.1");
        explicitEligibility.setDelete("");
        return explicitEligibility;
    }

    private class MockEntityRepositoryService implements Sb11NonEntityRepositoryService {

        ExplicitEligibility eligibility;

        public MockEntityRepositoryService(ExplicitEligibility eligibility) {
            this.eligibility = eligibility;
        }

        @SuppressWarnings("unchecked")
        @Override
        public <T extends Sb11NonEntity> T findByAlternateKey(AbstractSearchRequest searchRequest, Class<T> clazz) {
            if (eligibility.getStateAbbreviation().equals("IL")) {
                return null;
            }
            return (T) eligibility;
        }

    }
}
