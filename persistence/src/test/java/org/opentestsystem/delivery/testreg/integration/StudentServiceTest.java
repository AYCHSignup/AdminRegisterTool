/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.integration;

import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertThat;
import static org.junit.Assert.assertTrue;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.DistrictEntity;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.InstitutionEntity;
import org.opentestsystem.delivery.testreg.domain.StateEntity;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.domain.Student.Gender;
import org.opentestsystem.delivery.testreg.domain.Student.GradeLevel;
import org.opentestsystem.delivery.testreg.domain.Student.PrimaryDisabilityType;
import org.opentestsystem.delivery.testreg.domain.Student.Title3ProgramType;
import org.opentestsystem.delivery.testreg.domain.search.StudentSearchRequest;
import org.opentestsystem.delivery.testreg.service.impl.StudentServiceImpl;
import org.opentestsystem.shared.search.domain.SearchResponse;

import com.google.common.collect.Maps;

public class StudentServiceTest extends AbstractPersistenceEmbeddedTest {

    @Resource(name = "studentService")
    private StudentServiceImpl<Student> studentService;

    private Student student;

    @Before
    public void init() {
        mongoTemplate.insert(new StateEntity.Builder("WI", "Wisconsin", "CLIENT", "000000", "WI", "ADD").build());
        mongoTemplate.insert(new InstitutionEntity.Builder("10001", "MiddletonSchool", "STATE", "234", "WI", "WI", "ADD").build());
        mongoTemplate.insert(new DistrictEntity.Builder("101", "Middleton School district", "341", "STATE", "WI", "WI", "ADD").build());

        student = new Student();
        student.setEntityId("123456");
        student.setStateAbbreviation("WI");
        student.setDistrictIdentifier("101");
        student.setInstitutionIdentifier("10001");
        student.setMiddleName("MS");
        student.setFirstName("Joe");
        student.setLastName("Smith");
        student.setBirthDate("2013-10-10");
        student.setExternalSsid("WI12345");
        student.setGradeLevelWhenAssessed(GradeLevel.EIGHTHGRADE);
        student.setGender(Gender.Male);
        student.setHispanicOrLatino("NO");
        student.setAmericanIndianOrAlaskaNative("NO");
        student.setAsian("NO");
        student.setLanguageCode("eng");
        student.setBlackOrAfricanAmerican("NO");
        student.setWhite("Yes");
        student.setNativeHawaiianOrPacificIsland("NO");
        student.setTwoOrMoreRaces("NO");
        student.setiDEAIndicator("NO");
        student.setLepStatus("NO");
        student.setSection504Status("NO");
        student.setDisadvantageStatus("YES");
        student.setTitle3ProgressStatus("PROFICIENT");
        student.setMigrantStatus("YES");
        student.setFirstEntryDateIntoUsSchool("2014-09-01");
        student.setLepEntryDate("2010-10-10");
        student.setLepExitDate("2010-10-20");
        student.setTitle3ProgramType(Title3ProgramType.DUALLANGUAGE);
        student.setPrimaryDisabilityType(PrimaryDisabilityType.AUT);

    }

    @Test
    public void testSave() {
        List<Student> students = new ArrayList<Student>();
        students.add(student);
        List<Student> savedStudents = studentService.saveDomainObjects(students);
        assertNotNull("saved students should be not be null", savedStudents);
        assertTrue("saved students should not be empty", savedStudents.size() == 1);
        String studentId = savedStudents.get(0).getId();
        assertNotNull("id on saved Item should be not be null", studentId);
        assertNotNull("district mongo id should not be null", savedStudents.get(0).getDistrictEntityMongoId());
        assertNotNull("institution mongo id should not be null", savedStudents.get(0).getInstitutionEntityMongoId());

    }

    @Test
    public void testUpdate() {
        Student u = studentService.saveDomainObject(student);
        String origLastName = u.getLastName();
        String studentId = u.getId();
        assertNotNull("id on saved Item should be not be null", studentId);

        student.setId(null);
        student.setLastName("Smithers");
        Student v = studentService.updateDomainObject(student);
        String updatedStudentId = v.getId();
        String updatedLastName = v.getLastName();

        assertThat(updatedStudentId, is(studentId));
        assertThat(updatedLastName, is("Smithers"));
        assertThat(updatedLastName, is(org.hamcrest.CoreMatchers.not(origLastName)));

    }

    @Test
    public void testFind() {
        studentService.saveDomainObject(student);
        String studentId = student.getId();
        assertNotNull("id on saved Item should be not be null", studentId);
        Student readObj = studentService.findById(studentId, FormatType.STUDENT);
        assertEquals(readObj.getFirstName(), "Joe");
        assertEquals(readObj.getLastName(), "Smith");
    }

    @Test
    public void testRemove() {
        studentService.saveDomainObject(student);
        String studentId = student.getId();
        assertNotNull("id on saved Item should be not be null", studentId);
        studentService.deleteDomainObject(studentId, FormatType.STUDENT);
        Student readObj = studentService.findById(studentId, FormatType.STUDENT);
        assertNull("Item must be null", readObj);
    }

    @Test
    public void testSearchStudents() {
        Student savedStudent = studentService.saveDomainObject(student);
        assertNotNull("Saved Item should be not be null", savedStudent);
        Map<String, String[]> requestMap = Maps.newHashMap();
        requestMap.put(StudentSearchRequest.SEARCH_KEY_FIRST_NAME, new String[] { "Joe" });
        StudentSearchRequest searchRequest = new StudentSearchRequest(requestMap);
        SearchResponse<Student> students = studentService.searchDomainObjects(searchRequest, FormatType.STUDENT);
        assertNotNull("Student List cannot be null", students.getSearchResults());
    }

}
