/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.integration;

import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.DistrictEntity;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.GroupOfDistrictsEntity;
import org.opentestsystem.delivery.testreg.domain.GroupOfInstitutionsEntity;
import org.opentestsystem.delivery.testreg.domain.GroupOfStatesEntity;
import org.opentestsystem.delivery.testreg.domain.InstitutionEntity;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.domain.StateEntity;
import org.opentestsystem.delivery.testreg.service.Sb11EntityRepositoryService;
import org.opentestsystem.delivery.testreg.service.impl.HierarchyLevelTreeWalker;
import org.springframework.beans.factory.annotation.Autowired;

public class HierarchyLevelTreeWalkerTest extends AbstractPersistenceEmbeddedTest{
    
    HierarchyLevelTreeWalker treeWalker;
    
    @Autowired
    private Sb11EntityRepositoryService sb11EntityService;
    
    @Before
    public void setup() {
        treeWalker = new HierarchyLevelTreeWalker(sb11EntityService);
    }
            
    @Test
    public void directGOS() {
        mongoTemplate.insert(new GroupOfStatesEntity.Builder("GOS12345", "MIDWEST STATES", "CLIENT", "TestClientId", "ADD").build());
        InstitutionEntity ie = new InstitutionEntity.Builder("12345", "Middleton School", "GROUPOFSTATES", "12345909", "GOS12345", "WI", "ADD").build();
        mongoTemplate.insert(ie);
        
        validate(ie);
    }
    
    @Test
    public void DISTRICT_GOS() {
        mongoTemplate.insert(new GroupOfStatesEntity.Builder("GOS12345", "MIDWEST STATES", "CLIENT", "TestClientId", "ADD").build());
        mongoTemplate.insert(new DistrictEntity.Builder("101", "Middleton School district", "000000", "GROUPOFSTATES", "GOS12345",
                "WI", "ADD").build());
        InstitutionEntity ie = new InstitutionEntity.Builder("12345", "Middleton School", "DISTRICT", "12345909", "101", "WI", "ADD").build();
        mongoTemplate.insert(ie);
        
        validate(ie);
    }
    
    @Test
    public void DISTRICT_GOD_GOS() {
        mongoTemplate.insert(new GroupOfStatesEntity.Builder("GOS12345", "MIDWEST STATES", "CLIENT", "TestClientId", "ADD").build());
        mongoTemplate.insert(new GroupOfDistrictsEntity.Builder("GOD2345", "WI DISTRICT 1000", "GROUPOFSTATES", "GOS12345", "WI", "ADD").build());
        mongoTemplate.insert(new DistrictEntity.Builder("101", "Middleton School district", "000000", "GROUPOFDISTRICTS", "GOD2345",
                "WI", "ADD").build());
        InstitutionEntity ie = new InstitutionEntity.Builder("12345", "Middleton School", "DISTRICT", "12345909", "101", "WI", "ADD").build();
        mongoTemplate.insert(ie);
        
        validate(ie);
    }
    
    @Test
    public void GOI_GOS() {
        mongoTemplate.insert(new GroupOfStatesEntity.Builder("GOS12345", "MIDWEST STATES", "CLIENT", "TestClientId", "ADD").build());
        mongoTemplate.insert(new GroupOfInstitutionsEntity.Builder("GOI12345", "MIDWEST STATES", "GROUPOFSTATES", "GOS12345", "WI", "ADD").build());
        InstitutionEntity ie = new InstitutionEntity.Builder("12345", "Middleton School", "GROUPOFINSTITUTIONS", "12345909", "GOI12345", "WI", "ADD").build();
        mongoTemplate.insert(ie);
        
        validate(ie);
    }
    
    @Test
    public void GOI_DISTRICT_GOS() {
        mongoTemplate.insert(new GroupOfStatesEntity.Builder("GOS12345", "MIDWEST STATES", "CLIENT", "TestClientId", "ADD").build());
        mongoTemplate.insert(new DistrictEntity.Builder("101", "Middleton School district", "000000", "GROUPOFSTATES", "GOS12345",
                "WI", "ADD").build());
        mongoTemplate.insert(new GroupOfInstitutionsEntity.Builder("GOI12345", "MIDWEST STATES", "DISTRICT", "101", "WI", "ADD").build());
        InstitutionEntity ie = new InstitutionEntity.Builder("12345", "Middleton School", "GROUPOFINSTITUTIONS", "12345909", "GOI12345", "WI", "ADD").build();
        mongoTemplate.insert(ie);
        
        validate(ie);
    }

    @Test
    public void GOI_GOD_GOS() {
        mongoTemplate.insert(new GroupOfStatesEntity.Builder("GOS12345", "MIDWEST STATES", "CLIENT", "TestClientId", "ADD").build());
        mongoTemplate.insert(new GroupOfDistrictsEntity.Builder("GOD2345", "WI DISTRICT 1000", "GROUPOFSTATES", "GOS12345", "WI", "ADD").build());
        mongoTemplate.insert(new GroupOfInstitutionsEntity.Builder("GOI12345", "MIDWEST STATES", "GROUPOFDISTRICTS", "GOD2345", "WI", "ADD").build());
        InstitutionEntity ie = new InstitutionEntity.Builder("12345", "Middleton School", "GROUPOFINSTITUTIONS", "12345909", "GOI12345", "WI", "ADD").build();
        mongoTemplate.insert(ie);
        
        validate(ie);
    }
    
    @Test
    public void GOD_GOS() {
        mongoTemplate.insert(new GroupOfStatesEntity.Builder("GOS12345", "MIDWEST STATES", "CLIENT", "TestClientId", "ADD").build());
        mongoTemplate.insert(new GroupOfDistrictsEntity.Builder("GOD2345", "WI DISTRICT 1000", "GROUPOFSTATES", "GOS12345", "WI", "ADD").build());
        InstitutionEntity ie = new InstitutionEntity.Builder("12345", "Middleton School", "GROUPOFDISTRICTS", "12345909", "GOD2345", "WI", "ADD").build();
        mongoTemplate.insert(ie);
        
        validate(ie);
    }
    
    private void validate(InstitutionEntity ie) {
        Sb11Entity sb11Entity = treeWalker.getGOS(ie);
        assertThat(sb11Entity.getFormatType(), is(FormatType.GROUPOFSTATES));
        assertThat(sb11Entity.getEntityId(), is("GOS12345"));
        assertThat(sb11Entity.getEntityName(), is("MIDWEST STATES"));
        
    }  
    
    @Test
    public void Non_GOS_Hierarchy() {
        mongoTemplate.insert(new StateEntity.Builder("WI", "Wisconsin", "CLIENT", "00000", "ADD").build());
        mongoTemplate.insert(new GroupOfDistrictsEntity.Builder("GOD2345", "WI DISTRICT 1000", "STATE", "WI", "WI", "ADD").build());
        mongoTemplate.insert(new GroupOfInstitutionsEntity.Builder("GOI12345", "MIDWEST STATES", "GROUPOFDISTRICTS", "GOD2345", "WI", "ADD").build());
        InstitutionEntity ie = new InstitutionEntity.Builder("12345", "Middleton School", "GROUPOFINSTITUTIONS", "12345909", "GOI12345", "WI", "ADD").build();
        mongoTemplate.insert(ie);
        
        Sb11Entity sb11Entity = treeWalker.getGOS(ie);
        assertThat(sb11Entity.getFormatType(), is(FormatType.GROUPOFDISTRICTS));
        assertThat(sb11Entity.getEntityId(), is("GOD2345"));
        assertThat(sb11Entity.getEntityName(), is("WI DISTRICT 1000"));
    }
}
