/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.integration;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.DistrictEntity;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.GroupOfStatesEntity;
import org.opentestsystem.delivery.testreg.domain.InstitutionEntity;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.domain.search.InstitutionEntitySearchRequest;
import org.opentestsystem.delivery.testreg.persistence.DistrictEntityRepository;
import org.opentestsystem.delivery.testreg.persistence.GroupOfStatesEntityRepository;
import org.opentestsystem.delivery.testreg.service.TestRegPersister;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;

public class InstitutionEntityServiceTest extends AbstractPersistenceEmbeddedTest {

    @Autowired
    private TestRegPersister entityService;

    @Autowired
    private DistrictEntityRepository districtRepository;
    
    @Autowired
    private GroupOfStatesEntityRepository groupOfStatesRepository;

    @Before
    public void setUp() throws Exception {
        groupOfStatesRepository.save(buildGroupOfStatesEntity());
        districtRepository.save(buildParentEntity());
    }

    @Test
    public void testEntitySave() {

        // save state entity
        InstitutionEntity entity = buildInstitutionEntity();
        InstitutionEntity institutionEntity = entityService.saveDomainObject(entity);
        assertNotNull("Institution Entity is not saved", institutionEntity);
        assertNotNull("Institution entity id is null", institutionEntity.getId());
    }

    @Test
    public void testEntitiesSave() {
        List<InstitutionEntity> entities = new ArrayList<InstitutionEntity>();
        entities.add(buildInstitutionEntity());
        entities.add(buildInstitutionEntity1());
        // save list of state entities
        List<InstitutionEntity> instituteEntities = entityService.saveDomainObjects(entities);
        assertNotNull("Institution Entities are not saved", instituteEntities);
        assertTrue("Found Institution Entities", instituteEntities.size() == 2);

    }

    @Test
    public void testFindEntity() {

        // save state entity
        InstitutionEntity entity = buildInstitutionEntity();
        InstitutionEntity institutionEntity = entityService.saveDomainObject(entity);
        assertNotNull("Institution Entity is not saved", institutionEntity);
        assertNotNull("Institution entity id is null", institutionEntity.getId());
        InstitutionEntity foundEntity = entityService.findById(institutionEntity.getId(),
                institutionEntity.getFormatType());
        assertNotNull("Institution Entity not found", foundEntity);
        assertTrue("Id's does not match", institutionEntity.getId().equals(foundEntity.getId()));
    }

    @Test
    public void testEntityUpdate() {

        // save state entity
        InstitutionEntity entity = buildInstitutionEntity();
        InstitutionEntity institutionEntity = entityService.saveDomainObject(entity);
        assertNotNull("Institution Entity is not saved", institutionEntity);
        assertNotNull("Institution entity id is null", institutionEntity.getId());
        // update some fields
        institutionEntity.setEntityName("High School");
        InstitutionEntity updatedEntity = entityService.updateDomainObject(institutionEntity);

        assertNotNull("Updated Entity is null", updatedEntity);
        assertTrue("Does not match updated value", updatedEntity.getEntityName().equals("High School"));
    }

    @Test
    public void testEntityDelete() {

        // save state entity
        Sb11Entity entity = buildInstitutionEntity();
        Sb11Entity institutionEntity = entityService.saveDomainObject(entity);
        assertNotNull("Institution Entity is not saved", institutionEntity);
        assertNotNull("Institution entity id is null", institutionEntity.getId());

        // delete entity
        entityService.deleteDomainObject(institutionEntity);
        InstitutionEntity foundEntity = entityService.findById(institutionEntity.getId(),
                institutionEntity.getFormatType());
        assertNull("Institution Entity found", foundEntity);
    }

    @Test
    public void testEntityDeleteById() {

        // save state entity
        Sb11Entity entity = buildInstitutionEntity();
        Sb11Entity institutionEntity = entityService.saveDomainObject(entity);
        assertNotNull("Institution Entity is not saved", institutionEntity);
        assertNotNull("Institution entity id is null", institutionEntity.getId());

        // delete entity
        entityService.deleteDomainObject(institutionEntity.getId(), InstitutionEntity.FORMAT_TYPE);
        InstitutionEntity foundEntity = entityService.findById(institutionEntity.getId(),
                institutionEntity.getFormatType());
        assertNull("Institution Entity found", foundEntity);
    }

    @Test
    public void testEntitiesDelete() {
        List<InstitutionEntity> entities = new ArrayList<InstitutionEntity>();
        entities.add(buildInstitutionEntity());
        entities.add(buildInstitutionEntity1());
        // save list of state entities
        List<InstitutionEntity> stateEntities = entityService.saveDomainObjects(entities);
        assertNotNull("Institution Entity is not saved", stateEntities);

        List<InstitutionEntity> foundSavedEntities = entityService.findAll(FormatType.INSTITUTION);
        assertNotNull("found Entities is null", foundSavedEntities);
        assertTrue("found Entities is null", foundSavedEntities.size() == 2);
        // delete entities
        entityService.deleteDomainObjects(new ArrayList<Sb11Entity>(foundSavedEntities));
        List<InstitutionEntity> foundDeletedEntities = entityService.findAll(FormatType.INSTITUTION);
        assertTrue("found Entities", foundDeletedEntities.size() == 0);
    }

    @Test
    public void testInstitutionEntityDeleteById() {

        // save state entity
        Sb11Entity entity = buildInstitutionEntity();
        Sb11Entity institutionEntity = entityService.saveDomainObject(entity);
        assertNotNull("Institution Entity is not saved", institutionEntity);
        assertNotNull("Institution entity id is null", institutionEntity.getId());

        // delete entity
        entityService.deleteDomainObject(institutionEntity.getId(), institutionEntity.getFormatType());
        InstitutionEntity foundEntity = entityService.findById(institutionEntity.getId(),
                institutionEntity.getFormatType());
        assertNull("Institution Entity found", foundEntity);

    }

    @Test
    public void testSearchEntities() {

        // save state entity
        Sb11Entity entity = buildInstitutionEntity();
        InstitutionEntity institutionEntity = (InstitutionEntity) entityService.saveDomainObject(entity);
        assertNotNull("Institution Entity is not saved", institutionEntity);
        assertNotNull("Institution entity id is null", institutionEntity.getId());
        Map<String, String[]> map = new HashMap<String, String[]>();
        map.put("entityId", new String[] { institutionEntity.getEntityId() });
        map.put("stateAbbreviation", new String[] { institutionEntity.getStateAbbreviation() });

        InstitutionEntitySearchRequest searchRequest = new InstitutionEntitySearchRequest(map);
        SearchResponse<Sb11Entity> searchResponse = entityService.searchDomainObjects(searchRequest,
                InstitutionEntity.FORMAT_TYPE);
        assertTrue("Institution Entity Not found", searchResponse.getSearchResults().size() == 1);

    }

    private InstitutionEntity buildInstitutionEntity() {
        InstitutionEntity.Builder institutionEntityBuilder = new InstitutionEntity.Builder(new Object[] { "1234",
                "CoreKnowldge", "DISTRICT", "000001", "12345678", "WI", "ADD" });
        return institutionEntityBuilder.build();
    }

    private InstitutionEntity buildInstitutionEntity1() {
        InstitutionEntity.Builder institutionEntityBuilder = new InstitutionEntity.Builder(new Object[] { "2345",
                "CoreKnowldge", "DISTRICT", "000001", "12345678", "WI", "ADD" });
        return institutionEntityBuilder.build();
    }

    private DistrictEntity buildParentEntity() {
        DistrictEntity.Builder districtEntityBuilder = new DistrictEntity.Builder(new Object[] { "12345678",
                "Middleton School district", "911", "GROUPOFSTATES", "12345", "WI", "ADD" });
        return districtEntityBuilder.build();
    }
    
    private GroupOfStatesEntity buildGroupOfStatesEntity() {
        GroupOfStatesEntity.Builder groupOfStatesEntity = new GroupOfStatesEntity.Builder(new Object[] { "12345",
                "MIDWEST STATES", "CLIENT", "000000", "ADD" });
        return groupOfStatesEntity.build();
    }
}
