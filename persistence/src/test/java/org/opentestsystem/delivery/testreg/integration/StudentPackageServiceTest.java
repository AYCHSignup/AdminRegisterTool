/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.integration;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.junit.Assert.assertThat;
import static org.springframework.test.util.ReflectionTestUtils.setField;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import org.joda.time.DateTime;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.CachedClientEntity;
import org.opentestsystem.delivery.Sb11TimeZoneBuilder;
import org.opentestsystem.delivery.testreg.domain.Accommodation;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.AmericanSignLanguage;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.ClosedCaptioning;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.ColorContrast;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.Language;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.Masking;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.NonEmbeddedAccommodations;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.NonEmbeddedDesignatedSupports;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.PermissiveMode;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.PrintOnDemand;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.PrintSize;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.StreamlinedInterface;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.TextToSpeech;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.Translation;
import org.opentestsystem.delivery.testreg.domain.ClientEntity;
import org.opentestsystem.delivery.testreg.domain.DistrictEntity;
import org.opentestsystem.delivery.testreg.domain.ExplicitEligibility;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.GroupOfDistrictsEntity;
import org.opentestsystem.delivery.testreg.domain.GroupOfInstitutionsEntity;
import org.opentestsystem.delivery.testreg.domain.GroupOfStatesEntity;
import org.opentestsystem.delivery.testreg.domain.HierarchyLevel;
import org.opentestsystem.delivery.testreg.domain.InstitutionEntity;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.domain.Sb11SuperEntity;
import org.opentestsystem.delivery.testreg.domain.StateEntity;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.domain.Student.GradeLevel;
import org.opentestsystem.delivery.testreg.domain.StudentGroup;
import org.opentestsystem.delivery.testreg.integration.eligibility.MockEligibilityService;
import org.opentestsystem.delivery.testreg.service.Sb11EntityRepositoryService;
import org.opentestsystem.delivery.testreg.service.StudentGroupService;
import org.opentestsystem.delivery.testreg.service.StudentPackageService;
import org.opentestsystem.delivery.testreg.service.impl.HierarchyLevelTreeWalker;
import org.opentestsystem.delivery.testreg.service.impl.StudentPackageServiceImpl;
import org.opentestsystem.delivery.testreg.xstream.converters.StudentPackageStudentConverter;
import org.opentestsystem.delivery.testreg.xstream.custom.CustomJavaReflectionProvider;
import org.opentestsystem.delivery.testreg.xstream.custom.CustomXmlStaxDriver;
import org.opentestsystem.delivery.testreg.xstream.custom.OrderSequenceKeyFieldSorter;
import org.opentestsystem.delivery.testreg.xstream.custom.TestRegXstream;
import org.opentestsystem.shared.progman.client.domain.TenantType;

import com.thoughtworks.xstream.converters.reflection.FieldDictionary;
import com.thoughtworks.xstream.converters.reflection.ReflectionConverter;

public class StudentPackageServiceTest {

    private StudentPackageService studentPackageService;
    private StudentPackageStudentConverter studentConverter;
    private List<DateTime> windowStarts;
    private DateTime dt1 = DateTime.now().minusDays(10);
    private DateTime dt2 = DateTime.now().minusDays(3);
    
    @Before
    public void setup() {
        this.windowStarts = new ArrayList<>();
        this.windowStarts.add(dt1);
        this.windowStarts.add(dt2);
        this.studentConverter = new StudentPackageStudentConverter(new MockEntityRepositoryService());
        setField(this.studentConverter, "sb11TimeZoneBuilder", new Sb11TimeZoneBuilder(System.getProperty("user.timezone")));
        setField(this.studentConverter, "eligService", new MyMockEligibilityService());
        setField(this.studentConverter, "studentGroupService", new StudentGroupService() {
            @Override
            public List<StudentGroup> findGroupsForStudent(final String studentId, final String stateAbbreviation) {
                final StudentGroup group1 = new StudentGroup();
                group1.setStudentGroupName("KINGS_OF_TWINCITIES");
                final StudentGroup group2 = new StudentGroup();
                group2.setStudentGroupName("HARLEM_GLOBE_TROTTERS");
                final List<StudentGroup> list = new ArrayList<>();
                list.add(group1);
                list.add(group2);
                return list;
            }

            @Override
            public List<StudentGroup> findStudentGroups(final String stateAbbreviation, final String institutionIdentifier) {
                return null;
            }

            @Override
            public List<StudentGroup> findStudentGroups(final String institutionMongoId) {
                return null;
            }
        });
        setField(this.studentConverter, "cachedClientEntity", new CachedClientEntity() {
            @Override
            public ClientEntity getClient() {
                final ClientEntity client = new ClientEntity();
                client.setEntityId("BLAH");
                client.setEntityName("Test Client");
                client.setShareStudentIdentity(true);
                return client;
            }
        });
        
        final TestRegXstream xstream = new TestRegXstream(new CustomJavaReflectionProvider(new FieldDictionary(new OrderSequenceKeyFieldSorter())), new CustomXmlStaxDriver());
        xstream.setStudentConverter(studentConverter);
        this.studentConverter.setConverter( new ReflectionConverter(xstream.getMapper(), xstream.getReflectionProvider()));
        setField(this.studentConverter, "xstream", xstream);
        
        this.studentPackageService = new StudentPackageServiceImpl();
        setField(this.studentPackageService, "xstream", xstream);

    }

    @Test
    public void testExportStudentPackage() {
        final String xml = this.studentPackageService.exportStudentPackage(getStudent("123456", "WI", true));
        assertThat(xml, is(notNullValue()));
        final String xmlText = "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>" + "<StudentPackage version=\"1.0\">"
                + "<Student>" + "<StateAbbreviation>WI</StateAbbreviation>" + "<StateName>Wisconsin</StateName>"
                + "<GroupOfDistrictsIdentifier>GODE1002</GroupOfDistrictsIdentifier>"
                + "<GroupofDistrictsName>Midwest States</GroupofDistrictsName>"
                + "<ResponsibleDistrictIdentifier>101</ResponsibleDistrictIdentifier>"
                + "<OrganizationName>Oakland school District</OrganizationName>"
                + "<GroupOfInstitutionsIdentifier>GOI99198928</GroupOfInstitutionsIdentifier>"
                + "<GroupOfInstitutionsName>MDW Institutions Trust</GroupOfInstitutionsName>"
                + "<ResponsibleInstitutionIdentifier>10001</ResponsibleInstitutionIdentifier>"
                + "<NameOfInstitution>Middleton High School</NameOfInstitution>"
                + "<LastOrSurname>LastNameTest</LastOrSurname>" + "<FirstName>FNTest</FirstName>"
                + "<MiddleName>MS</MiddleName>" + "<Birthdate>2013-10-10</Birthdate>"
                + "<StudentIdentifier>123456</StudentIdentifier>" + "<AlternateSSID>WI12345</AlternateSSID>"
                + "<GradeLevelWhenAssessed>03</GradeLevelWhenAssessed>" + "<Sex>Male</Sex>"
                + "<HispanicOrLatinoEthnicity>Yes</HispanicOrLatinoEthnicity>"
                + "<AmericanIndianOrAlaskaNative>Yes</AmericanIndianOrAlaskaNative>" + "<Asian>No</Asian>"
                + "<BlackOrAfricanAmerican>No</BlackOrAfricanAmerican>" + "<White>No</White>"
                + "<NativeHawaiianOrOtherPacificIslander>No</NativeHawaiianOrOtherPacificIslander>"
                + "<DemographicRaceTwoOrMoreRaces>Yes</DemographicRaceTwoOrMoreRaces>"
                + "<IDEAIndicator>No</IDEAIndicator>" + "<LEPStatus>No</LEPStatus>"
                + "<Section504Status>No</Section504Status>"
                + "<EconomicDisadvantageStatus>Yes</EconomicDisadvantageStatus>" + "<LanguageCode>tel</LanguageCode>"
                + "<EnglishLanguageProficiencyLevel>PROGRESS</EnglishLanguageProficiencyLevel>"
                + "<MigrantStatus>Yes</MigrantStatus>"
                + "<FirstEntryDateIntoUSSchool>2010-09-01</FirstEntryDateIntoUSSchool>"
                + "<LimitedEnglishProficiencyEntryDate>2010-10-10</LimitedEnglishProficiencyEntryDate>"
                + "<LEPExitDate>2010-10-20</LEPExitDate>"
                + "<TitleIIILanguageInstructionProgramType>PullOutESL</TitleIIILanguageInstructionProgramType>"
                + "<PrimaryDisabilityType>AUT</PrimaryDisabilityType>" + "<ClientId>BLAH</ClientId>"
                + "<ClientName>Test Client</ClientName>" + "<ShareIdentityData>Yes</ShareIdentityData>" + "<Tests>"
                + "<Test>" + "<SubjectCode>ELA</SubjectCode>" + "<TestName>PK100</TestName>"
                + "<TestId>I344541232NNNb</TestId>" + "<TestForm>TF1000</TestForm>" + "<WindowStart>"
                + this.windowStarts.get(0)
                + "</WindowStart>"
                + "</Test>"
                + "<Test>"
                + "<SubjectCode>MATH</SubjectCode>"
                + "<TestName>PK200</TestName>"
                + "<TestId>I77552544</TestId>"
                + "<TestForm>TF2000</TestForm>"
                + "<WindowStart>"
                + this.windowStarts.get(1)
                + "</WindowStart>"
                + "</Test>"
                + "</Tests>"
                + "<Accommodations>"
                + "<Accommodation>"
                + "<SubjectCode>MATH-KAHN-ACA</SubjectCode>"
                + "<AmericanSignLanguage>TDS_ASL1</AmericanSignLanguage>"
                + "<ColorChoice>TDS_CCMagenta</ColorChoice>"
                + "<ClosedCaptioning>TDS_ClosedCap0</ClosedCaptioning>"
                + "<Language>ENUBraille</Language>"
                + "<Masking>TDS_Masking1</Masking>"
                + "<PermissiveMode>TDS_PM1</PermissiveMode>"
                + "<PrintOnDemand>TDS_PoD0</PrintOnDemand>"
                + "<PrintSize>TDS_PS_L2</PrintSize>"
                + "<StreamlinedInterface>TDS_TS_Accessibility</StreamlinedInterface>"
                + "<TexttoSpeech>TDS_TTS_Stim</TexttoSpeech>"
                + "<Translation>TDS_WL_ArabicGlossAndTDS_WL_Glossary</Translation>"
                + "<NonEmbeddedDesignatedSupports>NEDS_TCantonese</NonEmbeddedDesignatedSupports>"
                + "<NonEmbeddedAccommodations>NEA_Abacus</NonEmbeddedAccommodations>"
                + "<Other></Other>"
                + "</Accommodation>"
                + "</Accommodations>"
                + "<Groups>"
                + "<StudentGroupName>"
                + "KINGS_OF_TWINCITIES"
                + "</StudentGroupName>"
                + "<StudentGroupName>"
                + "HARLEM_GLOBE_TROTTERS"
                + "</StudentGroupName>"
                + "</Groups>" + "</Student>" + "</StudentPackage>";
        assertThat(xml, is(xmlText));
    }

    @Test
    public void testExportStudentPackageWithNullParents() {
        setField(this.studentConverter, "studentGroupService", new StudentGroupService() {
            @Override
            public List<StudentGroup> findGroupsForStudent(final String studentId, final String stateAbbreviation) {
                return null;
            }

            @Override
            public List<StudentGroup> findStudentGroups(final String stateAbbreviation, final String institutionIdentifier) {
                return null;
            }

            @Override
            public List<StudentGroup> findStudentGroups(final String institutionMongoId) {
                return null;
            }
        });
        setField(this.studentConverter, "sb11EntityRepositoryService", new MockEntityRepositoryService(false, false, false));
        setField(this.studentConverter, "hierarchyLevelTreeWalker", new HierarchyLevelTreeWalker(new MockEntityRepositoryService(false, false, false)));
        
        final Student student = getStudent("123456", "WI", false);
        student.setBirthDate((String) null); // Testing Null Birthdate bug
        student.setMigrantStatus(""); // Testing Empty/Null MigrantStatus
        student.setTitle3ProgramType(""); // Testing Empty/Null Title3 Program Type
        final String xml = this.studentPackageService.exportStudentPackage(student);
        assertThat(xml, is(notNullValue()));
        final String xmlText = "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>" + "<StudentPackage version=\"1.0\">"
                + "<Student>" + "<StateAbbreviation>WI</StateAbbreviation>" + "<StateName>Wisconsin</StateName>"
                + "<GroupOfDistrictsIdentifier></GroupOfDistrictsIdentifier>"
                + "<GroupofDistrictsName></GroupofDistrictsName>"
                + "<ResponsibleDistrictIdentifier>101</ResponsibleDistrictIdentifier>"
                + "<OrganizationName>Oakland school District</OrganizationName>"
                + "<GroupOfInstitutionsIdentifier></GroupOfInstitutionsIdentifier>"
                + "<GroupOfInstitutionsName></GroupOfInstitutionsName>"
                + "<ResponsibleInstitutionIdentifier>10001</ResponsibleInstitutionIdentifier>"
                + "<NameOfInstitution>Middleton High School</NameOfInstitution>"
                + "<LastOrSurname>LastNameTest</LastOrSurname>" + "<FirstName>FNTest</FirstName>"
                + "<MiddleName>MS</MiddleName>" + "<Birthdate></Birthdate>"
                + "<StudentIdentifier>123456</StudentIdentifier>" + "<AlternateSSID>WI12345</AlternateSSID>"
                + "<GradeLevelWhenAssessed>03</GradeLevelWhenAssessed>" + "<Sex>Male</Sex>"
                + "<HispanicOrLatinoEthnicity>Yes</HispanicOrLatinoEthnicity>"
                + "<AmericanIndianOrAlaskaNative>Yes</AmericanIndianOrAlaskaNative>" + "<Asian>No</Asian>"
                + "<BlackOrAfricanAmerican>No</BlackOrAfricanAmerican>" + "<White>No</White>"
                + "<NativeHawaiianOrOtherPacificIslander>No</NativeHawaiianOrOtherPacificIslander>"
                + "<DemographicRaceTwoOrMoreRaces>Yes</DemographicRaceTwoOrMoreRaces>"
                + "<IDEAIndicator>No</IDEAIndicator>" + "<LEPStatus>No</LEPStatus>"
                + "<Section504Status>No</Section504Status>"
                + "<EconomicDisadvantageStatus>Yes</EconomicDisadvantageStatus>" + "<LanguageCode>tel</LanguageCode>"
                + "<EnglishLanguageProficiencyLevel>PROGRESS</EnglishLanguageProficiencyLevel>"
                + "<MigrantStatus></MigrantStatus>"
                + "<FirstEntryDateIntoUSSchool>2010-09-01</FirstEntryDateIntoUSSchool>"
                + "<LimitedEnglishProficiencyEntryDate>2010-10-10</LimitedEnglishProficiencyEntryDate>"
                + "<LEPExitDate>2010-10-20</LEPExitDate>"
                + "<TitleIIILanguageInstructionProgramType></TitleIIILanguageInstructionProgramType>"
                + "<PrimaryDisabilityType>AUT</PrimaryDisabilityType>" + "<ClientId>BLAH</ClientId>"
                + "<ClientName>Test Client</ClientName>" + "<ShareIdentityData>Yes</ShareIdentityData>" + "<Tests>"
                + "<Test>" + "<SubjectCode>ELA</SubjectCode>" + "<TestName>PK100</TestName>"
                + "<TestId>I344541232NNNb</TestId>" + "<TestForm>TF1000</TestForm>" + "<WindowStart>"
                + this.windowStarts.get(0) + "</WindowStart>" + "</Test>" + "<Test>" + "<SubjectCode>MATH</SubjectCode>"
                + "<TestName>PK200</TestName>" + "<TestId>I77552544</TestId>" + "<TestForm>TF2000</TestForm>"
                + "<WindowStart>" + this.windowStarts.get(1) + "</WindowStart>" + "</Test>" + "</Tests>"
                + "<Accommodations>" + "</Accommodations>" + "<Groups>" + "</Groups>" + "</Student>"
                + "</StudentPackage>";
        assertThat(xml, is(xmlText));
    }

    @Test
    public void testExportStudentPackageWithGOSParents() {
        setField(this.studentConverter, "studentGroupService", new StudentGroupService() {
            @Override
            public List<StudentGroup> findGroupsForStudent(final String studentId, final String stateAbbreviation) {
                return null;
            }

            @Override
            public List<StudentGroup> findStudentGroups(final String stateAbbreviation, final String institutionIdentifier) {
                return null;
            }

            @Override
            public List<StudentGroup> findStudentGroups(final String institutionMongoId) {
                return null;
            }
        });
        setField(this.studentConverter, "sb11EntityRepositoryService", new MockEntityRepositoryService(false, false, true));
        setField(this.studentConverter, "hierarchyLevelTreeWalker", new HierarchyLevelTreeWalker(new MockEntityRepositoryService(false, false, true)));
 
        final Student student = getStudent("123456", "WI", false);
        student.setBirthDate((String) null); // Testing Null Birthdate bug
        final String xml = this.studentPackageService.exportStudentPackage(student);
        assertThat(xml, is(notNullValue()));
        final String xmlText = "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>" + "<StudentPackage version=\"1.0\">"
                + "<Student>" + "<StateAbbreviation>WI</StateAbbreviation>" + "<StateName>Wisconsin</StateName>"
                + "<GroupOfDistrictsIdentifier></GroupOfDistrictsIdentifier>"
                + "<GroupofDistrictsName></GroupofDistrictsName>"
                + "<ResponsibleDistrictIdentifier>101</ResponsibleDistrictIdentifier>"
                + "<OrganizationName>Oakland school District</OrganizationName>"
                + "<GroupOfInstitutionsIdentifier></GroupOfInstitutionsIdentifier>"
                + "<GroupOfInstitutionsName></GroupOfInstitutionsName>"
                + "<GroupOfStatesIdentifier>COS10029</GroupOfStatesIdentifier>"
                + "<GroupofStatesName>Consortium of States</GroupofStatesName>"
                + "<ResponsibleInstitutionIdentifier>10001</ResponsibleInstitutionIdentifier>"
                + "<NameOfInstitution>Middleton High School</NameOfInstitution>"
                + "<LastOrSurname>LastNameTest</LastOrSurname>" + "<FirstName>FNTest</FirstName>"
                + "<MiddleName>MS</MiddleName>" + "<Birthdate></Birthdate>"
                + "<StudentIdentifier>123456</StudentIdentifier>" + "<AlternateSSID>WI12345</AlternateSSID>"
                + "<GradeLevelWhenAssessed>03</GradeLevelWhenAssessed>" + "<Sex>Male</Sex>"
                + "<HispanicOrLatinoEthnicity>Yes</HispanicOrLatinoEthnicity>"
                + "<AmericanIndianOrAlaskaNative>Yes</AmericanIndianOrAlaskaNative>" + "<Asian>No</Asian>"
                + "<BlackOrAfricanAmerican>No</BlackOrAfricanAmerican>" + "<White>No</White>"
                + "<NativeHawaiianOrOtherPacificIslander>No</NativeHawaiianOrOtherPacificIslander>"
                + "<DemographicRaceTwoOrMoreRaces>Yes</DemographicRaceTwoOrMoreRaces>"
                + "<IDEAIndicator>No</IDEAIndicator>" + "<LEPStatus>No</LEPStatus>"
                + "<Section504Status>No</Section504Status>"
                + "<EconomicDisadvantageStatus>Yes</EconomicDisadvantageStatus>" + "<LanguageCode>tel</LanguageCode>"
                + "<EnglishLanguageProficiencyLevel>PROGRESS</EnglishLanguageProficiencyLevel>"
                + "<MigrantStatus>Yes</MigrantStatus>"
                + "<FirstEntryDateIntoUSSchool>2010-09-01</FirstEntryDateIntoUSSchool>"
                + "<LimitedEnglishProficiencyEntryDate>2010-10-10</LimitedEnglishProficiencyEntryDate>"
                + "<LEPExitDate>2010-10-20</LEPExitDate>"
                + "<TitleIIILanguageInstructionProgramType>PullOutESL</TitleIIILanguageInstructionProgramType>"
                + "<PrimaryDisabilityType>AUT</PrimaryDisabilityType>" + "<ClientId>BLAH</ClientId>"
                + "<ClientName>Test Client</ClientName>" + "<ShareIdentityData>Yes</ShareIdentityData>" + "<Tests>"
                + "<Test>" + "<SubjectCode>ELA</SubjectCode>" + "<TestName>PK100</TestName>"
                + "<TestId>I344541232NNNb</TestId>" + "<TestForm>TF1000</TestForm>" + "<WindowStart>"
                + this.windowStarts.get(0) + "</WindowStart>" + "</Test>" + "<Test>" + "<SubjectCode>MATH</SubjectCode>"
                + "<TestName>PK200</TestName>" + "<TestId>I77552544</TestId>" + "<TestForm>TF2000</TestForm>"
                + "<WindowStart>" + this.windowStarts.get(1) + "</WindowStart>" + "</Test>" + "</Tests>"
                + "<Accommodations>" + "</Accommodations>" + "<Groups>" + "</Groups>" + "</Student>"
                + "</StudentPackage>";
        assertThat(xml, is(xmlText));
    }

    private Student getStudent(final String studentId, final String stateAbbreviation, final boolean attachAccommodations) {
        final Student student = new Student();
        student.setEntityId("123456");
        student.setStateAbbreviation("WI");
        student.setDistrictIdentifier("101");
        student.setInstitutionIdentifier("10001");
        student.setLastName("LastNameTest");
        student.setFirstName("FNTest");
        student.setMiddleName("MS");
        student.setLanguageCode("tel");
        student.setBirthDate("2013-10-10");
        student.setExternalSsid("WI12345");
        student.setGradeLevelWhenAssessed(GradeLevel.THIRDGRADE);
        student.setGender("MALE");
        student.setHispanicOrLatino("Yes");
        student.setAmericanIndianOrAlaskaNative("Yes");
        student.setAsian("No");
        student.setBlackOrAfricanAmerican("No");
        student.setWhite("No");
        student.setNativeHawaiianOrPacificIsland("No");
        student.setTwoOrMoreRaces("Yes");
        student.setiDEAIndicator("NO");
        student.setLepStatus("NO");
        student.setSection504Status("No");
        student.setDisadvantageStatus("YES");
        student.setLanguageCode("tel");
        student.setTitle3ProgressStatus("PROGRESS");
        student.setMigrantStatus("YES");
        student.setFirstEntryDateIntoUsSchool("2010-09-01");
        student.setLepEntryDate("2010-10-10");
        student.setLepExitDate("2010-10-20");
        student.setTitle3ProgramType("PULLOUTESL");
        student.setPrimaryDisabilityType("AUT");
        student.setDelete("N");

        if (attachAccommodations) {
            final Accommodation acc1 = new Accommodation();
            acc1.setAmericanSignLanguage(AmericanSignLanguage.TDS_ASL1);
            acc1.setClosedCaptioning(ClosedCaptioning.TDS_ClosedCap0);
            acc1.setColorContrast(ColorContrast.TDS_CCMagenta);
            acc1.setLanguage(Language.ENUBraille);
            acc1.setMasking(Masking.TDS_Masking1);
            List<String> accoList = new ArrayList<String>();
            accoList.add(NonEmbeddedAccommodations.NEA_Abacus.toString ());
            acc1.setNonEmbeddedAccommodations(accoList);
            List<String> supportList = new ArrayList<String>();
            supportList.add(NonEmbeddedDesignatedSupports.NEDS_TCantonese.toString ());
            acc1.setNonEmbeddedDesignatedSupports(supportList);
            acc1.setPermissiveMode(PermissiveMode.TDS_PM1);
            acc1.setPrintOnDemand(PrintOnDemand.TDS_PoD0);
            acc1.setPrintSize(PrintSize.TDS_PS_L2);
            acc1.setStateAbbreviation("WI");
            acc1.setTranslation(Translation.TDS_WL_ArabicGlossAndTDS_WL_Glossary);
            acc1.setStreamlinedInterface(StreamlinedInterface.TDS_SLM0);
            acc1.setTextToSpeech(TextToSpeech.TDS_TTS_Stim);
            acc1.setSubject("MATH-KAHN-ACA");
            final List<Accommodation> accList = new ArrayList<>();
            accList.add(acc1);
            student.setAccommodations(accList);
        }
        return student;
    }

    private class MockEntityRepositoryService implements Sb11EntityRepositoryService {

        boolean parentGOD;
        boolean parentGOI;
        boolean parentGOS;

        private MockEntityRepositoryService() {
            this(true, true, true);
        }

        private MockEntityRepositoryService(final boolean parentGOD, final boolean parentGOI, final boolean parentGOS) {
            this.parentGOD = parentGOD;
            this.parentGOI = parentGOI;
            this.parentGOS = parentGOS;
        }

        @SuppressWarnings("unchecked")
        @Override
        public <S extends Sb11SuperEntity> S findByEntityId(final String entityId, final Class<S> clazz) {
            if (clazz.equals(StateEntity.class)) {
                final StateEntity state = new StateEntity();
                state.setEntityId("WI");
                state.setEntityName("Wisconsin");
                state.setParentEntityType("CLIENT");
                state.setParentEntityId("345345");
                state.setDelete((String) null);
                return (S) state;
            }
            if (clazz.equals(GroupOfStatesEntity.class)) {
                final GroupOfStatesEntity gose = new GroupOfStatesEntity();
                gose.setEntityId("COS10029");
                gose.setEntityName("Consortium of States");
                return (S) gose;
            }
            return null;
        }

        @SuppressWarnings("unchecked")
        @Override
        public <S extends Sb11Entity> S findByEntityIdAndStateAbbreviation(final String entityId, final String stateAbbreviation, final Class<S> clazz) {

            if (clazz.equals(DistrictEntity.class) && stateAbbreviation.equals("WI")) {
                final DistrictEntity district = new DistrictEntity();
                district.setEntityId("101");
                district.setEntityName("Oakland school District");
                if (this.parentGOD) {
                    district.setParentEntityType("GROUPOFDISTRICTS");
                } else {
                    district.setParentEntityType("STATE");
                }
                district.setParentEntityId("CA");
                district.setStateAbbreviation("WI");
                district.setNationwideIdentifier("NSID1");
                district.setDelete("ADD");
                return (S) district;
            }

            if (clazz.equals(InstitutionEntity.class) && stateAbbreviation.equals("WI")) {
                final InstitutionEntity institution = new InstitutionEntity();
                institution.setEntityId("10001");
                institution.setEntityName("Middleton High School");
                if (this.parentGOI) {
                    institution.setParentEntityType("GROUPOFINSTITUTIONS");
                } else if (this.parentGOS) {
                    institution.setParentEntityType("GROUPOFSTATES");
                } else {
                    institution.setParentEntityType("DISTRICT");
                }
                institution.setParentEntityId("100");
                institution.setStateAbbreviation("WI");
                institution.setNationwideIdentifier("NSID1");
                institution.setDelete("ADD");
                return (S) institution;
            }

            if (clazz.equals(GroupOfDistrictsEntity.class) && stateAbbreviation.equals("WI") && this.parentGOD) {
                final GroupOfDistrictsEntity gode = new GroupOfDistrictsEntity();
                gode.setEntityName("Midwest States");
                gode.setEntityId("GODE1002");
                return (S) gode;
            }

            if (clazz.equals(GroupOfStatesEntity.class) && stateAbbreviation.equals("WI") && this.parentGOS) {
                final GroupOfStatesEntity gose = new GroupOfStatesEntity();
                gose.setEntityName("Consortium of States");
                gose.setEntityId("COS10029");
                return (S) gose;
            }

            if (clazz.equals(GroupOfInstitutionsEntity.class) && stateAbbreviation.equals("WI") && this.parentGOI) {
                final GroupOfInstitutionsEntity goie = new GroupOfInstitutionsEntity();
                goie.setEntityName("MDW Institutions Trust");
                goie.setEntityId("GOI99198928");
                goie.setParentEntityType(HierarchyLevel.CLIENT);
                goie.setParentEntityId("0000");
                return (S) goie;
            }

            return null;
        }

        @Override
        public <S extends Sb11Entity> List<S> findAllByParentEntityTypeAndParentEntityId(final String parentEntityType, final String parentEntityId, final FormatType formatType) {
            return null;
        }

        @Override
        public <S extends Sb11Entity> List<S> findAllByParentEntityType(final String parentEntityType, final HierarchyLevel hierarchyLevel) {
            return null;
        }

        @Override
        public <S extends Sb11Entity> List<S> findAllByParentEntityTypeAndParentId(final String parentEntityType, final String parentMongoId, final Class<S> clazz) {
            return null;
        }

        @Override
        public <S extends Sb11SuperEntity> S findByEntityId(final String entityId, final TenantType tenantType) {
            return null;
        }

        @Override
        public <S extends Sb11Entity> S findByEntityIdAndStateAbbreviation(final String entityId, final String stateAbbreviation, final TenantType tenantType) {
            return null;
        }

        @Override
        public <S extends Sb11Entity> List<S> findAllByEntityId(final String entityId, final Class<S> clazz) {
            return null;
        }

        @Override
        public <S extends Sb11Entity> List<S> findAllByEntityIdAndEntityName(final String entityId, final String entityName, final Class<S> clazz) {
            return null;
        }

        @Override
        public <S extends Sb11Entity> S getParentEntity(final S entity) {
            return null;
        }
    }

    private class MyMockEligibilityService extends MockEligibilityService {
        @Override
        public Map<ExplicitEligibility, DateTime> findAllEligibilityByStudentIdStateAbbreviationAndBeginWindow(final String studentId, final String stateAbbreviation, final DateTime date) {
            final Map<ExplicitEligibility, DateTime> map = new TreeMap<>(new Comparator<ExplicitEligibility>() {
                @Override
                public int compare(final ExplicitEligibility o1, final ExplicitEligibility o2) {
                    return o1.getTestForm().compareTo(o2.getTestForm());
                }
            });

            final ExplicitEligibility ee1 = new ExplicitEligibility();
            ee1.setAdministrationName("Admin01");
            ee1.setAssessmentMongoId("I344541232NNNb");
            ee1.setDelete("DELETE");
            ee1.setId("I817726652565");
            ee1.setResponsibleDistrictId("D1667166");
            ee1.setResponsibleDistrictMongoId("I8812872677287");
            ee1.setStateAbbreviation("WI");
            ee1.setStudentId("S12344");
            ee1.setSubject("ELA");
            ee1.setTestForm("TF1000");
            ee1.setTestName("PK100");
            ee1.setTestVersion("1.0");
            map.put(ee1, dt1);

            final ExplicitEligibility ee2 = new ExplicitEligibility();
            ee2.setAdministrationName("ADMINISTRATION2");
            ee2.setAssessmentMongoId("I77552544");
            ee2.setDelete("YES");
            ee2.setId("I3314314313");
            ee2.setResponsibleDistrictId("D661661661");
            ee2.setResponsibleDistrictMongoId("I88156515515");
            ee2.setStateAbbreviation("WI");
            ee2.setStudentId("S12344");
            ee2.setSubject("MATH");
            ee2.setTestForm("TF2000");
            ee2.setTestName("PK200");
            ee2.setTestVersion("2.0");
            map.put(ee2, dt2);
            return map;
        }
    }
}
