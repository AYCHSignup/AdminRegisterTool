/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.user;

import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;

import java.util.ArrayList;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.User;
import org.opentestsystem.delivery.testreg.domain.User.RoleAssociation;
import org.opentestsystem.delivery.testreg.persistence.Verifier;
import org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.user.AbstractUserVerifier;
import org.springframework.validation.FieldError;

public class AbstractUserVerifierTest {

    Verifier<User> verifier;
    
    boolean verifierInitialized;
    boolean mockUserVerifierCalled;
    boolean verifierCleanupCalled;
    
    int numOfAssociations;
    
    User user;
    
    @Before
    public void before() {
        verifier = new MockUserVerifier();
        user = new User();
        List<RoleAssociation> roleAssList = new ArrayList<>();
        roleAssList.add(new RoleAssociation());
        roleAssList.add(new RoleAssociation());
        roleAssList.add(new RoleAssociation());
        user.setRoleAssociations(roleAssList);
    }
    
    @Test
    public void testVerifier() {
        verifier.verify(user);
        assertThat(verifierInitialized, is(true));
        assertThat(mockUserVerifierCalled, is(true));
        assertThat(verifierCleanupCalled, is(true));
        assertThat(numOfAssociations, is(1));
    }
    
    private class MockUserVerifier extends AbstractUserVerifier {
        
        public void initVerifier() {
            verifierInitialized = true;
        }

        @Override
        protected FieldError doVerify(RoleAssociation roleAssociation) {
            mockUserVerifierCalled = true;
            numOfAssociations++;
            return null;
        }
        
        protected List<FieldError> cleanupVerifier() {
            verifierCleanupCalled = true;
            return null;
        }
        
    }
}
