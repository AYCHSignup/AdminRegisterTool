/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.integration;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.collection.IsCollectionWithSize.hasSize;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertThat;
import static org.junit.Assert.assertTrue;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.DistrictEntity;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.InstitutionEntity;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.domain.Student.Gender;
import org.opentestsystem.delivery.testreg.domain.Student.GradeLevel;
import org.opentestsystem.delivery.testreg.domain.Student.PrimaryDisabilityType;
import org.opentestsystem.delivery.testreg.domain.Student.Title3ProgramType;
import org.opentestsystem.delivery.testreg.domain.StudentGroup;
import org.opentestsystem.delivery.testreg.domain.search.StudentGroupSearchRequest;
import org.opentestsystem.delivery.testreg.domain.search.StudentSearchRequest;
import org.opentestsystem.delivery.testreg.service.impl.StudentGroupServiceImpl;
import org.opentestsystem.shared.search.domain.SearchResponse;

import com.google.common.collect.Maps;

public class StudentGroupServiceTest extends AbstractPersistenceEmbeddedTest {

    @Resource(name = "studentGroupService")
    private StudentGroupServiceImpl<StudentGroup> studentGroupService;

    private Student student;

    private StudentGroup studentGroup;

    @Before
    public void init() {
        mongoTemplate.insert(new InstitutionEntity.Builder("10001", "MiddletonSchool", "CLIENT", "234", "000000", "WI", "ADD").build());
        mongoTemplate.insert(new DistrictEntity.Builder("101", "Middleton School district", "000000", "CLIENT", "2444", "WI", "ADD").build());

        student = new Student();
        student.setEntityId("123456");
        student.setStateAbbreviation("WI");
        student.setDistrictIdentifier("101");
        student.setInstitutionIdentifier("10001");
        student.setMiddleName("MS");
        student.setFirstName("Joe");
        student.setLastName("Smith");
        student.setBirthDate("2013-10-10");
        student.setExternalSsid("WI12345");
        student.setGradeLevelWhenAssessed(GradeLevel.EIGHTHGRADE);
        student.setGender(Gender.Male);
        student.setHispanicOrLatino("NO");
        student.setAmericanIndianOrAlaskaNative("NO");
        student.setAsian("NO");
        student.setLanguageCode("eng");
        student.setBlackOrAfricanAmerican("NO");
        student.setWhite("Yes");
        student.setNativeHawaiianOrPacificIsland("NO");
        student.setTwoOrMoreRaces("NO");
        student.setiDEAIndicator("NO");
        student.setLepStatus("NO");
        student.setSection504Status("NO");
        student.setDisadvantageStatus("YES");
        student.setTitle3ProgressStatus("PROFICIENT");
        student.setMigrantStatus("YES");
        student.setFirstEntryDateIntoUsSchool("2014-09-01");
        student.setLepEntryDate("2010-10-10");
        student.setLepExitDate("2010-10-20");
        student.setTitle3ProgramType(Title3ProgramType.DUALLANGUAGE);
        student.setPrimaryDisabilityType(PrimaryDisabilityType.AUT);
        mongoTemplate.insert(student);

        // create student group
        studentGroup = new StudentGroup();
        studentGroup.setStudentId(student.getEntityId());
        studentGroup.setStudentGroupName("student group 1");
        studentGroup.setInstitutionIdentifier("10001");
        studentGroup.setDistrictIdentifier("101");
        studentGroup.setOwnerEmail("asf@gmail.com");
        studentGroup.setStateAbbreviation("WI");

    }

    @Test
    public void testSave() {
        List<StudentGroup> studentGroups = new ArrayList<StudentGroup>();
        studentGroups.add(studentGroup);
        List<StudentGroup> savedStudentGroups = studentGroupService.saveDomainObjects(studentGroups);
        assertNotNull("saved student groups should be not be null", savedStudentGroups);
        assertTrue("saved student groups should not be empty", savedStudentGroups.size() == 1);
        String studentGroupId = savedStudentGroups.get(0).getId();
        assertNotNull("id on saved Item should be not be null", studentGroupId);
        assertNotNull("district mongo id should not be null", savedStudentGroups.get(0).getStudentIds().get(0));
    }

    @Test
    public void testUpdate() {
        StudentGroup sg = studentGroupService.saveDomainObject(studentGroup);
        String origGroupName = sg.getStudentGroupName();
        String studentGroupId = sg.getId();
        assertNotNull("id on saved Item should be not be null", studentGroupId);

        studentGroup.setStudentGroupName("Group2");
        StudentGroup usg = studentGroupService.updateDomainObject(studentGroup);
        String updatedStudentGroupId = usg.getId();

        assertThat(updatedStudentGroupId, is(studentGroupId));
        assertThat(usg.getStudentGroupName(), is("Group2"));
        assertThat(usg.getStudentGroupName(), is(org.hamcrest.CoreMatchers.not(origGroupName)));

    }

    @Test
    public void testFind() {
        studentGroupService.saveDomainObject(studentGroup);
        String studentGroupId = studentGroup.getId();
        assertNotNull("id on saved Item should be not be null", studentGroupId);
        StudentGroup readObj = studentGroupService.findById(studentGroupId, FormatType.STUDENTGROUP);
        assertEquals(readObj.getStudentGroupName(), "student group 1");
    }

    @Test
    public void testRemove() {
        studentGroupService.saveDomainObject(studentGroup);
        String studentGroupId = studentGroup.getId();
        assertNotNull("id on saved Item should be not be null", studentGroupId);
        studentGroupService.deleteDomainObject(studentGroupId, FormatType.STUDENTGROUP);
        StudentGroup readObj = studentGroupService.findById(studentGroupId, FormatType.STUDENTGROUP);
        assertNull("Item must be null", readObj);
    }

    @Test
    public void testSearchStudents() {
        StudentGroup savedStudent = studentGroupService.saveDomainObject(studentGroup);
        assertNotNull("Saved Item should be not be null", savedStudent);
        Map<String, String[]> requestMap = Maps.newHashMap();
        requestMap.put(StudentGroupSearchRequest.SEARCH_KEY_STATE_ABBR, new String[] { "WI" });
        StudentSearchRequest searchRequest = new StudentSearchRequest(requestMap);
        SearchResponse<StudentGroup> studentGroups = studentGroupService.searchDomainObjects(searchRequest, FormatType.STUDENTGROUP);
        assertNotNull("Student List cannot be null", studentGroups.getSearchResults());
    }

    @Test
    public void testFindGroupsForStudent() {
        studentGroupService.saveDomainObject(studentGroup);

        List<StudentGroup> studentGroups = studentGroupService.findGroupsForStudent(student.getEntityId(), student.getStateAbbreviation());
        assertNotNull(studentGroups);
        assertThat(studentGroups, hasSize(1));

        studentGroups = studentGroupService.findGroupsForStudent(student.getEntityId(), "BC");
        assertNotNull(studentGroups);
        assertThat(studentGroups, hasSize(0));
    }

}
