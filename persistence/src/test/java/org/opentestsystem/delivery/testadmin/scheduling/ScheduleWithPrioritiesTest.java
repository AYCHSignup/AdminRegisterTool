/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testadmin.scheduling;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.not;
import static org.hamcrest.Matchers.hasSize;
import static org.junit.Assert.assertThat;
import static org.springframework.data.mongodb.core.query.Criteria.where;

import java.util.Iterator;
import java.util.TreeSet;

import org.joda.time.DateTime;
import org.joda.time.DateTimeUtils;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testadmin.domain.Affinity;
import org.opentestsystem.delivery.testadmin.domain.Affinity.AffinityRule;
import org.opentestsystem.delivery.testadmin.domain.Affinity.AffinityType;
import org.opentestsystem.delivery.testadmin.domain.schedule.Schedule;
import org.opentestsystem.delivery.testadmin.domain.schedule.ScheduledSeat;
import org.opentestsystem.delivery.testadmin.domain.schedule.ScheduledTimeSlot;
import org.opentestsystem.delivery.testreg.domain.EligibleStudent;
import org.opentestsystem.delivery.testreg.integration.AbstractPersistenceEmbeddedTest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.query.Query;

import com.google.common.collect.Lists;

public class ScheduleWithPrioritiesTest extends AbstractPersistenceEmbeddedTest {

    @Autowired
    private Scheduler scheduler;

    @Before
    public void setup() {
        DateTimeUtils.setCurrentMillisFixed(new DateTime(2014, 8, 25, 0, 0).getMillis());
        DbDumpImporter.loadDefaultBsonDumps(mongoTemplate);
    }

    @SuppressWarnings("unused")
    @Test
    public void testScheduleWideStrictSubjectAffinity() {
        Schedule schedule = new Schedule();
        schedule.setScheduleName("test-schedule");
        schedule.setStartDate(new DateTime(2014, 9, 1, 0, 0));
        schedule.setEndDate(new DateTime(2014, 9, 5, 0, 0));
        schedule.setInstitutionIdentifier("550852000932");
        schedule.setInstitutionId("53f027ec8f44c7080a67e070");

        schedule.setAffinities(Lists.newArrayList(new Affinity(AffinityRule.STRICT, "A10", AffinityType.SUBJECT)));

        Schedule createdSchedule = scheduler.createSchedule(schedule);

        int numStudentsForSubject = numberOfStudentsEligibleForSubject("A10");
        // should be 250 (all students in db dump)
        assertThat(numStudentsForSubject, is(250));

        // this translates to the first 10 time slots
        // there are 15 total time slots that can be scheduled for this time frame
        // first 10 time slots is days 1 - 3 plus the first slot on day 4

        assertThat(createdSchedule.getScheduledDays(), hasSize(5));

        int runningStudentCount = 0;

        // day 1

        TreeSet<ScheduledTimeSlot> slots = createdSchedule.getScheduledDays().get(0).getFacilities().get(0)
                .getTimeSlots();
        Iterator<ScheduledTimeSlot> slotItr = slots.iterator();

        while (slotItr.hasNext()) {
            ScheduledTimeSlot slot = slotItr.next();

            assertThat(slot.isStrictAffinityScheduled(), is(true));
            assertThat(slot.getAffinitiesScheduled(), hasSize(1));

            Iterator<ScheduledSeat> seatItr = slot.getSeats().iterator();

            while (seatItr.hasNext()) {
                ScheduledSeat seat = seatItr.next();

                assertThat(seat.getAssessment().getSubjectCode(), is("A10"));

            }

        }

        // day 2

        slots = createdSchedule.getScheduledDays().get(1).getFacilities().get(0).getTimeSlots();
        slotItr = slots.iterator();

        while (slotItr.hasNext()) {
            ScheduledTimeSlot slot = slotItr.next();

            assertThat(slot.isStrictAffinityScheduled(), is(true));
            assertThat(slot.getAffinitiesScheduled(), hasSize(1));

            Iterator<ScheduledSeat> seatItr = slot.getSeats().iterator();

            while (seatItr.hasNext()) {
                ScheduledSeat seat = seatItr.next();

                assertThat(seat.getAssessment().getSubjectCode(), is("A10"));

            }

        }

        // day 3

        slots = createdSchedule.getScheduledDays().get(2).getFacilities().get(0).getTimeSlots();
        slotItr = slots.iterator();

        while (slotItr.hasNext()) {
            ScheduledTimeSlot slot = slotItr.next();

            assertThat(slot.isStrictAffinityScheduled(), is(true));
            assertThat(slot.getAffinitiesScheduled(), hasSize(1));

            Iterator<ScheduledSeat> seatItr = slot.getSeats().iterator();

            while (seatItr.hasNext()) {
                ScheduledSeat seat = seatItr.next();

                assertThat(seat.getAssessment().getSubjectCode(), is("A10"));

            }

        }

        // day 4, slot 1

        slots = createdSchedule.getScheduledDays().get(3).getFacilities().get(0).getTimeSlots();
        slotItr = slots.iterator();

        ScheduledTimeSlot slot = slotItr.next();

        assertThat(slot.isStrictAffinityScheduled(), is(true));
        assertThat(slot.getAffinitiesScheduled(), hasSize(1));

        Iterator<ScheduledSeat> seatItr = slot.getSeats().iterator();

        while (seatItr.hasNext()) {
            ScheduledSeat seat = seatItr.next();

            assertThat(seat.getAssessment().getSubjectCode(), is("A10"));

        }

        // day 4 slot 2 should be a different subject

        slot = slotItr.next();

        assertThat(slot.isStrictAffinityScheduled(), is(false));
        assertThat(slot.getAffinitiesScheduled(), hasSize(0));

        seatItr = slot.getSeats().iterator();

        while (seatItr.hasNext()) {
            ScheduledSeat seat = seatItr.next();

            assertThat(seat.getAssessment().getSubjectCode(), not("A10"));

        }

    }

    private int numberOfStudentsEligibleForSubject(final String subject) {

        Query query = new Query();
        query.addCriteria(where("assessments.subjectCode").is(subject));

        return (int) mongoTemplate.count(query, EligibleStudent.class);

    }
}
