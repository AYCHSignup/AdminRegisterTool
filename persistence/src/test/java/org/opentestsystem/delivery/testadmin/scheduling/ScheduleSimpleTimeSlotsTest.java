/*
Educational Online Test Delivery System Copyright (c) 2013 American Institutes for Research

Distributed under the AIR Open Source License, Version 1.0 See accompanying file AIR-License-1_0.txt or at
http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 */

package org.opentestsystem.delivery.testadmin.scheduling;

import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.Matchers.hasSize;
import static org.junit.Assert.assertThat;

import org.joda.time.DateTime;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testadmin.domain.Availability;
import org.opentestsystem.delivery.testadmin.domain.Facility;
import org.opentestsystem.delivery.testadmin.domain.FacilityAvailability;
import org.opentestsystem.delivery.testadmin.domain.FacilityAvailability.FacilityTimeSlot;
import org.opentestsystem.delivery.testadmin.domain.Proctor;
import org.opentestsystem.delivery.testadmin.domain.Proctor.AvailabilityWindow;
import org.opentestsystem.delivery.testadmin.domain.ProctorRole;
import org.opentestsystem.delivery.testadmin.domain.TimeSlot;
import org.opentestsystem.delivery.testadmin.domain.schedule.Schedule;
import org.opentestsystem.delivery.testadmin.persistence.FacilityAvailabilityRepository;
import org.opentestsystem.delivery.testadmin.persistence.FacilityRepository;
import org.opentestsystem.delivery.testadmin.persistence.ProctorRepository;
import org.opentestsystem.delivery.testadmin.persistence.ProctorRoleRepository;
import org.opentestsystem.delivery.testreg.domain.Assessment;
import org.opentestsystem.delivery.testreg.domain.Assessment.AssessmentType;
import org.opentestsystem.delivery.testreg.domain.Assessment.EligibilityType;
import org.opentestsystem.delivery.testreg.domain.Assessment.TestWindow;
import org.opentestsystem.delivery.testreg.domain.ClientEntity;
import org.opentestsystem.delivery.testreg.domain.DistrictEntity;
import org.opentestsystem.delivery.testreg.domain.EligibleStudent;
import org.opentestsystem.delivery.testreg.domain.HierarchyLevel;
import org.opentestsystem.delivery.testreg.domain.ImplicitEligibilityRule;
import org.opentestsystem.delivery.testreg.domain.ImplicitEligibilityRule.RuleType;
import org.opentestsystem.delivery.testreg.domain.InstitutionEntity;
import org.opentestsystem.delivery.testreg.domain.StateEntity;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.domain.Student.Gender;
import org.opentestsystem.delivery.testreg.domain.Student.GradeLevel;
import org.opentestsystem.delivery.testreg.domain.Student.Section504Status;
import org.opentestsystem.delivery.testreg.domain.User;
import org.opentestsystem.delivery.testreg.domain.User.RoleAssociation;
import org.opentestsystem.delivery.testreg.integration.AbstractPersistenceEmbeddedTest;
import org.opentestsystem.delivery.testreg.persistence.EligibleStudentRepository;
import org.opentestsystem.delivery.testreg.service.TestRegPersister;
import org.springframework.beans.factory.annotation.Autowired;

public class ScheduleSimpleTimeSlotsTest extends AbstractPersistenceEmbeddedTest {

    // student
    private Student student1;

    // assessment
    private Assessment assessment1;

    // client
    private ClientEntity client1;

    // state
    private StateEntity state1;

    // district
    private DistrictEntity district1;

    // institution
    private InstitutionEntity institution1;

    // user w/proctor data
    private User user1;

    private Proctor proctor1;

    // facility
    private Facility facility1;

    // facility availability
    private FacilityAvailability facilityAvailability1;

    // eligible student
    private EligibleStudent eligStudent1;

    private ProctorRole proctorRole1;

    @Autowired
    private TestRegPersister persister;

    @Autowired
    private EligibleStudentRepository eligStudentRepository;

    @Autowired
    private ProctorRoleRepository proctorRoleRepository;

    @Autowired
    private ProctorRepository proctorRepository;

    @Autowired
    private FacilityRepository facilityRepository;

    @Autowired
    private FacilityAvailabilityRepository facilityAvailabilityRepository;

    @Autowired
    private Scheduler scheduler;

    private static DateTime today = new DateTime();

    private static DateTime todayPlus5 = today.plusDays(5);
    private static DateTime todayPlus7 = today.plusDays(7);
    @SuppressWarnings("unused")
    private static DateTime todayPlus10 = today.plusDays(10);
    private static DateTime todayPlus20 = today.plusDays(20);

    private static DateTime nineAm = today.withTime(9, 0, 0, 0);
    private static DateTime elevenAm = today.withTime(11, 0, 0, 0);
    private static DateTime onePm = today.withTime(13, 0, 0, 0);
    private static DateTime threePm = today.withTime(15, 0, 0, 0);

    @Before
    public void setup() {

        client1 = new ClientEntity();
        client1.setEntityId("1");
        client1.setEntityName("test client");
        client1.setShareStudentIdentity(true);
        client1.setSystemId("1");
        client1.setTimeZone("America/Chicago");

        client1 = persister.saveDomainObject(client1);

        state1 = new StateEntity();
        state1.setEntityId("WI");
        state1.setEntityName("Wisconsin");
        state1.setParentEntityId("1");
        state1.setParentEntityType(HierarchyLevel.CLIENT);
        state1.setParentId(client1.getId());

        state1 = persister.saveDomainObject(state1);

        district1 = new DistrictEntity();
        district1.setEntityId("1");
        district1.setEntityName("Oregon School District");
        district1.setNationwideIdentifier("1000");
        district1.setParentEntityId("WI");
        district1.setParentEntityType(HierarchyLevel.STATE);
        district1.setParentId(state1.getId());
        district1.setStateAbbreviation("WI");

        district1 = persister.saveDomainObject(district1);

        institution1 = new InstitutionEntity();
        institution1.setEntityId("1");
        institution1.setEntityName("Oregon Middle School");
        institution1.setNationwideIdentifier("10000001");
        institution1.setParentEntityId("1");
        institution1.setParentEntityType(HierarchyLevel.DISTRICT);
        institution1.setParentId(district1.getId());
        institution1.setStateAbbreviation("WI");

        institution1 = persister.saveDomainObject(institution1);

        student1 = new Student();
        student1.setAsian("YES");
        student1.setBirthDate(new DateTime(2000, 9, 15, 0, 0));
        student1.setDistrictEntityMongoId(district1.getId()); // needs to match the DistrictEntity
        student1.setDistrictIdentifier("1"); // needs to match the DistrictEntity
        student1.setEntityId("111111111");
        student1.setExternalSsid("111111111");
        student1.setFirstName("Bob");
        student1.setGender(Gender.Male);
        student1.setGradeLevelWhenAssessed(GradeLevel.EIGHTHGRADE);
        student1.setInstitutionEntityMongoId(institution1.getId()); // needs to match the InstitutionEntity
        student1.setInstitutionIdentifier("1"); // needs to match the InstitutionEntity
        student1.setLanguageCode("eng");
        student1.setLastName("Smith");
        student1.setStateAbbreviation("WI");
        student1.setTwoOrMoreRaces("NO");
        student1.setAmericanIndianOrAlaskaNative("NO");
        student1.setLepStatus("NO");
        student1.setBlackOrAfricanAmerican("NO");
        student1.setiDEAIndicator("NO");
        student1.setSection504Status(Section504Status.NO);
        student1.setHispanicOrLatino("NO");
        student1.setWhite("NO");
        student1.setNativeHawaiianOrPacificIsland("NO");
        student1.setDisadvantageStatus("NO");

        student1 = persister.saveDomainObject(student1);

        assessment1 = new Assessment();
        assessment1.setAcademicYear("2014");
        assessment1.setEligibilityType(EligibilityType.IMPLICIT);
        assessment1.setEntityId("assessment1");
        assessment1.setGrade("08");
        assessment1.setSourceTsb("testTsb");
        assessment1.setSubjectCode("MTH");
        assessment1.setTenantId("1");
        assessment1.setTestLabel("testLabel");
        assessment1.setTestName("assessment1-test");
        assessment1.setType("SUMMATIVE");
        assessment1.setVersion("1.0");
        assessment1.setNumGlobalOpportunities(1);

        // test window
        TestWindow window1 = new TestWindow(); // new TestWindow(new DateTime(2014, 8, 1, 0, 0), new DateTime(2014, 8,
                                               // 30, 0, 0), 0);
        window1.setBeginWindow(today);
        window1.setEndWindow(todayPlus20);

        assessment1.setTestWindow(new TestWindow[] { window1 });

        // implicit rule
        ImplicitEligibilityRule rule1 = new ImplicitEligibilityRule("asian", "Y", RuleType.ENABLER);

        assessment1.setImplicitEligibilityRules(new ImplicitEligibilityRule[] { rule1 });

        assessment1 = persister.saveDomainObject(assessment1);

        eligStudent1 = new EligibleStudent(student1);
        eligStudent1.setAssessments(com.google.common.collect.Sets.newHashSet(assessment1));

        eligStudent1 = eligStudentRepository.save(eligStudent1);

        user1 = new User();
        user1.setEmail("test@example.com");
        user1.setFirstName("John");
        user1.setLastName("Smith");

        RoleAssociation roleAssoc1 = new RoleAssociation();
        roleAssoc1.setRole("testrole");
        roleAssoc1.setAssociatedEntityId("WI");
        roleAssoc1.setAssociatedEntityMongoId(state1.getId());
        roleAssoc1.setLevel(HierarchyLevel.STATE);
        roleAssoc1.setStateAbbreviation("WI");

        user1.addRoleAssociation(roleAssoc1);

        user1 = persister.saveDomainObject(user1);

        proctorRole1 = new ProctorRole();
        proctorRole1.setName("testrole");
        proctorRole1.setAssessmentTypes(new AssessmentType[] { AssessmentType.FORMATIVE, AssessmentType.INTERIM,
                AssessmentType.SUMMATIVE });

        proctorRole1 = proctorRoleRepository.save(proctorRole1);

        proctor1 = new Proctor();
        proctor1.setUser(user1);
        proctor1.addTimePeriods(com.google.common.collect.Lists.newArrayList(new AvailabilityWindow(today, todayPlus20,
                Availability.AVAILABLE)));

        proctor1 = proctorRepository.save(proctor1);

        facility1 = new Facility();
        facility1.setFacilityName("testFacility");
        facility1.setInstitutionId(institution1.getId());
        facility1.setInstitutionIdentifier("1");
        facility1.setLocation("testLocation");

        Facility.SeatConfiguration seatConfig1 = new Facility.SeatConfiguration();
        seatConfig1.setNumberOfSeats(5);
        seatConfig1.setTestPlatform("iPad");

        facility1.setSeatConfigurations(com.google.common.collect.Lists.newArrayList(seatConfig1));

        facility1 = facilityRepository.save(facility1);

        facilityAvailability1 = new FacilityAvailability();
        facilityAvailability1.setFacilityId(facility1.getId());
        facilityAvailability1.setFacilityName(facility1.getFacilityName());
        facilityAvailability1.setFromDate(today);
        facilityAvailability1.setInstitutionId(facility1.getInstitutionId());
        facilityAvailability1.setInstitutionIdentifier(facility1.getInstitutionIdentifier());
        facilityAvailability1.setStatus(Availability.AVAILABLE);
        facilityAvailability1.setToDate(todayPlus20);

        FacilityTimeSlot fts1 = new FacilityTimeSlot();
        fts1.setSeatConfigurations(com.google.common.collect.Lists.newArrayList(seatConfig1));

        TimeSlot ts1 = new TimeSlot();
        ts1.setStartTime(nineAm);
        ts1.setEndTime(elevenAm);

        fts1.setTimeSlot(ts1);

        FacilityTimeSlot fts2 = new FacilityTimeSlot();
        fts2.setSeatConfigurations(com.google.common.collect.Lists.newArrayList(seatConfig1));

        TimeSlot ts2 = new TimeSlot();
        ts2.setStartTime(onePm);
        ts2.setEndTime(threePm);

        fts2.setTimeSlot(ts2);

        facilityAvailability1.setFacilityTimes(com.google.common.collect.Lists.newArrayList(fts1, fts2));

        facilityAvailability1 = facilityAvailabilityRepository.save(facilityAvailability1);

    }

    @Test
    public void testMultipleTestSlotsWithNulls() {

        Schedule schedule = new Schedule();
        schedule.setScheduleName("test-schedule");
        schedule.setInstitutionIdentifier("1");
        schedule.setInstitutionId(institution1.getId());
        schedule.setStartDate(todayPlus5);
        schedule.setEndDate(todayPlus7);
        schedule.setDoNotScheduleWeekends(false);

        schedule = scheduler.createSchedule(schedule);

        assertThat(schedule, notNullValue());
        assertThat(schedule.getOrderedTimeSlots(false), hasSize(6));
        assertThat(schedule.getScheduledDays(), hasSize(3));

    }

}
