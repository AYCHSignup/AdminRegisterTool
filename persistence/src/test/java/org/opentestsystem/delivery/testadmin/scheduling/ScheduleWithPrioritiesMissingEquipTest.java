/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testadmin.scheduling;

import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;

import java.util.Iterator;
import java.util.TreeSet;

import org.joda.time.DateTime;
import org.joda.time.DateTimeUtils;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testadmin.domain.Affinity;
import org.opentestsystem.delivery.testadmin.domain.Affinity.AffinityRule;
import org.opentestsystem.delivery.testadmin.domain.Affinity.AffinityType;
import org.opentestsystem.delivery.testadmin.domain.schedule.Schedule;
import org.opentestsystem.delivery.testadmin.domain.schedule.ScheduledSeat;
import org.opentestsystem.delivery.testadmin.domain.schedule.ScheduledTimeSlot;
import org.opentestsystem.delivery.testreg.integration.AbstractPersistenceEmbeddedTest;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.collect.Lists;

public class ScheduleWithPrioritiesMissingEquipTest extends AbstractPersistenceEmbeddedTest {

    @Autowired
    private Scheduler scheduler;

    @Before
    public void setup() {
        DateTimeUtils.setCurrentMillisFixed(new DateTime(2014, 8, 25, 0, 0).getMillis());
        DbDumpImporter.loadDefaultBsonDumps(mongoTemplate);
    }

    @Test
    public void testScheduleWideStrictSubjectAffinityMissingEquip() {
        Schedule schedule = new Schedule();
        schedule.setScheduleName("test-schedule");
        schedule.setStartDate(new DateTime(2014, 9, 1, 0, 0));
        schedule.setEndDate(new DateTime(2014, 9, 5, 0, 0));
        schedule.setInstitutionIdentifier("550852000932");
        schedule.setInstitutionId("53f027ec8f44c7080a67e070");

        schedule.setAffinities(Lists.newArrayList(new Affinity(AffinityRule.STRICT, "A10", AffinityType.SUBJECT)));

        Schedule createdSchedule = scheduler.createSchedule(schedule);

        TreeSet<ScheduledTimeSlot> slots = createdSchedule.getScheduledDays().get(0).getFacilities().get(0)
                .getTimeSlots();
        Iterator<ScheduledTimeSlot> slotItr = slots.iterator();

        while (slotItr.hasNext()) {
            ScheduledTimeSlot slot = slotItr.next();

            Iterator<ScheduledSeat> seatItr = slot.getSeats().iterator();

            // two seats should have accessibility equipment

            int seatsWithEquip = 0;

            while (seatItr.hasNext()) {
                ScheduledSeat seat = seatItr.next();

                if (seat.getAccessibilityEquipmentObjs() != null && seat.getAccessibilityEquipmentObjs().size() > 0) {
                    seatsWithEquip++;
                }

            }

            assertThat(seatsWithEquip, is(2));

        }

    }

    @Test
    public void testNoScheduleWideAffinityMissingEquip() {
        Schedule schedule = new Schedule();
        schedule.setScheduleName("test-schedule");
        schedule.setStartDate(new DateTime(2014, 9, 1, 0, 0));
        schedule.setEndDate(new DateTime(2014, 9, 5, 0, 0));
        schedule.setInstitutionIdentifier("550852000932");
        schedule.setInstitutionId("53f027ec8f44c7080a67e070");

        Schedule createdSchedule = scheduler.createSchedule(schedule);

        TreeSet<ScheduledTimeSlot> slots = createdSchedule.getScheduledDays().get(0).getFacilities().get(0)
                .getTimeSlots();
        Iterator<ScheduledTimeSlot> slotItr = slots.iterator();

        while (slotItr.hasNext()) {
            ScheduledTimeSlot slot = slotItr.next();

            Iterator<ScheduledSeat> seatItr = slot.getSeats().iterator();

            // two seats should have accessibility equipment

            int seatsWithEquip = 0;

            while (seatItr.hasNext()) {
                ScheduledSeat seat = seatItr.next();

                if (seat.getAccessibilityEquipmentObjs() != null && seat.getAccessibilityEquipmentObjs().size() > 0) {
                    seatsWithEquip++;
                }

            }

            assertThat(seatsWithEquip, is(2));

        }

    }

}
