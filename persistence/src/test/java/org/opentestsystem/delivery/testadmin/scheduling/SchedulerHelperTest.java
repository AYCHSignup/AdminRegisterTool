/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testadmin.scheduling;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.Matchers.hasSize;
import static org.junit.Assert.assertThat;
import static org.opentestsystem.delivery.testadmin.domain.Affinity.AffinityRule.NONSTRICT;
import static org.opentestsystem.delivery.testadmin.domain.Affinity.AffinityType.ASSESSMENT;
import static org.opentestsystem.delivery.testadmin.domain.Affinity.AffinityType.GRADE;
import static org.opentestsystem.delivery.testadmin.domain.Affinity.AffinityType.SUBJECT;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

import org.joda.time.DateTime;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testadmin.domain.Affinity;
import org.opentestsystem.delivery.testadmin.domain.Affinity.AffinityRule;
import org.opentestsystem.delivery.testadmin.domain.Facility;
import org.opentestsystem.delivery.testadmin.domain.Facility.SeatConfiguration;
import org.opentestsystem.delivery.testadmin.domain.Proctor;
import org.opentestsystem.delivery.testadmin.domain.Seat;
import org.opentestsystem.delivery.testadmin.domain.TimeSlot;
import org.opentestsystem.delivery.testadmin.domain.schedule.Schedule;
import org.opentestsystem.delivery.testadmin.domain.schedule.ScheduledDay;
import org.opentestsystem.delivery.testadmin.domain.schedule.ScheduledFacility;
import org.opentestsystem.delivery.testadmin.domain.schedule.ScheduledSeat;
import org.opentestsystem.delivery.testadmin.domain.schedule.ScheduledStudent;
import org.opentestsystem.delivery.testadmin.domain.schedule.ScheduledTimeSlot;
import org.opentestsystem.delivery.testreg.domain.Assessment;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.springframework.test.util.ReflectionTestUtils;

import com.google.common.collect.HashMultimap;

public class SchedulerHelperTest {

    private SchedulerHelper helper = new SchedulerHelper();

    private Schedule schedule;

    private Facility facility1;

    private SeatConfiguration seatConfig1;
    private SeatConfiguration seatConfig2;

    private ScheduledFacility scheduledFacility;

    private Proctor p1;
    private Proctor p2;
    private Proctor p3;

    private TimeSlot ts1;
    private TimeSlot ts2;
    private TimeSlot ts3;

    private ScheduledTimeSlot sts1;
    private ScheduledTimeSlot sts2;
    private ScheduledTimeSlot sts3;

    private List<Assessment> assessments;
    private Assessment assessment1;
    private Assessment assessment2;
    private Assessment assessment3;

    private Map<String, ScheduledStudent> studentsScheduled;
    private ScheduledStudent scheduledStudent1;
    private ScheduledStudent scheduledStudent2;
    private ScheduledStudent scheduledStudent3;

    private Student student1;
    private Student student2;
    private Student student3;

    HashMultimap<String, Assessment> gradesToAssessments;

    @Before
    public void setup() {

        ReflectionTestUtils.setField(helper, "scheduleTestStatusCreator", new MockSchedulerTestStatusCreator());
        ReflectionTestUtils.setField(helper, "accessibilityEquipmentService", new MockAccessibilityEquipmentService());

        // create proctors
        p1 = new Proctor();
        p1.setId("P1");

        p2 = new Proctor();
        p2.setId("P2");

        p3 = new Proctor();
        p3.setId("P3");

        // create Assessment
        assessment1 = new Assessment();
        assessment1.setId("A1");
        assessment1.setSubjectCode("DN");
        assessment1.setGrade("08");
        assessment1.setTestName("A1");

        assessment2 = new Assessment();
        assessment2.setId("A2");
        assessment2.setSubjectCode("MATH");
        assessment2.setGrade("08");
        assessment2.setTestName("A2");

        assessment3 = new Assessment();
        assessment3.setId("A3");
        assessment3.setSubjectCode("DN");
        assessment3.setGrade("05");
        assessment3.setTestName("A3");

        assessments = new ArrayList<Assessment>();
        assessments.add(assessment1);
        assessments.add(assessment2);
        assessments.add(assessment3);

        scheduledStudent1 = new ScheduledStudent();
        scheduledStudent2 = new ScheduledStudent();
        scheduledStudent3 = new ScheduledStudent();

        Map<Assessment, Boolean> sassessments1 = new HashMap<Assessment, Boolean>();
        sassessments1.put(assessment1, Boolean.FALSE);
        sassessments1.put(assessment2, Boolean.FALSE);

        Map<Assessment, Boolean> sassessments2 = new HashMap<Assessment, Boolean>();
        sassessments2.put(assessment2, Boolean.FALSE);

        Map<Assessment, Boolean> sassessments3 = new HashMap<Assessment, Boolean>();
        sassessments3.put(assessment3, Boolean.FALSE);

        student1 = new Student();
        student1.setEntityId("S1");
        student1.setFirstName("Chandra");
        student1.setGradeLevelWhenAssessed("08");

        student2 = new Student();
        student2.setEntityId("S2");
        student2.setFirstName("Vijay");
        student2.setGradeLevelWhenAssessed("08");

        student3 = new Student();
        student3.setEntityId("S3");
        student3.setFirstName("Scott");
        student3.setGradeLevelWhenAssessed("05");

        scheduledStudent1.setScheduledAssessments(sassessments1);
        scheduledStudent1.setStudent(student1);
        scheduledStudent2.setScheduledAssessments(sassessments2);
        scheduledStudent2.setStudent(student2);
        scheduledStudent3.setScheduledAssessments(sassessments3);
        scheduledStudent3.setStudent(student3);

        studentsScheduled = new HashMap<String, ScheduledStudent>();
        studentsScheduled.put("S1", scheduledStudent1);
        studentsScheduled.put("S2", scheduledStudent2);
        studentsScheduled.put("S3", scheduledStudent3);

        gradesToAssessments = createGradesToAssessmentsMap(studentsScheduled);
        // create scheduled facilities
        facility1 = new Facility();
        facility1.setId("1");
        facility1.setFacilityName("test facility");
        facility1.setInstitutionIdentifier("INS1");
        facility1.setInstitutionId("99");
        facility1.setLocation("east wing");

        seatConfig1 = new SeatConfiguration();
        seatConfig1.setNumberOfSeats(2);
        seatConfig1.setTestPlatform("DOS 5.1");

        seatConfig2 = new SeatConfiguration();
        seatConfig2.setNumberOfSeats(3);
        seatConfig2.setTestPlatform("Windows 3.1");
        seatConfig2.setAccessibilityEquipments(com.google.common.collect.Lists.newArrayList("Braille Reader",
                "Audio Reader Software"));
        facility1.setSeatConfigurations(com.google.common.collect.Lists.newArrayList(seatConfig1, seatConfig2));

        // set affinity for assessment
        ts1 = new TimeSlot();
        ts1.setStartTime(new DateTime(2014, 01, 01, 17, 0));
        ts1.setEndTime(new DateTime(2014, 01, 01, 18, 0));
        ts1.setAffinities(Arrays.asList(new Affinity[] { new Affinity(NONSTRICT, "A1", ASSESSMENT) }));

        // set affinity for subject
        ts2 = new TimeSlot();
        ts2.setStartTime(new DateTime(2014, 01, 01, 19, 0));
        ts2.setEndTime(new DateTime(2014, 01, 01, 20, 0));
        ts2.setAffinities(Arrays.asList(new Affinity[] { new Affinity(NONSTRICT, "MATH", SUBJECT) }));

        // set affinity for grade
        ts3 = new TimeSlot();
        ts3.setStartTime(new DateTime(2014, 01, 01, 21, 0));
        ts3.setEndTime(new DateTime(2014, 01, 01, 22, 0));
        ts3.setAffinities(Arrays.asList(new Affinity[] { new Affinity(NONSTRICT, "05", GRADE) }));

        sts1 = new ScheduledTimeSlot(ts1);
        sts2 = new ScheduledTimeSlot(ts2);
        sts3 = new ScheduledTimeSlot(ts3);

        // convert seats into scheduled seats
        Set<ScheduledSeat> ss1 = new HashSet<ScheduledSeat>();
        Set<ScheduledSeat> ss2 = new HashSet<ScheduledSeat>();
        Set<ScheduledSeat> ss3 = new HashSet<ScheduledSeat>();

        for (Seat seat : facility1.getSeats()) {
            ss1.add(new ScheduledSeat(seat));
            ss2.add(new ScheduledSeat(seat));
            ss3.add(new ScheduledSeat(seat));
        }

        sts1.setSeats(ss1);
        sts1.setProctor(p1);
        sts2.setSeats(ss2);
        sts2.setProctor(p2);
        sts3.setSeats(ss3);
        sts3.setProctor(p3);
        TreeSet<ScheduledTimeSlot> sts = new TreeSet<ScheduledTimeSlot>();
        sts.add(sts1);
        sts.add(sts2);
        sts.add(sts3);

        List<ScheduledDay> days = new ArrayList<ScheduledDay>();
        ScheduledDay scheduledDay = new ScheduledDay();
        scheduledDay.setDay(new DateTime(2014, 6, 1, 0, 0));

        scheduledFacility = new ScheduledFacility(facility1);
        scheduledFacility.setTimeSlots(sts);
        scheduledDay.setFacilities(Arrays.asList(new ScheduledFacility[] { scheduledFacility }));
        days.add(scheduledDay);

        // create schedule
        schedule = new Schedule();
        schedule.setStartDate(new DateTime(2014, 6, 1, 0, 0));
        schedule.setEndDate(new DateTime(2014, 6, 1, 0, 0));
        schedule.setInstitutionIdentifier("INS1");
        schedule.setScheduledDays(days);

        Affinity assessment = new Affinity(AffinityRule.STRICT, "A1", ASSESSMENT);
        Affinity subject = new Affinity(AffinityRule.STRICT, "MATH", SUBJECT);
        Affinity grade = new Affinity(AffinityRule.STRICT, "05", GRADE);
        schedule.setAffinities(Arrays.asList(new Affinity[] { assessment, subject, grade }));

        schedule.generateOrderedTimeSlots();

    }

    @Test
    public void testTimeSlotAffinities() {
        helper.allocateTimeslotAffinities(schedule, assessments, studentsScheduled, gradesToAssessments, false);
        // assert asignments
        for (ScheduledDay day : schedule.getScheduledDays()) {
            for (ScheduledFacility facility : day.getFacilities()) {
                for (ScheduledTimeSlot timeslot : facility.getTimeSlots()) {
                    if (timeslot.getProctor().getId().equals("P1")) {
                        assertThat(timeslot.getAssignedStudents(), notNullValue());
                        assertThat(timeslot.getAssignedStudents(), hasSize(1));
                        assertThat(timeslot.getAssignedStudents().iterator().next(), equalTo("S1"));
                        assertThat(timeslot.getNumberOfAssignedSeats(), equalTo(1));
                    }
                    if (timeslot.getProctor().getId().equals("P2")) {
                        assertThat(timeslot.getAssignedStudents(), notNullValue());
                        assertThat(timeslot.getAssignedStudents(), hasSize(2));
                        assertThat(timeslot.getAssignedStudents().iterator().next(), equalTo("S2"));
                        assertThat(timeslot.getNumberOfAssignedSeats(), equalTo(2));
                    }
                    if (timeslot.getProctor().getId().equals("P3")) {
                        assertThat(timeslot.getAssignedStudents(), notNullValue());
                        assertThat(timeslot.getAssignedStudents(), hasSize(1));
                        assertThat(timeslot.getAssignedStudents().iterator().next(), equalTo("S3"));
                        assertThat(timeslot.getNumberOfAssignedSeats(), equalTo(1));
                    }
                }
            }
        }
    }

    @Test
    public void testSchedulePriorities() {
        helper.allocateWithPriorities(schedule, assessments, studentsScheduled, gradesToAssessments, null, false);
        // assert asignments
        for (ScheduledDay day : schedule.getScheduledDays()) {
            for (ScheduledFacility facility : day.getFacilities()) {
                for (ScheduledTimeSlot timeslot : facility.getTimeSlots()) {

                    if (timeslot.getProctor().getId().equals("P1")) {
                        assertThat(timeslot.getAssignedStudents(), notNullValue());
                        assertThat(timeslot.getAssignedStudents(), hasSize(1));
                        assertThat(timeslot.getAssignedStudents().contains("S1"), equalTo(Boolean.TRUE));
                        assertThat(timeslot.getNumberOfAssignedSeats(), equalTo(1));
                        // student 1
                    }

                    if (timeslot.getProctor().getId().equals("P2")) {
                        assertThat(timeslot.getAssignedStudents(), hasSize(2));
                        assertThat(timeslot.getNumberOfAssignedSeats(), equalTo(2));
                        assertThat(timeslot.getAssignedStudents().contains("S1"), equalTo(Boolean.TRUE));
                        assertThat(timeslot.getAssignedStudents().contains("S2"), equalTo(Boolean.TRUE));
                        // student 1 and 2
                    }

                    if (timeslot.getProctor().getId().equals("P3")) {
                        assertThat(timeslot.getAssignedStudents(), hasSize(1));
                        assertThat(timeslot.getNumberOfAssignedSeats(), equalTo(1));
                        assertThat(timeslot.getAssignedStudents().contains("S3"), equalTo(Boolean.TRUE));
                        // student 3
                    }
                }
            }

        }
    }

    private HashMultimap<String, Assessment> createGradesToAssessmentsMap(
            final Map<String, ScheduledStudent> studentsScheduled) {

        HashMultimap<String, Assessment> gradesToAssessments = HashMultimap.create();

        for (ScheduledStudent scheduledStudent : studentsScheduled.values()) {
            String grade = scheduledStudent.getStudent().getGradeLevelWhenAssessed().toString();

            for (Assessment assessment : scheduledStudent.getScheduledAssessments().keySet()) {
                gradesToAssessments.put(grade, assessment);
            }
        }

        return gradesToAssessments;
    }
    
    
}
