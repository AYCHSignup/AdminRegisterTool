/*
Educational Online Test Delivery System Copyright (c) 2013 American Institutes for Research

Distributed under the AIR Open Source License, Version 1.0 See accompanying file AIR-License-1_0.txt or at
http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 */

package org.opentestsystem.delivery.testadmin.scheduling;

import static org.hamcrest.Matchers.hasSize;
import static org.junit.Assert.assertThat;

import java.util.ArrayList;
import java.util.List;

import org.joda.time.DateTime;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.Assessment;
import org.opentestsystem.delivery.testreg.domain.Assessment.TestWindow;
import org.opentestsystem.delivery.testreg.domain.EligibleStudent;
import org.opentestsystem.delivery.testreg.domain.Student;


import com.google.common.collect.Lists;

public class SchedulerHelperFindAssessmentTest {

    private Student student1;
    private Student student2;

    // all these assessments have a single test window of june 1, 2014 to june 30, 2014
    private Assessment assess1;
    private Assessment assess2;
    private Assessment assess3;

    private static final String TENANT_ID = "53f027c18f44c7080a67e06a";
    
    final List<String> tenantIdsForAssessment = Lists.newArrayList(); 
    // this assessment has 2 test windows:
    // one from june 1 to june 30
    // another from september 1 to september 30
    @SuppressWarnings("unused")
    private Assessment assess4;

    // this assessment has one test window from march 1 to march 30
    private Assessment assess5;

    private SchedulerHelper schedulerHelper = new SchedulerHelper();

    @Before
    public void setup() {

        student1 = createStudent("123456789", "Bob", "Smith");
        student2 = createStudent("987654321", "Jane", "Smith");

        assess1 = createAssessmentWithWindows("test1", TENANT_ID, new DateTime(2014, 6, 1, 0, 0, 0, 0), new DateTime(2014, 6, 30,
                0, 0, 0, 0));
        assess2 = createAssessmentWithWindows("test2", TENANT_ID, new DateTime(2014, 6, 1, 0, 0, 0, 0), new DateTime(2014, 6, 30,
                0, 0, 0, 0));
        assess3 = createAssessmentWithWindows("test3", TENANT_ID, new DateTime(2014, 6, 1, 0, 0, 0, 0), new DateTime(2014, 6, 30,
                0, 0, 0, 0));
        assess4 = createAssessmentWithWindows("test4", TENANT_ID, new DateTime(2014, 6, 1, 0, 0, 0, 0), new DateTime(2014, 6, 30,
                0, 0, 0, 0), new DateTime(2014, 9, 1, 0, 0, 0, 0), new DateTime(2014, 9, 30, 0, 0, 0, 0));

        assess5 = createAssessmentWithWindows("test5", TENANT_ID, new DateTime(2014, 3, 1, 0, 0, 0, 0), new DateTime(2014, 3, 30,
                0, 0, 0, 0));
        
        
        tenantIdsForAssessment.add (TENANT_ID);

    }

    private Student createStudent(String ssid, String fname, String lname) {

        Student newStudent = new Student();

        newStudent.setEntityId(ssid);
        newStudent.setFirstName(fname);
        newStudent.setLastName(lname);

        return newStudent;
    }

    private Assessment createAssessmentWithWindows(String testName, String tenantId, DateTime... windowDates) {

        Assessment newAssess = new Assessment();

        newAssess.setTestName(testName);

        int windowDateIdx = 0;
        List<TestWindow> twList = new ArrayList<TestWindow>();

        while (windowDateIdx < windowDates.length) {
            twList.add(new TestWindow(windowDates[windowDateIdx], windowDates[++windowDateIdx]));
            windowDateIdx++;
        }

        newAssess.setTestWindow(twList.toArray(new TestWindow[0]));
        newAssess.setTenantId(tenantId);
        return newAssess;
    }

    // simple test
    // 1 eligible student with one assessment that is valid
    // test window completely within schedule dates
    // should have 1 assessments in list
    @Test
    public void testFindAssessmentsScenario1() {
        EligibleStudent eligStudent = new EligibleStudent(student1);
        eligStudent.addAssessment(assess1);

        List<Assessment> assessments = schedulerHelper.findAssessments(
                com.google.common.collect.Lists.newArrayList(eligStudent), new DateTime(2014, 5, 1, 0, 0, 0, 0),
                new DateTime(2014, 7, 1, 0, 0, 0, 0), tenantIdsForAssessment);

        assertThat(assessments, hasSize(1));

    }

    // simple test
    // 1 eligible student with one assessment that is valid
    // test window start within schedule dates
    // should have 1 assessments in list
    @Test
    public void testFindAssessmentsScenario2() {
        EligibleStudent eligStudent = new EligibleStudent(student1);
        eligStudent.addAssessment(assess1);

        List<Assessment> assessments = schedulerHelper.findAssessments(
                com.google.common.collect.Lists.newArrayList(eligStudent), new DateTime(2014, 5, 20, 0, 0, 0, 0),
                new DateTime(2014, 6, 10, 0, 0, 0, 0), tenantIdsForAssessment);

        assertThat(assessments, hasSize(1));
    }

    // simple test
    // 1 eligible student with one assessment that is valid
    // test window end within schedule dates
    // should have 1 assessments in list
    @Test
    public void testFindAssessmentsScenario3() {
        EligibleStudent eligStudent = new EligibleStudent(student1);
        eligStudent.addAssessment(assess1);

        List<Assessment> assessments = schedulerHelper.findAssessments(
                com.google.common.collect.Lists.newArrayList(eligStudent), new DateTime(2014, 6, 25, 0, 0, 0, 0),
                new DateTime(2014, 7, 10, 0, 0, 0, 0), tenantIdsForAssessment);

        assertThat(assessments, hasSize(1));
    }

    // simple test
    // 1 eligible student with one assessment that is valid
    // test window surrounds schedule dates
    // should have 1 assessments in list
    @Test
    public void testFindAssessmentsScenario4() {
        EligibleStudent eligStudent = new EligibleStudent(student1);
        eligStudent.addAssessment(assess1);

        List<Assessment> assessments = schedulerHelper.findAssessments(
                com.google.common.collect.Lists.newArrayList(eligStudent), new DateTime(2014, 6, 10, 0, 0, 0, 0),
                new DateTime(2014, 6, 20, 0, 0, 0, 0), tenantIdsForAssessment);

        assertThat(assessments, hasSize(1));
    }

    // simple test
    // 1 eligible student with one assessment that is not valid
    // test window after schedule dates
    // should have 0 assessments in list
    @Test
    public void testFindAssessmentsScenario5() {
        EligibleStudent eligStudent = new EligibleStudent(student1);
        eligStudent.addAssessment(assess1);

        List<Assessment> assessments = schedulerHelper.findAssessments(
                com.google.common.collect.Lists.newArrayList(eligStudent), new DateTime(2014, 5, 1, 0, 0, 0, 0),
                new DateTime(2014, 5, 20, 0, 0, 0, 0), tenantIdsForAssessment);

        assertThat(assessments, hasSize(0));
    }

    // simple test
    // 1 eligible student with one assessment that is not valid
    // test window before schedule dates
    // should have 0 assessments in list
    @Test
    public void testFindAssessmentsScenario6() {
        EligibleStudent eligStudent = new EligibleStudent(student1);
        eligStudent.addAssessment(assess1);

        List<Assessment> assessments = schedulerHelper.findAssessments(
                com.google.common.collect.Lists.newArrayList(eligStudent), new DateTime(2014, 7, 10, 0, 0, 0, 0),
                new DateTime(2014, 7, 21, 0, 0, 0, 0), tenantIdsForAssessment);

        assertThat(assessments, hasSize(0));
    }

    // 2 eligible students, each with 2 assessments
    // one of each is valid and one is not
    // should have 2 assessments in list
    @SuppressWarnings("unused")
    @Test
    public void testFindAssessmentsWithNotAllValid() {
        EligibleStudent eligStudent = new EligibleStudent(student1);
        eligStudent.addAssessment(assess1);
        eligStudent.addAssessment(assess5);

        EligibleStudent eligStudent2 = new EligibleStudent(student2);
        eligStudent.addAssessment(assess2);
        eligStudent.addAssessment(assess5);

        List<Assessment> assessments = schedulerHelper.findAssessments(
                com.google.common.collect.Lists.newArrayList(eligStudent), new DateTime(2014, 5, 1, 0, 0, 0, 0),
                new DateTime(2014, 7, 1, 0, 0, 0, 0), tenantIdsForAssessment);

        assertThat(assessments, hasSize(2));

    }

    // 2 eligible students, each with 2 assessments that are valid
    // one of the assessments is the same
    // should have 3 assessments in list
    @SuppressWarnings("unused")
    @Test
    public void testFindAssessmentsWithDupes() {
        EligibleStudent eligStudent = new EligibleStudent(student1);
        eligStudent.addAssessment(assess1);
        eligStudent.addAssessment(assess2);

        EligibleStudent eligStudent2 = new EligibleStudent(student2);
        eligStudent.addAssessment(assess2);
        eligStudent.addAssessment(assess3);

        List<Assessment> assessments = schedulerHelper.findAssessments(
                com.google.common.collect.Lists.newArrayList(eligStudent), new DateTime(2014, 5, 1, 0, 0, 0, 0),
                new DateTime(2014, 7, 1, 0, 0, 0, 0), tenantIdsForAssessment);

        assertThat(assessments, hasSize(3));
    }

    // 1 eligible student, 1 assessment
    // assessment test window start is the same as schedule end
    // should have 1 assessment in list
    @Test
    public void testFindAssessmentsTestWindStartEqualScheduleEnd() {
        EligibleStudent eligStudent = new EligibleStudent(student1);
        eligStudent.addAssessment(assess1);

        List<Assessment> assessments = schedulerHelper.findAssessments(
                com.google.common.collect.Lists.newArrayList(eligStudent), new DateTime(2014, 5, 1, 0, 0, 0, 0),
                new DateTime(2014, 6, 1, 0, 0, 0, 0), tenantIdsForAssessment);

        assertThat(assessments, hasSize(1));
    }

    // 1 eligible student, 1 assessment
    // assessment test window end is the same as schedule start
    // should have 1 assessment in list
    @Test
    public void testFindAssessmentsTestWindEndEqualScheduleStart() {
        EligibleStudent eligStudent = new EligibleStudent(student1);
        eligStudent.addAssessment(assess1);

        List<Assessment> assessments = schedulerHelper.findAssessments(
                com.google.common.collect.Lists.newArrayList(eligStudent), new DateTime(2014, 6, 30, 0, 0, 0, 0),
                new DateTime(2014, 7, 10, 0, 0, 0, 0), tenantIdsForAssessment);

        assertThat(assessments, hasSize(1));
    }

}
