/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testadmin.service;

import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertThat;
import static org.springframework.test.util.ReflectionTestUtils.setField;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

import javax.annotation.Resource;

import org.joda.time.DateTime;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testadmin.domain.Status;
import org.opentestsystem.delivery.testadmin.domain.TestAdminReport;
import org.opentestsystem.delivery.testadmin.domain.TestStatus;
import org.opentestsystem.delivery.testadmin.domain.schedule.Schedule;
import org.opentestsystem.delivery.testadmin.domain.schedule.ScheduledDay;
import org.opentestsystem.delivery.testadmin.domain.schedule.ScheduledFacility;
import org.opentestsystem.delivery.testadmin.domain.schedule.ScheduledSeat;
import org.opentestsystem.delivery.testadmin.domain.schedule.ScheduledTimeSlot;
import org.opentestsystem.delivery.testadmin.persistence.ScheduleRepository;
import org.opentestsystem.delivery.testadmin.persistence.TestStatusRepository;
import org.opentestsystem.delivery.testreg.domain.Assessment;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.InstitutionEntity;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.domain.TestRegistrationBase;
import org.opentestsystem.delivery.testreg.integration.AbstractPersistenceEmbeddedTest;
import org.opentestsystem.delivery.testreg.integration.eligibility.MockStudentRepository;
import org.opentestsystem.delivery.testreg.service.TestRegPersister;
import org.opentestsystem.shared.search.domain.AbstractSearchRequest;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.mongodb.core.MongoOperations;
import org.springframework.data.mongodb.repository.query.MongoEntityInformation;
import org.springframework.data.mongodb.repository.support.SimpleMongoRepository;
import static org.mockito.Mockito.*;

public class StudentScheduleReportServiceTest extends AbstractPersistenceEmbeddedTest {

    private Schedule schedule;
    ScheduleRepository scheduleRepository;

    @Autowired
    TestStatusRepository studentTestRepository;

    @Resource(name = "studentScheduleReportService")
    private ScheduleReportService scheduleReportService;

    @Autowired
    TestRegPersister entityService;

    // ScheduleReportService scheduleReportService;

    @Before
    public void setup() {
        TestStatusRepository studentTestRepository = mock(TestStatusRepository.class);
        setField(this.scheduleReportService, "entityService", new MockEntityService());
        setField(this.scheduleReportService, "studentRepos", new MockStudentService());
        setField(this.scheduleReportService, "studentTestRepository", studentTestRepository);

        final ScheduledSeat seat1 = new ScheduledSeat();
        final ScheduledSeat seat2 = new ScheduledSeat();
        final ScheduledSeat seat3 = new ScheduledSeat();

        final Student student1 = new Student();
        student1.setEntityId("0001");
        student1.setFirstName("1FName");
        student1.setFirstName("1LName");
        student1.setMiddleName("A");
        student1.setStateAbbreviation("WI");
        student1.setExternalSsid("1FNameLName@edu.org");

        final Student student2 = new Student();
        student1.setEntityId("0002");
        student2.setFirstName("2FName");
        student2.setFirstName("2LName");
        student2.setMiddleName("A");
        student2.setStateAbbreviation("WI");
        student2.setExternalSsid("2FNameLName@edu.org");
        final Student student3 = new Student();
        student1.setEntityId("0003");
        student3.setFirstName("3FName");
        student3.setFirstName("3LName");
        student3.setMiddleName("A");
        student3.setExternalSsid("3FNameLName@edu.org");
        student3.setStateAbbreviation("WI");

        final Assessment assessment1 = new Assessment();
        assessment1.setTestName("TEST1");
        assessment1.setTestLabel("TEST1-WI");
        assessment1.setId("53ff860fde0d39090ad54dc8");

        final Assessment assessment2 = new Assessment();
        assessment2.setTestName("TEST2");
        assessment2.setTestLabel("TEST2-WI");
        assessment2.setId("53ff860fde0d39090ad54dc9");

        final Assessment assessment3 = new Assessment();
        assessment3.setTestName("TEST3");
        assessment3.setTestLabel("TEST3-WI");
        assessment3.setId("53ff860fde0d39090ad54dd1");

        final Set<ScheduledSeat> sets = new HashSet<ScheduledSeat>();
        seat1.setStudent(student1);
        seat1.setAssessment(assessment1);

        seat2.setStudent(student2);
        seat2.setAssessment(assessment2);

        seat3.setStudent(student3);
        seat3.setAssessment(assessment3);
        sets.add(seat1);
        sets.add(seat2);
        sets.add(seat3);

        final ScheduledTimeSlot sts1 = new ScheduledTimeSlot();
        sts1.setStartTime(new DateTime(2014, 06, 01, 17, 0));
        sts1.setEndTime(new DateTime(2014, 06, 01, 18, 0));
        sts1.setSeats(sets);

        final TreeSet<ScheduledTimeSlot> sts = new TreeSet<ScheduledTimeSlot>();
        sts.add(sts1);

        final List<ScheduledDay> days = new ArrayList<ScheduledDay>();
        final ScheduledDay scheduledDay = new ScheduledDay();
        scheduledDay.setDay(new DateTime(2014, 6, 1, 0, 0));

        final ScheduledFacility scheduledFacility = new ScheduledFacility();
        scheduledFacility.setLocation("Madison West");
        scheduledFacility.setTimeSlots(sts);
        scheduledDay.setFacilities(Arrays.asList(new ScheduledFacility[] { scheduledFacility }));
        days.add(scheduledDay);

        // create schedule
        this.schedule = new Schedule();
        this.schedule.setStartDate(new DateTime(2014, 6, 1, 0, 0));
        this.schedule.setEndDate(new DateTime(2014, 6, 2, 0, 0));
        this.schedule.setInstitutionIdentifier("INS1");
        this.schedule.setScheduledDays(days);
        ScheduleRepository scheduleRepository = mock(ScheduleRepository.class);
        setField(this.scheduleReportService, "scheduleRepository", scheduleRepository);

    }

    @Test
    public void testBuildProctorReport() {

        final List<TestAdminReport> reports = this.scheduleReportService.buildScheduledReport("INS1", new DateTime(2014, 6, 1, 0,
                0), new DateTime(2014, 6, 2, 0, 0));
        assertNotNull(reports);
        assertThat(reports.size(), is(3));

    }

    public class MockScheduleRepository extends SimpleMongoRepository<Schedule, String> implements ScheduleRepository {

        /**
         * Creates a new {@link org.springframework.data.mongodb.repository.support.SimpleMongoRepository} for the given {@link org.springframework.data.mongodb.repository.query.MongoEntityInformation} and {@link MongoTemplate}.
         *
         * @param metadata        must not be {@literal null}.
         * @param mongoOperations must not be {@literal null}.
         */
        public MockScheduleRepository() {
            super(null, null);
        }

        @Override
        public SearchResponse<Schedule> search(final AbstractSearchRequest arg0) {

            return null;
        }

        @Override
        public <S extends Schedule> List<S> save(final Iterable<S> entites) {

            return null;
        }

        @Override
        public List<Schedule> findAll() {

            return null;
        }

        @Override
        public List<Schedule> findAll(final Sort sort) {

            return null;
        }

        @Override
        public Page<Schedule> findAll(final Pageable pageable) {

            return null;
        }

        @Override
        public <S extends Schedule> S save(final S entity) {

            return null;
        }

        @Override
        public Schedule findOne(final String id) {

            return null;
        }

        @Override
        public boolean exists(final String id) {

            return false;
        }

        @Override
        public Iterable<Schedule> findAll(final Iterable<String> ids) {

            return null;
        }

        @Override
        public long count() {

            return 0;
        }

        @Override
        public void delete(final String id) {

        }

        @Override
        public void delete(final Schedule entity) {

        }

        @Override
        public void delete(final Iterable<? extends Schedule> entities) {

        }

        @Override
        public void deleteAll() {

        }

        @Override
        public Schedule findScheduleByFacilityAndStartDate(final String institutionId, final String facility, final DateTime dateTime) {

            return null;

        }

        @Override
        public List<Schedule> findScheduleByStartDateAndEndDate(final String institutionId, final DateTime startDate,
                final DateTime endDate) {
            if (institutionId.equals("INS1")) {
                return Arrays.asList(StudentScheduleReportServiceTest.this.schedule);
            }
            return null;
        }

        @Override
        public Schedule findByScheduleName(final String name) {

            return null;
        }

        @Override
        public Schedule updateScheduleDay(final String scheduleId, final ScheduledDay scheduledDay) {
            return null;
        }

        @Override
        public List<Schedule> findByInstitutionId(final String institutionId) {
            return null;
        }

    }

    private class MockEntityService implements TestRegPersister {

        private int saveCount = 0;
        private int updateCount = 0;
        private int deleteCount = 0;

        public int getSaveCount() {
            return this.saveCount;
        }

        public int getUpdateCount() {
            return this.updateCount;
        }

        public int getDeleteCount() {
            return this.deleteCount;
        }

        @SuppressWarnings("unused")
        public void resetCounts() {
            this.saveCount = 0;
            this.updateCount = 0;
            this.deleteCount = 0;
        }

        @SuppressWarnings("unchecked")
        @Override
        public <T extends TestRegistrationBase> T findById(final String pkId, final FormatType formatType) {
            final InstitutionEntity entity = new InstitutionEntity();
            entity.setId("53ff860fde0d39090ad54dc7");
            return (T) entity;
        }

        @Override
        public <T extends TestRegistrationBase> List<T> findAll(final FormatType formatType) {
            return null;
        }

        @Override
        public <T extends TestRegistrationBase> T saveDomainObject(final T domainObj) {
            return null;
        }

        @Override
        public <T extends TestRegistrationBase> T updateDomainObject(final T domainObj) {
            return null;
        }

        @Override
        public <T extends TestRegistrationBase> void deleteDomainObject(final T domainObj) {

        }

        @Override
        public <T extends TestRegistrationBase> void deleteDomainObject(final String pkId, final FormatType formatType) {

        }

        @Override
        public <T extends TestRegistrationBase> List<T> saveDomainObjects(final List<T> domainObjList) {
            this.saveCount += domainObjList.size();

            return domainObjList;
        }

        @Override
        public <T extends TestRegistrationBase> List<T> updateDomainObjects(final List<T> domainObjList) {
            this.updateCount += domainObjList.size();

            return domainObjList;
        }

        @Override
        public <T extends TestRegistrationBase> void deleteDomainObjects(final List<T> domainObjList) {
            this.deleteCount += domainObjList.size();

        }

        @Override
        public <T extends TestRegistrationBase> SearchResponse<T> searchDomainObjects(final AbstractSearchRequest searchRequest, final FormatType formatType) {
            return null;
        }

        @Override
        public <T extends TestRegistrationBase> boolean hasAssociatedEntity(final T domainObj) {
            return false;
        }

    }

    private class MockStudentService extends MockStudentRepository {

        @Override
        public List<Student> findStudentsByInstitution(final String institutionId) {
            final List<Student> studentList = new ArrayList<Student>();
            final Student student1 = new Student();
            student1.setEntityId("0001");
            student1.setFirstName("1FName");
            student1.setFirstName("1LName");
            student1.setMiddleName("A");
            student1.setStateAbbreviation("WI");
            student1.setExternalSsid("1FNameLName@edu.org");

            final Student student2 = new Student();
            student2.setEntityId("0002");
            student2.setFirstName("2FName");
            student2.setFirstName("2LName");
            student2.setMiddleName("A");
            student2.setStateAbbreviation("WI");
            student2.setExternalSsid("2FNameLName@edu.org");
            final Student student3 = new Student();
            student3.setEntityId("0003");
            student3.setFirstName("3FName");
            student3.setFirstName("3LName");
            student3.setMiddleName("A");
            student3.setExternalSsid("3FNameLName@edu.org");
            student3.setStateAbbreviation("WI");
            studentList.add(student1);
            studentList.add(student2);
            studentList.add(student3);
            return studentList;
        }

    }

    private class MockTestStatusRepository extends SimpleMongoRepository<TestStatus, String> implements TestStatusRepository {

        /**
         * Creates a new {@link org.springframework.data.mongodb.repository.support.SimpleMongoRepository} for the given {@link org.springframework.data.mongodb.repository.query.MongoEntityInformation} and {@link MongoTemplate}.
         *
         * @param metadata        must not be {@literal null}.
         * @param mongoOperations must not be {@literal null}.
         */
        public MockTestStatusRepository() {
            super(null, null);
        }

        @Override
        public SearchResponse<TestStatus> search(final AbstractSearchRequest arg0) {
            return null;
        }

        @Override
        public <S extends TestStatus> List<S> save(final Iterable<S> entites) {
            return null;
        }

        @Override
        public List<TestStatus> findAll() {
            return null;
        }

        @Override
        public List<TestStatus> findAll(final Sort sort) {
            return null;
        }

        @Override
        public Page<TestStatus> findAll(final Pageable pageable) {
            return null;
        }

        @Override
        public <S extends TestStatus> S save(final S entity) {
            return null;
        }

        @Override
        public TestStatus findOne(final String id) {
            return null;
        }

        @Override
        public boolean exists(final String id) {
            return false;
        }

        @Override
        public Iterable<TestStatus> findAll(final Iterable<String> ids) {
            return null;
        }

        @Override
        public long count() {
            return 0;
        }

        @Override
        public void delete(final String id) {
        }

        @Override
        public void delete(final TestStatus entity) {
        }

        @Override
        public void delete(final Iterable<? extends TestStatus> entities) {
        }

        @Override
        public void deleteAll() {
        }
        
        @Override
        public void deleteTestStatusByStudentEntityIdAndState(String studentEntityId, String stateAbbr) {
        }

        @Override
        public List<TestStatus> findStudentReport(final Collection<String> studentIdList, final String stateAbbreviation, final String assessmentId, final int opportunity, final String testStatus) {
            final TestStatus status = new TestStatus();
            status.setStudentId("0001");
            status.setAssessmentId("53ff860fde0d39090ad54dc8");
            status.setStatus(Status.COMPLETED);
            status.setActualComplete(DateTime.now());
            return Arrays.asList(status);
        }

        @Override
        public TestStatus findByReportAlternateId(final String studentId, final String stateAbbreviation, final String assessmentId, final int opportunity) {
            return null;
        }

        
        @Override
        public List<TestStatus> findByStudentIds(final Collection<String> studentIds) {
            return null;
        }

        @Override
        public TestStatus findByStudentIdStateAbbrAssessment (String studentId, String stateAbbreviation, String assessmentId) {
          return null;
        }
    }
}
