/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testadmin.integration;

import static org.hamcrest.collection.IsCollectionWithSize.hasSize;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsNull.notNullValue;
import static org.hamcrest.core.IsNull.nullValue;
import static org.junit.Assert.assertThat;
import static org.opentestsystem.delivery.testadmin.integration.ScheduleTestData.SCHEDULE_1_OBJECT_ID;

import java.util.List;

import org.joda.time.DateTime;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testadmin.domain.schedule.Schedule;
import org.opentestsystem.delivery.testadmin.domain.schedule.ScheduledDay;
import org.opentestsystem.delivery.testadmin.domain.schedule.ScheduledTimeSlot;
import org.opentestsystem.delivery.testadmin.persistence.ScheduleRepository;
import org.opentestsystem.delivery.testreg.integration.AbstractPersistenceEmbeddedTest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;

public class ScheduleRepositoryCustomTest extends AbstractPersistenceEmbeddedTest {
    
    @Autowired
    private ScheduleRepository scheduleRepository;
    
    private ScheduleTestData scheduleTestData;
    
    @Autowired
    MongoTemplate mongoTemplate;
    
    @Before
    public void setup() {
        scheduleTestData = new ScheduleTestData();
    }
    
    @Test
    public void testFindScheduleByFacilityAndStartDateFromASingleFacility() {
        //Setup Test data
        mongoTemplate.insert(scheduleTestData.buildSingleSchedule());
        
        assertThat(scheduleRepository.findAll(), hasSize(1));
        assertThat(scheduleRepository.findScheduleByFacilityAndStartDate("53d667ddbd99f8b7b41e15fa", "LONE STAR ABZ", new DateTime(2014, 6, 6, 0, 0)), is(notNullValue()));
        assertThat(scheduleRepository.findScheduleByFacilityAndStartDate("53d667ddbd99f8b7b41e15fa", "NORTH STAR ABZ", new DateTime(2014, 6, 6, 0, 0)), is(nullValue()));
    }
    
    @Test
    public void testFindScheduleByFacilityAndStartDateFromMultiFacility() {
        //Setup Test data
        mongoTemplate.insert(scheduleTestData.buildMultiSchedule(), Schedule.class);
        
        String INSTITUTION_PK = "53d667dded99f8b7b41e15fa";
        
        List<Schedule> list = scheduleRepository.findAll();        
        assertThat(list, hasSize(2));
        assertThat(scheduleRepository.findScheduleByFacilityAndStartDate(INSTITUTION_PK, "FRISCO_FACILITY", new DateTime(2015, 2, 1, 0, 0)), is(notNullValue()));
        assertThat(scheduleRepository.findScheduleByFacilityAndStartDate(INSTITUTION_PK, "PLANO_FACILITY", new DateTime(2014, 6, 6, 0, 0)), is(nullValue()));
        assertThat(scheduleRepository.findScheduleByFacilityAndStartDate(INSTITUTION_PK, "FRISCO_FACILITY", new DateTime(2015, 2, 10, 0, 0)), is(notNullValue()));
        
        Schedule schedule = scheduleRepository.findScheduleByFacilityAndStartDate(INSTITUTION_PK, "FRISCO_FACILITY", new DateTime(2015, 2, 1, 0, 0));
        assertThat(schedule.getScheduledDays().get(0).getFacilities(), hasSize(1));
        assertThat(schedule.getScheduledDays().get(0).getFacilities().get(0).getFacilityName(), is("FRISCO_FACILITY"));
        assertThat(schedule.getScheduledDays().get(0).getFacilities().get(0).getTimeSlots(), is(notNullValue()));
    }
    
    @Test
    public void testUpdateScheduleDay() {       
      //Setup Test data first
      List<Schedule> schedules = scheduleTestData.buildMultiSchedule();
      mongoTemplate.insert(schedules, Schedule.class);
      
      //Some Lookup attributes 
      DateTime jan02_2015 = new DateTime(2015, 1, 1, 0, 0); //Schedule day
      DateTime startTime = new DateTime(2014, 12, 12, 8, 0); //TimeSlot start
      DateTime endTime = new DateTime(2014, 12, 12, 12, 0); //TimeSlot end
 
      //Prepare the data
      ScheduledDay scheduledDay = scheduleTestData.getScheduledDay(schedules, SCHEDULE_1_OBJECT_ID, jan02_2015);      
      ScheduledTimeSlot scheduledTimeSlot = scheduleTestData.getTimeSlot(scheduledDay.getFacilities(), startTime, endTime);
      int originalNumOfSeats = scheduledTimeSlot.getSeats().size();
      scheduleTestData.addASeat(scheduledTimeSlot); //Add a Seat 
      
      //Call the method to be tested
      Schedule scheduleUpdated = scheduleRepository.updateScheduleDay(SCHEDULE_1_OBJECT_ID, scheduledDay);   //Update ScheduledDay with the added seat
      assertThat(scheduleUpdated, is(notNullValue()));
      
      //Verify the update
      ScheduledDay scheduledDayAfterUpdate = scheduleTestData.getScheduledDay(scheduleRepository.findAll(), SCHEDULE_1_OBJECT_ID, jan02_2015);
      ScheduledTimeSlot scheduledTimeSlotAfterUpdate = scheduleTestData.getTimeSlot(scheduledDayAfterUpdate.getFacilities(), startTime, endTime);
      int modifiedNumofSeats = scheduledTimeSlotAfterUpdate.getSeats().size();
      assertThat(modifiedNumofSeats, is(originalNumOfSeats+1));
    }
    
    
}
