/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testadmin.integration;

import java.util.List;

import org.joda.time.DateTime;
import org.opentestsystem.delivery.testadmin.domain.Affinity;
import org.opentestsystem.delivery.testadmin.domain.Availability;
import org.opentestsystem.delivery.testadmin.domain.Facility.SeatConfiguration;
import org.opentestsystem.delivery.testadmin.domain.FacilityAvailability;
import org.opentestsystem.delivery.testadmin.domain.FacilityAvailability.FacilityTimeSlot;
import org.opentestsystem.delivery.testadmin.domain.TimeSlot;

import com.google.common.collect.Lists;

public class FacilityAvailabilityTestData {
    
    public static String TEST_FACILITY_ID    = "fac4245424twt7bbved39ui";   
    public static String TEST_INSTITUTION_ID = "I8816gfgfa898288767621687";
    public String testTimeSlotId1;
    public String testTimeSlotId2;
    
    private DateTime timeComponentDate;
    
    public FacilityAvailabilityTestData() {
        timeComponentDate = new DateTime().withHourOfDay(0).withMinuteOfHour(0).withMillisOfSecond(0);
    }
    
    public DateTime timeComponentDate() {
        return timeComponentDate;
    }
    
    public FacilityAvailability createFacilityAvailability() {
        FacilityAvailability facilityAvailability = new FacilityAvailability();
        facilityAvailability.setFacilityId(TEST_FACILITY_ID);
        facilityAvailability.setFacilityName("lab1");
        facilityAvailability.setFacilityTimes(createTimeSlots());
        facilityAvailability.setFromDate(DateTime.now().withHourOfDay(0).withMinuteOfHour(0).withMillisOfSecond(0));
        facilityAvailability.setInstitutionId(TEST_INSTITUTION_ID); //PK
        facilityAvailability.setInstitutionIdentifier("INSTITUTION30001");
        facilityAvailability.setStatus(Availability.AVAILABLE);
        facilityAvailability.setToDate(new DateTime(2199, 1, 1, 0, 0));
        return facilityAvailability;
    }
        
    private List<FacilityTimeSlot> createTimeSlots() {   
        
        SeatConfiguration st1 = new SeatConfiguration();
        st1.setTestPlatform("IOS");
        st1.setNumberOfSeats(1);
        
        SeatConfiguration st2 = new SeatConfiguration();
        st2.setTestPlatform("WINDOWS");
        st2.setNumberOfSeats(2);
        
        SeatConfiguration st3 = new SeatConfiguration();
        st3.setTestPlatform("ANDROID");
        st3.setNumberOfSeats(3);
        
        SeatConfiguration st4 = new SeatConfiguration();
        st4.setTestPlatform("LINUX");
        st4.setNumberOfSeats(4);
        
        TimeSlot first = getTimeSlot(getDateTime(8, 15),  getDateTime(9, 30));
        testTimeSlotId1 = first.getId();
        
        TimeSlot second = getTimeSlot(getDateTime(10, 15), getDateTime(11, 30));
        testTimeSlotId2 = second.getId();
        
        return Lists.newArrayList(
                    new FacilityTimeSlot(
                                first, 
                                Lists.newArrayList(st1, st2)),                               
                    new FacilityTimeSlot(
                            second, 
                            Lists.newArrayList(st3)),
                    
                    new FacilityTimeSlot(
                            new TimeSlot(getDateTime(12, 15), getDateTime(14, 30)), 
                            Lists.newArrayList(st4))
                
         );        
    }
    
    private TimeSlot getTimeSlot(DateTime startTime, DateTime endTime, Affinity ...affinities) {
        return new TimeSlot(startTime, endTime, affinities);
    }
        
    private DateTime getDateTime(int hour, int minutes) {
       return timeComponentDate
           .withHourOfDay(hour)
           .withMinuteOfHour(minutes);
    }
}
