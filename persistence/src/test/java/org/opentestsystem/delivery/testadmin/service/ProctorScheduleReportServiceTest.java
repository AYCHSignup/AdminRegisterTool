/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testadmin.service;

import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertThat;
import static org.springframework.test.util.ReflectionTestUtils.setField;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.TreeSet;

import javax.annotation.Resource;

import org.joda.time.DateTime;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testadmin.domain.Proctor;
import org.opentestsystem.delivery.testadmin.domain.TestAdminReport;
import org.opentestsystem.delivery.testadmin.domain.schedule.Schedule;
import org.opentestsystem.delivery.testadmin.domain.schedule.ScheduledDay;
import org.opentestsystem.delivery.testadmin.domain.schedule.ScheduledFacility;
import org.opentestsystem.delivery.testadmin.domain.schedule.ScheduledTimeSlot;
import org.opentestsystem.delivery.testadmin.persistence.ScheduleRepository;
import org.opentestsystem.delivery.testreg.domain.User;
import org.opentestsystem.delivery.testreg.integration.AbstractPersistenceEmbeddedTest;
import org.opentestsystem.shared.search.domain.AbstractSearchRequest;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;

public class ProctorScheduleReportServiceTest extends AbstractPersistenceEmbeddedTest {

    private Schedule schedule;
    ScheduleRepository scheduleRepository;

    @Resource(name = "proctorScheduleReportService")
    private ScheduleReportService scheduleReportService;

    @Before
    public void setup() {
        final Proctor proctor1 = new Proctor();
        final Proctor proctor2 = new Proctor();
        final Proctor proctor3 = new Proctor();
        final User user1 = new User();
        user1.setFirstName("1FName");
        user1.setFirstName("1LName");
        user1.setEmail("1FNameLName@edu.org");

        final User user2 = new User();
        user2.setFirstName("2FName");
        user2.setFirstName("2LName");
        user2.setEmail("2FNameLName@edu.org");
        final User user3 = new User();
        user3.setFirstName("3FName");
        user3.setFirstName("3LName");
        user3.setEmail("3FNameLName@edu.org");
        proctor1.setUser(user1);
        proctor2.setUser(user2);
        proctor3.setUser(user3);

        final ScheduledTimeSlot sts1 = new ScheduledTimeSlot();
        sts1.setStartTime(new DateTime(2014, 06, 01, 17, 0));
        sts1.setEndTime(new DateTime(2014, 06, 01, 18, 0));
        sts1.setProctor(proctor1);

        final ScheduledTimeSlot sts2 = new ScheduledTimeSlot();
        sts2.setStartTime(new DateTime(2014, 06, 01, 19, 0));
        sts2.setEndTime(new DateTime(2014, 06, 01, 20, 0));
        sts2.setProctor(proctor2);

        final ScheduledTimeSlot sts3 = new ScheduledTimeSlot();
        sts3.setStartTime(new DateTime(2014, 06, 01, 21, 0));
        sts3.setEndTime(new DateTime(2014, 06, 01, 22, 0));
        sts3.setProctor(proctor3);

        final TreeSet<ScheduledTimeSlot> sts = new TreeSet<ScheduledTimeSlot>();
        sts.add(sts1);
        sts.add(sts2);
        sts.add(sts3);
        final List<ScheduledDay> days = new ArrayList<ScheduledDay>();
        final ScheduledDay scheduledDay = new ScheduledDay();
        scheduledDay.setDay(new DateTime(2014, 6, 1, 0, 0));

        final ScheduledFacility scheduledFacility = new ScheduledFacility();
        scheduledFacility.setLocation("Madison West");
        scheduledFacility.setTimeSlots(sts);
        scheduledDay.setFacilities(Arrays.asList(new ScheduledFacility[] { scheduledFacility }));
        days.add(scheduledDay);

        // create schedule
        this.schedule = new Schedule();
        this.schedule.setStartDate(new DateTime(2014, 6, 1, 0, 0));
        this.schedule.setEndDate(new DateTime(2014, 6, 2, 0, 0));
        this.schedule.setInstitutionIdentifier("INS1");
        this.schedule.setScheduledDays(days);
        setField(this.scheduleReportService, "scheduleRepository", new MockScheduleRepository());

    }

    @Test
    public void testBuildProctorReport() {

        final List<TestAdminReport> reports = this.scheduleReportService.buildScheduledReport("INS1", new DateTime(2014, 6, 1, 0, 0), new DateTime(2014, 6, 2, 0, 0));
        assertNotNull(reports);
        assertThat(reports.size(), is(3));

    }

    public class MockScheduleRepository implements ScheduleRepository {

        @Override
        public SearchResponse<Schedule> search(final AbstractSearchRequest arg0) {

            return null;
        }

        @Override
        public <S extends Schedule> List<S> save(final Iterable<S> entites) {

            return null;
        }

        @Override
        public List<Schedule> findAll() {

            return null;
        }

        @Override
        public List<Schedule> findAll(final Sort sort) {

            return null;
        }

        @Override
        public Page<Schedule> findAll(final Pageable pageable) {

            return null;
        }

        @Override
        public <S extends Schedule> S save(final S entity) {

            return null;
        }

        @Override
        public Schedule findOne(final String id) {

            return null;
        }

        @Override
        public boolean exists(final String id) {

            return false;
        }

        @Override
        public Iterable<Schedule> findAll(final Iterable<String> ids) {

            return null;
        }

        @Override
        public long count() {

            return 0;
        }

        @Override
        public void delete(final String id) {

        }

        @Override
        public void delete(final Schedule entity) {

        }

        @Override
        public void delete(final Iterable<? extends Schedule> entities) {

        }

        @Override
        public void deleteAll() {

        }

        @Override
        public Schedule findScheduleByFacilityAndStartDate(final String institutionId, final String facility, final DateTime dateTime) {

            return null;

        }

        @Override
        public List<Schedule> findScheduleByStartDateAndEndDate(final String institutionId, final DateTime startDate, final DateTime endDate) {
            if (institutionId.equals("INS1")) {
                return Arrays.asList(ProctorScheduleReportServiceTest.this.schedule);
            }
            return null;
        }

        @Override
        public Schedule findByScheduleName(final String name) {

            return null;
        }

        @Override
        public Schedule updateScheduleDay(final String scheduleId, final ScheduledDay scheduledDay) {
            return null;

        }

        @Override
        public List<Schedule> findByInstitutionId(final String institutionId) {
            return null;
        }

    }
}
