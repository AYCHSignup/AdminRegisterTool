/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testadmin.persistence.validator;

import static org.hamcrest.collection.IsCollectionWithSize.hasSize;
import static org.hamcrest.collection.IsEmptyCollection.empty;
import static org.junit.Assert.assertThat;

import java.util.ArrayList;

import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.opentestsystem.delivery.testadmin.domain.Facility;
import org.opentestsystem.delivery.testadmin.domain.FacilityAvailability;
import org.opentestsystem.delivery.testadmin.domain.schedule.Schedule;
import org.opentestsystem.delivery.testadmin.service.FacilityAvailabilityService;
import org.opentestsystem.delivery.testadmin.service.FacilityService;
import org.opentestsystem.delivery.testadmin.service.ScheduleService;
import org.opentestsystem.delivery.testreg.domain.DeleteOperation;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.InstitutionEntity;
import org.opentestsystem.delivery.testreg.service.impl.TestRegPersisterImpl;
import org.springframework.validation.BeanPropertyBindingResult;
import org.springframework.validation.Errors;

import com.google.common.collect.Lists;

public class FacilityValidatorTest {

    Facility facility;
    
    @Mock
    FacilityService facilityService;
    
    @InjectMocks
    FacilityValidator facilityValidator;
    
    @Mock
    private TestRegPersisterImpl testRegPersister;
    
    @Mock
    private FacilityAvailabilityService facilityAvailability;
    
    @Mock
    private ScheduleService scheduleService;
    
    Errors errors;
    
    @Before
    public void setup() {
        MockitoAnnotations.initMocks(this);
        
        facility = new Facility();
        facility.setId("1");
        facility.setInstitutionId("1");
        facility.setInstitutionIdentifier("insid");
        errors = new BeanPropertyBindingResult(facility, "facility");
        
        Mockito.when(facilityService.getFacility("1")).thenReturn(facility);
        Mockito.when(testRegPersister.findById("1", FormatType.INSTITUTION)).thenReturn(new InstitutionEntity());
        Mockito.when(facilityAvailability.getAvailabilities("1", "1")).thenReturn(new ArrayList<FacilityAvailability>());
        Mockito.when(scheduleService.getSchedulesByInstitution("1")).thenReturn(new ArrayList<Schedule>());
    }
    
    @Test
    public void test_No_Errors() {
        facilityValidator.validate(facility, errors, DeleteOperation.class);
        assertThat(errors.getAllErrors(), empty());
    }
    
    @Test
    public void test_Has_Facility_Availabilities_Dependency() {
        FacilityAvailability facilityAvailabilityObj = new FacilityAvailability();
        facilityAvailabilityObj.setFacilityId("1");
        facilityAvailabilityObj.setInstitutionIdentifier("insid");

        Mockito.when(facilityAvailability.getAvailabilities("1", "insid")).thenReturn(Lists.newArrayList(facilityAvailabilityObj));

        facilityValidator.validate(facility, errors, DeleteOperation.class);
        assertThat(errors.getAllErrors(), hasSize(1));
    }
    
}
