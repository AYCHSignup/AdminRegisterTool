/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testadmin.integration;

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

import org.bson.types.ObjectId;
import org.joda.time.DateTime;
import org.opentestsystem.delivery.testadmin.domain.Proctor;
import org.opentestsystem.delivery.testadmin.domain.schedule.Schedule;
import org.opentestsystem.delivery.testadmin.domain.schedule.ScheduledDay;
import org.opentestsystem.delivery.testadmin.domain.schedule.ScheduledFacility;
import org.opentestsystem.delivery.testadmin.domain.schedule.ScheduledSeat;
import org.opentestsystem.delivery.testadmin.domain.schedule.ScheduledTimeSlot;
import org.opentestsystem.delivery.testreg.domain.Assessment;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.domain.Student.GradeLevel;
import org.opentestsystem.delivery.testreg.domain.User;

import com.google.common.collect.Lists;

/**
 * Schedule Object Mother
 * 
 */
public class ScheduleTestData {
    
    public static final int TOTAL_SEATS_PER_TIMESLOT = 4;
    
    public static final String SCHEDULE_1_OBJECT_ID = new ObjectId().toStringMongod();
    public static final String SCHEDULE_2_OBJECT_ID = new ObjectId().toStringMongod();
    
    public ScheduledDay getScheduledDay(List<Schedule> schedules, String scheduleId, DateTime dateTime) {
        for(Schedule schedule: schedules) {
            if(schedule.getId().equals(scheduleId)) {
                for(ScheduledDay scheduledDay: schedule.getScheduledDays()) {
                    if(scheduledDay.getDay().isEqual(dateTime)){
                        return scheduledDay;
                    }
                }
            }
        }
        return null;
    }
    
    public ScheduledTimeSlot getTimeSlot(List<ScheduledFacility> scheduledFacilities, DateTime startTime, DateTime endTime) {
        for(ScheduledFacility scheduledFacility:scheduledFacilities) {
            for(ScheduledTimeSlot scheduledTimeSlot: scheduledFacility.getTimeSlots()) {            
                if(scheduledTimeSlot.getStartTime().isEqual(startTime) && scheduledTimeSlot.getEndTime().isEqual(endTime)) {
                    return scheduledTimeSlot;
                }
            }
        }
        return null;
    }
    
    public void addASeat(ScheduledTimeSlot scheduledTimeSlot) {
        scheduledTimeSlot.getSeats().add(getSeat(89));
    }
    
    
    public List<Schedule> buildMultiSchedule() {
        
        
        //Schedule 1 - 01/01/2015 to 03/01/2015
        Schedule schedule1 = new Schedule();
        schedule1.setScheduleName("demoSchedule1");
        schedule1.setId(SCHEDULE_1_OBJECT_ID);
        schedule1.setStartDate(new DateTime(2015, 01, 1, 0, 0));
        schedule1.setEndDate(new DateTime(2015, 3, 1, 0, 0));
        schedule1.setStateAbbreviation("WI");
        schedule1.setInstitutionId("53d667dded99f8b7b41e15fa");
        schedule1.setInstitutionIdentifier("INS1");
        
        //Scheduled Days
        ScheduledDay jan02_2015 = new ScheduledDay();
        jan02_2015.setDay(new DateTime(2015, 1, 1, 0, 0));
        jan02_2015.setFacilities(getScheduledFacility("PLANO_FACILITY"));
        schedule1.setScheduledDays(Lists.newArrayList(jan02_2015));
        
        //Schedule 1 - 02/01/2015 to 04/01/2015
        Schedule schedule2 = new Schedule();
        schedule2.setScheduleName("demoSchedule2");
        schedule2.setId(SCHEDULE_2_OBJECT_ID);
        schedule2.setStartDate(new DateTime(2015, 02, 1, 0, 0));
        schedule2.setEndDate(new DateTime(2015, 4, 1, 0, 0));
        schedule2.setStateAbbreviation("WI");
        schedule2.setInstitutionId("53d667dded99f8b7b41e15fa");
        schedule2.setInstitutionIdentifier("INS1");
        
        ScheduledDay feb02_2015 = new ScheduledDay();
        feb02_2015.setDay(new DateTime(2015, 2, 1, 0, 0));
        feb02_2015.setFacilities(getScheduledFacility("FRISCO_FACILITY"));
        
        ScheduledDay feb10_2015 = new ScheduledDay();
        feb10_2015.setDay(new DateTime(2015, 2, 10, 0, 0));
        feb10_2015.setFacilities(getScheduledFacility("FRISCO_FACILITY"));
        schedule2.setScheduledDays(Lists.newArrayList(feb02_2015, feb10_2015));
        
        return Lists.newArrayList(schedule1, schedule2);
    }

    public Schedule buildSingleSchedule() {
        // Create a Schedule
        Schedule schedule = new Schedule();
        schedule.setScheduleName("demoSchedule");
        schedule.setStartDate(new DateTime(2016, 8, 22, 0, 0));
        schedule.setStateAbbreviation("WI");
        schedule.setInstitutionId("53d667ddbd99f8b7b41e15fa");
        schedule.setInstitutionIdentifier("INS1");
        
        // List of Scheduled Days
        ScheduledDay june_6_2014 = new ScheduledDay();
        june_6_2014.setDay(new DateTime(2014, 6, 6, 0, 0));
        june_6_2014.setFacilities(getScheduledFacility("LONE STAR ABZ"));
        schedule.setScheduledDays(Lists.newArrayList(june_6_2014));

        schedule.setEndDate(new DateTime(2016, 12, 22, 0, 0));

        return schedule;
    }

    private List<ScheduledFacility> getScheduledFacility(String facilityName) {
        ScheduledFacility loneStarFacility = new ScheduledFacility();
        loneStarFacility.setFacilityName(facilityName);
        TreeSet<ScheduledTimeSlot> tss = new TreeSet<>(getAllScheduledTimeSlots());
        loneStarFacility.setTimeSlots(tss);
        return Lists.newArrayList(loneStarFacility);
    }

    private List<ScheduledTimeSlot> getAllScheduledTimeSlots() {

        ScheduledTimeSlot st1 = new ScheduledTimeSlot();
        st1.setSeats(getSeats(1));
        st1.setProctor(getProctor("Tony", "Parker"));
        st1.setStartTime(new DateTime(2014, 12, 12, 8, 0));
        st1.setEndTime(new DateTime(2014, 12, 12, 12, 0));

        ScheduledTimeSlot st2 = new ScheduledTimeSlot();
        st2.setSeats(getSeats(2));
        st2.setProctor(getProctor("Mike", "Tyson"));
        st2.setStartTime(new DateTime(2014, 12, 12, 13, 0));
        st2.setEndTime(new DateTime(2014, 12, 12, 14, 0));

        ScheduledTimeSlot st3 = new ScheduledTimeSlot();
        st3.setSeats(getSeats(3));
        st3.setProctor(getProctor("Lisa", "Mary"));
        st3.setStartTime(new DateTime(2014, 12, 12, 14, 30));
        st3.setEndTime(new DateTime(2014, 12, 12, 15, 45));

        ScheduledTimeSlot st4 = new ScheduledTimeSlot();
        st4.setSeats(getSeats(4));
        st4.setProctor(getProctor("Jane", "Fonda"));
        st4.setStartTime(new DateTime(2014, 12, 12, 16, 0));
        st4.setEndTime(new DateTime(2014, 12, 12, 17, 15));
        
        List<ScheduledTimeSlot> timeSlots = Lists.newArrayList(st1, st2, st3, st4);
        
        assert TOTAL_SEATS_PER_TIMESLOT == timeSlots.size();
        return timeSlots;
    }

    private Set<ScheduledSeat> getSeats(int numStudents) {
        int rowNum = numStudents;
        Set<ScheduledSeat> seats = new HashSet<>();
        ScheduledSeat st1 = getSeat(rowNum * 10);
        st1.setAssessment(new Assessment("MATH"));
        Student peter = getStudent(new Student());
        peter.setEntityId("PTR-898-900");
        peter.setGradeLevelWhenAssessed(GradeLevel.EIGHTHGRADE);
        st1.setStudent(peter);

        ScheduledSeat st2 = getSeat(rowNum * 10 + 1);
        st2.setAssessment(new Assessment("ELA"));
        Student benjamin = getStudent(new Student());
        benjamin.setEntityId("BJMN-op23-909");
        benjamin.setGradeLevelWhenAssessed(GradeLevel.FIFTHGRADE);
        st2.setStudent(benjamin);

        ScheduledSeat st3 = getSeat(rowNum * 10 + 2);
        st3.setAssessment(new Assessment("ELA SD"));
        Student mark = getStudent(new Student());
        mark.setEntityId("MK-88-7877");
        mark.setGradeLevelWhenAssessed(GradeLevel.NINTHGRADE);
        st3.setStudent(mark);

        ScheduledSeat st4 = getSeat(rowNum * 10 + 2);
        st4.setAssessment(new Assessment("ELA SD"));
        Student jenifer = getStudent(new Student());
        jenifer.setEntityId("JU-8-7-999");
        jenifer.setGradeLevelWhenAssessed(GradeLevel.TENTHGRADE);
        st4.setStudent(jenifer);

        if (numStudents == 1) {
            seats.add(st1);
        }
        else if (numStudents == 2) {
            seats.add(st1);
            seats.add(st2);
        }
        else if (numStudents == 3) {
            seats.add(st1);
            seats.add(st2);
            seats.add(st3);
        }
        else if (numStudents == 4) {
            seats.add(st1);
            seats.add(st2);
            seats.add(st3);
            seats.add(st4);
        }
        return seats;
    }
    
    private ScheduledSeat getSeat(int rowNum) {
        ScheduledSeat st = new ScheduledSeat();
        st.setSeatNumber(rowNum * 10);
        return st;
    }

    private Student getStudent(Student student) {
        student.setEntityId("123456");
        student.setStateAbbreviation("WI");
        student.setDistrictIdentifier("101");
        student.setInstitutionIdentifier("10001");
        student.setLastName("LastNameTest");
        student.setFirstName("FNTest");
        student.setMiddleName("MS");
        student.setLanguageCode("tel");
        student.setBirthDate("2013-10-10");
        student.setExternalSsid("WI12345");
        student.setGradeLevelWhenAssessed("THIRDGRADE");
        student.setGender("MALE");
        student.setHispanicOrLatino("Yes");
        student.setAmericanIndianOrAlaskaNative("NO");
        student.setAsian("NO");
        student.setBlackOrAfricanAmerican("NO");
        student.setWhite("Yes");
        student.setNativeHawaiianOrPacificIsland("NO");
        student.setTwoOrMoreRaces("NO");
        student.setiDEAIndicator("NO");
        student.setLepStatus("NO");
        student.setSection504Status("NO");
        student.setDisadvantageStatus("YES");
        student.setLanguageCode("tel");
        student.setTitle3ProgressStatus("PROGRESS");
        student.setMigrantStatus("YES");
        student.setFirstEntryDateIntoUsSchool("2010-09-01");
        student.setLepEntryDate("2010-10-10");
        student.setLepExitDate("2010-10-20");
        student.setTitle3ProgramType("DualLanguage");
        student.setPrimaryDisabilityType("AUT");
        student.setDelete("N");
        return student;
    }

    private Proctor getProctor(final String firstName, final String lastName) {
        Proctor proctor = new Proctor();
        User user = new User();
        user.setEmail(firstName+"_" + lastName+"@gmail.com");
        user.setFirstName(firstName);
        user.setLastName(lastName);
        proctor.setUser(user);
        return proctor;
    }

}
