/*
Educational Online Test Delivery System Copyright (c) 2013 American Institutes for Research

Distributed under the AIR Open Source License, Version 1.0 See accompanying file AIR-License-1_0.txt or at
http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 */

package org.opentestsystem.delivery.testadmin.scheduling;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.Matchers.containsInAnyOrder;
import static org.hamcrest.Matchers.hasSize;
import static org.junit.Assert.assertThat;
import static org.opentestsystem.delivery.testadmin.domain.Affinity.AffinityRule.NONSTRICT;
import static org.opentestsystem.delivery.testadmin.domain.Affinity.AffinityType.ASSESSMENT;
import static org.opentestsystem.delivery.testadmin.domain.Affinity.AffinityType.GRADE;
import static org.opentestsystem.delivery.testadmin.domain.Affinity.AffinityType.SUBJECT;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeSet;

import org.joda.time.DateTime;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testadmin.domain.Affinity;
import org.opentestsystem.delivery.testadmin.domain.Availability;
import org.opentestsystem.delivery.testadmin.domain.Facility;
import org.opentestsystem.delivery.testadmin.domain.Facility.SeatConfiguration;
import org.opentestsystem.delivery.testadmin.domain.FacilityAvailability;
import org.opentestsystem.delivery.testadmin.domain.FacilityAvailability.FacilityTimeSlot;
import org.opentestsystem.delivery.testadmin.domain.TimeSlot;
import org.opentestsystem.delivery.testadmin.domain.schedule.Schedule;
import org.opentestsystem.delivery.testadmin.domain.schedule.ScheduledDay;
import org.opentestsystem.delivery.testadmin.domain.schedule.ScheduledTimeSlot;

public class SchedulerTest {

    private Scheduler scheduler = new Scheduler();

    private Schedule schedule;
    private Map<String, FacilityData> facilityDatas;
    private FacilityData dataForFacility1;
    private Facility facility1;

    private FacilityAvailability availability1;
    private FacilityAvailability availability2;

    private SeatConfiguration seatConfig1;
    private SeatConfiguration seatConfig2;

    private FacilityTimeSlot slot1;
    private FacilityTimeSlot slot2;
    private FacilityTimeSlot slot3;
    private FacilityTimeSlot slot4;

    private TimeSlot ts1;
    private TimeSlot ts2;
    private TimeSlot ts3;
    private TimeSlot ts4;
    private TimeSlot ts5;
    private TimeSlot ts6;
    private TimeSlot ts7;

    private static final DateTime THIRD = new DateTime(2014, 6, 3, 0, 0);
    private static final DateTime TWENTIETH = new DateTime(2014, 6, 20, 0, 0);
    private static final DateTime FIFTEENTH = new DateTime(2014, 6, 15, 0, 0);

    private static final DateTime FIRST_START = new DateTime(2014, 6, 1, 9, 0);
    private static final DateTime FIRST_END = new DateTime(2014, 6, 1, 10, 0);
    private static final DateTime FIRST_START_2 = new DateTime(2014, 6, 1, 11, 0);
    private static final DateTime FIRST_END_2 = new DateTime(2014, 6, 1, 12, 0);

    @Before
    public void setup() {

        schedule = new Schedule();
        schedule.setStartDate(new DateTime(2014, 6, 1, 0, 0));
        schedule.setEndDate(new DateTime(2014, 6, 30, 0, 0));

        facilityDatas = new HashMap<String, FacilityData>();

        dataForFacility1 = new FacilityData();

        facility1 = new Facility();
        facility1.setId("1");
        facility1.setFacilityName("test facility");
        facility1.setInstitutionIdentifier("INST-0001");
        facility1.setInstitutionId("99");
        facility1.setLocation("east wing");

        seatConfig1 = new SeatConfiguration();
        seatConfig1.setNumberOfSeats(5);
        seatConfig1.setTestPlatform("DOS 5.1");

        seatConfig2 = new SeatConfiguration();
        seatConfig2.setNumberOfSeats(10);
        seatConfig2.setTestPlatform("Windows 3.1");
        seatConfig2.setAccessibilityEquipments(com.google.common.collect.Lists.newArrayList("Braille Reader",
                "Audio Reader Software"));

        facility1.setSeatConfigurations(com.google.common.collect.Lists.newArrayList(seatConfig1, seatConfig2));

        dataForFacility1.setFacilityId(facility1.getId());
        dataForFacility1.setFacility(facility1);

        ts1 = new TimeSlot();
        ts1.setStartTime(new DateTime(2014, 01, 01, 9, 0));
        ts1.setEndTime(new DateTime(2014, 01, 01, 10, 0));

        ts2 = new TimeSlot();
        ts2.setStartTime(new DateTime(2014, 01, 01, 11, 0));
        ts2.setEndTime(new DateTime(2014, 01, 01, 12, 0));

        ts3 = new TimeSlot();
        ts3.setStartTime(new DateTime(2014, 01, 01, 14, 30));
        ts3.setEndTime(new DateTime(2014, 01, 01, 15, 0));

        ts4 = new TimeSlot();
        ts4.setStartTime(new DateTime(2014, 01, 01, 15, 15));
        ts4.setEndTime(new DateTime(2014, 01, 01, 16, 45));

        // set affinity for assessment
        ts5 = new TimeSlot();
        ts5.setStartTime(new DateTime(2014, 01, 01, 17, 0));
        ts5.setEndTime(new DateTime(2014, 01, 01, 18, 0));
        ts5.setAffinities(Arrays.asList(new Affinity[] {new Affinity(NONSTRICT, "A1", ASSESSMENT)}));
        
        // set affinity for subject
        ts6 = new TimeSlot();
        ts6.setStartTime(new DateTime(2014, 01, 01, 19, 0));
        ts6.setEndTime(new DateTime(2014, 01, 01, 20, 0));
        ts6.setAffinities(Arrays.asList(new Affinity[] {new Affinity(NONSTRICT, "MATH", SUBJECT)}));
        
        // set affinity for grade
        ts7 = new TimeSlot();
        ts7.setStartTime(new DateTime(2014, 01, 01, 21, 0));
        ts7.setEndTime(new DateTime(2014, 01, 01, 22, 0));
        ts7.setAffinities(Arrays.asList(new Affinity[] {new Affinity(NONSTRICT, "5", GRADE)}));

        slot1 = new FacilityTimeSlot();
        slot1.setTimeSlot(ts1);
        slot1.setSeatConfigurations(com.google.common.collect.Lists.newArrayList(seatConfig1));

        slot2 = new FacilityTimeSlot();
        slot2.setTimeSlot(ts2);
        slot2.setSeatConfigurations(com.google.common.collect.Lists.newArrayList(seatConfig2));

        slot3 = new FacilityTimeSlot();
        slot3.setTimeSlot(ts3);
        slot3.setSeatConfigurations(com.google.common.collect.Lists.newArrayList(seatConfig1, seatConfig2));

        slot4 = new FacilityTimeSlot();
        slot4.setTimeSlot(ts4);
        slot4.setSeatConfigurations(com.google.common.collect.Lists.newArrayList(seatConfig2));

        availability1 = new FacilityAvailability();
        availability1.setFacilityId(facility1.getId());
        availability1.setFacilityName(facility1.getFacilityName());
        availability1.setInstitutionIdentifier(facility1.getInstitutionIdentifier());
        availability1.setInstitutionId(facility1.getInstitutionId());
        availability1.setFromDate(new DateTime(2014, 6, 1, 0, 0));
        availability1.setToDate(new DateTime(2014, 6, 14, 0, 0));
        availability1.setStatus(Availability.AVAILABLE);
        availability1.setFacilityTimes(com.google.common.collect.Lists.newArrayList(slot1, slot2));

        availability2 = new FacilityAvailability();
        availability2.setFacilityId(facility1.getId());
        availability2.setFacilityName(facility1.getFacilityName());
        availability2.setInstitutionIdentifier(facility1.getInstitutionIdentifier());
        availability2.setInstitutionId(facility1.getInstitutionId());
        availability2.setFromDate(new DateTime(2014, 6, 16, 0, 0));
        availability2.setToDate(new DateTime(2014, 6, 30, 0, 0));
        availability2.setStatus(Availability.AVAILABLE);
        availability2.setFacilityTimes(com.google.common.collect.Lists.newArrayList(slot3, slot4));

        dataForFacility1.setAvailabilities(com.google.common.collect.Lists.newArrayList(availability1, availability2));

        facilityDatas.put(facility1.getId(), dataForFacility1);

    }

    @Test
    public void testGenerateSchedule() {

        // generateScheduleStructure(final Schedule inSchedule, final Map<String, FacilityData> facilityData)

        Schedule returnedSchedule = null;
        Method generateMethod = null;

        try {
            generateMethod = scheduler.getClass().getDeclaredMethod("generateScheduleStructure", Schedule.class,
                    Map.class);
        } catch (NoSuchMethodException | SecurityException e) {

            e.printStackTrace();
        }

        if (generateMethod != null) {

            generateMethod.setAccessible(true);

            try {
                returnedSchedule = (Schedule) generateMethod.invoke(scheduler, schedule, facilityDatas);
            } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {

                e.printStackTrace();
            }

        }

        assertThat(returnedSchedule, notNullValue());
        assertThat(returnedSchedule.getScheduledDays(), hasSize(30));

        assertThat(returnedSchedule.getOrderedTimeSlots(false), hasSize(58));

        List<ScheduledDay> scheduledDays = returnedSchedule.getScheduledDays();

        ScheduledDay third = null;
        ScheduledDay twentieth = null;
        ScheduledDay fifteenth = null;

        for (ScheduledDay sd : scheduledDays) {
            if (sd.getDay().equals(THIRD)) {
                third = sd;
            } else if (sd.getDay().equals(TWENTIETH)) {
                twentieth = sd;
            } else if (sd.getDay().equals(FIFTEENTH)) {
                fifteenth = sd;
            }
        }

        assertThat(third, notNullValue());
        assertThat(twentieth, notNullValue());
        assertThat(fifteenth, notNullValue());

        assertThat(third.getFacilities(), hasSize(1));
        assertThat(twentieth.getFacilities(), hasSize(1));
        assertThat(fifteenth.getFacilities(), hasSize(0));

        assertThat(third.getFacilities().get(0).getFacilityName(), is("test facility"));
        assertThat(twentieth.getFacilities().get(0).getFacilityName(), is("test facility"));

        assertThat(third.getFacilities().get(0).getTimeSlots(), hasSize(2));
        assertThat(twentieth.getFacilities().get(0).getTimeSlots(), hasSize(2));

        TreeSet<ScheduledTimeSlot> thirdSlots = third.getFacilities().get(0).getTimeSlots();
        TreeSet<ScheduledTimeSlot> twentiethSlots = twentieth.getFacilities().get(0).getTimeSlots();

        List<Integer> thirdSlotsSeats = new ArrayList<Integer>();

        for (ScheduledTimeSlot sts : thirdSlots) {
            thirdSlotsSeats.add(sts.getSeats().size());
        }

        assertThat(thirdSlotsSeats, containsInAnyOrder(5, 10));

        List<Integer> twentiethSlotsSeats = new ArrayList<Integer>();

        for (ScheduledTimeSlot sts : twentiethSlots) {
            twentiethSlotsSeats.add(sts.getSeats().size());
        }

        assertThat(twentiethSlotsSeats, containsInAnyOrder(15, 10));

    }

    @Test
    public void testVerifyScheduleTimeSlotDate() {

        Schedule returnedSchedule = null;
        Method generateMethod = null;

        try {
            generateMethod = scheduler.getClass().getDeclaredMethod("generateScheduleStructure", Schedule.class,
                    Map.class);
        } catch (NoSuchMethodException | SecurityException e) {

            e.printStackTrace();
        }

        if (generateMethod != null) {

            generateMethod.setAccessible(true);

            try {
                returnedSchedule = (Schedule) generateMethod.invoke(scheduler, schedule, facilityDatas);
            } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {

                e.printStackTrace();
            }

        }

        assertThat(returnedSchedule, notNullValue());

        TreeSet<ScheduledTimeSlot> timeslots = returnedSchedule.getScheduledDays().get(0).getFacilities().get(0)
                .getTimeSlots();

        assertThat(timeslots, hasSize(2));

        List<DateTime> dates = new ArrayList<DateTime>();

        for (ScheduledTimeSlot aSlot : timeslots) {
            dates.add(aSlot.getStartTime());
            dates.add(aSlot.getEndTime());
        }

        assertThat(dates, containsInAnyOrder(FIRST_START, FIRST_END, FIRST_START_2, FIRST_END_2));

    }

}
