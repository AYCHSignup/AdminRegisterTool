/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testadmin.service.impl;

import java.util.ArrayList;
import java.util.List;

import org.opentestsystem.delivery.testadmin.domain.Proctor;
import org.opentestsystem.delivery.testadmin.domain.ProctorRole;
import org.opentestsystem.delivery.testadmin.domain.search.ProctorRoleSearchRequest;
import org.opentestsystem.delivery.testadmin.persistence.ProctorRoleRepository;
import org.opentestsystem.delivery.testadmin.service.ProctorRoleService;
import org.opentestsystem.delivery.testadmin.service.ProctorService;
import org.opentestsystem.delivery.testreg.domain.User;
import org.opentestsystem.delivery.testreg.service.UserService;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class ProctorRoleServiceImpl implements ProctorRoleService {

    @Autowired
    private ProctorRoleRepository proctorRoleRepository;

    // this is the test reg service, not the security service
    @Autowired
    private UserService userService;

    @Autowired
    private ProctorService proctorService;

    @Override
    public ProctorRole saveProctorRole(ProctorRole proctorRole) {

        // find all users with the role and create stub versions of Proctor objects for each
        // this is a change to ensure that admin users do not need to add any availablity or affinities for a Proctor
        // in order to make the Proctor eligible for allocation to a TimeSlot. The Proctor will by default be eligible
        // to Proctor at any time with nothing else entered.

        // bypassing the search request framework here in order to get all User objects in one swoop and to bypass
        // jurisdictional security

        List<User> users = userService.findUsersByRoleName(proctorRole.getName());

        List<Proctor> proctors = new ArrayList<Proctor>();

        Proctor proctor = null;

        for (User user : users) {
            //find if any proctor already exists for this user
            Proctor dbProctor = proctorService.findProctorByUserId(user.getId());
            if (dbProctor == null) {
                proctor = new Proctor();
                proctor.setUser(user);                
                proctors.add(proctor);
            }
        }

        ProctorRole retProcRole = proctorRoleRepository.save(proctorRole);

        proctorService.saveProctors(proctors);

        return retProcRole;
    }

    @Override
    public ProctorRole getProctorRole(String proctorRoleId) {
        return proctorRoleRepository.findOne(proctorRoleId);
    }

    @Override
    public void removeProctorRole(String proctorRoleId) {
        proctorRoleRepository.delete(proctorRoleId);
    }

    @Override
    public SearchResponse<ProctorRole> searchProctorRoles(ProctorRoleSearchRequest proctorRoleSearchRequest) {
        return proctorRoleRepository.search(proctorRoleSearchRequest);
    }

    @Override
    public List<ProctorRole> getAllProctorRolesAvailable() {
        return proctorRoleRepository.findAll();
    }

    @Override
    public List<ProctorRole> getRolesByName(String rolename) {
        return proctorRoleRepository.findByName(rolename);
    }

}
