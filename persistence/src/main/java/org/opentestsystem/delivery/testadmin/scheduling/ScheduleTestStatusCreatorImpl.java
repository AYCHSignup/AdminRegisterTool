/*
Educational Online Test Delivery System Copyright (c) 2013 American Institutes for Research

Distributed under the AIR Open Source License, Version 1.0 See accompanying file AIR-License-1_0.txt or at
http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 */

package org.opentestsystem.delivery.testadmin.scheduling;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

import org.opentestsystem.delivery.testadmin.domain.TestStatus;
import org.opentestsystem.delivery.testadmin.domain.schedule.ScheduleTestStatus;
import org.opentestsystem.delivery.testadmin.service.TestStatusService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.google.common.collect.HashMultimap;

@Component
public class ScheduleTestStatusCreatorImpl implements ScheduleTestStatusCreator {

    @Autowired
    private TestStatusService testStatusService;

    private ConcurrentMap<String, List<TestStatus>> testStatusMap;

    public ScheduleTestStatusCreatorImpl() {
        testStatusMap = new ConcurrentHashMap<String, List<TestStatus>>(5, 0.75f, 10);
    }

    @Override
    public void addStatus(ScheduleTestStatus statusObj) {

        TestStatus status = TestStatus.createForScheduled(statusObj.getAssessmentId(), statusObj.getStudentId(),
                statusObj.getState(), statusObj.getScheduledStart());

        List<TestStatus> statuses = testStatusMap.get(statusObj.getScheduleId());

        if (statuses == null) {
            statuses = new ArrayList<TestStatus>();
        }

        statuses.add(status);

        testStatusMap.put(statusObj.getScheduleId(), statuses);

    }

    @Override
    public void writeForSchedule(String scheduleId) {

        if (testStatusMap.get(scheduleId) != null && !testStatusMap.get(scheduleId).isEmpty()) {
            List<TestStatus> testStatusList = testStatusMap.get(scheduleId);
            for (TestStatus reportObj : testStatusList) {
                TestStatus testStatus = testStatusService.findByAlternateId(reportObj.getStudentId(), reportObj.getStateAbbreviation(),
                        reportObj.getAssessmentId(), reportObj.getOpportunity());
                if (testStatus == null) {
                    testStatusService.saveTestStatus(reportObj);               
                }
            }
            // clear out list for this schedule id after statuses are written
            testStatusMap.remove(scheduleId);
        }

    }

    @Override
    public HashMultimap<String, String> findStatusesByStudents(Set<String> studentIds) {

        List<TestStatus> statuses = testStatusService.findByStudentIds(studentIds);

        HashMultimap<String, String> studentAssessmentsToFilter = HashMultimap.create();

        for (TestStatus status : statuses) {
            if (status.getOpportunity() == 1) {
                studentAssessmentsToFilter.put(status.getStudentId(), status.getAssessmentId());
            }
        }

        return studentAssessmentsToFilter;
    }

}
