/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testadmin.persistence.validator;

import java.util.List;

import org.opentestsystem.delivery.testadmin.domain.Status;
import org.opentestsystem.delivery.testadmin.domain.TestStatus;
import org.opentestsystem.delivery.testadmin.domain.TestStatusRequest;
import org.opentestsystem.delivery.testadmin.service.TestStatusService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.validation.BindingResult;
import org.springframework.validation.Errors;
import org.springframework.validation.FieldError;

@Component
public class TestStatusValidator extends TestAdminBaseValidator {

    @Autowired
    TestStatusService testStatusService;

    @Override
    public boolean supports(Class<?> clazz) {
        return List.class.isAssignableFrom(clazz);
    }

    @Override
    public void validate(Object target, Errors errors, Object... validationHints) {

        final List<TestStatusRequest> statusRequests = (List<TestStatusRequest>) target;

        for (TestStatusRequest request : statusRequests) {
            super.validate(request, errors, validationHints);

            if (!(request.getStatus().equals(Status.COMPLETED.name()) || request.getStatus().equals(Status.STARTED.name()))) {
                setError("status", request.getStatus(), "Valid allowed values for Status are COMPLETED or STARTED", errors);
            }
            TestStatus status = testStatusService.findByAlternateId(request.getStudentId(), request.getStateAbbreviation(), request.getTestId(), request.getOpportunity());

            if (status == null) {
                setError("testId", request.getTestId(), "State Abbreviation " +
                        request.getStateAbbreviation() + " Test Id " + request.getTestId() + " not found in the database", errors);
            } else {
                // Update ID fields
                request.setId(status.getId());
            }

        }
    }

    public static void setError(String label, String invalidValue, String message, Errors errors) {
        ((BindingResult) errors).addError(new FieldError("TestStatusRequest", label, invalidValue, false, null, null, message));
    }
}
