/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testadmin.service.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import org.joda.time.DateTime;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.opentestsystem.delivery.testadmin.domain.StudentScheduleReport;
import org.opentestsystem.delivery.testadmin.domain.TestAdminReport;
import org.opentestsystem.delivery.testadmin.domain.schedule.ScheduledDay;
import org.opentestsystem.delivery.testadmin.domain.schedule.ScheduledFacility;
import org.opentestsystem.delivery.testadmin.domain.schedule.ScheduledSeat;
import org.opentestsystem.delivery.testadmin.domain.schedule.ScheduledTimeSlot;
import org.opentestsystem.delivery.testadmin.persistence.TestStatusRepository;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.persistence.StudentRepository;
import org.opentestsystem.delivery.testreg.service.TestRegPersister;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.google.common.base.Function;
import com.google.common.base.Joiner;

@Service("studentScheduleReportService")
public class StudentScheduleReportServiceImpl extends ScheduleReportServiceImpl {

    private static final DateTimeFormatter timeFormat = DateTimeFormat.forPattern("hh:mm a");

    @Autowired
    StudentRepository studentRepos;

    @Autowired
    private TestRegPersister entityService;

    @Autowired
    TestStatusRepository studentTestRepository;

    static final Function<Student, String> STUDENT_GROUP_BY_ID = new Function<Student, String>() {
        @Override
        public String apply(final Student student) {
            return student.getEntityId();
        }
    };

    @Override
    public List<TestAdminReport> populateScheduleReport(List<ScheduledDay> allScheduleDays, List<DateTime> rangeOfdates, String institutionId) {
        List<TestAdminReport> reportList = new ArrayList<TestAdminReport>();
        for (ScheduledDay sday : allScheduleDays) {
            if (rangeOfdates.contains(sday.getDay())) {
                for (ScheduledFacility facility : sday.getFacilities()) {
                    Set<ScheduledTimeSlot> schdulesTimeSlots = facility.getTimeSlots();
                    for (ScheduledTimeSlot timeSlot : schdulesTimeSlots) {
                        Set<ScheduledSeat> scheduledSeats = timeSlot.getSeats();
                        for (ScheduledSeat seat : scheduledSeats) {
                            StudentScheduleReport report = new StudentScheduleReport();
                            if (seat.getStudent() != null) {
                                report.setFirstName(seat.getStudent().getFirstName());
                                report.setLastName(seat.getStudent().getLastName());
                                report.setMiddleInitial(seat.getStudent().getMiddleName());
                                report.setSsId(seat.getStudent().getExternalSsid());
                                if (seat.getAssessment() != null) {
                                    report.setTestName(seat.getAssessment().getTestName());
                                    report.setTestLabel(seat.getAssessment().getTestLabel());
                                    report.setScheduledDate(sday.getDay());
                                }
                                if (seat.getAccessibilityEquipments() != null) {
                                    report.setAccessibilityEquipments(Joiner.on(",").join(seat.getAccessibilityEquipments()));
                                }
                                report.setTimeRange(timeFormat.print(timeSlot.getStartTime()) + " - " + timeFormat.print(timeSlot.getEndTime()));
                                report.setLocation(facility.getLocation());
                                reportList.add(report);
                            }
                        }

                    }
                }
            }
        }
        return reportList;
    }
}
