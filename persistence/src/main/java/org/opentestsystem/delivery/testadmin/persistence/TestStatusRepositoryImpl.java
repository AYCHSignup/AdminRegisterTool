/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testadmin.persistence;

import static org.springframework.data.mongodb.core.query.Criteria.where;

import java.util.Collection;
import java.util.List;

import org.opentestsystem.delivery.testadmin.domain.TestStatus;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoOperations;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;

public class TestStatusRepositoryImpl implements TestStatusRepositoryCustom {

    @Autowired
    private transient MongoOperations mongoOperations;

    public List<TestStatus> findStudentReport(final Collection<String> studentIdList, final String stateAbbreviation,
            final String assessmentId, final int opportunity, final String testStatus) {
        final Query query = new Query();
        query.addCriteria(Criteria.where("studentId").in(studentIdList));
        query.addCriteria(Criteria.where("stateAbbreviation").is(stateAbbreviation));
        if (assessmentId != null) {
            query.addCriteria(Criteria.where("assessmentId").is(assessmentId));
        }
        query.addCriteria(Criteria.where("opportunity").is(opportunity));
        if (testStatus != null && !testStatus.isEmpty()) {
            query.addCriteria(Criteria.where("status").is(testStatus));
        }
        return mongoOperations.find(query, TestStatus.class);
    }

    @Override
    public TestStatus findByReportAlternateId(String studentId, String stateAbbreviation, String assessmentId,
            int opportunity) {

        final Query query = new Query();
        query.addCriteria(Criteria.where("studentId").is(studentId));
        query.addCriteria(Criteria.where("stateAbbreviation").is(stateAbbreviation));
        query.addCriteria(Criteria.where("assessmentId").is(assessmentId));
        query.addCriteria(Criteria.where("opportunity").is(opportunity));
        return mongoOperations.findOne(query, TestStatus.class);
    }

    @Override
    public TestStatus findByStudentIdStateAbbrAssessment(String studentId, String stateAbbreviation, String assessmentId) {

        final Query query = new Query();
        query.addCriteria(Criteria.where("studentId").is(studentId));
        query.addCriteria(Criteria.where("stateAbbreviation").is(stateAbbreviation));
        query.addCriteria(Criteria.where("assessmentId").is(assessmentId));
        
        return mongoOperations.findOne(query, TestStatus.class);
    }
    
    @Override
    public List<TestStatus> findByStudentIds(Collection<String> studentIds) {

        Query query = Query.query(Criteria.where("studentId").in(studentIds));

        return mongoOperations.find(query, TestStatus.class);
    }
    
    @Override
    public void deleteTestStatusByStudentEntityIdAndState(String studentEntityId, String stateAbbr) {

        final Query query = new Query();

        query.addCriteria(where("studentId").is(studentEntityId));
        query.addCriteria(where("stateAbbreviation").is(stateAbbr));

        this.mongoOperations.remove(query, TestStatus.class);

    } 
}
