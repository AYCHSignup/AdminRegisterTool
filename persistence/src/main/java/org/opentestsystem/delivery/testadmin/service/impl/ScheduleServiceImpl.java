/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testadmin.service.impl;

import java.util.List;

import org.joda.time.DateTime;
import org.opentestsystem.delivery.testadmin.domain.schedule.Schedule;
import org.opentestsystem.delivery.testadmin.domain.schedule.ScheduledDay;
import org.opentestsystem.delivery.testadmin.domain.search.ScheduleSearchRequest;
import org.opentestsystem.delivery.testadmin.persistence.ScheduleRepository;
import org.opentestsystem.delivery.testadmin.scheduling.Scheduler;
import org.opentestsystem.delivery.testadmin.service.ScheduleService;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.google.common.collect.Lists;

@Service
public class ScheduleServiceImpl implements ScheduleService {

    @Autowired
    private ScheduleRepository scheduleRepository;

    @Autowired
    private Scheduler scheduler;

    @Override
    public Schedule getSchedule(String scheduleId) {
        return scheduleRepository.findOne(scheduleId);
    }

    @Override
    public Schedule getScheduleByName(String scheduleName) {
        return scheduleRepository.findByScheduleName(scheduleName);
    }
    
    @Override
    public Schedule updateScheduleDay(String scheduleId, ScheduledDay scheduledDay) {
        return scheduleRepository.updateScheduleDay(scheduleId, scheduledDay);
    }
    
    @Override
    public Schedule saveSchedule(Schedule schedule) {
        schedule = scheduler.createSchedule(schedule);
        return scheduleRepository.save(schedule);           
    }

    @Override
    public void removeSchedule(String scheduleId) {
        scheduleRepository.delete(scheduleId);
    }

    @Override
    public SearchResponse<Schedule> searchSchedules(ScheduleSearchRequest searchRequest) {
        return scheduleRepository.search(searchRequest);
    }

    @Override
    public List<Schedule> findAll() {
        return scheduleRepository.findAll();
    }

    @Override
    public Schedule findSchedule(String institutionId, String facility, DateTime dateTime) {
        Schedule schedule = scheduleRepository.findScheduleByFacilityAndStartDate(institutionId, facility, dateTime);

        if (schedule != null) {
            for (ScheduledDay scheduledDay : schedule.getScheduledDays()) {
                if (scheduledDay.getDay().equals(dateTime)) {
                    schedule.setScheduledDays(Lists.newArrayList(scheduledDay)); // Removed the ones that are not
                                                                                 // needed.
                    return schedule;
                }
            }
        }
        return schedule;
    }

    @Override
    public List<Schedule> getSchedulesByInstitution(String institutionId) {
        return scheduleRepository.findByInstitutionId(institutionId);
    }
}
