/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testadmin.service.impl;

import java.util.List;

import org.joda.time.DateTime;
import org.opentestsystem.delivery.testadmin.domain.Status;
import org.opentestsystem.delivery.testadmin.domain.TestStatus;
import org.opentestsystem.delivery.testadmin.domain.schedule.Schedule;
import org.opentestsystem.delivery.testadmin.domain.schedule.ScheduledDay;
import org.opentestsystem.delivery.testadmin.domain.schedule.ScheduledFacility;
import org.opentestsystem.delivery.testadmin.domain.schedule.ScheduledSeat;
import org.opentestsystem.delivery.testadmin.domain.schedule.ScheduledTimeSlot;
import org.opentestsystem.delivery.testadmin.domain.search.ScheduleSearchRequest;
import org.opentestsystem.delivery.testadmin.persistence.ScheduleRepository;
import org.opentestsystem.delivery.testadmin.scheduling.Scheduler;
import org.opentestsystem.delivery.testadmin.service.ScheduleService;
import org.opentestsystem.delivery.testadmin.service.TestStatusService;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;

import com.google.common.collect.Lists;

@Service
public class ScheduleServiceImpl implements ScheduleService {

    @Autowired
    private ScheduleRepository scheduleRepository;

    @Autowired
    private TestStatusService testStatusService;

    @Autowired
    private Scheduler scheduler;

    @Override
    public Schedule getSchedule(final String scheduleId) {
        return this.scheduleRepository.findOne(scheduleId);
    }

    @Override
    public Schedule getScheduleByName(final String scheduleName) {
        return this.scheduleRepository.findByScheduleName(scheduleName);
    }

    @Override
    public Schedule updateScheduleDay(final String scheduleId, final ScheduledDay scheduledDay) {
        return this.scheduleRepository.updateScheduleDay(scheduleId, scheduledDay);
    }

    @Override
    public Schedule saveSchedule(Schedule schedule) {
        schedule = this.scheduler.createSchedule(schedule);
        return this.scheduleRepository.save(schedule);
    }

    @Override
    public void removeSchedule(final String scheduleId) {
        // remove students from test status for status 'SCHEDULE'
        final Schedule schedule = getSchedule(scheduleId);
        modifyTestStatusForSchedule(schedule);
        this.scheduleRepository.delete(scheduleId);
    }

    @Override
    public SearchResponse<Schedule> searchSchedules(final ScheduleSearchRequest searchRequest) {
        return this.scheduleRepository.search(searchRequest);
    }

    @Override
    public List<Schedule> findAll() {
        return this.scheduleRepository.findAll();
    }

    @Override
    public Schedule findSchedule(final String institutionId, final String facility, final DateTime dateTime) {
        final Schedule schedule = this.scheduleRepository.findScheduleByFacilityAndStartDate(institutionId, facility, dateTime);

        if (schedule != null) {
            for (final ScheduledDay scheduledDay : schedule.getScheduledDays()) {
                if (scheduledDay.getDay().equals(dateTime)) {
                    schedule.setScheduledDays(Lists.newArrayList(scheduledDay)); // Removed the ones that are not
                                                                                 // needed.
                    return schedule;
                }
            }
        }
        return schedule;
    }

    @Override
    public List<Schedule> getSchedulesByInstitution(final String institutionId) {
        return this.scheduleRepository.findByInstitutionId(institutionId);
    }

    private void modifyTestStatusForSchedule(final Schedule schedule) {
        for (final ScheduledDay day : schedule.getScheduledDays()) {
            for (final ScheduledFacility facility : day.getFacilities()) {
                for (final ScheduledTimeSlot timeslot : facility.getTimeSlots()) {
                    if (!CollectionUtils.isEmpty(timeslot.getSeats())) {
                        for (final ScheduledSeat seat : timeslot.getSeats()) {
                            if (seat.isSeatScheduled()) {
                                // get studentId, stateAbbreviation and assessment to find test status
                                final TestStatus testStatus = this.testStatusService.findByAlternateId
                                        (seat.getStudent().getEntityId(), seat.getStudent().getStateAbbreviation(),
                                                seat.getAssessment().getId(), 1);
                                if (testStatus.getStatus() == Status.SCHEDULED) {
                                    testStatus.setScheduledStart (null);
                                    this.testStatusService.saveTestStatus (testStatus);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
