/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testadmin.service.impl;

import java.util.List;

import org.joda.time.DateTime;
import org.opentestsystem.delivery.testadmin.domain.FacilityAvailability;
import org.opentestsystem.delivery.testadmin.domain.FacilityAvailability.FacilityTimeSlot;
import org.opentestsystem.delivery.testadmin.domain.search.FacilityAvailabilitySearchRequest;
import org.opentestsystem.delivery.testadmin.persistence.FacilityAvailabilityRepository;
import org.opentestsystem.delivery.testadmin.service.FacilityAvailabilityService;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class FacilityAvailabilityServiceImpl implements FacilityAvailabilityService {

    @Autowired
    private FacilityAvailabilityRepository facilityAvailabilityRepository;
    
    @Override
    public FacilityAvailability getFacilityAvailability(String facilityAvailabilityId) {
        return facilityAvailabilityRepository.findOne(facilityAvailabilityId);
    }

    @Override
    public FacilityAvailability saveFacilityAvailability(FacilityAvailability facilityAvailability) {
        return facilityAvailabilityRepository.save(facilityAvailability);
    }

    @Override
    public void removeFacilityAvailability(String facilityAvailabilityId) {
        facilityAvailabilityRepository.delete(facilityAvailabilityId);       
    }

    @Override
    public SearchResponse<FacilityAvailability> searchFacilityAvailabilities(FacilityAvailabilitySearchRequest searchRequest) {
        return facilityAvailabilityRepository.search(searchRequest);
    }

    @Override
    public List<FacilityAvailability> getAvailabilities(String facilityId) {
        return facilityAvailabilityRepository.findByFacilityId(facilityId);
    }

    @Override
    public List<FacilityAvailability> getAvailabilities(String facilityId, String institutionIdentifier) {
        return facilityAvailabilityRepository.findByFacilityIdAndInstitutionIdentifier(facilityId, institutionIdentifier);
    }

    @Override
    public FacilityTimeSlot getFacilityTimeSlot(String facilityId, String institutionId, DateTime scheduledDay, String timeSlotId) {
        List<FacilityTimeSlot> facilityTimeSlots = facilityAvailabilityRepository
                .findByFacilityIdAndInstitutionIdentifierAndTimeSlot(facilityId, institutionId, scheduledDay, timeSlotId).getFacilityTimes();
        
        if(facilityTimeSlots !=null && facilityTimeSlots.size() > 1) {
            throw new RuntimeException("There is a problem with retrieving TimeSlots for a facility. Expected One but found more.");
        }        
        return (facilityTimeSlots !=null) ? facilityTimeSlots.get(0) : new FacilityTimeSlot();
    }
}
