/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria.verifiers;

import static org.opentestsystem.delivery.testreg.domain.AnnotationHelper.getFieldLabel;
import static org.opentestsystem.delivery.testreg.domain.Sb11EntityUtils.getHumanReadableName;
import static org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.VerifierUtils.addFieldError;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import javax.annotation.Resource;

import org.opentestsystem.delivery.testreg.domain.StateEntity;
import org.opentestsystem.delivery.testreg.domain.TestRegistrationBase;
import org.opentestsystem.delivery.testreg.persistence.Verifier;
import org.opentestsystem.delivery.testreg.service.Sb11EntityRepositoryService;
import org.springframework.stereotype.Component;
import org.springframework.validation.FieldError;

@Component
public abstract class StateVerifier<T extends TestRegistrationBase> implements Verifier<T> {

    @Resource(name = "sb11EntityService")
    private Sb11EntityRepositoryService sb11EntityRepositoryService;

    @Override
    public List<FieldError> verify(final T obj) {
        StateEntity stateEntity = sb11EntityRepositoryService.findByEntityId(getStateAbbreviation(obj),
                StateEntity.class);

        if (stateEntity == null) {
            String stateAbbreviationLabel = getFieldLabel(obj, getStateAbbreviationField());
            String humanReadableStateLabel = getHumanReadableName(stateAbbreviationLabel);
            List<FieldError> errors = new ArrayList<>();
            addFieldError(errors, obj, stateAbbreviationLabel, getStateAbbreviation(obj), humanReadableStateLabel
                    + " not found in the database");
            return errors;
        }
        return Collections.emptyList();
    }

    protected abstract String getStateAbbreviation(T obj);

    protected abstract String getStateAbbreviationField();
}
