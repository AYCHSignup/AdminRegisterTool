/*************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2015 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at 
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 *************************************************************************/

package org.opentestsystem.delivery.testreg.service.impl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;

import org.opentestsystem.delivery.testreg.domain.ARTHelpers;
import org.opentestsystem.delivery.testreg.domain.AccommodationResourceType;
import org.opentestsystem.delivery.testreg.domain.AccommodationText;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.MasterResourceAccommodation;
import org.opentestsystem.delivery.testreg.persistence.MasterResourceAccommodationRepository;
import org.opentestsystem.delivery.testreg.persistence.criteria.OrderComparator;
import org.opentestsystem.delivery.testreg.service.MasterResourceAccommodationService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class MasterResourceAccommodationServiceImpl implements MasterResourceAccommodationService
{
  
  @Autowired
  private MasterResourceAccommodationRepository masterResourceRepository;

  @Override
  public List<MasterResourceAccommodation> findAll() {
      return masterResourceRepository.findAll();
  }
  
  @Override
  public MasterResourceAccommodation findByCode(String code){
    return masterResourceRepository.findByCode(code);
  }
  
  @Override
  public HashMap<FormatType,List<String>>  getAllCodes() {
    List<MasterResourceAccommodation>  masterResourceFamily = this.findAll();
    Collections.sort(masterResourceFamily, new OrderComparator());
    List<String> codes = new ArrayList<String>();
    // some required fields are missing in header 
    int index = -1;
    codes.add (++index, "StudentIdentifier");
    codes.add (++index, "StateAbbreviation");
    codes.add (++index, "Subject");
    HashMap<FormatType,List<String>> accCodes = new HashMap<FormatType,List<String>>();
    for (MasterResourceAccommodation resource : masterResourceFamily) {
      codes.add (resource.getOrder () + index, resource.getCode ());
    }
    accCodes.put (FormatType.DESIGNATEDSUPPORTSANDACCOMMODATIONS, codes);
    return accCodes;
  }
  
  @Override
  public List<String>  getAllOptionsCodes() {
    List<MasterResourceAccommodation>  masterResourceFamily = this.findAll();
    List<String> masterResourceCodes = new ArrayList<String>();
    Collections.sort (masterResourceFamily, new OrderComparator ());
    int index = -1;
    masterResourceCodes.add (++index, "studentId");
    masterResourceCodes.add (++index, "stateAbbreviation");
    masterResourceCodes.add (++index, "subject");
    for (MasterResourceAccommodation resource : masterResourceFamily) {
      masterResourceCodes.add (resource.getOrder () + index, ARTHelpers.convertToLowerCase(resource.getCode ()));
    }
    return masterResourceCodes;
  }

  @Override
  public List<String>  getOptionCodes(String code){
    MasterResourceAccommodation  masterResource = this.findByCode(code);
    List<String> options = new ArrayList<String>();
    if (masterResource != null) {
      for (MasterResourceAccommodation.AccommodationOption str : masterResource.getOptions ()) {
        options.add (str.getCode ());
      }
    }
    return options;
  }
  
  @Override
  public AccommodationResourceType getResourceType(String code){
    MasterResourceAccommodation  masterResource = this.findByCode(code);
    AccommodationResourceType resourceType = null;
    if (masterResource != null) {
      resourceType = masterResource.getResourceType ();
    }
    return resourceType;
  }
  
  @Override
  public HashMap<String,String> getAllResourceTypes(){
    List<MasterResourceAccommodation>  masterResources = this.findAll();
    HashMap<String,String> accResourceTypes = new HashMap<String,String>();
    if (masterResources != null) {
      for (MasterResourceAccommodation resource : masterResources) {
        accResourceTypes.put (resource.getCode (), resource.getResourceType ().name ());
      }
     }
    return accResourceTypes; 
  } 
  
  @Override
  public String getDefaultOption(String code){
    MasterResourceAccommodation  masterResource = this.findByCode(code);
    String defaultOption = null;
    if (masterResource != null) {
      defaultOption = masterResource.getDefaultSelection ();
     }
    return defaultOption; 
  }
  
  @Override
  public HashMap<String,String> getAllDefaultOptions(){
    List<MasterResourceAccommodation>  masterResources = this.findAll();
    HashMap<String,String> accDefaultOptions = new HashMap<String,String>();
    if (masterResources != null) {
      for (MasterResourceAccommodation resource : masterResources) {
        if (resource.getDefaultSelection () != null) {
          accDefaultOptions.put (ARTHelpers.convertToLowerCase(resource.getCode ()), resource.getDefaultSelection ());
        }
      }
     }
    return accDefaultOptions; 
  }
  
  @Override
  public HashMap<String,List<String>>  getMasterResourceOptions() {
    List<MasterResourceAccommodation>  masterResourceFamily = this.findAll();
    HashMap<String,List<String>> masterResourceOptions = new LinkedHashMap<String,List<String>>();
    List<String> options = null;
    for (MasterResourceAccommodation resource : masterResourceFamily) {
      options = new ArrayList<String>();
      for (MasterResourceAccommodation.AccommodationOption str : resource.getOptions ()) {
        options.add (str.getCode ());
      }
      masterResourceOptions.put (resource.getCode (), options);
    }
    return masterResourceOptions;
  }
  
  @Override
  public List<String> getAccommodationResourceHeaderNames () {
    List<MasterResourceAccommodation> masterResourceFamily = this.findAll ();
    Collections.sort (masterResourceFamily, new OrderComparator ());
    List<String> options = new ArrayList<String> ();
    int index = -1;
    if (!options.contains ("Subject")) {
      options.add(++index, "Subject");
    }
    
    for (MasterResourceAccommodation resource : masterResourceFamily) {
      for (AccommodationText text : resource.getHeader ()) {
        if (text.getLanguage ().equalsIgnoreCase ("eng")) {
          options.add (resource.getOrder () + index,  text.getLabel ());
        }
        
      }
    }
    return options;
  }
  
  @Override
  public List<String> getMultiSelectResourceTypes(){
    List<MasterResourceAccommodation>  masterResources = this.findAll();
    List<String> accResourceTypes = new ArrayList<String>();
    if (masterResources != null) {
      for (MasterResourceAccommodation resource : masterResources) {
        if (resource.getResourceType ().equals (AccommodationResourceType.MultiSelectResource)) {
          accResourceTypes.add (ARTHelpers.convertToLowerCase(resource.getCode ()));
        } 
      }
     }
    return accResourceTypes; 
  }
  
  @Override
  public HashMap<String,List<String>>  getMutuallyExclusiveOptions() {
    List<MasterResourceAccommodation>  masterResourceFamily = this.findAll();
    HashMap<String,List<String>> masterResourceOptions = new HashMap<String,List<String>>();
    List<String> options = null;
    for (MasterResourceAccommodation resource : masterResourceFamily) {
      options = new ArrayList<String>();
      for (MasterResourceAccommodation.AccommodationOption str : resource.getOptions ()) {
        if (str.isMutuallyExclusive ()) {
          options.add (str.getCode ());
        }
      }
      masterResourceOptions.put (ARTHelpers.convertToLowerCase(resource.getCode ()), options);
    }
    return masterResourceOptions;
  }
}
