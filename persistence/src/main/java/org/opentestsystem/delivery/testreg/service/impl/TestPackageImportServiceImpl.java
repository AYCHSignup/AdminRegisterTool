/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.service.impl;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import org.opentestsystem.authoring.testspecbank.client.TestSpecBankClient;
import org.opentestsystem.authoring.testspecbank.client.domain.TestSpecBankClientObj;
import org.opentestsystem.delivery.testreg.domain.Assessment;
import org.opentestsystem.delivery.testreg.domain.search.TestPackageSearchRequest;
import org.opentestsystem.delivery.testreg.persistence.AssessmentRepository;
import org.opentestsystem.delivery.testreg.persistence.VersionComparator;
import org.opentestsystem.delivery.testreg.service.TestPackageImportService;
import org.opentestsystem.delivery.testreg.service.TestRegistrationService;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

import tds.common.ValidationError;
import tds.testpackage.model.TestPackage;

@Service("testPackageImportService")
public class TestPackageImportServiceImpl implements TestPackageImportService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TestPackageImportServiceImpl.class);

    private static Map<String, String> subjectAbbreviationsToLabels = ImmutableMap.of(
        "ELA", "English Language Arts",
        "MATH", "Mathematics"
    );

    @Resource(name = "sb11NonEntityService")
    private TestRegistrationService<Assessment> sb11NonEntityService;

    @Autowired
    private AssessmentRepository assessmentRepository;

    @Resource
    private TestSpecBankClient tsbClient;

    // TODO this is temporary until we implement TESTREG-523
    @Value("${tsb.tsbUrl}")
    private String tsbUrl;

    @Override
    public SearchResponse<Assessment> searchTestPackage(final String tenantId, final Map<String, String[]> searchParams) {
        SearchResponse<Assessment> customSearchResult = null;
        try {
            SearchResponse<TestSpecBankClientObj> tsbResponse = tsbClient.getTestSpecificationByTenantSet(ImmutableSet.of(tenantId),
                searchParams);
            TestPackageSearchRequest searchRequest = new TestPackageSearchRequest(searchParams);
            List<Assessment> assessmentList = new ArrayList<Assessment>();
            for (TestSpecBankClientObj clientObj : tsbResponse.getSearchResults()) {
                Assessment assessmentObj = TestPackageParserUtil.parseSearchResult(clientObj);
                assessmentObj.setTenantId(tenantId);
                assessmentObj.setSourceTsb(tsbUrl);
                assessmentList.add(updateAssessmentStatus(assessmentObj));
            }

            customSearchResult = new SearchResponse<Assessment>(assessmentList, searchRequest,
                tsbResponse.getTotalCount());
        } catch (Exception ex) {
            LOGGER.error("Exception in Accessing the TestSpecBankClient" + ex, ex);
        }
        return customSearchResult;
    }

    @Override
    public Optional<ValidationError> deleteTestPackage(final String... assessmentKeys) {
        // Delete from TSB
        for (String key : assessmentKeys) {
            final Optional<ValidationError> maybeError = tsbClient.deleteTestSpecification(key);
            if (maybeError.isPresent()) {
                return maybeError;
            }
        }

        // Delete from ART.  There can be multiple assessments with the same name.
        try {
            final List<Assessment> assessmentsToDelete = assessmentRepository.findByEntityIdIn(assessmentKeys);
            sb11NonEntityService.deleteDomainObjects(assessmentsToDelete);
        } catch (final Exception e) {
            return Optional.of(new ValidationError("exception", e.getMessage()));
        }

        return Optional.empty();
    }

    private Assessment updateAssessmentStatus(final Assessment importedAssessment) {
        List<Assessment> existingAssessments = assessmentRepository.findWithPossiblyNullLabel(
            importedAssessment.getTestName(), importedAssessment.getTestLabel(), importedAssessment.getTenantId(),
            importedAssessment.getSourceTsb());

        Assessment existingAssessment = null;

        if (existingAssessments.size() > 1) {
            Collections.sort(existingAssessments, new VersionComparator());
            existingAssessment = existingAssessments.get(existingAssessments.size() - 1);
        } else if (existingAssessments.size() == 1) {
            existingAssessment = existingAssessments.get(0);
        }

        if (existingAssessment != null) {
            if (importedAssessment.equals(existingAssessment)) {
                importedAssessment.setExists(true);
            } else if (importedAssessment.getTestName().equals(existingAssessment.getTestName())) {
                int versionCompare = Double.compare(Double.parseDouble(importedAssessment.getVersion()),
                    Double.parseDouble(existingAssessment.getVersion()));
                if (versionCompare > 0) {
                    importedAssessment.setUpdatedVersion(true);
                }
                importedAssessment.setExists(true);
            }
        }
        return importedAssessment;
    }

    @Override
    public Assessment updateAssessment(final Assessment updateAssessment) {

        List<Assessment> dbAssessments = assessmentRepository.findWithPossiblyNullLabel(updateAssessment.getTestName(),
            updateAssessment.getTestLabel(), updateAssessment.getTenantId(), updateAssessment.getSourceTsb());

        Assessment dbAssessment = null;

        if (dbAssessments.size() > 1) {
            Collections.sort(dbAssessments, new VersionComparator());
            dbAssessment = dbAssessments.get(dbAssessments.size() - 1);
        } else if (dbAssessments.size() == 1) {
            dbAssessment = dbAssessments.get(0);
        }

        updateAssessment.setNumGlobalOpportunities(dbAssessment.getNumGlobalOpportunities());
        updateAssessment.setDelayRule(dbAssessment.getDelayRule());
        updateAssessment.setTestWindow(dbAssessment.getTestWindow());
        updateAssessment.setImplicitEligibilityRules(dbAssessment.getImplicitEligibilityRules());
        updateAssessment.setId(dbAssessment.getId());
        updateAssessment.setEligibilityType(dbAssessment.getEligibilityType());
        updateAssessment.setAcademicYear(dbAssessment.getAcademicYear());
        Assessment savedAndUpdatedAssessment = sb11NonEntityService.saveDomainObject(updateAssessment);
        return savedAndUpdatedAssessment;

    }

    @Override
    public Optional<ValidationError> loadTestPackage(final String tenantId, final TestPackage testPackage) {
        List<TestSpecBankClientObj> clientObjects = createTestSpecBankClientObj(tenantId, testPackage);
        try {
            clientObjects.forEach(tsbObj -> tsbClient.publishTestSpecification(tsbObj));
        } catch (Exception e) {
            LOGGER.error("Unable to load test package into the Test Specification Bank: {}", e.getMessage());
            return Optional.of(new ValidationError("Error", "Unable to load test package into the Test Specification Bank"));
        }
        return Optional.empty();
    }

    private List<TestSpecBankClientObj> createTestSpecBankClientObj(final String tenantId, final TestPackage testPackage) {

        return testPackage.getAssessments().stream()
            .map(assessment ->
                {
                    final TestSpecBankClientObj tsbClient = new TestSpecBankClientObj();
                    tsbClient.setName(assessment.getId());
                    tsbClient.setSubjectAbbreviation(testPackage.getSubject());
                    tsbClient.setSubjectName(subjectAbbreviationsToLabels.get(testPackage.getSubject()));
                    tsbClient.setVersion(testPackage.getVersion());
                    tsbClient.setType(testPackage.getType());
                    tsbClient.setLabel(assessment.getLabel());
                    tsbClient.setGrade(assessment.getGrades().stream()
                        .map(g -> g.getValue())
                        .collect(Collectors.toList())
                        .toArray(new String[assessment.getGrades().size()]));
                    tsbClient.setTenantId(tenantId);
                    tsbClient.setPurpose(TestSpecBankClientObj.Purpose.REGISTRATION);
                    return tsbClient;
                })
            .collect(Collectors.toList());
    }
}
