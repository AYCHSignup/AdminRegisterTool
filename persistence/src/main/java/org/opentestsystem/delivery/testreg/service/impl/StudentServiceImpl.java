/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.service.impl;

import java.util.List;

import javax.annotation.Resource;

import org.apache.commons.lang.StringUtils;
import org.opentestsystem.delivery.testreg.domain.HierarchyLevel;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.persistence.StudentRepository;
import org.opentestsystem.delivery.testreg.service.Sb11EntityRepositoryService;
import org.opentestsystem.delivery.testreg.service.StudentService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service("studentService")
public class StudentServiceImpl<T extends Student> extends Sb11NonEntityServiceImpl<T> implements StudentService {

    @Autowired
    private StudentRepository studentRepository;

    @Resource(name = "sb11EntityService")
    private Sb11EntityRepositoryService sb11EntityService;

    @Override
    public Student findByStudentIdAndStateAbbreviation(final String studentId, final String stateAbbreviation) {
        return this.studentRepository.findByEntityIdAndStateAbbreviation(studentId, stateAbbreviation);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public T saveDomainObject(final T domainObj) {
        setAssociations(domainObj);
        return super.saveDomainObject(domainObj);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<T> updateDomainObjects(final List<T> domainObjList) {
        setParentEntityMongoId(domainObjList);
        return super.updateDomainObjects(domainObjList);
    }

    private void setParentEntityMongoId(final List<T> students) {
        for (final Student student : students) {
            setAssociations(student);
        }
    }

    private void setAssociations(final Student student) {
        // get and set institution mongo id
        if (StringUtils.isNotBlank(student.getInstitutionIdentifier())) {
            final Sb11Entity institutionEntity = findSb11EntityByEntityIdAndStateAbbreviation(student.getInstitutionIdentifier(), student.getStateAbbreviation(), HierarchyLevel.INSTITUTION);
            if (institutionEntity != null) {
                student.setInstitutionEntityMongoId(institutionEntity.getId());
                if (StringUtils.isBlank(student.getDistrictIdentifier()) && institutionEntity.getParentEntityType() == HierarchyLevel.DISTRICT) {
                    student.setDistrictIdentifier(institutionEntity.getParentEntityId());
                }
            }
        }

        // get and set district mongo id
        if (StringUtils.isNotBlank(student.getDistrictIdentifier())) {
            final Sb11Entity districtEntity = findSb11EntityByEntityIdAndStateAbbreviation(student.getDistrictIdentifier(), student.getStateAbbreviation(), HierarchyLevel.DISTRICT);
            if (districtEntity != null) {
                student.setDistrictEntityMongoId(districtEntity.getId());
            }
        } else {
            student.setDistrictEntityMongoId(null);
        }

    }

    // @Cacheable(value = "findSb11EntityByEntityIdAndStateAbbreviation")
    public Sb11Entity findSb11EntityByEntityIdAndStateAbbreviation(final String entityIdentifier, final String stateAbbreviation, final HierarchyLevel hierarchyLevel) {
        return this.sb11EntityService.findByEntityIdAndStateAbbreviation(entityIdentifier, stateAbbreviation, hierarchyLevel.getEntityClass());
    }

    @Override
    public Student findByExternalSsidAndStateAbbreviation(final String externalSsid, final String stateAbbreviation) {
        return this.studentRepository.findByExternalSsidAndStateAbbreviation(externalSsid, stateAbbreviation);
    }

    @Override
    public List<Student> findByInstitutionIdentifierAndStateAbbreviation(final String institutionIdentifier, final String stateId) {
        return this.studentRepository.findByInstitutionIdentifierAndStateAbbreviation(institutionIdentifier, stateId);
    }

}
