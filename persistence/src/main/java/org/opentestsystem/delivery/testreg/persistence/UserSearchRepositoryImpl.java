/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2015 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence;

import java.util.*;

import javax.annotation.Resource;

import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.User;
import org.opentestsystem.delivery.testreg.domain.search.UserSearchRequest;
import org.opentestsystem.delivery.testreg.service.Sb11EntityRepositoryService;
import org.opentestsystem.delivery.testreg.service.TestRegPersister;
import org.opentestsystem.shared.search.domain.AbstractSearchRequest;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.opentestsystem.shared.security.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.Cache;
import org.springframework.cache.Cache.ValueWrapper;
import org.springframework.cache.CacheManager;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.data.mongodb.core.MongoOperations;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;

import com.google.common.base.Function;
import com.google.common.base.Predicate;
import com.google.common.collect.FluentIterable;

public class UserSearchRepositoryImpl implements UserSearchRepository  {

    private static final int MAX_QUERY_LIMIT_FOR_PAGING = 1001;

    private static final String ACCESSIBLE_USERS_CACHE = "accessibleUsersCache";
    
    @Autowired
    private MongoOperations mongoOperations;
        
    @Resource
    private CacheManager cacheManager;

	@Autowired
	private TestRegPersister sb11Entity;

    @Autowired
    private Sb11EntityRepositoryService sb11EntityService;

	/**
	 * Executes a paginated user search.
	 *
	 * @param abstractSearchRequest
	 * @return
     */
    @Override
   	public SearchResponse<User> search(	AbstractSearchRequest abstractSearchRequest) {
		UserSearchRequest userSearchRequest = (UserSearchRequest) abstractSearchRequest;
		Set<String> accessibleEntityIds = userSearchRequest.getAccessibleEntityIds();
		boolean isLastPageSearch = ((UserSearchRequest) abstractSearchRequest).isLastPageSearch();
        updateEntitySearchCriteria(userSearchRequest, accessibleEntityIds);
		final Sort sort = new Sort(getSortOrders(abstractSearchRequest));
		long totalCountWithPagination;
		Query query = abstractSearchRequest.buildQuery();
		List<User> users;

		if (isLastPageSearch) {
			long totalCount = mongoOperations.count(query, User.class);
			long lastPage = getLastPage(abstractSearchRequest, totalCount);
			users = mongoOperations.find(query.with (
					new PageRequest((int) lastPage, abstractSearchRequest.getPageSize(), sort)), User.class);
			totalCountWithPagination = users.size() + lastPage * abstractSearchRequest.getPageSize();
		} else {
			query = query.with (
					new PageRequest(abstractSearchRequest.getCurrentPage (), MAX_QUERY_LIMIT_FOR_PAGING, sort));
			// Re-adjust the skip value
			query.skip(abstractSearchRequest.getPageSize() * (abstractSearchRequest.getCurrentPage()));
			users = mongoOperations.find(query, User.class);
			totalCountWithPagination = users.size() + abstractSearchRequest.getCurrentPage() * abstractSearchRequest.getPageSize();
		}

		SearchResponse response = (users.size() < abstractSearchRequest.getPageSize()) ?
				new SearchResponse<>(users, abstractSearchRequest, totalCountWithPagination) :
				new SearchResponse<>(users.subList(0, abstractSearchRequest.getPageSize()), abstractSearchRequest, totalCountWithPagination);

		return response;
	}

	private List<Order> getSortOrders(AbstractSearchRequest abstractSearchRequest) {
		final List<Order> orders = new ArrayList<>();
		String[] sortKeys = abstractSearchRequest.getSortKeys ();
		Direction[] sortDirections = abstractSearchRequest.getSortDirections ();
		if (sortKeys != null) {
		  	for (int i = 0; i < sortKeys.length; i++) {
				Direction sortDir = null;
				final String key = sortKeys[i];
				if (sortDirections.length >= i + 1) {
				  	sortDir = sortDirections[i];
				}
				final Order order = new Order(sortDir, key);
				orders.add(order);
		  	}
		}
		return orders;
	}

	/**
	 * Retrieves the last page based on the page size and total search result count.
	 *
	 * @param abstractSearchRequest
	 * @param totalCount
     * @return
     */
	private long getLastPage(final AbstractSearchRequest abstractSearchRequest, final long totalCount) {
		long modVal = totalCount % abstractSearchRequest.getPageSize();
		long lastPage;
		if (modVal == 0){
			lastPage = (totalCount / abstractSearchRequest.getPageSize()) - 1;
        } else{
			lastPage = totalCount / abstractSearchRequest.getPageSize();
        }
		return lastPage;
	}

	/**
	 * Uses the {@link Sb11EntityRepositoryService} to retrieve and match entity names to their respecitve mongo IDs and
	 * updates the search filter with the entityId clause.
	 *
	 * @param userSearchRequest
	 * @param accessibleEntityIds
     */
    private void updateEntitySearchCriteria(final UserSearchRequest userSearchRequest, final Set<String> accessibleEntityIds) {
        boolean isDistrictNameSearch = userSearchRequest.getSearchCriteria().containsKey(UserSearchRequest.SEARCH_KEY_DISTRICT_NAME);
        boolean isInstitutionNameSearch = userSearchRequest.getSearchCriteria().containsKey(UserSearchRequest.SEARCH_KEY_INSTITUTION_NAME);
        Map<String, String[]> searchCriteria = userSearchRequest.getSearchCriteria();
        List<String> matchingEntityIds = new ArrayList<>();
        if (isDistrictNameSearch) {
            String districtName = userSearchRequest.getSearchCriteria().get(UserSearchRequest.SEARCH_KEY_DISTRICT_NAME)[0];
            matchingEntityIds.addAll(sb11EntityService.findAllMatchingEntities(accessibleEntityIds, districtName, FormatType.DISTRICT));
        }
        if (isInstitutionNameSearch) {
            String institutionName = userSearchRequest.getSearchCriteria().get(UserSearchRequest.SEARCH_KEY_INSTITUTION_NAME)[0];
            matchingEntityIds.addAll(sb11EntityService.findAllMatchingEntities(accessibleEntityIds, institutionName, FormatType.INSTITUTION));
        }
        if (matchingEntityIds.size() > 0) {
            updateEntityNameFilter(searchCriteria, matchingEntityIds);
        }
    }

    private void updateEntityNameFilter(Map<String, String[]> searchCriteria, List<String> matchingEntityIds) {
        searchCriteria.remove(UserSearchRequest.SEARCH_KEY_INSTITUTION_NAME);
        searchCriteria.remove(UserSearchRequest.SEARCH_KEY_DISTRICT_NAME);
        searchCriteria.put(UserSearchRequest.SEARCH_KEY_NAME_ASSOCIATED_ENTITY_ID, matchingEntityIds.toArray(new String[0]));
    }

	@Override
	public void clearAccessibleUsersCache() {
		Cache accessibleUsersCache = cacheManager.getCache(ACCESSIBLE_USERS_CACHE);
   	    if (accessibleUsersCache != null) {
   	    	accessibleUsersCache.clear();
   	    }
	}
	
	@Override
	public <S extends User> List<S> save(Iterable<S> entites) {
		return null;
	}

	@Override
	public List<User> findAll() {
		return null;
	}

	@Override
	public List<User> findAll(Sort sort) {
		return null;
	}

	@Override
	public Page<User> findAll(Pageable pageable) {
		return null;
	}

	@Override
	public <S extends User> S save(S entity) {
		return null;
	}

	@Override
	public User findOne(String id) {
		return null;
	}

	@Override
	public boolean exists(String id) {
		return false;
	}

	@Override
	public Iterable<User> findAll(Iterable<String> ids) {
		return null;
	}

	@Override
	public long count() {
		return 0;
	}

	@Override
	public void delete(String id) {
	}

	@Override
	public void delete(User entity) {
	}

	@Override
	public void delete(Iterable<? extends User> entities) {
	}

	@Override
	public void deleteAll() {
	}

}
