/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.eligibility;

import static org.opentestsystem.delivery.testreg.domain.AnnotationHelper.getFieldLabel;
import static org.opentestsystem.delivery.testreg.domain.Sb11EntityUtils.getHumanReadableName;
import static org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.VerifierUtils.addFieldError;

import java.util.ArrayList;
import java.util.List;

import org.opentestsystem.delivery.testreg.domain.Assessment;
import org.opentestsystem.delivery.testreg.domain.Assessment.EligibilityType;
import org.opentestsystem.delivery.testreg.domain.ExplicitEligibility;
import org.opentestsystem.delivery.testreg.persistence.Verifier;
import org.opentestsystem.delivery.testreg.persistence.criteria.dependencyresolvers.EligibilityDependencyResolver;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;
import org.springframework.validation.FieldError;

@Component
public class EligibilityAssessmentVerifier implements Verifier<ExplicitEligibility> {

    @Autowired
    @Qualifier("eligibilityDependencyResolver")
    private EligibilityDependencyResolver eligibilityDependencyResolver;

    @Override
    public List<FieldError> verify(final ExplicitEligibility eligibility) {
        List<FieldError> errors = new ArrayList<>();
        Assessment assessmentEntity = eligibilityDependencyResolver.resolveAssessmentForStudent(eligibility);

        if (assessmentEntity == null) {
            String testNameLabel = getFieldLabel(eligibility, getTestNameField());
            String humanReadableTestNameLabel = getHumanReadableName(testNameLabel);
            addFieldError(errors, eligibility, humanReadableTestNameLabel, getTestName(eligibility), humanReadableTestNameLabel + " not found in the database");
        } else {
            if (assessmentEntity.getEligibilityType() != EligibilityType.EXPLICIT) {
                addFieldError(errors, eligibility, "", assessmentEntity.getEligibilityType().toString(), "Eligibility Type for assessment must be explicit");
            }
            if (eligibility.getTestForm() != null && !eligibility.getTestForm().equals("") && assessmentEntity.getTestForm() != null) {
                if (!isValidTestForm(assessmentEntity.getTestForm(), eligibility.getTestForm())) {
                    final String testFormLabel = getFieldLabel(eligibility, "testForm");
                    addFieldError(errors, eligibility, testFormLabel, eligibility.getTestForm(), "Eligibility record has a invalid TestForm name for the assessment");
                }
            }
        }

        return errors;
    }

    private boolean isValidTestForm(final List<String> testFormList, final String testForm) {
        for (String formName : testFormList) {
            if (formName.equalsIgnoreCase(testForm)) {
                return true;
            }
        }
        return false;

    }

    protected String getTestName(final ExplicitEligibility obj) {
        return obj.getTestName();
    }

    protected String getTestVersion(final ExplicitEligibility obj) {
        return obj.getTestVersion();
    }

    protected String getTestNameField() {
        return "testName";
    }

    protected String getTestFormField() {
        return "testForm";
    }
}
