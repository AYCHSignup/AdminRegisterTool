/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.service.impl;

import org.opentestsystem.delivery.testreg.domain.CacheMap;
import org.opentestsystem.delivery.testreg.persistence.CacheMapRepository;
import org.opentestsystem.delivery.testreg.service.CacheMapService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.CacheManager;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;

@Service("cacheMapService")
public class CacheMapServiceImpl implements CacheMapService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CacheMapServiceImpl.class);

    private static final long CHECK_DB_IF_LOCAL_CACHE_IS_OLDER_THAN = 1000L * 30L; // 30 seconds
    private static final long REBUILD_CACHE_IF_CACHE_IS_OLDER_THAN = 1000L * 60L * 60L * 6L; // 6 hours
    private static long lastSyncCheckWithRemote = 0L;

    @Resource
    private CacheManager cacheManager;

    @Autowired
    private CacheMapRepository cacheMapRepository;

    @Override
    public CacheMap getCacheMap(String name) {
        CacheMap cacheMap = getLocalCopy(name);
        if (cacheMap == null || isStale(cacheMap)) {
            cacheMap = getRemoteCopy(name);
            if (cacheMap != null) {
                long cacheAge = System.currentTimeMillis() - cacheMap.getCreated().getMillis();
                if (cacheAge < REBUILD_CACHE_IF_CACHE_IS_OLDER_THAN) {
                    saveLocalCopy(cacheMap);
                } else {
                    // we don't have a valid cache to return
                    cacheMap = null;
                }
            }
        }
        return cacheMap;
    }

    @Override
    public void saveCacheMap(CacheMap cacheMap, boolean saveRemoteCopy) {
        saveLocalCopy(cacheMap);
        if (saveRemoteCopy) {
            saveRemoteCopy(cacheMap);
        }
    }

    //=====================================================================

    private boolean isStale(final CacheMap cacheMap) {
        boolean isStale = true;
        if (cacheMap != null) {
            LOGGER.trace("******************* cache message: checking if this cacheMap is null or stale: " + cacheMap.getName());
            long localCacheAge = System.currentTimeMillis() - lastSyncCheckWithRemote;
            long cacheAge = System.currentTimeMillis() - cacheMap.getCreated().getMillis();
            if (localCacheAge < CHECK_DB_IF_LOCAL_CACHE_IS_OLDER_THAN) {
                LOGGER.trace("******************* cache message: local copy is very recent (last fetched " + localCacheAge + "ms ago), within " + CHECK_DB_IF_LOCAL_CACHE_IS_OLDER_THAN + "ms (so we won't check remote at this time): " + cacheMap.getName());
                isStale = false;
            } else {
                if (cacheAge < REBUILD_CACHE_IF_CACHE_IS_OLDER_THAN) {
                    LOGGER.trace("******************* cache message: local copy could be stale (last fetched from remote was " + localCacheAge + "ms ago), checking with remote: " + cacheMap.getName());
                    isStale = cacheMapRepository.doesNewerVersionExist(cacheMap.getName(), cacheMap.getCreated());
                    if (!isStale) {
                        lastSyncCheckWithRemote = System.currentTimeMillis();
                    }
                } else {
                    LOGGER.trace("******************* cache message: this cache has reached the expiration date, so we are marking it as stale");
                    isStale = true;
                }
            }
            LOGGER.trace("******************* cache message: done checking if this cacheMap is null or stale, answer: " + isStale);
        } else {
            LOGGER.warn("******************* cache message: skipping checking if this cacheMap is null or stale due to null param");
        }
        return isStale;
    }

    private CacheMap getLocalCopy(final String name) {
        CacheMap cacheMap = null;
        if (name != null && cacheManager.getCache(name).get(name) != null) {
            LOGGER.trace("******************* cache message: getting local copy of '" + name + "' cache");
            cacheMap = (CacheMap) cacheManager.getCache(name).get(name).get();
            LOGGER.trace("******************* cache message: done getting local copy: " + cacheMap.getName());
        } else {
            LOGGER.warn("******************* cache message: skipping getting local copy due to missing local cache (or null param)");
        }
        return cacheMap;
    }

    private CacheMap getRemoteCopy(final String name) {
        CacheMap cacheMap = null;
        if (name != null) {
            LOGGER.trace("******************* cache message: fetching remote copy of '" + name + "' cache");
            long start = System.currentTimeMillis();
            cacheMap = cacheMapRepository.findOne(name);
            lastSyncCheckWithRemote = System.currentTimeMillis();
            long stop = System.currentTimeMillis();
            if (cacheMap != null) {
                LOGGER.trace("******************* cache message: done fetching remote copy: " + cacheMap.getName() + ", it took " + (stop - start) + "ms");
            } else {
                LOGGER.debug("******************* cache message: no remote copy available: " + name + ", it took " + (stop - start) + "ms");
            }
        } else {
            LOGGER.warn("******************* cache message: skipping getting remote copy due to null param");
        }
        return cacheMap;
    }

    private void saveLocalCopy(final CacheMap cacheMap) {
        if (cacheMap != null) {
            LOGGER.trace("******************* cache message: saving local copy of '" + cacheMap.getName() + "' cache");
            cacheManager.getCache(cacheMap.getName()).put(cacheMap.getName(), cacheMap);
            LOGGER.trace("******************* cache message: done saving local copy: " + cacheMap.getName());
        } else {
            LOGGER.warn("******************* cache message: skipping saving local copy due to null param");
        }
    }

    private void saveRemoteCopy(final CacheMap cacheMap) {
        if (cacheMap != null && !isStale(cacheMap)) {
            LOGGER.debug("******************* cache message: saving remote copy of '" + cacheMap.getName() + "' cache");
            long start = System.currentTimeMillis();
            cacheMapRepository.save(cacheMap);
            lastSyncCheckWithRemote = System.currentTimeMillis();
            long stop = System.currentTimeMillis();
            LOGGER.debug("******************* cache message: done saving remote copy: " + cacheMap + ", it took " + (stop - start) + "ms");
        } else {
            LOGGER.warn("******************* cache message: skipping saving remote copy due to null param");
        }
    }
}