/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.service.impl;

import org.opentestsystem.delivery.testreg.domain.SSOAction;
import org.opentestsystem.delivery.testreg.domain.UserChangeEvent;
import org.opentestsystem.delivery.testreg.service.UserChangeEventService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;

import java.util.Collections;
import java.util.List;

@Service
public class UserChangeEventServiceAsyncImpl implements UserChangeEventService {

    private static final Logger LOGGER = LoggerFactory.getLogger(UserChangeEventServiceAsyncImpl.class);

    @Autowired
    private UserChangeEventServiceImpl userChangeEventServiceImpl;

    @Override
    @Async
    public void saveUserChangeEvent(final UserChangeEvent userChangeEvent) {
        saveUserChangeEvents(Collections.singletonList(userChangeEvent));
    }

    @Override
    @Async
    public void saveUserChangeEvents(List<UserChangeEvent> userChangeEvents) {
        if(userChangeEvents != null) {
            LOGGER.debug("entering an ASYNC call wrapping the call to the user change event service to save change events (" + userChangeEvents.size() + " events)...");
            userChangeEventServiceImpl.saveUserChangeEvents(userChangeEvents);
        }
    }

    @Override
    public List<UserChangeEvent> findAll() {
        return userChangeEventServiceImpl.findAll();
    }

    @Override
    public List<UserChangeEvent> findAll(Sort sort) {
        return userChangeEventServiceImpl.findAll(sort);
    }

    @Override
    public List<UserChangeEvent> findByModifiedUserId(String modifiedUserId) {
        return userChangeEventServiceImpl.findByModifiedUserId(modifiedUserId);
    }

    @Override
    public List<UserChangeEvent> findByModifiedUserIdAndAction(String modifiedUserId, SSOAction action) {
        return userChangeEventServiceImpl.findByModifiedUserIdAndAction(modifiedUserId, action);
    }

    @Override
    @Async
    public void deleteAll() {
        userChangeEventServiceImpl.deleteAll();
    }

    @Override
    public void delete(List<UserChangeEvent> userChangeEvents) {
        userChangeEventServiceImpl.delete(userChangeEvents);
    }
}
