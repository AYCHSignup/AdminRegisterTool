/*******************************************************************************
  * Educational Online Test Delivery System
  * Copyright (c) 2013 American Institutes for Research
  *
  * Distributed under the AIR Open Source License, Version 1.0
  * See accompanying file AIR-License-1_0.txt or at
  * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
  ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria;

import org.opentestsystem.delivery.testreg.domain.Action;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.domain.Sb11SuperEntity;
import org.opentestsystem.delivery.testreg.service.impl.Sb11EntityServiceImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.validation.FieldError;
import org.springframework.validation.ObjectError;

import java.util.ArrayList;
import java.util.List;

import static org.opentestsystem.delivery.testreg.domain.AnnotationHelper.*;
import static org.opentestsystem.delivery.testreg.domain.Sb11EntityUtils.*;

@Component
public class Sb11AddPersistenceCriteria<T extends Sb11Entity> implements Sb11BusinessValidator<T> {

    @Autowired
    private Sb11EntityServiceImpl<? extends Sb11Entity> sb11EntityService;

    @Autowired
    private HierarchyLevelPermissionValidator hierarchyLevelValidator;

    @Autowired
    private NCESIDValidator ncesIdValidator;

    @Override
    public boolean supports(final Class<? extends T> clazz) {
        return Sb11Entity.class.isAssignableFrom(clazz);
    }

    @SuppressWarnings("unchecked")
    @Override
    public List<? extends ObjectError> validate(final T entity) {
        List<FieldError> errors = new ArrayList<FieldError>();
        String entityId = entity.getEntityId();
        Sb11Entity existingEntity = null;
        if (Sb11SuperEntity.class.isAssignableFrom(entity.getEntityType().getEntityClass())) {
            existingEntity = sb11EntityService.findByEntityId(entityId, (Class<Sb11SuperEntity>) entity.getClass());
            if (existingEntity != null) {
                String entityIdLabel = getFieldLabel(existingEntity, "entityId");
                errors.add(new FieldError(entity.getFormatType().name(), entityIdLabel, existingEntity.getEntityId(),
                        false, null, null, getHumanReadableName(entityIdLabel)
                        + " already exists in DB and cannot be added"));
                return errors;
            }
        } else {
            existingEntity = sb11EntityService.findByEntityIdAndStateAbbreviation(entityId, entity.getStateAbbreviation(), entity.getClass());
            if (existingEntity != null) {
                String entityIdLabel = getFieldLabel(existingEntity, "entityId");
                errors.add(new FieldError(entity.getFormatType().name(), entityIdLabel, existingEntity.getEntityId(),
                        false, null, null, entity.getFormatType().toString()
                        + " already exists for " + entity.getEntityId() + " and " + entity.getStateAbbreviation()));
                return errors;
            }
        }

        errors.addAll(hierarchyLevelValidator.validate(entity));
        errors.addAll(ncesIdValidator.validate(entity));
        return errors;
    }

    @Override
    public Action getAction() {
        return Action.ADD;
    }
}
