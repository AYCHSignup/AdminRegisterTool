/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria;

import javax.annotation.Resource;

import org.opentestsystem.delivery.testreg.domain.DeleteOperation;
import org.opentestsystem.delivery.testreg.domain.TestRegistrationBase;
import org.opentestsystem.delivery.testreg.persistence.criteria.dependencyresolvers.Sb11DependencyResolverInvoker;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.validation.Errors;
import org.springframework.validation.SmartValidator;

/**
 * This is an SB11 Global Validator to be used across the Test Registration system for validating format and business
 * validations. This is a Spring's Smart validator that can validate Spring framework's validator and jsr303 validators.
 */
@Component
public class Sb11GlobalValidator implements SmartValidator {

    @Resource(name = "sb11FormatValidatorInvoker")
    private ValidatorInvoker formatValidatorInvoker;

    @Resource(name = "sb11BusinessValidatorInvoker")
    private ValidatorInvoker businessValidatorInvoker;

    @Autowired
    private Sb11DependencyResolverInvoker sb11DependencyResolverInvoker;

    @Override
    public boolean supports(final Class<?> clazz) {
        return TestRegistrationBase.class.isAssignableFrom(clazz);
    }

    @Override
    public void validate(final Object target, final Errors errors) {
    }

    @SuppressWarnings("unchecked")
    @Override
    public void validate(final Object target, final Errors errors, final Object... validationHints) {

        final TestRegistrationBase sb11Entity = (TestRegistrationBase) target;

        // What sort of operation is being performed where the validation is needed.
        Class<?> operationGroup = (validationHints.length > 1 ) ? (Class<?>) validationHints[1] : null;

        if (preemptFomatValidation(operationGroup)) {// Do not do format validation for some operations
            businessValidatorInvoker.invokeValidator(sb11Entity, errors, validationHints);

        } else {
            // Format Validation
            boolean hasConstraintViolations = formatValidatorInvoker.invokeValidator(sb11Entity, errors,
                    validationHints);

            // Business Validation
            if (!hasConstraintViolations && operationGroup != null) { // If there are no format constraint violations
                businessValidatorInvoker.invokeValidator(sb11Entity, errors, validationHints);
            }
        }
        if (!errors.hasErrors()) {// Resolve Entity Dependencies
            sb11DependencyResolverInvoker.resolveDependency(sb11Entity);
        }
    }

    private boolean preemptFomatValidation(final Class<?> validationOperation) {
        if (validationOperation != null && validationOperation.equals(DeleteOperation.class)) {
            return true;
        }
        return false;
    }
}
