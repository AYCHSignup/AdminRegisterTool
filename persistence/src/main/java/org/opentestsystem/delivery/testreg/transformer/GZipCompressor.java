/*
Educational Online Test Delivery System Copyright (c) 2013 American Institutes for Research

Distributed under the AIR Open Source License, Version 1.0 See accompanying file AIR-License-1_0.txt or at
http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 */

package org.opentestsystem.delivery.testreg.transformer;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import java.util.zip.GZIPOutputStream;

import org.opentestsystem.delivery.testreg.transformer.domain.DwConfigs.DwConfigType;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.integration.Message;
import org.springframework.integration.annotation.Header;
import org.springframework.integration.annotation.Transformer;
import org.springframework.integration.support.MessageBuilder;
import org.springframework.stereotype.Component;

@Component("gZipCompressor")
public class GZipCompressor {

    private static final Logger LOGGER = LoggerFactory.getLogger(GZipCompressor.class);

    public static final int BUFFER_SIZE = 4096;

    @Transformer
    public Message<File> compressStream(final File input, final @Header("dwBatchUuid") String dwBatchUuid,
            final @Header("fileSuffix") String fileSuffix, final @Header("recordsSent") int recordsSent,
            final @Header("tempPaths") List<Path> tempPaths, final @Header("dwConfigType") DwConfigType dwConfigType) {

        String debugPrefix = dwConfigType + " DW Config: ";

        long curTime = System.currentTimeMillis();
        File tmpGzFile;

        try {

            Path tmpGzPath = Files.createTempFile(DwBatchHandler.DW_COMPRESS_TMP_PREFIX,
                    (dwConfigType == DwConfigType.SBAC ? DwBatchHandler.SBAC_DW_NAME : DwBatchHandler.LOCAL_DW_NAME)
                            + fileSuffix);
            tempPaths.add(tmpGzPath);
            tmpGzFile = tmpGzPath.toFile();

            LOGGER.debug(debugPrefix + "Created temp gzipped file " + tmpGzFile.getAbsolutePath());

            FileInputStream tmpTarFileInStream = new FileInputStream(input);

            FileOutputStream tmpGzOutStream = new FileOutputStream(tmpGzFile);

            GZIPOutputStream gzipOutStream = new GZIPOutputStream(tmpGzOutStream, BUFFER_SIZE, true);

            byte[] buf = new byte[BUFFER_SIZE];
            int readLen = 0;

            while ((readLen = tmpTarFileInStream.read(buf)) > 0) {
                gzipOutStream.write(buf, 0, readLen);
            }

            gzipOutStream.flush();

            gzipOutStream.close();

            tmpTarFileInStream.close();

        } catch (IOException e) {
            throw new GzipCompressionException(debugPrefix + "Failure to GZIP stream", e);
        }

        LOGGER.debug(debugPrefix + "Generated GZ file in " + (System.currentTimeMillis() - curTime));

        return MessageBuilder.withPayload(tmpGzFile).setHeader("dwBatchUuid", dwBatchUuid)
                .setHeader("fileSuffix", fileSuffix).setHeader("recordsSent", recordsSent)
                .setHeader("tempPaths", tempPaths).setHeader("dwConfigType", dwConfigType).build();
    }

}
