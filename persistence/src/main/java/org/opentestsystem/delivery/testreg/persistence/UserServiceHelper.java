/*************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2015 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at 
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 *************************************************************************/

package org.opentestsystem.delivery.testreg.persistence;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.opentestsystem.delivery.testreg.domain.ClientEntity;
import org.opentestsystem.delivery.testreg.domain.DistrictEntity;
import org.opentestsystem.delivery.testreg.domain.GroupOfDistrictsEntity;
import org.opentestsystem.delivery.testreg.domain.GroupOfInstitutionsEntity;
import org.opentestsystem.delivery.testreg.domain.GroupOfStatesEntity;
import org.opentestsystem.delivery.testreg.domain.InstitutionEntity;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.domain.StateEntity;
import org.opentestsystem.shared.progman.client.domain.TenantType;
import org.opentestsystem.shared.security.domain.SbacRole;
import org.opentestsystem.shared.security.domain.SbacUser;

public class UserServiceHelper
{

  /**
   * Getting list of ordered Sb11EntityTenantTypes.
   *
   * @param TenantType            tenantType  
   * @return                      TenantType(Role.level of logged-in-user)
   */
  
  public static List<TenantType> getOrderedSb11EntityTenantTypes(TenantType type) {
    final List<TenantType> tenantTypes = new ArrayList<>();
    tenantTypes.add(TenantType.CLIENT);
    tenantTypes.add(TenantType.STATE_GROUP);
    tenantTypes.add(TenantType.STATE);
    tenantTypes.add(TenantType.DISTRICT_GROUP);
    tenantTypes.add(TenantType.DISTRICT);
    tenantTypes.add(TenantType.INSTITUTION_GROUP);
    tenantTypes.add(TenantType.INSTITUTION);
    // Based on the type parameter creating list with matched tenantType and corresponding below tenantTypes after matched
    return tenantTypes.subList (tenantTypes.indexOf (type), tenantTypes.size ());
  }
  
  /**
   * Getting logged-in-user EntityId.
   *
   * @param sbacUser              logged-in-user  
   * @return                      list of entityIds
   */
  
  public static List<String> getLoginUserEntityId(SbacUser sbacUser){
    Collection<SbacRole> roles = new ArrayList<SbacRole>();
    if (sbacUser != null) {
      roles = sbacUser.getRoles ();
    }
    List<String> sbacEntityIds = new ArrayList<String>();
    if (roles != null) {
      for (SbacRole role : roles) {
        if (role.getEffectiveTenant () != null) {
          if (role.getRoleEntityLevel ().equals (TenantType.CLIENT) || role.getRoleEntityLevel ().equals (TenantType.STATE_GROUP) || role.getRoleEntityLevel ().equals (TenantType.STATE)){
            sbacEntityIds.add (role.getEffectiveTenant ().getName ());
          } else  {
            sbacEntityIds.add (role.getEffectiveTenant ().getId ());
          }
        }
      }
    }
    return sbacEntityIds;
  }
  
  /**
   * Getting logged-in-user role level.
   *
   * @param sbacUser              logged-in-user  
   * @return                      TenantType(Role.level of logged-in-user)
   */
  
  public static TenantType getLoginUserRoleLevel(SbacUser sbacUser){
    Collection<SbacRole> roles = new ArrayList<SbacRole>();
    TenantType level = null;
    if (sbacUser != null) {
      roles = sbacUser.getRoles ();
    }
    List<TenantType> sbacEntityLevel = new ArrayList<TenantType>();
    if (roles != null) {
      for (SbacRole role : roles) {
        sbacEntityLevel.add (role.getRoleEntityLevel ());
      }
    }
    if (!sbacEntityLevel.isEmpty ()) {
      return sbacEntityLevel.get (0);
    } else
      return level;
  }
  
  /**
   * Converting TenantType to class.
   *
   * @param TenantType            TenantType  
   * @return                      class  
   */
  
  public static Class<? extends Sb11Entity> convertTenantTypeToClass(final TenantType tenantType) {

    Class<? extends Sb11Entity> theClass = null;

    switch (tenantType) {
    case CLIENT:
      theClass = ClientEntity.class;
      break;
    case DISTRICT:
      theClass = DistrictEntity.class;
      break;
    case DISTRICT_GROUP:
      theClass = GroupOfDistrictsEntity.class;
      break;
    case INSTITUTION:
      theClass = InstitutionEntity.class;
      break;
    case INSTITUTION_GROUP:
      theClass = GroupOfInstitutionsEntity.class;
      break;
    case STATE:
      theClass = StateEntity.class;
      break;
    case STATE_GROUP:
      theClass = GroupOfStatesEntity.class;
      break;
    default:
      theClass = null;
      break;
    }

    return theClass;
  }
}
