/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.student;

import static org.opentestsystem.delivery.testreg.domain.FormatType.DESIGNATEDSUPPORTSANDACCOMMODATIONS;
import static org.opentestsystem.delivery.testreg.domain.FormatType.DISTRICT;
import static org.opentestsystem.delivery.testreg.domain.FormatType.INSTITUTION;
import static org.opentestsystem.delivery.testreg.domain.FormatType.STATE;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.lang.StringUtils;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.domain.TestRegistrationBase;
import org.opentestsystem.delivery.testreg.persistence.Verifier;
import org.springframework.stereotype.Component;
import org.springframework.validation.FieldError;

@Component
public class StudentVerifierChain implements Verifier<Student> {

    @Resource(name = "verifierMap")
    private Map<Class<? extends TestRegistrationBase>, Map<FormatType, Verifier<? extends TestRegistrationBase>>> verifierMap;
    
    @Resource(name ="studentExternalIdVerifier")
    private Verifier<Student> studentExternalIdVerifier;

    @Override
    public List<FieldError> verify(final Student student) {
        List<FieldError> errors = getVerifier(STATE).verify(student);
        if (errors.isEmpty()) {
            errors = new ArrayList<FieldError>();
            //district identifier is now optional for student ref: JIRA-950
            if (StringUtils.isNotBlank(student.getDistrictIdentifier())) {
                invokeVerifier(DISTRICT, student, errors);
            }
            invokeVerifier(studentExternalIdVerifier, student, errors);
            invokeVerifier(INSTITUTION, student, errors);
            invokeVerifier(DESIGNATEDSUPPORTSANDACCOMMODATIONS, student, errors);
        }
        return errors;
    }

    private void invokeVerifier(final FormatType level, final Student student, final List<FieldError> errors) {
        invokeVerifier(getVerifier(level), student, errors);
    }
    
    private void invokeVerifier(Verifier<Student> verifier, final Student student, final List<FieldError> errors) {
        List<FieldError> errorsGot = verifier.verify(student);
        if (!errorsGot.isEmpty()) {
            errors.addAll(errorsGot);
        }
    }

    @SuppressWarnings("unchecked")
    private Verifier<Student> getVerifier(final FormatType level) {
        return (Verifier<Student>) verifierMap.get(Student.class).get(level);
    }
}
