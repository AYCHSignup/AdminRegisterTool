/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.xstream.custom;

import static org.apache.commons.beanutils.BeanUtils.getProperty;
import static org.apache.commons.beanutils.MethodUtils.invokeExactMethod;
import static org.apache.commons.lang.WordUtils.capitalize;

import java.lang.reflect.InvocationTargetException;

import org.opentestsystem.delivery.testreg.domain.XmlNotNull;

import com.thoughtworks.xstream.converters.reflection.FieldDictionary;
import com.thoughtworks.xstream.converters.reflection.ObjectAccessException;
import com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider;
import com.thoughtworks.xstream.converters.reflection.ReflectionProvider;

public class CustomJavaReflectionProvider extends PureJavaReflectionProvider implements ReflectionProvider {
    
    private static final String EMPTY = "";
    
    private static final String SETTER = "set";
    
    public CustomJavaReflectionProvider(FieldDictionary fieldDictionary) {
        super(fieldDictionary);
    }
    
    public void visitSerializableFields(Object object, ReflectionProvider.Visitor visitor) {
        XmlNotNull xmlNonNullElement = object.getClass().getAnnotation(XmlNotNull.class);
        if(xmlNonNullElement != null) { 
            for(String name: xmlNonNullElement.value()) {
                try {
                    if(getProperty(object, name) ==null) {
                        invokeExactMethod(
                                object, 
                                SETTER+capitalize(name), 
                                new Object[]{EMPTY}, 
                                new Class<?>[]{String.class});
                    }
                }
                catch (IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {
                    throw new ObjectAccessException("Could not get field " + object.getClass() + "." + name);
                }
            }
        }
        super.visitSerializableFields(object, visitor);
    }
}
