/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.persistence.criteria.verifiers;

import static org.opentestsystem.delivery.testreg.domain.search.StudentSearchRequest.SEARCH_KEY_DISTRICT_ID;
import static org.opentestsystem.delivery.testreg.domain.search.StudentSearchRequest.SEARCH_KEY_INSTITUTION_ID;
import static org.opentestsystem.delivery.testreg.domain.search.StudentSearchRequest.SEARCH_KEY_STATE_ID;
import static org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.VerifierUtils.dependencyFoundWhileDelete;

import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.domain.search.StudentSearchRequest;
import org.opentestsystem.delivery.testreg.persistence.Verifier;
import org.opentestsystem.delivery.testreg.service.TestRegPersister;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.validation.FieldError;

@Component
public class StudentAssociationVerifier implements Verifier<Sb11Entity> {

    @Autowired
    private TestRegPersister studentService;

    @Override
    public List<FieldError> verify(Sb11Entity sb11Entity) {

        boolean hasDependency = false;

        switch (sb11Entity.getFormatType()) {
            case DISTRICT:
                hasDependency = verifyDistrict(sb11Entity);
                break;
            case INSTITUTION:
                hasDependency = verifyInstitution(sb11Entity);
                break;
            case STATE:
                hasDependency = verifyState(sb11Entity);
                break;
            default:
                break;
        }

        if (hasDependency) {
            return dependencyFoundWhileDelete(sb11Entity);
        }
        return Collections.emptyList();
    }

    private Boolean verifyDistrict(Sb11Entity sb11Entity) {
        Map<String, String[]> searchParams = getBaseParams(sb11Entity.getStateAbbreviation());
        searchParams.put(SEARCH_KEY_DISTRICT_ID, new String[] { sb11Entity.getEntityId() });

        return result(searchParams);
    }

    private Boolean verifyInstitution(Sb11Entity sb11Entity) {
        Map<String, String[]> searchParams = getBaseParams(sb11Entity.getStateAbbreviation());
        searchParams.put(SEARCH_KEY_INSTITUTION_ID, new String[] { sb11Entity.getEntityId() });

        return result(searchParams);
    }

    private Boolean verifyState(Sb11Entity sb11Entity) {
        return result(getBaseParams(sb11Entity.getStateAbbreviation()));
    }

    @SuppressWarnings("serial")
    private Map<String, String[]> getBaseParams(final String stateAbbreviation) {
        return new HashMap<String, String[]>() {
            {
                put(SEARCH_KEY_STATE_ID, new String[] { stateAbbreviation });
            }
        };
    }

    private Boolean result(Map<String, String[]> searchParams) {

        StudentSearchRequest searchReq = new StudentSearchRequest(searchParams);
        searchReq.setFilter(false);

        SearchResponse<Student> response = studentService.searchDomainObjects(searchReq, FormatType.STUDENT);

        if (response.getTotalCount() > 0) {
            return Boolean.TRUE;
        }
        return Boolean.FALSE;
    }
}
