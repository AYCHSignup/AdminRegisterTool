/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2016 Regents of the University of California
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 *
 * SmarterApp Open Source Assessment Software Project: http://smarterapp.org
 * Developed by Fairway Technologies, Inc. (http://fairwaytech.com)
 * for the Smarter Balanced Assessment Consortium (http://smarterbalanced.org)
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.service.impl;

import org.opentestsystem.delivery.testreg.domain.SSOAction;
import org.opentestsystem.delivery.testreg.domain.User;
import org.opentestsystem.delivery.testreg.domain.UserChangeEvent;
import org.opentestsystem.delivery.testreg.domain.UserUpsert;
import org.opentestsystem.delivery.testreg.service.*;
import org.opentestsystem.shared.security.domain.SbacUser;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;

import java.util.Set;

@Service
public class ExternalUserServiceImpl implements ExternalUserService {

    @Autowired
    public ExternalUserServiceImpl(UserService userService, @Qualifier("userDetailService") TestRegUserDetailsService testRegUserDetailsService, TestRegPersister testRegPersister, UserChangeEventService userChangeEventService) {
        this.userService = userService;
        this.userDetailsService = testRegUserDetailsService;
        this.userPersistenceService = testRegPersister;
        this.userChangeEventService = userChangeEventService;
    }

    private UserService userService;

    private TestRegUserDetailsService userDetailsService;

    private TestRegPersister userPersistenceService;

    private UserChangeEventService userChangeEventService;

    @Override
    public UserUpsert upsertUser(User user) {
        UserUpsert upsert = new UserUpsert();
        User existingUser = userService.findByEmail(user.getEmail());
        if(existingUser != null) {
            upsert.setInsert(false);
            user = decorateUser(user, existingUser);
        }
        upsert.setUser(userPersistenceService.saveDomainObject(user));
        return upsert;
    }

    private User decorateUser(User newUser, User existingUser) {
        newUser.setId(existingUser.getId());
        newUser.setHasRolesOutside(existingUser.getHasRolesOutside());
        return newUser;
    }

    @Override
    public boolean deleteUser(String email) {
        User user = userService.findByEmail(email);
        if(user == null) {
            return false;
        }
        Set<String> accessibleIds = userDetailsService.getMongoIdsOfEntitiesCurrentUserHasAccessTo();
        userService.deleteDomainObject(user.getId(), User.FORMAT_TYPE, accessibleIds);
        return true;
    }

    @Override
    public boolean resetPassword(User user) {
        SbacUser sbacUser = userDetailsService.getCurrentUser();
        if(sbacUser == null) return false;
        userChangeEventService.saveUserChangeEvent(new UserChangeEvent(user.getId(), SSOAction.RESET, sbacUser.getFullName(), sbacUser.getEmail()));
        return true;
    }
}
