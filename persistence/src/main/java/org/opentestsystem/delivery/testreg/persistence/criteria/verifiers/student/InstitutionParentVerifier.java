/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.student;

import java.util.Collections;
import java.util.List;

import javax.annotation.Resource;

import org.opentestsystem.delivery.testreg.domain.InstitutionEntity;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.persistence.Verifier;
import org.opentestsystem.delivery.testreg.service.Sb11EntityRepositoryService;
import org.springframework.stereotype.Component;
import org.springframework.validation.FieldError;

@Component
public class InstitutionParentVerifier implements Verifier<Student> {
    @Resource(name = "sb11EntityService")
    private Sb11EntityRepositoryService sb11EntityRepositoryService;
    
    @Resource(name = "institutionDistrictCrossVerifier")
    private Verifier<Student> institutionDistrictCrossVerifier;
    
    @Resource(name ="groupOfInstitutionsVerifier")
    private Verifier<Student> groupOfInstitutionsVerifier;
    
    @Override
    public List<FieldError> verify(Student student) {
        InstitutionEntity institutionEntity = sb11EntityRepositoryService
                .findByEntityIdAndStateAbbreviation(student.getInstitutionIdentifier(), student.getStateAbbreviation(), InstitutionEntity.class);
        
        switch(institutionEntity.getParentEntityType()) {
            case DISTRICT:
                return institutionDistrictCrossVerifier.verify(student);
            case GROUPOFINSTITUTIONS:
                return groupOfInstitutionsVerifier.verify(student);
            default:
                return Collections.emptyList();
        }
    }   
}
