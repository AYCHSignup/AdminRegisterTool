/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.service.impl;

import static javax.xml.xpath.XPathConstants.NODESET;

import java.io.ByteArrayInputStream;
import java.io.IOException;

import javax.xml.namespace.QName;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;

import org.opentestsystem.authoring.testspecbank.client.domain.TestSpecBankClientObj;
import org.opentestsystem.delivery.testreg.domain.Assessment;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

public class TestPackageParserUtil {

    private static final Logger LOGGER = LoggerFactory.getLogger(TestPackageParserUtil.class);

    // Factories
    // TODO XPathFactory is NOT thread-safe and NOT re-entrant
    private static final XPathFactory xpathFactory = XPathFactory.newInstance();
    private static final DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();

    // Property Based
    private static final String PROPERTY_PREFIX = "/testspecification/property[@name='";
    private static final String PROPERTY_SUFFIX = "']/@value";

    private static final String SUBJECT_CODE = PROPERTY_PREFIX + "subject" + PROPERTY_SUFFIX;
    private static final String GRADE_LEVEL = PROPERTY_PREFIX + "grade" + PROPERTY_SUFFIX;
    private static final String CATEGORY = PROPERTY_PREFIX + "category" + PROPERTY_SUFFIX;
    private static final String TYPE = PROPERTY_PREFIX + "type" + PROPERTY_SUFFIX;

    private static final String TEST_FORM_IDENTIFIER = "/testspecification/registration/registrationform/identifier/@name";
    private static final String TEST_SPEC_IDENTIFIER = "/testspecification/identifier/";
    private static final String IDENTIFIER_UNIQUE_ID = "@uniqueid";
    private static final String TEST_NAME = "@name";
    private static final String TEST_VERSION = "@version";
    private static final String TEST_LABEL = "@label";

    private static final String TEST_NAME_XPATH = TEST_SPEC_IDENTIFIER + TEST_NAME;
    private static final String TEST_VERSION_XPATH = TEST_SPEC_IDENTIFIER + TEST_VERSION;
    private static final String TEST_UNIQUE_ID_XPATH = TEST_SPEC_IDENTIFIER + IDENTIFIER_UNIQUE_ID;
    private static final String TEST_LABEL_XPATH = TEST_SPEC_IDENTIFIER + TEST_LABEL;

    public static Assessment parseSearchResult(TestSpecBankClientObj tsbClientObj) {
        Assessment assessment = new Assessment();

        assessment.setTestName(tsbClientObj.getName());
        assessment.setSubjectCode(tsbClientObj.getSubjectAbbreviation());
        assessment.setGrade(tsbClientObj.getGrade()[0]);
        assessment.setVersion(tsbClientObj.getVersion());
        assessment.setTenantId(tsbClientObj.getTenantId());
        assessment.setTestLabel(tsbClientObj.getLabel());

        return assessment;
    }

    public static Assessment parseTestPackageXml(final byte[] testPackageXml) {
        Document document = getXmlDocument(testPackageXml);
        Assessment assessment = new Assessment();

        assessment.setSubjectCode(get(SUBJECT_CODE, document).toString());
        assessment.setGrade(get(GRADE_LEVEL, document).toString());
        assessment.setCategory(get(CATEGORY, document).toString());
        assessment.setType(get(TYPE, document).toString());

        assessment.setTestName(get(TEST_NAME_XPATH, document).toString());
        assessment.setVersion(get(TEST_VERSION_XPATH, document).toString());
        assessment.setTestLabel(get(TEST_LABEL_XPATH, document).toString());
        assessment.setEntityId(get(TEST_UNIQUE_ID_XPATH, document).toString());

        NodeList nodeList = (NodeList) get(TEST_FORM_IDENTIFIER, document, NODESET);
        for (int i = 0; i < nodeList.getLength(); i++) {
            if (nodeList.item(i) != null) {
                assessment.addTestForm(nodeList.item(i).getNodeValue());
            }
        }

        return assessment;
    }

    public static Document getXmlDocument(final byte[] testPackageXml) {
        DocumentBuilder builder;
        Document document;

        try {
            builder = builderFactory.newDocumentBuilder();
            ByteArrayInputStream inputByte = new ByteArrayInputStream(testPackageXml);
            document = builder.parse(inputByte);
        } catch (ParserConfigurationException e) {
            LOGGER.error("DocumentBuilder configuration error");
            throw new RuntimeException(e);
        } catch (SAXException | IOException e) {
            LOGGER.error("Error in parsing XML: " + testPackageXml);
            throw new RuntimeException(e);
        }
        return document;
    }

    private static Object get(String nodeName, Document document, QName... qname) {
        XPath xPath = xpathFactory.newXPath();
        try {
            if (qname != null && qname.length == 1)
                return xPath.compile(nodeName).evaluate(document, qname[0]);
            else
                return xPath.compile(nodeName).evaluate(document);
        } catch (XPathExpressionException e) {
            LOGGER.error("Error in getting Subject Code: " + SUBJECT_CODE + " TestName: " + TEST_NAME
                    + " and TestVersion: " + TEST_VERSION);
            throw new RuntimeException(e);
        }
    }
}
