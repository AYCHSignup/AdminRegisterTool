/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria.dependencyresolvers;

import static org.apache.commons.lang.StringUtils.isEmpty;

import javax.annotation.Resource;

import org.opentestsystem.delivery.testreg.domain.DistrictEntity;
import org.opentestsystem.delivery.testreg.domain.InstitutionEntity;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.service.Sb11EntityRepositoryService;
import org.opentestsystem.delivery.testreg.service.StudentService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component
public class StudentDependencyResolver implements TestRegistrationEntitiesDependencyResolver<Student> {

    @Resource(name = "sb11EntityService")
    private Sb11EntityRepositoryService sb11EntityService;

    @Autowired
    private StudentService studentService;

    @Override
    public void resolveDependency(final Student student) {
        final String districtIdentifier = student.getDistrictIdentifier();
        final String institutionIdentifier = student.getInstitutionIdentifier();
        final String stateAbbreviation = student.getStateAbbreviation();

        if (!isEmpty(districtIdentifier)) {
            final DistrictEntity districtEntity = this.sb11EntityService.findByEntityIdAndStateAbbreviation(districtIdentifier, stateAbbreviation, DistrictEntity.class);
            if (districtEntity != null) {
                student.setDistrictEntityMongoId(districtEntity.getId());
            } else {
                student.setDistrictIdentifier(null);
            }
        }

        if (!isEmpty(institutionIdentifier)) {
            student.setInstitutionEntityMongoId(this.sb11EntityService.findByEntityIdAndStateAbbreviation(institutionIdentifier, stateAbbreviation, InstitutionEntity.class).getId());
        }

        /*
         * Accommodation list would be empty when importing Students since accommodations are a uploaded separately. In that case
         * preserve accommodations that already exists for the Student. In case of new student, there would be no accommodations.
         * 
         * Keep in mind that this code would be executed from UI(CRUD) as well from Import but Student and Accommodations are saved from a single screen
         * meaning Student always contain Accommodation collection
         */
        if (isPreserveAccommodation(student)) { // Preserve Accommodation
            final Student studentInDB = this.studentService.findByStudentIdAndStateAbbreviation(student.getEntityId(), student.getStateAbbreviation());
            if (studentInDB != null && studentInDB.getGradeLevelWhenAssessed ().equals (student.getGradeLevelWhenAssessed ())) {
                student.setAccommodations(studentInDB.getAccommodations());
            }
        }
    }

    /**
     * This piece of code determines whether request started in UI because we have to make decisions based on where it originated.
     * If Student has id property set, usually it is already in our Mongo store. A lack of id means student is imported from
     * other means which is usually a file.
     */
    private boolean isPreserveAccommodation(final Student student) {
        return !(student.getId() != null && student.getId().trim().length() > 0);
    }
}
