/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.student;

import static org.opentestsystem.delivery.testreg.domain.AnnotationHelper.getFieldLabel;
import static org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.VerifierUtils.addFieldError;

import java.util.Collections;
import java.util.List;

import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.persistence.Verifier;
import org.opentestsystem.delivery.testreg.service.StudentService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.validation.FieldError;

import com.google.common.collect.Lists;

@Component
public class StudentExternalIdVerifier implements Verifier<Student> {
    
    @Autowired
    StudentService studentService;

    @Override
    public List<FieldError> verify(Student student) {      
      Student studentFound = studentService.findByExternalSsidAndStateAbbreviation(student.getExternalSsid(), student.getStateAbbreviation());
      List<FieldError> errors = Lists.newArrayList();
      if (student.getId ()!=null) {
        if (studentFound !=null && (studentFound.getExternalSsid().equalsIgnoreCase(student.getExternalSsid()) && !student.getId ().equalsIgnoreCase (studentFound.getId ()))) {
          addFieldError(
              errors, 
              student, 
              getFieldLabel(student, "externalSsid"), 
              student.getExternalSsid(), 
              "There is already a Student with this External SSID.");
        }
        // Adding new validation based on SB-1429
        // If Logged-in-user is changing student SSID by UI to already used SSID for same state then
        // validation message "A student with SSID already exists"
        Student dbFound = studentService.findByStudentIdAndStateAbbreviation (student.getEntityId (), student.getStateAbbreviation ());
        if (dbFound != null && !dbFound.getId ().equalsIgnoreCase (student.getId ()) && student.getEntityId ().equalsIgnoreCase (dbFound.getEntityId ())) {
          String message = "A student with SSID = "+ student.getEntityId () + " already exists.";
          addFieldError(
              errors, 
              student, 
              getFieldLabel(student, "entityId"), 
              student.getEntityId (), 
              message);
        }
        if (!errors.isEmpty ())
        return errors;
      } else {
        // Logged-in-user can't modify an existing student's SSID via student file-upload. All other fields can be modified.
        if(studentFound !=null && !studentFound.getEntityId().equalsIgnoreCase(student.getEntityId())) {
            addFieldError(
                    errors, 
                    student, 
                    getFieldLabel(student, "externalSsid"), 
                    student.getExternalSsid(), 
                    "There is already a Student with this External SSID.");
            return errors;
        }
      }
      return Collections.emptyList();
    }
}
