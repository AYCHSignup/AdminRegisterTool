/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria;

import static org.bson.types.ObjectId.isValid;
import static org.springframework.util.StringUtils.hasText;

import org.opentestsystem.delivery.testreg.domain.DistrictEntity;
import org.opentestsystem.delivery.testreg.domain.GroupOfDistrictsEntity;
import org.opentestsystem.delivery.testreg.domain.GroupOfInstitutionsEntity;
import org.opentestsystem.delivery.testreg.domain.GroupOfStatesEntity;
import org.opentestsystem.delivery.testreg.domain.InstitutionEntity;
import org.opentestsystem.delivery.testreg.domain.StateEntity;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.domain.TestRegistrationBase;
import org.opentestsystem.delivery.testreg.domain.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.convert.converter.Converter;
import org.springframework.core.convert.support.GenericConversionService;
import org.springframework.stereotype.Component;

@Component
public final class Sb11ObjectIdConverters {

    @Autowired
    private Sb11ObjectIdConverters(final GenericConversionService conversionService) {
        conversionService.addConverter(ObjectIdToStateEntityConverter.INSTANCE);
        conversionService.addConverter(ObjectIdToDistrictEntityConverter.INSTANCE);
        conversionService.addConverter(ObjectIdToInstitutionEntityConverter.INSTANCE);
        conversionService.addConverter(ObjectIdToGroupOfInstitutionEntityConverter.INSTANCE);
        conversionService.addConverter(ObjectIdToGroupOfDistrictsEntityConverter.INSTANCE);
        conversionService.addConverter(ObjectIdToGroupOfStatesEntityConverter.INSTANCE);
        conversionService.addConverter(ObjectIdToUserConverter.INSTANCE);
        conversionService.addConverter(ObjectIdToStudentConverter.INSTANCE);
    }

    private static boolean canConvert(final String source) {
        return hasText(source) && isValid(source);
    }

    @SuppressWarnings("unchecked")
    private static <T extends TestRegistrationBase> T convertObjectId(final String source, final Class<T> format) {
        if (canConvert(source)) {
            try {
                TestRegistrationBase sb11Entity = format.newInstance();
                sb11Entity.setId(source);
                return (T) sb11Entity;
            } catch (InstantiationException | IllegalAccessException e) {
                throw new RuntimeException(e);
            }
        }
        return null;
    }

    public static enum ObjectIdToStateEntityConverter implements Converter<String, StateEntity> {
        INSTANCE;

        @Override
        public StateEntity convert(final String source) {
            return convertObjectId(source, StateEntity.class);
        }
    }

    public static enum ObjectIdToDistrictEntityConverter implements Converter<String, DistrictEntity> {
        INSTANCE;

        @Override
        public DistrictEntity convert(final String source) {
            return convertObjectId(source, DistrictEntity.class);
        }
    }

    public static enum ObjectIdToInstitutionEntityConverter implements Converter<String, InstitutionEntity> {
        INSTANCE;

        @Override
        public InstitutionEntity convert(final String source) {
            return convertObjectId(source, InstitutionEntity.class);
        }
    }

    public static enum ObjectIdToGroupOfInstitutionEntityConverter implements
            Converter<String, GroupOfInstitutionsEntity> {
        INSTANCE;

        @Override
        public GroupOfInstitutionsEntity convert(final String source) {
            return convertObjectId(source, GroupOfInstitutionsEntity.class);
        }
    }

    public static enum ObjectIdToGroupOfDistrictsEntityConverter implements Converter<String, GroupOfDistrictsEntity> {
        INSTANCE;

        @Override
        public GroupOfDistrictsEntity convert(final String source) {
            return convertObjectId(source, GroupOfDistrictsEntity.class);
        }
    }

    public static enum ObjectIdToGroupOfStatesEntityConverter implements Converter<String, GroupOfStatesEntity> {
        INSTANCE;

        @Override
        public GroupOfStatesEntity convert(final String source) {
            return convertObjectId(source, GroupOfStatesEntity.class);
        }
    }

    public static enum ObjectIdToUserConverter implements Converter<String, User> {
        INSTANCE;

        @Override
        public User convert(final String source) {
            return convertObjectId(source, User.class);
        }
    }

    public static enum ObjectIdToStudentConverter implements Converter<String, Student> {
        INSTANCE;

        @Override
        public Student convert(final String source) {
            return convertObjectId(source, Student.class);
        }
    }
}
