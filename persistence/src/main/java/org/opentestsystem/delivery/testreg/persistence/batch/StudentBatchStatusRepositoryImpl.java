/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2016 Regents of the University of California
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 *
 * SmarterApp Open Source Assessment Software Project: http://smarterapp.org
 * Developed by Fairway Technologies, Inc. (http://fairwaytech.com)
 * for the Smarter Balanced Assessment Consortium (http://smarterbalanced.org)
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.batch;

import org.opentestsystem.delivery.testreg.domain.StudentBatchError;
import org.opentestsystem.delivery.testreg.domain.StudentBatchStatus;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoOperations;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.data.mongodb.core.query.Update;
import org.springframework.stereotype.Repository;

import java.util.Date;

@Repository
public class StudentBatchStatusRepositoryImpl implements StudentBatchStatusRepository {

    @Autowired
    private MongoOperations mongoOperations;

    public StudentBatchStatus findById(String id) {
        StudentBatchStatus studentBatchStatus = mongoOperations.findOne(
                Query.query(Criteria.where("_id").is(id)),
                StudentBatchStatus.class,
                "studentBatchStatus"
        );
        studentBatchStatus.setPercentComplete(studentBatchStatus.getPercentComplete());
        return studentBatchStatus;
    }

    public String create(StudentBatchStatus studentBatchStatus) {
        mongoOperations.insert(studentBatchStatus, "studentBatchStatus");
        return studentBatchStatus.getId();
    }

    public void logBatchError(StudentBatchError errorMessage, String batchId) {
        Update update = getUpdate();
        update.addToSet("exceptions", errorMessage);
        updateBatch(batchId, update);
    }

    public void logBatchSuccess(String batchId) {
        Update update = getUpdate();
        update.inc("numSuccess", 1);
        updateBatch(batchId, update);
    }

    private void updateBatch(String batchId, Update update) {
        mongoOperations.updateFirst(Query.query(Criteria.where("_id").is(batchId)), update, StudentBatchStatus.class);
    }

    private Update getUpdate() {
        Update update = new Update();
        update.inc("numProcessed", 1);
        update.set("updatedDate", new Date());
        return update;
    }
}
