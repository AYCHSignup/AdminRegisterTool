/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria;

import static org.opentestsystem.delivery.testreg.domain.AnnotationHelper.getFieldLabel;
import static org.opentestsystem.delivery.testreg.domain.Sb11EntityUtils.getHumanReadableName;
import static org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.VerifierUtils.addFieldError;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.opentestsystem.delivery.testreg.domain.ExplicitEligibility;
import org.opentestsystem.delivery.testreg.persistence.Verifier;
import org.opentestsystem.delivery.testreg.service.Sb11NonEntityRepositoryService;
import org.opentestsystem.shared.search.domain.AbstractSearchRequest;
import org.springframework.stereotype.Component;
import org.springframework.validation.FieldError;

@Component
public class ExplicitEligibilityVerifier implements Verifier<ExplicitEligibility> {

    @Resource(name = "sb11NonEntityService")
    private Sb11NonEntityRepositoryService sb11NonEntityRepositoryService;

    @Override
    public List<FieldError> verify(final ExplicitEligibility eligibility) {

        AbstractSearchRequest searchRequest = eligibility.createAlternateKeySearchRequest();
        ExplicitEligibility existingEligibility = sb11NonEntityRepositoryService.findByAlternateKey(searchRequest, ExplicitEligibility.class);
        List<FieldError> errors = new ArrayList<FieldError>();
        if (existingEligibility == null) {
            String studentIdLabel = getFieldLabel(eligibility, "studentId");
            String humanReadableStudentIdLabel = getHumanReadableName(studentIdLabel);
            String stateAbbreviationLabel = getFieldLabel(eligibility, "stateAbbreviation");
            String testNameLabel = getFieldLabel(eligibility, "testName");
            String testVersionLabel = getFieldLabel(eligibility, "testVersion");
            String message = studentIdLabel + ":" + eligibility.getStudentId() + " , " + stateAbbreviationLabel + ":" + eligibility.getStateAbbreviation()
                    + " , " + testNameLabel + ":" + eligibility.getTestName() + " and " + testVersionLabel + ":" + eligibility.getTestVersion();
            addFieldError(errors, eligibility, humanReadableStudentIdLabel, eligibility.getStudentId(), message + " not found in DB for delete");

        }
        return errors;
    }

}
