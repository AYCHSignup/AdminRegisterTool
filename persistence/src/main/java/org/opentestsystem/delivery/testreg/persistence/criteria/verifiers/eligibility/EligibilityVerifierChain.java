/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.eligibility;

import static org.opentestsystem.delivery.testreg.domain.FormatType.ASSESSMENT;
import static org.opentestsystem.delivery.testreg.domain.FormatType.EXPLICITELIGIBILITY;
import static org.opentestsystem.delivery.testreg.domain.FormatType.DISTRICT;
import static org.opentestsystem.delivery.testreg.domain.FormatType.STUDENT;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.lang.StringUtils;
import org.opentestsystem.delivery.testreg.domain.ExplicitEligibility;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.TestRegistrationBase;
import org.opentestsystem.delivery.testreg.persistence.Verifier;
import org.springframework.stereotype.Component;
import org.springframework.validation.FieldError;

@Component
public class EligibilityVerifierChain implements Verifier<ExplicitEligibility> {

    @Resource(name = "eligibilityVerifierMap")
    private Map<FormatType, Verifier<? extends TestRegistrationBase>> verifierMap;
    
    @Resource(name ="studentDistrictCrossVerifier")
    private Verifier<ExplicitEligibility> studentDistrictCrossVerifier;

    @Override
    public List<FieldError> verify(final ExplicitEligibility explicitEligibility) {

        List<FieldError> errors = new ArrayList<>();
        //district identifier is now optional for explicitEligibility ref: SB-1426 Requirement 3.9.3
        if (StringUtils.isNotBlank(explicitEligibility.getResponsibleDistrictId ())) {
          errors.addAll(invokeVerifier(DISTRICT, explicitEligibility));
        }
        errors.addAll(invokeVerifier(STUDENT, explicitEligibility));
        errors.addAll(invokeVerifier(ASSESSMENT, explicitEligibility));
        errors.addAll (invokeVerifier(studentDistrictCrossVerifier, explicitEligibility));
        errors.addAll(invokeVerifier(EXPLICITELIGIBILITY, explicitEligibility));

        return errors;

    }

    private List<FieldError> invokeVerifier(final FormatType level, ExplicitEligibility user) {
        return getVerifier(level).verify(user);
    }
    
    private List<FieldError> invokeVerifier(Verifier<ExplicitEligibility> verifier, ExplicitEligibility user) {
      return verifier.verify(user);
     
  }


    @SuppressWarnings("unchecked")
    private Verifier<ExplicitEligibility> getVerifier(final FormatType level) {
        return (Verifier<ExplicitEligibility>) verifierMap.get(level);

    }

}
