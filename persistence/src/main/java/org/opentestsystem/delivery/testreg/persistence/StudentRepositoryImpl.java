/*
Educational Online Test Delivery System Copyright (c) 2013 American Institutes for Research

Distributed under the AIR Open Source License, Version 1.0 See accompanying file AIR-License-1_0.txt or at
http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 */

package org.opentestsystem.delivery.testreg.persistence;

import static org.springframework.data.mongodb.core.query.Criteria.where;

import java.util.List;

import org.bson.types.ObjectId;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.data.mongodb.core.MongoOperations;
import org.springframework.data.mongodb.core.query.Query;

public class StudentRepositoryImpl implements StudentRepositoryCustom {

    @Autowired
    private MongoOperations mongoOperations;

    @Override
    public List<Student> findAllByRangeAndLimitWithInstitutionFilter(final String mongoId, final int pageSize,
            final List<String> institutionMongoIdList) {

        Query query = new Query();
        query.addCriteria(
                where("_id").gt(new ObjectId(mongoId)).and("institutionEntityMongoId").in(institutionMongoIdList))
                .with(new Sort("_id")).limit(pageSize);

        return mongoOperations.find(query, Student.class);
    }

    public long getStudentCount(final String institutionId) {

        Query query = new Query();

        query.addCriteria(where("institutionEntityMongoId").is(institutionId));

        return mongoOperations.count(query, Student.class);

    }

    @Override
    public List<Student> findStudentsByInstitutions(final List<String> institutionMongoIdList) {

        Query query = new Query();

        query.addCriteria(where("institutionEntityMongoId").in(institutionMongoIdList));

        return mongoOperations.find(query, Student.class);

    }

    @Override
    public List<Student> findStudentsByInstitution(final String institutionMongoId) {

        Query query = new Query();

        query.addCriteria(where("institutionEntityMongoId").is(institutionMongoId));

        return mongoOperations.find(query, Student.class);

    }

    @Override
    public List<Student> findStudentsByDistrict(final String districtMongoId) {

        Query query = new Query();

        query.addCriteria(where("districtEntityMongoId").is(districtMongoId));

        return mongoOperations.find(query, Student.class);

    }

    @Override
    public List<Student> findStudentsByState(final String stateAbbreviation) {

        Query query = new Query();

        query.addCriteria(where("stateAbbreviation").is(stateAbbreviation));

        return mongoOperations.find(query, Student.class);

    }

    @Override
    public long countByInstitutionFilter(final List<String> institutionMongoIds) {
        Query query = new Query();

        query.addCriteria(where("institutionEntityMongoId").in(institutionMongoIds));

        return mongoOperations.count(query, Student.class);
    }
}
