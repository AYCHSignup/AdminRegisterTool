/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.studentgroup;

import static org.opentestsystem.delivery.testreg.domain.AnnotationHelper.getFieldLabel;
import static org.opentestsystem.delivery.testreg.domain.Sb11EntityUtils.getHumanReadableName;
import static org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.VerifierUtils.addFieldError;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import javax.annotation.Resource;

import org.apache.commons.collections.CollectionUtils;
import org.opentestsystem.delivery.testreg.domain.StudentGroup;
import org.opentestsystem.delivery.testreg.persistence.Verifier;
import org.opentestsystem.delivery.testreg.service.StudentGroupService;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.validation.FieldError;

@Component
public class MaxStudentGroupVerifier implements Verifier<StudentGroup> {
    
    @Value("${testreg.student.group.max:2}")
    int maxGroups;

    @Resource(name = "studentGroupService")
    private StudentGroupService studentGroupService;
    
    @Override
    public List<FieldError> verify(StudentGroup studentGroup) {
        List<FieldError> errors = new ArrayList<FieldError>();
        //find how many groups student belongs to and validate against the max groups student can belong to from progman ref: JIRA-1108
        List<StudentGroup> existingGroups = studentGroupService.findStudentGroups(studentGroup.getStateAbbreviation(), studentGroup.getInstitutionIdentifier());
        List<String> studentIds = new ArrayList<String>();
        for (StudentGroup stgroup: existingGroups) {
            studentIds.addAll(stgroup.getStudentIds());
        }
        if (CollectionUtils.isNotEmpty(studentGroup.getStudentIds())) {
            for (String studentId : studentGroup.getStudentIds()) {
                checkMaxOccurrence(studentGroup, errors, studentIds, studentId);
            }
        } else if (studentGroup.getStudentId() != null) {
            checkMaxOccurrence(studentGroup, errors, studentIds, studentGroup.getStudentId());
        }
        return errors;
    }
    
    private void checkMaxOccurrence(final StudentGroup group, List<FieldError> errors, List<String> studentIds, String studentId) {
        int occurrences = Collections.frequency(studentIds, studentId);
        if(maxGroups == occurrences) {
            String studentIdentifierLabel = getFieldLabel(group, "studentId");
            String humanReadableStudentIdentifierLabel = getHumanReadableName(studentIdentifierLabel);                    
            addFieldError(errors, group, studentIdentifierLabel, studentId,
                    humanReadableStudentIdentifierLabel + " " + studentId + " already belongs to " + occurrences + " group(s) and cannot be added to this group");
        }
    }
}
