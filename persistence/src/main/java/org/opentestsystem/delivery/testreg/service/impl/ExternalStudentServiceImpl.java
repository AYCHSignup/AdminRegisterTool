/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2016 Regents of the University of California
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 *
 * SmarterApp Open Source Assessment Software Project: http://smarterapp.org
 * Developed by Fairway Technologies, Inc. (http://fairwaytech.com)
 * for the Smarter Balanced Assessment Consortium (http://smarterbalanced.org)
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.service.impl;

import org.apache.commons.lang.StringUtils;
import org.opentestsystem.delivery.testadmin.service.TestStatusService;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.domain.StudentUpsert;
import org.opentestsystem.delivery.testreg.domain.amqp.StudentSecurity;
import org.opentestsystem.delivery.testreg.persistence.criteria.FileUploadSecurityValidator;
import org.opentestsystem.delivery.testreg.service.ExternalStudentService;
import org.opentestsystem.delivery.testreg.service.StudentService;
import org.opentestsystem.delivery.testreg.service.TestRegPersister;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.oauth2.common.exceptions.UnauthorizedUserException;
import org.springframework.stereotype.Service;
import org.springframework.validation.FieldError;

import java.util.List;
import java.util.Objects;

@Service
public class ExternalStudentServiceImpl implements ExternalStudentService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ExternalStudentServiceImpl.class);

    @Autowired
    private TestRegPersister studentRepository;

    @Autowired
    private StudentService studentService;

    @Autowired
    private TestStatusService testStatusService;

    @Autowired // We are using this because the logic to check for valid user access to manage students for bulk upload already exists in this file
    private FileUploadSecurityValidator fileUploadSecurityValidator;

    @Override
    public StudentUpsert upsertStudent(Student student, StudentSecurity studentSecurity, String stateCode) {
        StudentUpsert studentUpsert = new StudentUpsert();
        Student existingStudent = studentService.findByStudentIdAndStateAbbreviation(student.getEntityId(), student.getStateAbbreviation());
        if (existingStudent != null) {
            student.setId(existingStudent.getId());
        }
        // If student hasn't changed, don't save the object.
        if (studentsEqual(student, existingStudent)) {
            LOGGER.error("Upsert SKIPPING duplicate student " + student.toString());
        } else {
            LOGGER.warn("Upsert saving changed student " + student.toString());
            String studentErrors = validateStudent(student, studentSecurity, stateCode);
            if (!StringUtils.isEmpty(studentErrors)) {
                throw new IllegalArgumentException(studentErrors);
            }
            studentRepository.saveDomainObject(student);
        }
        studentUpsert.setInsert(existingStudent == null);
        studentUpsert.setLocation(student.getUrl());
        studentUpsert.setStudent(student);
        return studentUpsert;
    }

    @Override
    public boolean deleteStudent(String ssid, StudentSecurity studentSecurity, String stateCode) {
        Student student = studentService.findByStudentIdAndStateAbbreviation(ssid, stateCode);
        if(student == null) return false;
        String studentErrors = validateStudent(student, studentSecurity, stateCode);
        if(!StringUtils.isEmpty(studentErrors)) {
            throw new IllegalArgumentException(studentErrors);
        }
        testStatusService.deleteTestStatus(ssid, stateCode);
        studentRepository.deleteDomainObject(student.getId(), FormatType.STUDENT);
        return true;
    }

    private String validateStudent(Student student, StudentSecurity studentSecurity, String stateCode) {
        if (student.getStateAbbreviation().compareTo(stateCode) != 0)
            throw new UnauthorizedUserException("Attempted to modify student in state: " + student.getStateAbbreviation() + " endpoint received " + stateCode);
        String error = "";
        List<FieldError> errors = fileUploadSecurityValidator.validateStudent(student, studentSecurity);
        if(errors.size() != 0) {
            for(FieldError fieldError : errors) {
                error += fieldError.getDefaultMessage() + "\n";
            }
        }
        return error;
    }

    public static boolean studentsEqual(Student a, Student b) {
        if (a == null) {
            return (b == null) ? true : false;
        }
        if (b == null) {
            return (a == null) ? true : false;
        }
        try {
            return StringUtils.equals(a.getStateAbbreviation(), b.getStateAbbreviation()) &&
                StringUtils.equals(a.getDistrictIdentifier(), b.getDistrictIdentifier()) &&
                StringUtils.equals(a.getInstitutionIdentifier(), b.getInstitutionIdentifier()) &&
                StringUtils.equals(a.getEntityId(), b.getEntityId()) &&
                StringUtils.equals(a.getFirstName(), b.getFirstName()) &&
                StringUtils.equals(a.getMiddleName(), b.getMiddleName()) &&
                StringUtils.equals(a.getLastName(), b.getLastName()) &&
                Objects.equals(a.getBirthDate(), b.getBirthDate()) &&
                StringUtils.equals(a.getExternalSsid(), b.getExternalSsid()) &&
                Objects.equals(a.getGender(), b.getGender()) &&
                StringUtils.equals(a.getHispanicOrLatino(), b.getHispanicOrLatino()) &&
                StringUtils.equals(a.getAmericanIndianOrAlaskaNative(), b.getAmericanIndianOrAlaskaNative()) &&
                StringUtils.equals(a.getAsian(), b.getAsian()) &&
                StringUtils.equals(a.getBlackOrAfricanAmerican(), b.getBlackOrAfricanAmerican()) &&
                StringUtils.equals(a.getWhite(), b.getWhite()) &&
                StringUtils.equals(a.getNativeHawaiianOrPacificIsland(), b.getNativeHawaiianOrPacificIsland()) &&
                StringUtils.equals(a.getTwoOrMoreRaces(), b.getTwoOrMoreRaces()) &&
                Objects.equals(a.getGradeLevelWhenAssessed(), b.getGradeLevelWhenAssessed()) &&
                StringUtils.equals(a.getLanguageCode(), b.getLanguageCode()) &&
                Objects.equals(a.getFirstEntryDateIntoUsSchool(), b.getFirstEntryDateIntoUsSchool()) &&
                Objects.equals(a.getLepEntryDate(), b.getLepEntryDate()) &&
                Objects.equals(a.getLepExitDate(), b.getLepExitDate()) &&
                Objects.equals(a.getTitle3ProgramType(), b.getTitle3ProgramType()) &&
                Objects.equals(a.getPrimaryDisabilityType(), b.getPrimaryDisabilityType()) &&
                StringUtils.equals(a.getiDEAIndicator(), b.getiDEAIndicator()) &&
                StringUtils.equals(a.getSection504Status(), b.getSection504Status()) &&
                StringUtils.equals(a.getLepStatus(), b.getLepStatus()) &&
                StringUtils.equals(a.getTitle3ProgressStatus(), b.getTitle3ProgressStatus()) &&
                StringUtils.equals(a.getDisadvantageStatus(), b.getDisadvantageStatus()) &&
                StringUtils.equals(a.getMigrantStatus(), b.getMigrantStatus());
        } catch(Exception e) {
            return false;
        }
    }
}
