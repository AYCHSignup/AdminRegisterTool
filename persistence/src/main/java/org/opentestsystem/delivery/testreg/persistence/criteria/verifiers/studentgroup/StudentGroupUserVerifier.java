/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.studentgroup;

import static org.opentestsystem.delivery.testreg.domain.AnnotationHelper.getFieldLabel;
import static org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.VerifierUtils.getError;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.StudentGroup;
import org.opentestsystem.delivery.testreg.domain.User;
import org.opentestsystem.delivery.testreg.persistence.Verifier;
import org.opentestsystem.delivery.testreg.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.validation.FieldError;

@Component
public class StudentGroupUserVerifier implements Verifier<StudentGroup> {
    
    @Autowired
    UserService userService;

    @Override
    public List<FieldError> verify(StudentGroup studentGroup) {
        String      ownerEmail  = studentGroup.getOwnerEmail();
        User        user        = userService.findByEmail(ownerEmail);
        
        if(user==null) {
            List<FieldError> errors                 = new ArrayList<>();
            String           groupOwnerEmailLabel   = getFieldLabel(studentGroup, "ownerEmail");
            errors.add(getError(FormatType.USER, groupOwnerEmailLabel, ownerEmail, "Email address of owner of Student Group must be a user in the system"));
            return errors;
        }       
        return Collections.emptyList();
    }
}
