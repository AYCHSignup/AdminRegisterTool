/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.service.impl;

import java.util.List;

import javax.annotation.PostConstruct;

import org.opentestsystem.delivery.testreg.domain.ClientEntity;
import org.opentestsystem.delivery.testreg.domain.ClientEntity.Builder;
import org.opentestsystem.delivery.testreg.persistence.ClientEntityRepository;
import org.opentestsystem.delivery.testreg.service.ClientService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

@Service
public class ClientServiceImpl implements ClientService {

    @Autowired
    ClientEntityRepository clientEntityRepository;

    @Value("${clientId}")
    String clientId;

    @Value("${clientName}")
    String clientName;

    @Value("${systemId}")
    String systemId;

    @Value("${student.identity.share}")
    String studentIdentityShared;

    /**
     * Update/Insert Client info entry to collection This method is called after dependency injection.
     */
    @PostConstruct
    public void init() {
        ClientEntity clientEntity = null;
        List<ClientEntity> ClientEntityList = clientEntityRepository.findAll();
        if (ClientEntityList != null && ClientEntityList.size() > 1) {
            throw new RuntimeException("Only One Client per deployment is Valid");
        }
        if (clientId != null && clientId.trim().length() > 40) {
            throw new RuntimeException(
                    "The progman config for 'clientId' is greater than 40, which is not allowed, please edit to a shorter id");
        }
        if (ClientEntityList == null || ClientEntityList.size() == 0) {
            clientEntity = new Builder(new Object[] { clientId, clientName, systemId, studentIdentityShared }).build();
            clientEntityRepository.save(clientEntity);
        } else {
            clientEntity = ClientEntityList.get(0);
            if (isClinetChangedInProgman(clientEntity)) {
                clientEntity.setEntityId(clientId);
                clientEntity.setEntityName(clientName);
                clientEntity.setSystemId(systemId);
                clientEntity.setShareStudentIdentity(Boolean.valueOf(studentIdentityShared));
                clientEntityRepository.save(clientEntity);
            }
        }

    }

    private boolean isClinetChangedInProgman(final ClientEntity client) {
        if (client.getEntityId().equals(clientId)
                && client.getEntityName().equals(clientName)
                && client.getSystemId().equals(systemId)
                && Boolean.valueOf(client.isShareStudentIdentity()).compareTo(Boolean.valueOf(studentIdentityShared)) == 0) {
            return false;
        }
        return true;
    }

}
