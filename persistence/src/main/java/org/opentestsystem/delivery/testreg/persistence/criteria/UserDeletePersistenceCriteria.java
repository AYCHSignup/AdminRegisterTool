/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria;

import static org.opentestsystem.delivery.testreg.domain.AnnotationHelper.getFieldLabel;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.opentestsystem.delivery.testreg.domain.Action;
import org.opentestsystem.delivery.testreg.domain.User;
import org.opentestsystem.delivery.testreg.domain.User.RoleAssociation;
import org.opentestsystem.delivery.testreg.service.Sb11NonEntityRepositoryService;
import org.opentestsystem.shared.search.domain.AbstractSearchRequest;
import org.springframework.stereotype.Component;
import org.springframework.validation.FieldError;
import org.springframework.validation.ObjectError;

@Component
public class UserDeletePersistenceCriteria implements Sb11NonEntityBusinessValidator<User> {

    @Resource(name = "sb11NonEntityService")
    private Sb11NonEntityRepositoryService sb11NonEntityRepositoryService;

    @Override
    public boolean supports(Class<? extends User> clazz) {
        return User.class.isAssignableFrom(clazz);
    }

    @Override
    public List<? extends ObjectError> validate(final User user) {
        AbstractSearchRequest searchRequest = user.createAlternateKeySearchRequest();
        User existingUser = sb11NonEntityRepositoryService.findByAlternateKey(searchRequest, User.class);
        List<FieldError> errors = new ArrayList<FieldError>();
        if (existingUser == null) {
            String entityIdLabel = getFieldLabel(user, "email");
            errors.add(new FieldError(user.getFormatType().name(), entityIdLabel, user.getEmail(), false, null,
                    null, "User " + entityIdLabel + " not found in DB for delete"));
        } else {
            RoleAssociation roleAssociation = user.getRoleAssociations().get(0);
            if (!existingUser.getRoleAssociations().contains(roleAssociation)) {
                String roleText = "[ " + roleAssociation.getRole() + ", " + roleAssociation.getLevel() 
                        + ", " + roleAssociation.getAssociatedEntityId() + ", " + roleAssociation.getStateAbbreviation() + " ]";
                errors.add(new FieldError(user.getFormatType().name(), "RoleAssociation", roleText, false, null,
                        null, "User RoleAssociation not found in DB for delete"));
            }
        }
        
        return errors;
    }

    @Override
    public Action getAction() {
        return Action.DEL;
    }
}
