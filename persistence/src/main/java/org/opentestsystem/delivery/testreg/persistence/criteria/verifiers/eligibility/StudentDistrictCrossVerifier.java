/*************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2016 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at 
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 *************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.eligibility;

import static org.apache.commons.lang.StringUtils.isEmpty;
import static org.opentestsystem.delivery.testreg.domain.AnnotationHelper.getFieldLabel;
import static org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.VerifierUtils.addFieldError;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.opentestsystem.delivery.testreg.domain.ExplicitEligibility;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.persistence.Verifier;
import org.opentestsystem.delivery.testreg.service.StudentService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.validation.FieldError;

/**
 * Validates whether student belongs to associated district in ExplicitEligibility upload file
 *
 */

@Component
public class StudentDistrictCrossVerifier implements Verifier<ExplicitEligibility>
{
  @Autowired
  private StudentService studentService;
  
  @Override
  public List<FieldError> verify (ExplicitEligibility explicitEligibility) {
    String studentEntityId = explicitEligibility.getStudentId ();
    String districtIdentifier = explicitEligibility.getResponsibleDistrictId();
    String stateAbbreviation = explicitEligibility.getStateAbbreviation();
    Student student = getStudent(studentEntityId,stateAbbreviation);
    // Adding new validation based on SB-1168
    // Student is not found in specified district or not 
    if (student != null && !isEmpty(districtIdentifier) && !student.getDistrictIdentifier ().equalsIgnoreCase (districtIdentifier)) {
      List<FieldError> errors = new ArrayList<>();
      String districtIdentifierLabel       = getFieldLabel(explicitEligibility, "responsibleDistrictId");
      String message = "Student with StudentIdentifier : "+ studentEntityId +" is not found in specified district.";
      addFieldError(errors, explicitEligibility, districtIdentifierLabel, districtIdentifier, message);
      return errors;  
    }
    return Collections.emptyList();
  }

  /**
   * @param studentEntityId
   * @param stateAbbreviation
   * @return student record
   */
  private Student getStudent (String studentEntityId,String stateAbbreviation) {
    return studentService.findByStudentIdAndStateAbbreviation (studentEntityId,stateAbbreviation);
  }

}
