/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.service.impl;

import java.util.Collections;
import java.util.List;
import java.util.Map;

import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.service.EntityNameService;
import org.opentestsystem.shared.progman.client.ProgManClient;
import org.opentestsystem.shared.progman.client.domain.Component;
import org.opentestsystem.shared.progman.client.domain.Tenant;
import org.opentestsystem.shared.progman.client.domain.TenantType;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.google.common.collect.Maps;

@Service
public class EntityNameServiceImpl implements EntityNameService {
    private static final String PLURAL_NOUN_SUFFUX = "s";

    @Autowired
    private ProgManClient progManClient;

    @Value("${component.name}")
    private String componentName;

    @Override
    public Map<String, String> getEntityNameMap(final String tenantId) {
        Map<TenantType, String> params = Maps.newHashMap();
        final Tenant tenant = getTenant(tenantId);
        if (tenant != null) {
            params.put(tenant.getType(), tenant.getName());
        }
        Map<String, Object> assets = getAssetGroup(params);

        Map<String, String> entityNameMap = Maps.newHashMap();
        for (Map<String, String> assetMapping : getAssetList(assets)) {
            entityNameMap.put(assetMapping.get("name"), assetMapping.get("property"));
        }
        verifyDefaults(entityNameMap); // If a Tenant has no assets, supply defaults
        return entityNameMap;
    }

    private Component getComponent() {
        return progManClient.getComponentByName(componentName);
    }

    private Map<String, Object> getAssetGroup(Map<TenantType, String> params) {
        Component component;
        if ((component = getComponent()) != null) {
            return progManClient.getCustomAssets(component.getName(), params);
        }
        return null;
    }

    private Tenant getTenant(String tenantId) {
        return progManClient.getTenantById(tenantId);
    }

    @SuppressWarnings("unchecked")
    private List<Map<String, String>> getAssetList(Map<String, Object> assets) {
        Object assetObj = (assets != null) ? assets.get("assets") : null;
        if (assetObj != null) {
            return (List<Map<String, String>>) assetObj;
        }
        return Collections.emptyList();
    }

    private void verifyDefaults(Map<String, String> entityNameMap) {
        for (FormatType formatType : FormatType.values()) {
            String formatName = formatType.getFormatName();
            if (!entityNameMap.containsKey(formatName)) {
                entityNameMap.put(formatName, formatName);
            }
            String formatNamePlural = formatName + PLURAL_NOUN_SUFFUX;
            if (!entityNameMap.containsKey(formatNamePlural)) {
                entityNameMap.put(formatNamePlural, formatNamePlural);
            }
        }
    }

}
