/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * https://bitbucket.org/sbacoss/eotds/wiki/AIR_Open_Source_License
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.xstream.converters;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.joda.time.DateTime;
import org.opentestsystem.delivery.CachedClientEntity;
import org.opentestsystem.delivery.Sb11TimeZoneBuilder;
import org.opentestsystem.delivery.testreg.domain.Accommodation;
import org.opentestsystem.delivery.testreg.domain.ExplicitEligibility;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.domain.StudentGroup;
import org.opentestsystem.delivery.testreg.service.EligibilityService;
import org.opentestsystem.delivery.testreg.service.Sb11EntityRepositoryService;
import org.opentestsystem.delivery.testreg.service.StudentGroupService;
import org.springframework.beans.factory.annotation.Autowired;

import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;


public class StudentPackageStudentConverter extends StudentConverter {
    @Autowired
    private CachedClientEntity cachedClientEntity;
    
    @Autowired
    private XStream xstream;

    @Autowired
    private EligibilityService eligService;
    
    @Autowired
    private StudentGroupService studentGroupService;

    @Autowired
    private Sb11TimeZoneBuilder sb11TimeZoneBuilder;
    
    private static final String TESTS_NODE                  = "Tests";
    private static final String TEST_NODE                   = "Test";
    private static final String WINDOW_START_NODE           = "WindowStart";
    
    public StudentPackageStudentConverter(Sb11EntityRepositoryService sb11EntityRepositoryService) {
        super(sb11EntityRepositoryService);
    }

    @Override
    public boolean canConvert(@SuppressWarnings("rawtypes") final Class type) {
        return type.equals(Student.class);
    }

    @Override
    public Object unmarshal(final HierarchicalStreamReader reader, final UnmarshallingContext context) {
        return null;
    }

    @Override
    public void marshal(final Object source, final HierarchicalStreamWriter writer, final MarshallingContext context) {
        super.marshal(source, writer, context);
    }

    @Override
    public void writeCallback(Object object, HierarchicalStreamWriter writer, MarshallingContext context) {
        Student student          = (Student)object;
        writeClientInfo(writer, context);
        writeEligibility(student, writer, context);
        writeAccommodations(student, writer, context);
        writeStudentGroups(student, writer, context);
        
    }
    
    private void writeClientInfo(final HierarchicalStreamWriter writer, final MarshallingContext context) {
        converter.marshal(cachedClientEntity.getClient(), writer, context);
    }

    private void writeEligibility(final Student student, final HierarchicalStreamWriter writer, final MarshallingContext context) {
        writer.startNode(TESTS_NODE);//Start

        Set<Entry<ExplicitEligibility,DateTime>> eligiblitySet = getEligibility(student.getEntityId(), student.getStateAbbreviation()).entrySet();
        for(final Entry<ExplicitEligibility, DateTime> entry: eligiblitySet) {
            writer.startNode(TEST_NODE);
            converter.marshal(entry.getKey(), writer, context);
            writer.startNode(WINDOW_START_NODE);
            writer.setValue(entry.getValue().toString());
            writer.endNode();
            writer.endNode();
        }
        writer.endNode(); //End
    }
    
    private Map<ExplicitEligibility, DateTime> getEligibility(final String studentId, final String stateAbbreviation) {
        DateTime now = new DateTime(sb11TimeZoneBuilder.getDateTimeZone()); //Use Configured TZ for TestWindows
        return eligService.findAllEligibilityByStudentIdStateAbbreviationAndBeginWindow(studentId, stateAbbreviation, now);
    }
    
    private void writeAccommodations(final Student student, final HierarchicalStreamWriter writer, final MarshallingContext context) {
        xstream.alias("Accommodations", List.class);
        xstream.marshal(student.hasAccommodations() ? student.getAccommodations():new ArrayList<Accommodation>(), writer);
    }

    private void writeStudentGroups(final Student student, final HierarchicalStreamWriter writer, final MarshallingContext context) {
        List<StudentGroup> groups = studentGroupService.findGroupsForStudent(student.getEntityId(), student.getStateAbbreviation());
        writer.startNode("Groups"); //Start

        if(groups !=null) {
            for(StudentGroup group: groups) {
                converter.marshal(group, writer, context); //Append Student Group
            }
        }

        writer.endNode(); //End
    }
}