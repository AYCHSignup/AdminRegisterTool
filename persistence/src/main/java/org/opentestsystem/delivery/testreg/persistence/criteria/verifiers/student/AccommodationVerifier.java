/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.student;

import static org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.VerifierUtils.addFieldError;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.opentestsystem.delivery.testreg.domain.Accommodation;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.persistence.Verifier;
import org.springframework.stereotype.Component;
import org.springframework.util.CollectionUtils;
import org.springframework.validation.FieldError;

@Component
public class AccommodationVerifier implements Verifier<Student> {

    @Override
    public List<FieldError> verify(final Student student) {
        final Set<Accommodation> duplicates = findDuplicateAccommodations(student);
        final List<FieldError> errors = new ArrayList<>();
        if (!CollectionUtils.isEmpty(duplicates)) {
            for (final Accommodation accommodation : duplicates) {
                final String message = "Duplicate subject " + accommodation.getSubject() + " in accommodation";
                addFieldError(
                        errors,
                        student,
                        "Accommodations",
                        accommodation.getSubject(),
                        message);
            }
        }
        return errors;
    }

    private Set<Accommodation> findDuplicateAccommodations(final Student student) {
        final Set<Accommodation> accommodations = new HashSet<Accommodation>();
        final Set<Accommodation> duplicates = new HashSet<Accommodation>();
        for (final Accommodation accommodation : student.getAccommodations()) {
            if (accommodations.contains(accommodation)) {
                duplicates.add(accommodation);
            } else {
                accommodations.add(accommodation);
            }
        }
        return duplicates;
    }
}
