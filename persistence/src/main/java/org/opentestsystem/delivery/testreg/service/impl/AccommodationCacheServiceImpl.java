/*************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2015 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at 
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 *************************************************************************/

package org.opentestsystem.delivery.testreg.service.impl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.annotation.PostConstruct;
import javax.annotation.Resource;

import org.opentestsystem.delivery.testreg.domain.ARTHelpers;
import org.opentestsystem.delivery.testreg.domain.AccommodationResourceType;
import org.opentestsystem.delivery.testreg.domain.AccommodationText;
import org.opentestsystem.delivery.testreg.domain.EntityCrosswalk;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.MasterResourceAccommodation;
import org.opentestsystem.delivery.testreg.domain.ResourceFamily;
import org.opentestsystem.delivery.testreg.persistence.MasterResourceAccommodationRepository;
import org.opentestsystem.delivery.testreg.persistence.ResourceFamilyRepository;
import org.opentestsystem.delivery.testreg.persistence.criteria.OrderComparator;
import org.opentestsystem.delivery.testreg.service.AccommodationCacheService;
import org.opentestsystem.delivery.testreg.service.EntityCrosswalkService;
import org.opentestsystem.delivery.testreg.service.MasterResourceAccommodationService;
import org.opentestsystem.delivery.testreg.service.SubjectService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.Cache;
import org.springframework.cache.Cache.ValueWrapper;
import org.springframework.cache.CacheManager;
import org.springframework.stereotype.Service;

@Service
public class AccommodationCacheServiceImpl implements AccommodationCacheService
{
  
  private static final Logger log = LoggerFactory.getLogger(AccommodationCacheServiceImpl.class);
  
  @Resource
  private CacheManager cacheManager;
  
  @Resource(name = "gradeLevel")
  private Map<String, String> gradeLevel;
  
  @Autowired
  private SubjectService subjectService;
  
  @Autowired
  private ResourceFamilyRepository resourceFamilyRepository;
  
  @Autowired
  private MasterResourceAccommodationRepository masterResourceRepository;
  
  @Autowired
  private EntityCrosswalkService entityCrosswalkService;
  
  @Autowired
  private MasterResourceAccommodationService masterResourceAccommodationService;
  
  
  /*
   *  we are building cacheMap for accommodation options
   *  @key   : grade and subject
   *  @value : list of options for each resource
   *
   */
  @Override
  @PostConstruct
  public void initialize() {

    Map<String, AccommodationResourceType> accommodationFields = new HashMap<String, AccommodationResourceType> ();
    final Cache accommodationToCache = cacheManager.getCache("accommodationCache");
    // kick off the building of the cache on startup
    
    final List<String> subjects = subjectService.getAllSubjectCodes ();
    List<MasterResourceAccommodation> masterResource = masterResourceRepository.findAll ();
    HashMap<String,MasterResourceAccommodation.AccommodationOption> accOptions = new HashMap<String,MasterResourceAccommodation.AccommodationOption>();
    HashMap<String,MasterResourceAccommodation> accCompleteOptions = new HashMap<String,MasterResourceAccommodation>();

    //Change the codes to Lowercase in masterResource
    for (int i = 0; i< masterResource.size (); i++) {
      MasterResourceAccommodation resource = masterResource.get (i);
      resource.setCode (ARTHelpers.convertToLowerCase (resource.getCode ()));
      masterResource.remove (i);
      masterResource.add (i, resource);
      accommodationFields.put(resource.getCode (), resource.getResourceType ());
    }
    
    for (MasterResourceAccommodation resource : masterResource) {
      
      List<MasterResourceAccommodation.AccommodationOption> masterOptionsList = new ArrayList<MasterResourceAccommodation.AccommodationOption>();
      for (MasterResourceAccommodation.AccommodationOption option : resource.getOptions ()) {
        //only considering text in options with language as English
        List<AccommodationText> accTexts = option.getText ();
        if (accTexts != null) {
          List<AccommodationText> accommoText = new ArrayList<AccommodationText>();
          for (AccommodationText text : accTexts) {
            if (text.getLanguage ().equalsIgnoreCase ("eng")) {
              accommoText.add (text);
            }
          }
          option.setText (accommoText);
        }
        masterOptionsList.add(option);
        accOptions.put (ARTHelpers.generateKey(resource.getCode (),option.getCode ()), option);
      }
      resource.setOptions (masterOptionsList);
      accCompleteOptions.put (resource.getCode (),resource);
    }
    
    List<String> headerNames = masterResourceAccommodationService.getAccommodationResourceHeaderNames ();
	//building entityCrossWalk to dynamically get headerNames in ui
	//if entityCrossWalk for particular Format type exist then it replaces defaultCrosswalkMap
    List<EntityCrosswalk> entityCrosswalkList = new ArrayList<EntityCrosswalk>();
    for (String name : headerNames) {
      entityCrosswalkList.add (new EntityCrosswalk(FormatType.DESIGNATEDSUPPORTSANDACCOMMODATIONS,name,name));
    }
    entityCrosswalkService.removeEntityCrosswalkCollection ();
    entityCrosswalkService.saveCrosswalkList (entityCrosswalkList);
    if (subjects != null) {
      for (String grade : gradeLevel.values ()) {
        for (String subject : subjects) {
          List<String> codeValuesUsed = new ArrayList<String>();
          Set<String> newCodes = new HashSet<String>();
          ResourceFamily rf = resourceFamilyRepository.findBySubjectAndGrade (subject, grade);
          if (rf != null) {
            List<MasterResourceAccommodation> accomo = rf.getMasterResourceAccommodation ();
            //change codes to Lower case accomo
            for (int i=0; i< accomo.size (); i++) {
              MasterResourceAccommodation acc = accomo.get (i);
              acc.setCode (ARTHelpers.convertToLowerCase (acc.getCode ()));
              accomo.remove (i);
              accomo.add (i, acc);
            }
            
            if (accomo != null) {
              for (MasterResourceAccommodation rscAccm : accomo) {
                if (rscAccm != null) {
                  codeValuesUsed.add (rscAccm.getCode ());
                  rscAccm.setOrder (accCompleteOptions.get (rscAccm.getCode ()).getOrder ());
                  rscAccm.setHeader (accCompleteOptions.get (rscAccm.getCode ()).getHeader ());
                  if (rscAccm.getDefaultSelection () == null) {
                    if (accCompleteOptions.get (rscAccm.getCode ()).getDefaultSelection () != null) {
                      rscAccm.setDefaultSelection (accCompleteOptions.get (rscAccm.getCode ()).getDefaultSelection ());
                    }
                  }
                  if (rscAccm.getOptions () != null && !rscAccm.isDisabled ()) {
                    for (MasterResourceAccommodation.AccommodationOption childOptions : rscAccm.getOptions ()) {
                      if (childOptions.getCode () != null && childOptions.getText () == null) { 
                        childOptions.setText ((accOptions.get (ARTHelpers.generateKey(rscAccm.getCode (),childOptions.getCode ())).getText ()));
                        childOptions.setOrder ((accOptions.get (ARTHelpers.generateKey(rscAccm.getCode (),childOptions.getCode ()))).getOrder ());
                      } else if (childOptions.getText () != null) {
                        childOptions.setOrder ((accOptions.get (ARTHelpers.generateKey(rscAccm.getCode (),childOptions.getCode ()))).getOrder ());
                      }
                      if (!childOptions.isMutuallyExclusive () && accOptions.get (ARTHelpers.generateKey(rscAccm.getCode (),childOptions.getCode ())).isMutuallyExclusive ()) {
                          childOptions.setMutuallyExclusive (accOptions.get (ARTHelpers.generateKey(rscAccm.getCode (),childOptions.getCode ())).isMutuallyExclusive ());
                      }
                    }
                  } 
                }
              }
            }
           
            newCodes = accCompleteOptions.keySet ();
            List<String> otherCodes = new ArrayList<String>();
            for (String mcodes : newCodes) { 
              if (!codeValuesUsed.contains (mcodes)) {
                otherCodes.add (mcodes);
              }
            }

            for (String codess : otherCodes) {
              accomo.add (accCompleteOptions.get (codess));
            }


            if (accommodationToCache != null) {
              Collections.sort(accomo, new OrderComparator());
              accommodationToCache.put (ARTHelpers.generateKey(grade,subject), accomo);
            }

          } else {
            if (accommodationToCache != null) {
              Collections.sort(masterResource, new OrderComparator());
              accommodationToCache.put (ARTHelpers.generateKey(grade,subject), masterResource); 
            }
          }
        }
      }
    }
  }

  /*
   * Based on subject and grade as key we are searching in cache memory and corresponding matching result is returned 
   *
   * @param subject,grade
   * @return List<MasterResourceAccommodation>
   */

  @SuppressWarnings ("unchecked")
  @Override
  public List<MasterResourceAccommodation> findBySubjectGrade(String subject,String grade){
    final Cache accommodationToCache = cacheManager.getCache("accommodationCache");
    List<MasterResourceAccommodation> accommodationResource = null;
    if (accommodationToCache != null) {
      ValueWrapper cacheGet = accommodationToCache.get(ARTHelpers.generateKey(grade,subject));
      if (cacheGet != null) {
        accommodationResource = (List<MasterResourceAccommodation>) cacheGet.get();
      }
    }
    return accommodationResource;
  }
  
  /*
   * Based on subject and grade we are searching in resourceFamily
   *
   * @param subject,grade
   * @return HashMap<code,resourceOptions>
   */
  @Override
  public HashMap<String,List<String>> getResourceOptionCodes(String subject,String grade){
    HashMap<String,List<String>> accOptions = new HashMap<String,List<String>>();
    List<MasterResourceAccommodation> resourceFamily = this.findBySubjectGrade (subject, grade);
    if (resourceFamily != null) {
      for (MasterResourceAccommodation resource : resourceFamily) {
        List<String> resourceOptions = getOptionCodes (resource);
        accOptions.put (resource.getCode (), resourceOptions);
      }
    }
    return accOptions;
  }
  
  private List<String> getOptionCodes(MasterResourceAccommodation resourceFamily){
    List<String> options = new ArrayList<String>();
    if (resourceFamily != null) {
      for (MasterResourceAccommodation.AccommodationOption str : resourceFamily.getOptions ()) {
        options.add (str.getCode ());
      }
    }
    return options;
  }
  
  @Override
  public HashMap<String,String> getAllDefaultOptions(String subject,String grade){
    
    HashMap<String,String> accDefaultOptions = new HashMap<String,String>();
    List<MasterResourceAccommodation> resourceFamily = this.findBySubjectGrade (subject, grade);
    if (resourceFamily != null) {
      for (MasterResourceAccommodation resource : resourceFamily) {
        if (resource.getDefaultSelection () != null) {
          accDefaultOptions.put (resource.getCode (), resource.getDefaultSelection ());
        }
      }
    }
    return accDefaultOptions; 
  }
  
  @Override
  public HashMap<String,List<String>> getAllMutallyExclusiveOptions(String subject,String grade){

    HashMap<String,List<String>> masterResourceOptions = new HashMap<String,List<String>>();
    List<String> options = null;
    List<MasterResourceAccommodation> resourceFamily = this.findBySubjectGrade (subject, grade);
    if (resourceFamily != null) {
      for (MasterResourceAccommodation resource : resourceFamily) {
        options = new ArrayList<String>();
        for (MasterResourceAccommodation.AccommodationOption str : resource.getOptions ()) {
          if (str.isMutuallyExclusive ()) {
            options.add (str.getCode ());
          }
        }
        if (resource.getResourceType ().equals (AccommodationResourceType.MultiSelectResource))
          masterResourceOptions.put (ARTHelpers.convertCodeToUpperCase (resource.getCode ()), options);
      }
    }
    return masterResourceOptions; 
  }
}
