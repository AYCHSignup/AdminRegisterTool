/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria;

import java.util.List;

import org.opentestsystem.delivery.testreg.domain.Action;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.TestRegistrationBase;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.validation.BindingResult;
import org.springframework.validation.Errors;
import org.springframework.validation.FieldError;
import org.springframework.validation.ObjectError;

@Component
public class Sb11BusinessValidatorInvoker implements ValidatorInvoker {

    @Autowired
    protected Sb11BusinessValidatorFactory businessValidatorFactory;

    public boolean invokeValidator(final TestRegistrationBase sb11Entity, final Errors errors, final Object... hints) {
        final BusinessValidator<TestRegistrationBase> businessValidator = getBusinessValidator(sb11Entity,
                (Class<?>) hints[1]);
        if (businessValidator == null) {
            return false;
        } else {
            return processBusinessViolations(sb11Entity.getFormatType(), businessValidator.validate(sb11Entity), errors);
        }
    }

    private boolean processBusinessViolations(final FormatType format, final List<? extends ObjectError> objectErrors,
            final Errors errors) {
        boolean hasErrors = false;
        for (ObjectError objectError : objectErrors) {
            if (objectError instanceof FieldError) {
                hasErrors = true;
                FieldError fieldError = (FieldError) objectError;
                ((BindingResult) errors).addError(new FieldError(format.name(), fieldError.getField(), fieldError
                        .getRejectedValue(), fieldError.isBindingFailure(), fieldError.getCodes(), null, fieldError
                        .getDefaultMessage()));
            }
        }
        return hasErrors;
    }

    private Action getAction(final Class<?> operation) {
        for (Action action : Action.values()) {
            if (action.getOperation().equals(operation)) {
                return action;
            }
        }
        return null;
    }

    private BusinessValidator<TestRegistrationBase> getBusinessValidator(final TestRegistrationBase sb11Entity,
            final Class<?> validationOperation) {
        return validationOperation != null ? businessValidatorFactory.getBusinessValidator(sb11Entity,
                getAction(validationOperation)) : null;
    }
}
