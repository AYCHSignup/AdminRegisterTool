/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria.verifiers;

import static org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.VerifierUtils.dependencyFoundWhileDelete;

import java.util.Collections;
import java.util.List;

import org.opentestsystem.delivery.testreg.domain.HierarchyLevel;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.domain.User;
import org.opentestsystem.delivery.testreg.persistence.Verifier;
import org.opentestsystem.delivery.testreg.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.convert.ConversionService;
import org.springframework.stereotype.Component;
import org.springframework.validation.FieldError;

@Component
public class UserAssociationVerifier implements Verifier<Sb11Entity> {
 
    @Autowired
    UserService userService;
    
    @Autowired
    private ConversionService conversionService;

    @Override
    public List<FieldError> verify(Sb11Entity sb11Entity) {
        return doVerify(sb11Entity, getUsers(sb11Entity));
    }
    
    private List<FieldError> doVerify(Sb11Entity sb11Entity, List<User> usersFound) {
        if(!usersFound.isEmpty()) {
            return dependencyFoundWhileDelete(sb11Entity);
        }
        return Collections.emptyList();
    }
    
    private List<User> getUsers(Sb11Entity sb11Entity) {
        return userService.findAllByRoleAssociationLevel(sb11Entity.getEntityId(), getLevel(sb11Entity));
    }
    
    private HierarchyLevel getLevel(Sb11Entity sb11Entity) {
        return conversionService.convert(sb11Entity.getFormatType(), HierarchyLevel.class);
    }
}
