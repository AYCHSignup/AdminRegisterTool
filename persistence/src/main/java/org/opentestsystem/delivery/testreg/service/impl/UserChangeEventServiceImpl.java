/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.service.impl;

import org.opentestsystem.delivery.testreg.domain.SSOAction;
import org.opentestsystem.delivery.testreg.domain.UserChangeEvent;
import org.opentestsystem.delivery.testreg.persistence.UserChangeEventRepository;
import org.opentestsystem.delivery.testreg.service.UserChangeEventService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

@Service
public class UserChangeEventServiceImpl implements UserChangeEventService {

    private static final Logger LOGGER = LoggerFactory.getLogger(UserChangeEventServiceImpl.class);

    @Autowired
    private UserChangeEventRepository userChangeEventRepository;

    @Override
    public void saveUserChangeEvent(final UserChangeEvent userChangeEvent) {
        saveUserChangeEvents(Collections.singletonList(userChangeEvent));
    }

    @Override
    public void saveUserChangeEvents(final List<UserChangeEvent> userChangeEvents) {
        long startTime = System.currentTimeMillis();
        LOGGER.debug("saving user change events...");
        List<UserChangeEvent> modifiableUserChangeEvents = new ArrayList<>(userChangeEvents);
        Collections.sort(modifiableUserChangeEvents, new UserChangeEventTimestampComparator());
        for (UserChangeEvent userChangeEvent : modifiableUserChangeEvents) {
            LOGGER.debug("saving user change event: " + userChangeEvent.toString());
            String userId = userChangeEvent.getModifiedUserId ();
            SSOAction action = userChangeEvent.getAction();
            if (action.equals(SSOAction.DEL)) {
                if (userChangeEventRepository.findByModifiedUserIdAndAction(userId, SSOAction.ADD).size() > 0) {
                    userChangeEventRepository.delete(userChangeEventRepository.findByModifiedUserId(userId));
                    return;
                } else if (userChangeEventRepository.findByModifiedUserIdAndAction(userId, SSOAction.MOD).size() > 0) {
                    userChangeEventRepository.delete(userChangeEventRepository.findByModifiedUserIdAndAction(userId, SSOAction.MOD));
                }
            } else if (action.equals(SSOAction.MOD)) {
                if (userChangeEventRepository.findByModifiedUserIdAndAction(userId, SSOAction.ADD).size() > 0) {
                    userChangeEventRepository.delete(userChangeEventRepository.findByModifiedUserIdAndAction(userId, SSOAction.ADD));
                    userChangeEvent.setAction(SSOAction.ADD);
                } else {
                    userChangeEventRepository.delete(userChangeEventRepository.findByModifiedUserIdAndAction(userId, SSOAction.MOD));
                }
            } else if (action.equals(SSOAction.LOCK)) {
                userChangeEventRepository.delete(userChangeEventRepository.findByModifiedUserIdAndAction(userId, SSOAction.LOCK));
                userChangeEventRepository.delete(userChangeEventRepository.findByModifiedUserIdAndAction(userId, SSOAction.UNLOCK));
            } else if (action.equals(SSOAction.UNLOCK)) {
                userChangeEventRepository.delete(userChangeEventRepository.findByModifiedUserIdAndAction(userId, SSOAction.UNLOCK));
                if (userChangeEventRepository.findByModifiedUserIdAndAction(userId, SSOAction.LOCK).size() > 0) {
                    userChangeEventRepository.delete(userChangeEventRepository.findByModifiedUserIdAndAction(userId, SSOAction.LOCK));
                    return;
                }
            } else if (action.equals(SSOAction.SYNC)) {
                userChangeEventRepository.delete(userChangeEventRepository.findByModifiedUserId(userId));
            }
            userChangeEventRepository.save(userChangeEvent);
        }
        LOGGER.debug("done saving user change events. Took " + (System.currentTimeMillis() - startTime) + "ms");
    }

    @Override
    public List<UserChangeEvent> findByModifiedUserId(String modifiedUserId) {
        return userChangeEventRepository.findByModifiedUserId (modifiedUserId);
    }

    @Override
    public List<UserChangeEvent> findByModifiedUserIdAndAction(String modifiedUserId, SSOAction action) {
        return userChangeEventRepository.findByModifiedUserIdAndAction(modifiedUserId, action);
    }

    @Override
    public List<UserChangeEvent> findAll() {
        return userChangeEventRepository.findAll();
    }

    @Override
    public List<UserChangeEvent> findAll(Sort sort) {
        return userChangeEventRepository.findAll(sort);
    }

    @Override
    public void deleteAll() {
        userChangeEventRepository.deleteAll();
    }

    @Override
    public void delete(List<UserChangeEvent> userChangeEvents) {
        userChangeEventRepository.delete(userChangeEvents);
    }

    private static class UserChangeEventTimestampComparator implements Comparator<UserChangeEvent> {
        public int compare(UserChangeEvent a, UserChangeEvent b) {
            return (int) (a.getTimestamp() - b.getTimestamp());
        }
    }
}