/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria.verifiers;

import static org.opentestsystem.delivery.testreg.domain.AnnotationHelper.getFieldLabel;

import java.util.ArrayList;
import java.util.List;

import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.domain.Sb11SuperEntity;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.domain.TestRegistrationBase;
import org.opentestsystem.delivery.testreg.service.impl.Sb11EntityServiceImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.validation.FieldError;

@Component
public class VerifierUtils {

    @Autowired
    private Sb11EntityServiceImpl<? extends Sb11Entity> sb11EntityService;


    public static List<FieldError> addInstitutionIdDistrictIdMisMatch(Student student) {
        String institutionIdentifierLabel       = getFieldLabel(student, "institutionIdentifier");
        List<FieldError> errors = new ArrayList<>();
        addFieldError(
                errors,
                student,
                institutionIdentifierLabel,
                student.getInstitutionIdentifier(),
                "Institution Identifier is not associated with the District Identifier");
        return errors;
    }

    public static List<FieldError> attendingDistrictNotFound(Student student) {
        String institutionIdentifierLabel       = getFieldLabel(student, "institutionIdentifier");
        List<FieldError> errors = new ArrayList<>();
        addFieldError(
                errors,
                student,
                institutionIdentifierLabel,
                student.getInstitutionIdentifier(),
                "Institution Identifier associated attending district IRN not found in DB");
        return errors;
    }

    public static List<FieldError> dependencyFoundWhileDelete(Sb11Entity sb11Entity) {
        List<FieldError> errors = new ArrayList<>();
        String entityIdLabel = getFieldLabel(sb11Entity, "entityId");
        addFieldError(
                errors,
                sb11Entity,
                entityIdLabel,
                sb11Entity.getEntityId(),
                entityIdLabel + " cannot be deleted because it is associated with other entities. "
                        + "Associated entities must be deleted before deleting this entity");
        return errors;
    }

    public static <T extends TestRegistrationBase> void addFieldError(final List<FieldError> errors, final T t, final String label,
            final String invalidValue, final String message) {
        errors.add(getError(t.getFormatType(), label, invalidValue, message));
    }
    
    public static <T extends TestRegistrationBase> void addFieldError(final List<FieldError> errors, final T t, final String label,
        final String invalidValue, final String message, final Object[] rowMetadata) {
    errors.add(getError(t.getFormatType(), label, invalidValue, message,rowMetadata));
}

    public static FieldError getError(FormatType format, String label, String invalidValue, String message) {
        return new FieldError(format.name(), label, invalidValue, false, null, null, message);
    }
    
    public static FieldError getError(FormatType format, String label, String invalidValue, String message,Object[] rowMetadata) {
      return new FieldError(format.name(), label, invalidValue, false, null, rowMetadata, message);
  }


    @SuppressWarnings("unchecked")
    public <T extends Sb11Entity> T getSb11EntityFromDB(T entity) {
        if(entity.getId() !=null) {//Called when Invoked from UI
            return (T) sb11EntityService.findById(entity.getId(), entity.getFormatType());

        } else {//Invoked mainly from File Import
            switch(entity.getFormatType()) {
                case DISTRICT:
                case INSTITUTION:
                case GROUPOFDISTRICTS:
                case GROUPOFINSTITUTIONS:
                    return findWithStateAbbreviation(entity);
                case STATE:
                case CLIENT:
                case GROUPOFSTATES:
                    return (T) find((Sb11SuperEntity) entity);
                default:
                    break;
            }
            return null;
        }
    }

    @SuppressWarnings("unchecked")
    private <T extends Sb11SuperEntity> T find(T entity) {
        return (T) sb11EntityService.findByEntityId(entity.getEntityId(), entity.getClass());
    }

    @SuppressWarnings("unchecked")
    private <T extends Sb11Entity> T findWithStateAbbreviation(T entity) {
        return (T) sb11EntityService.findByEntityIdAndStateAbbreviation(entity.getEntityId(), entity.getStateAbbreviation(), entity.getClass());
    }
}
