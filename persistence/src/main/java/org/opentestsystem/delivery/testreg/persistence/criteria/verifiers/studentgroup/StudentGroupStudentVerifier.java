/*
Educational Online Test Delivery System Copyright (c) 2013 American Institutes for Research

Distributed under the AIR Open Source License, Version 1.0 See accompanying file AIR-License-1_0.txt or at
http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 */

package org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.studentgroup;

import static org.opentestsystem.delivery.testreg.domain.AnnotationHelper.getFieldLabel;
import static org.opentestsystem.delivery.testreg.domain.Sb11EntityUtils.getHumanReadableName;
import static org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.VerifierUtils.addFieldError;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.lang.StringUtils;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.domain.StudentGroup;
import org.opentestsystem.delivery.testreg.domain.search.StudentSearchRequest;
import org.opentestsystem.delivery.testreg.persistence.Verifier;
import org.opentestsystem.delivery.testreg.service.Sb11NonEntityRepositoryService;
import org.springframework.stereotype.Component;
import org.springframework.validation.FieldError;

@Component
public class StudentGroupStudentVerifier implements Verifier<StudentGroup> {
    
    @Resource(name = "sb11NonEntityService")
    private Sb11NonEntityRepositoryService sb11NonEntityRepositoryService;
    
    public List<FieldError> verify(final StudentGroup obj) {
        String districtErrorMessage = "";
        Map<String, String[]> reqMap = new HashMap<String, String[]>();
        reqMap.put(StudentSearchRequest.SEARCH_KEY_ENTITY_ID, new String[] { obj.getStudentId() });
        reqMap.put(StudentSearchRequest.SEARCH_KEY_STATE_ID, new String[] { obj.getStateAbbreviation() });
        reqMap.put(StudentSearchRequest.SEARCH_KEY_INSTITUTION_ID, new String[] { obj.getInstitutionIdentifier() });
        //District is optional add only if exists
        if (StringUtils.isNotBlank(obj.getDistrictIdentifier())) {
            districtErrorMessage = " district:" + obj.getDistrictIdentifier() +",";
            reqMap.put(StudentSearchRequest.SEARCH_KEY_DISTRICT_ID, new String[] { obj.getDistrictIdentifier() });
        }

        StudentSearchRequest request = new StudentSearchRequest(reqMap);
        
        Student student = sb11NonEntityRepositoryService.findByAlternateKey(request, Student.class);

        if (student == null) {
            String studentIdentifierLabel = getFieldLabel(obj, "StudentIdentifier");
            String humanReadableStudentIdentifierLabel = getHumanReadableName(studentIdentifierLabel);
            List<FieldError> errors = new ArrayList<>();
            addFieldError(errors, obj, studentIdentifierLabel, obj.getStudentId(),
                    humanReadableStudentIdentifierLabel + " not found in the database for state:" + obj.getStateAbbreviation()
                    + "," + districtErrorMessage + " institution:" + obj.getInstitutionIdentifier());
            return errors;
        }
        return Collections.emptyList();
    }

}
