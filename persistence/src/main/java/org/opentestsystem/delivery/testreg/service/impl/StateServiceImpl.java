/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.service.impl;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.apache.commons.lang.StringUtils;
import org.opentestsystem.delivery.testreg.domain.StateEntity;
import org.opentestsystem.delivery.testreg.persistence.StateEntityRepositoryCustom;
import org.opentestsystem.delivery.testreg.service.StateService;
import org.opentestsystem.delivery.testreg.service.TestRegUserDetailsService;
import org.opentestsystem.shared.progman.client.domain.TenantType;
import org.opentestsystem.shared.security.domain.SbacRole;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;

@Service
public class StateServiceImpl implements StateService {

    @Autowired
    private StateEntityRepositoryCustom stateEntityRepository;

    @Qualifier("userDetailService")
    @Autowired
    private TestRegUserDetailsService testRegUserDetailsService;
    
    
     public List<StateEntity> mergeWithNonAccessStatesInTenancy (List<StateEntity> accessStateEntities) {
        Collection<SbacRole> sbacRoles = testRegUserDetailsService.getCurrentUser ().getRoles ();
        Set<String> tenancyStateEntityIds = new HashSet<> ();
        List<StateEntity> mergedEntities = null;
        if (accessStateEntities != null) {
           mergedEntities = new ArrayList<>(accessStateEntities);
        }
        for (SbacRole sbacRole : sbacRoles) {
            TenantType effectiveEntityType = sbacRole.getEffectiveEntity ().getEntityType ();
            if (effectiveEntityType == TenantType.CLIENT || effectiveEntityType == TenantType.STATE_GROUP
                 || effectiveEntityType == TenantType.STATE) {
                //entities added in accessStateEntities in TestRegUserDetailsServiceImpl.buildEntityToRoleMapForUser
                continue;
            }
            String entityId = sbacRole.getState ().getEntityId ();
            if (!StringUtils.isBlank (entityId)) {
              tenancyStateEntityIds.add (entityId);
            }
        }
        if (tenancyStateEntityIds.size () > 0) {
          if (accessStateEntities != null && accessStateEntities.size () > 0) {
              tenancyStateEntityIds = removeExistingTenancyStateIds(accessStateEntities, tenancyStateEntityIds);
          }
          List<StateEntity> stateEntitiesTenancy = stateEntityRepository.findAllByEntityIds (tenancyStateEntityIds);
          if (stateEntitiesTenancy != null) {
            if (accessStateEntities == null) {
               mergedEntities = stateEntitiesTenancy;
            } else {
                mergedEntities = new ArrayList<>(accessStateEntities);
                mergedEntities.addAll (stateEntitiesTenancy) ;
                Comparator<StateEntity> comparator = new Comparator<StateEntity>() {
                   public int compare(StateEntity se1, StateEntity se2) {
                     return se1.getEntityId ().compareTo (se2.getEntityId ()); 
                  }
               };
               Collections.sort(mergedEntities, comparator); 
            }
          }
        } 
        return mergedEntities;
     }
     
     private  Set<String> removeExistingTenancyStateIds(List<StateEntity> accessStateEntities, Set<String> tenancyStateEntityIds ) {
          Set<String> accessStateEntityIds = new HashSet<>();
          Set<String> newtenancyStateEntityIds = new HashSet<> ();
          for (StateEntity stateEntity : accessStateEntities) {
              accessStateEntityIds.add(stateEntity.getEntityId ());
          }
          for (String stateEntityId : tenancyStateEntityIds) {
             if (!accessStateEntityIds.contains (stateEntityId)) {
                 newtenancyStateEntityIds.add (stateEntityId);
             }
         }
          return newtenancyStateEntityIds;
     }
}
