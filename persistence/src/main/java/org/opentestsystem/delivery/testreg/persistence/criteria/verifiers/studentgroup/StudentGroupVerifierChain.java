/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.studentgroup;

import static org.opentestsystem.delivery.testreg.domain.FormatType.DISTRICT;
import static org.opentestsystem.delivery.testreg.domain.FormatType.INSTITUTION;
import static org.opentestsystem.delivery.testreg.domain.FormatType.STATE;
import static org.opentestsystem.delivery.testreg.domain.FormatType.STUDENT;
import static org.opentestsystem.delivery.testreg.domain.FormatType.STUDENTGROUP;
import static org.opentestsystem.delivery.testreg.domain.FormatType.USER;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.lang.StringUtils;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.StudentGroup;
import org.opentestsystem.delivery.testreg.domain.TestRegistrationBase;
import org.opentestsystem.delivery.testreg.persistence.Verifier;
import org.springframework.stereotype.Component;
import org.springframework.validation.FieldError;

@Component
public class StudentGroupVerifierChain implements Verifier<StudentGroup> {
    
    @Resource(name = "verifierMap")
    private Map<Class<? extends TestRegistrationBase>, Map<FormatType, Verifier<? extends TestRegistrationBase>>> verifierMap;

    @Override
    public List<FieldError> verify(final StudentGroup group) {
        List<FieldError> errors = getVerifier(STATE).verify(group);

        if (errors.isEmpty()) {
            errors = new ArrayList<FieldError>();
            invokeVerifier(USER, group, errors);
            //verify student only if student exits, Student group can be created without any students. ref:JIRA-1027
            if (StringUtils.isNotBlank(group.getStudentId())) {
                invokeVerifier(STUDENT, group, errors);
            }
            //checking if student validation has errors if yes then district and institution need not be validated. ref: JIRA-861
            if (errors.isEmpty()) {
                if (StringUtils.isNotBlank(group.getDistrictIdentifier())) {
                    invokeVerifier(DISTRICT, group, errors);
                }
                invokeVerifier(INSTITUTION, group, errors);
            }
            invokeVerifier(STUDENTGROUP, group, errors);
        }
        return errors;
    }

    private void invokeVerifier(final FormatType level, final StudentGroup group, final List<FieldError> errors) {
        List<FieldError> errorsGot = getVerifier(level).verify(group);
        if (!errorsGot.isEmpty()) {
            errors.addAll(errorsGot);
        }
    }

    @SuppressWarnings("unchecked")
    private Verifier<StudentGroup> getVerifier(final FormatType level) {
        return (Verifier<StudentGroup>) verifierMap.get(StudentGroup.class).get(level);
    }
}
