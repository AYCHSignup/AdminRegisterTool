/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.aop;

import java.util.List;

import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.domain.TestRegistrationBase;
import org.opentestsystem.delivery.testreg.event.EventCreatorFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.util.CollectionUtils;

import com.google.common.base.Objects;

@Component
@Aspect
public class EligibilityEventAspect {

    private static final Logger LOGGER = LoggerFactory.getLogger(EligibilityEventAspect.class);

    @Autowired
    private EventCreatorFactory eventCreatorFactory;

    @Pointcut("execution(* org.opentestsystem.delivery.testreg.persistence.UserChangeEventRepository.*(..))")
    public void inUserChangeRepository() {
        // just used to define common pointcut
    }

    // Pointcut for <S extends T> S save(S entity) & <S extends T> Iterable<S> save(Iterable<S> entities); specifically for implementations of TestRegistrationBase
    @SuppressWarnings("unchecked")
    @AfterReturning(pointcut = "!inUserChangeRepository() && execution(* org.opentestsystem.delivery.testreg.persistence.*Repository.save(..))", returning = "result")
    public void save(final Object result) {
        if (result != null && result instanceof TestRegistrationBase) {
            if (LOGGER.isDebugEnabled()) {
                LOGGER.debug("Creating a save event for " + Objects.toStringHelper(result.getClass()));
            }
            saveChangeEvent((TestRegistrationBase) result, false);

        } else if (result instanceof Iterable) {
            final List<TestRegistrationBase> domainsList = (List<TestRegistrationBase>) result;
            if (!CollectionUtils.isEmpty(domainsList)) {
                if (domainsList.get(0) instanceof Student) {
                    if (LOGGER.isDebugEnabled()) {
                        LOGGER.debug("Creating a save event for list of type: " + FormatType.STUDENT);
                    }
                    this.eventCreatorFactory.getEventCreator(FormatType.STUDENT).createListUpdateEvent(domainsList);
                } else if (domainsList.get(0) instanceof TestRegistrationBase) {
                    if (LOGGER.isDebugEnabled()) {
                        LOGGER.debug("Creating a save event for list of type: " + Objects.toStringHelper(domainsList.get(0).getClass()));
                    }
                    for (final TestRegistrationBase domainOut : domainsList) {
                        saveChangeEvent(domainOut, false);
                    }
                }
            }

        }
    }

    // Pointcut for void delete(T entity);
    @AfterReturning(pointcut = "!inUserChangeRepository() && execution(* org.opentestsystem.delivery.testreg.persistence.*Repository.delete(..)) && args(domainIn)")
    public void delete(final TestRegistrationBase domainIn) {
        saveChangeEvent(domainIn, true);
    }

    // Pointcut for void delete(Iterable<? extends T> entities);
    @AfterReturning(pointcut = "!inUserChangeRepository() && execution(* org.opentestsystem.delivery.testreg.persistence.*Repository.delete(..)) && args(domainsIn)")
    public void delete(final List<TestRegistrationBase> domainsIn) {
        for (final TestRegistrationBase domainIn : domainsIn) {
            saveChangeEvent(domainIn, true);
        }
    }

    private void saveChangeEvent(final TestRegistrationBase domainObj, final boolean deleted) {
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("Creating " + (deleted ? "delete" : "update") + " event for type: " + domainObj.getFormatType() + " with object: " + domainObj);
        }
        if (deleted) {
            this.eventCreatorFactory.getEventCreator(domainObj.getFormatType()).createDeleteEvent(domainObj);
        } else {
            this.eventCreatorFactory.getEventCreator(domainObj.getFormatType()).createUpdateEvent(domainObj, domainObj);
        }
    }

}