/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.aop;

import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;
import org.opentestsystem.delivery.testreg.domain.TestRegistrationBase;
import org.opentestsystem.delivery.testreg.event.EventCreator;
import org.opentestsystem.delivery.testreg.event.EventCreatorFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component
@Aspect
public class EligibilityEventAspect {

    private static final Logger LOGGER = LoggerFactory.getLogger(EligibilityEventAspect.class);

    @Autowired
    private EventCreatorFactory eventCreatorFactory;

    @Pointcut("execution(* org.opentestsystem.delivery.testreg.persistence.UserChangeEventRepository.*(..))")
    public void inUserChangeRepository() {
        // just used to define common pointcut
    }

    // Pointcut for <S extends T> S save(S entity);
    @AfterReturning(pointcut = "!inUserChangeRepository() && execution(* org.opentestsystem.delivery.testreg.persistence.*Repository.save(..)) && args(domainIn)", returning = "domainOut")
    public void save(TestRegistrationBase domainIn, TestRegistrationBase domainOut) {
        saveChangeEvent(domainOut, false);
    }

    // Pointcut for <S extends T> Iterable<S> save(Iterable<S> entities);
    @AfterReturning(pointcut = "!inUserChangeRepository() && execution(* org.opentestsystem.delivery.testreg.persistence.*Repository.save(..)) && args(domainsIn)", returning = "domainsOut")
    public void save(Iterable<TestRegistrationBase> domainsIn, Iterable<TestRegistrationBase> domainsOut) {
        for (TestRegistrationBase domainOut : domainsOut) {
            saveChangeEvent(domainOut, false);
        }
    }

    // Pointcut for void delete(T entity);
    @AfterReturning(pointcut = "!inUserChangeRepository() && execution(* org.opentestsystem.delivery.testreg.persistence.*Repository.delete(..)) && args(domainIn)")
    public void delete(TestRegistrationBase domainIn) {
        saveChangeEvent(domainIn, true);
    }

    // Pointcut for void delete(Iterable<? extends T> entities);
    @AfterReturning(pointcut = "!inUserChangeRepository() && execution(* org.opentestsystem.delivery.testreg.persistence.*Repository.delete(..)) && args(domainsIn)")
    public void delete(Iterable<TestRegistrationBase> domainsIn) {
        for (TestRegistrationBase domainIn : domainsIn) {
            saveChangeEvent(domainIn, true);
        }
    }

    private void saveChangeEvent(TestRegistrationBase domainObj, boolean deleted) {
        if (deleted) {
            LOGGER.debug("Creating a delete event for type: " + domainObj.getFormatType() + " with object: "
                    + domainObj);
            ((EventCreator<TestRegistrationBase>) eventCreatorFactory.getEventCreator(domainObj.getFormatType()))
                    .createDeleteEvent(domainObj);
        } else {
            LOGGER.debug("Creating an update event for type: " + domainObj.getFormatType() + " with object: "
                    + domainObj);
            ((EventCreator<TestRegistrationBase>) eventCreatorFactory.getEventCreator(domainObj.getFormatType()))
                    .createUpdateEvent(domainObj, domainObj);
        }
    }

}