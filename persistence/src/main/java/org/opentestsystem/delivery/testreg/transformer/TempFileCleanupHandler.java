/*
Educational Online Test Delivery System Copyright (c) 2013 American Institutes for Research

Distributed under the AIR Open Source License, Version 1.0 See accompanying file AIR-License-1_0.txt or at
http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 */

package org.opentestsystem.delivery.testreg.transformer;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessageHeaders;
import org.springframework.integration.handler.advice.AbstractRequestHandlerAdvice;

public class TempFileCleanupHandler extends AbstractRequestHandlerAdvice {

    private static final Logger LOGGER = LoggerFactory.getLogger(TempFileCleanupHandler.class);

    @Override
    protected Object doInvoke(final ExecutionCallback callback, final Object target, final Message<?> message)
            throws Exception {

        // spring uses this advice as around advice, so call the callback (which in this case is the SFTP call)
        // then delete files after we know sftp is done
        Object returnObj = callback.execute();

        // get the paths to delete from the message header

        MessageHeaders headers = message.getHeaders();
        @SuppressWarnings("unchecked")
        List<Path> tempPaths = (List<Path>) headers.get("tempPaths");

        // iterate through paths and delete
        // catch any io exceptions from the delete, but don't rethrow them
        for (Path path : tempPaths) {
            try {
                Files.delete(path);
                LOGGER.debug("Deleted temp file: " + path.toString());
            } catch (IOException e) {
                LOGGER.error("Could not delete temp file: " + path.toString(), e);
            }
        }

        return returnObj;
    }

}
