/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.service.impl;

import java.util.Map;

import javax.annotation.Resource;

import org.opentestsystem.delivery.testreg.domain.Accommodation;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.Sb11NonEntity;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.persistence.Sb11NonEntityRepository;
import org.opentestsystem.shared.exception.LocalizedException;
import org.springframework.stereotype.Service;

/**
 * Implementation of Accommodation Service.
 */
@Service("accommodationService")
public class AccommodationServiceImpl <T extends Sb11NonEntity> extends Sb11NonEntityServiceImpl<T> {

    @Resource
    private Map<FormatType, Sb11NonEntityRepository<Sb11NonEntity>> nonEntityRepositoryMap;


    /**
     * {@inheritDoc}
     */
    @Override
    public T saveDomainObject(final T domainObj) {
        //find student record
        Accommodation accommodation = (Accommodation) domainObj;
        Student student  = findByAlternateKey(accommodation.createParentAlternateKeySearchRequest(), Student.class);
        if (student != null) {
            //add accommodations
            student.getAccommodations().add(accommodation);
            nonEntityRepositoryMap.get(student.getFormatType()).save(student);
            return domainObj;
        } else {
            throw new LocalizedException("accommodation.parent.notfound", new String[] { accommodation.getStudentId(),
                   accommodation.getStateAbbreviation()});
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public T updateDomainObject(final T domainObj) {
        //find student record
        Accommodation accommodation = (Accommodation) domainObj;
        Student student  = findByAlternateKey(accommodation.createParentAlternateKeySearchRequest(), Student.class);
        if (student != null) {
            int index = student.getAccommodations().indexOf(accommodation);
            if (index >= 0 ) {
                student.getAccommodations().remove(index);
            }
            //add accommodations to student and update
            student.getAccommodations().add(accommodation);
            nonEntityRepositoryMap.get(student.getFormatType()).save(student);
            return domainObj;            
        } else {
            throw new LocalizedException("accommodation.parent.notfound", new String[] { accommodation.getStudentId(),
                    accommodation.getStateAbbreviation()});
         }
    }

}
