/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence;

import static org.springframework.data.mongodb.core.query.Criteria.where;

import java.util.List;

import org.opentestsystem.delivery.testreg.domain.HierarchyLevel;
import org.opentestsystem.delivery.testreg.domain.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoOperations;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;

public class UserRepositoryImpl implements UserRepositoryCustom {
    
    @Autowired
    private MongoOperations mongoOperations;

    @Override
    public List<User> findAllByRoleAssociationLevel(String associatedEntityId, String stateAbbreviation, HierarchyLevel level) {
        return mongoOperations.find(new Query(new Criteria().andOperator(
                where("roleAssociations.associatedEntityId").is(associatedEntityId),
                where("roleAssociations.stateAbbreviation").is(stateAbbreviation),
                where("roleAssociations.level").is(level))), User.class);
    }

    @Override
    public List<User> findAllByRoleAssociationLevel(String associatedEntityId, HierarchyLevel level) {
        return mongoOperations.find(new Query(new Criteria().andOperator(
                where("roleAssociations.associatedEntityId").is(associatedEntityId),
                where("roleAssociations.level").is(level))), User.class);
    }
    
    @Override
    public List<User> findAllByRoleAssociationLevel(String level) {
        return mongoOperations.find(new Query(new Criteria().andOperator(
                where("roleAssociations.level").is(HierarchyLevel.valueOf(level)))), User.class);
    }
}
