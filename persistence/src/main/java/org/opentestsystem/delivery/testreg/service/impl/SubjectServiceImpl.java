/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.service.impl;

import java.util.List;

import org.opentestsystem.delivery.testreg.domain.Subject;
import org.opentestsystem.delivery.testreg.domain.search.SubjectSearchRequest;
import org.opentestsystem.delivery.testreg.persistence.SubjectRepository;
import org.opentestsystem.delivery.testreg.service.SubjectService;
import org.opentestsystem.shared.exception.LocalizedException;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DuplicateKeyException;
import org.springframework.stereotype.Service;

import com.google.common.base.Function;
import com.google.common.collect.FluentIterable;

@Service
public class SubjectServiceImpl implements SubjectService {

    @Autowired
    private SubjectRepository subjectRepository;

    @Override
    public Subject getSubject(String subjectId) {
        return subjectRepository.findOne(subjectId);
    }

    @Override
    public Subject saveSubject(Subject subject) {
        try {
            return subjectRepository.save(subject);
        } catch (DuplicateKeyException dke) {
            throw new LocalizedException("subject.already.exists", new String[] {subject.getCode()});
        }
    }

    @Override
    public void removeSubject(String subjectId) {
        subjectRepository.delete(subjectId);
    }

    @Override
    public SearchResponse<Subject> searchSubjects(SubjectSearchRequest searchRequest) {
        return subjectRepository.search(searchRequest);
    }

    @Override
    public List<Subject> findAll() {
        return subjectRepository.findAll();
    }

    public List<String>  getAllSubjectCodes() {
        List<Subject>  subjects = this.findAll();
            
        return FluentIterable.from(subjects).transform(new Function<Subject, String>() {
            @Override
            public String apply(Subject input) {
                return input.getCode();
            }
        }).toList();
    }
}
