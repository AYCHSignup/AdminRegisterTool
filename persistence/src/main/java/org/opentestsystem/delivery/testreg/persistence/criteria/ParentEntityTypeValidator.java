/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria;

import static org.opentestsystem.delivery.testreg.domain.AnnotationHelper.getFieldLabel;
import static org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.VerifierUtils.addFieldError;

import java.util.ArrayList;
import java.util.List;

import org.opentestsystem.delivery.CachedClientEntity;
import org.opentestsystem.delivery.testreg.domain.Action;
import org.opentestsystem.delivery.testreg.domain.HierarchyLevel;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.domain.ClientEntity;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.validation.FieldError;

@Component
public class ParentEntityTypeValidator implements Sb11BusinessValidator<Sb11Entity> {

    
    @Autowired
    private CachedClientEntity cachedClientEntity;
    
    @Override
    public Action getAction() {
        throw new UnsupportedOperationException("This operation is not supported for this object");
    }

    @Override
    public boolean supports(final Class<? extends Sb11Entity> clazz) {
        return Sb11Entity.class.isAssignableFrom(clazz);
    }

    @Override
    public List<FieldError> validate(final Sb11Entity sb11Entity) {
        ClientEntity client = cachedClientEntity.getClient();
        List<FieldError> errors = new ArrayList<>();
        if((sb11Entity.getParentEntityType() == HierarchyLevel.GROUPOFSTATES && client.isGroupOfStates()) 
                || (sb11Entity.getParentEntityType() == HierarchyLevel.GROUPOFDISTRICTS && client.isGroupOfDistricts())
                || (sb11Entity.getParentEntityType() == HierarchyLevel.GROUPOFINSTITUTIONS && client.isGroupOfInstitutions())) {
            String entityIdLabel = getFieldLabel(sb11Entity, "parentEntityType");
               addFieldError(
                       errors, 
                       sb11Entity, 
                       entityIdLabel, 
                       sb11Entity.getParentEntityType().toString(), 
                       sb11Entity.getParentEntityType().toString() + " is not a valid parentEntityType");
        }
       return errors;
    }
}
