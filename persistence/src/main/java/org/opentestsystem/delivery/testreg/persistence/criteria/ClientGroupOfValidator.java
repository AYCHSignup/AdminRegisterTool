/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria;

import static org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.VerifierUtils.addFieldError;

import java.util.ArrayList;
import java.util.List;

import org.opentestsystem.delivery.testreg.domain.Action;
import org.opentestsystem.delivery.testreg.domain.ClientEntity;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.HierarchyLevel;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.domain.User;
import org.opentestsystem.delivery.testreg.service.impl.Sb11EntityServiceImpl;
import org.opentestsystem.delivery.testreg.service.impl.UserServiceImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.util.CollectionUtils;
import org.springframework.validation.FieldError;

@Component
public class ClientGroupOfValidator implements Sb11BusinessValidator<Sb11Entity> {

    @Autowired
    private Sb11EntityServiceImpl<? extends Sb11Entity> sb11EntityService;

    @Autowired
    private UserServiceImpl<User> userService;

    @Override
    public Action getAction() {
        throw new UnsupportedOperationException("This operation is not supported for this object");
    }

    @Override
    public boolean supports(final Class<? extends Sb11Entity> clazz) {
        return Sb11Entity.class.isAssignableFrom(clazz);
    }

    @Override
    public List<FieldError> validate(final Sb11Entity sb11Entity) {
        final List<FieldError> errors = new ArrayList<>();
        if (sb11Entity.getFormatType() == FormatType.CLIENT) {
            final ClientEntity client = (ClientEntity) sb11Entity;
            if (client.isGroupOfStates()) {
                errors.addAll(getErrorsForAssociatedEntities(client, HierarchyLevel.GROUPOFSTATES.toString()));
            }
            if (client.isGroupOfDistricts()) {
                errors.addAll(getErrorsForAssociatedEntities(client, HierarchyLevel.GROUPOFDISTRICTS.toString()));
            }
            if (client.isGroupOfInstitutions()) {
                errors.addAll(getErrorsForAssociatedEntities(client, HierarchyLevel.GROUPOFINSTITUTIONS.toString()));
            }
        }

        return errors;
    }

    private List<FieldError> getErrorsForAssociatedEntities(final ClientEntity client, final String hideableEntity) {
        final List<FieldError> errors = new ArrayList<>();
        for (final HierarchyLevel level : HierarchyLevel.values()) {
            List<? extends Sb11Entity> entities = null;
            if (level != HierarchyLevel.CLIENT) {
                entities = this.sb11EntityService.findAllByParentEntityType(hideableEntity, level);
            }
            if (!CollectionUtils.isEmpty(entities)) {
                // add error
                addFieldError(
                        errors,
                        client,
                        level.toString(),
                        client.getId(),
                        hideableEntity + " cannot be hidden because it is associated with other entities. "
                                + "Associated entities must be deleted before hiding this");
                break;
            }
        }

        // check users
        if (errors.isEmpty()) {
            final List<User> users = this.userService.findUserByLevel(hideableEntity);
            if (!CollectionUtils.isEmpty(users)) {
                // add error
                addFieldError(
                        errors,
                        client,
                        User.FORMAT_TYPE.toString(),
                        client.getId(),
                        hideableEntity + " cannot be hidden because it is associated with other entities. "
                                + "Associated entities must be deleted before hiding this");
            }
        }
        return errors;
    }
}
