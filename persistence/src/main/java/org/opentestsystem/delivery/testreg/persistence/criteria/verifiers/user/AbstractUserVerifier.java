/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.user;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.opentestsystem.delivery.testadmin.domain.ProctorRole;
import org.opentestsystem.delivery.testadmin.service.ProctorRoleService;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.User;
import org.opentestsystem.delivery.testreg.domain.User.RoleAssociation;
import org.opentestsystem.delivery.testreg.persistence.Verifier;
import org.opentestsystem.shared.security.integration.PermissionClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.FieldError;

public abstract class AbstractUserVerifier implements Verifier<User> {
    
    @Autowired
    protected PermissionClient permissionClient;
    
    @Autowired
    protected ProctorRoleService proctorRoleService;
    
    protected static final FormatType  USER_FORMAT = FormatType.USER;
    
    protected static final List<FieldError> EMPTY_ERRORS = Collections.emptyList(); 

    @Override
    public List<FieldError> verify(User user) {
        
        List<FieldError> errors = new ArrayList<FieldError>();
        initVerifier();
        for(RoleAssociation roleAssociation: user.getRoleAssociations()) {
            FieldError fieldError = doVerify(roleAssociation);
            if(fieldError !=null) {
                errors.add(fieldError);
            }
        }
        return errors.isEmpty() ? cleanupVerifier():errors;
    }
    
    protected abstract FieldError doVerify(User.RoleAssociation roleAssociation);
    
    protected List<FieldError> cleanupVerifier() {
        return Collections.emptyList();
    }
    
    protected void initVerifier() {
        
    }
    
    protected boolean isAProctorRole(String role) {
        List<ProctorRole> proctorRolesFound = proctorRoleService.getRolesByName(role);
        return (proctorRolesFound !=null && ! proctorRolesFound.isEmpty());
    }
}
