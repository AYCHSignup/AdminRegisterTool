/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.user;

import static org.opentestsystem.delivery.testreg.domain.AnnotationHelper.getFieldLabel;
import static org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.VerifierUtils.getError;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

import org.opentestsystem.delivery.testreg.domain.User;
import org.opentestsystem.delivery.testreg.domain.User.RoleAssociation;
import org.springframework.stereotype.Component;
import org.springframework.validation.FieldError;

@Component
public class DuplicateRoleAssociationVerifier extends AbstractUserVerifier {
    
    private Comparator<RoleAssociation> roleComparator = new RoleAssociationComparator();
    
    Set<RoleAssociation> duplicateRoles;
    Set<RoleAssociation> uniqueRoles;
    
    protected void initVerifier() {
        duplicateRoles = new TreeSet<>(roleComparator);
        uniqueRoles        = new TreeSet<>(roleComparator);
    }
    
    protected FieldError doVerify(RoleAssociation roleAssociation) {
        if(!uniqueRoles.add(roleAssociation)) {
            duplicateRoles.add(roleAssociation);
        }
        return null; //Do not process any errors now
    }
    
    protected List<FieldError> cleanupVerifier() {
        List<FieldError> errors = processDuplicates(duplicateRoles);
        
        uniqueRoles.clear();
        duplicateRoles.clear();
        
        return errors;
    }

    private List<FieldError> processDuplicates(Set<RoleAssociation> duplicateList) {
        List<FieldError> errors = new ArrayList<>();
        String entityIdLabel = getFieldLabel(User.class, "roleAssociation");
        
        for(RoleAssociation roleAssociation: duplicateList) {
            errors.add(getError(
                    USER_FORMAT, 
                    entityIdLabel, 
                    roleAssociation.getRole(), 
                    "Duplicate role association for [ " + 
                            new StringBuffer()
                             .append(roleAssociation.getRole())
                             .append(", ")
                             .append(roleAssociation.getLevel())
                             .append(", ")
                             .append(roleAssociation.getAssociatedEntityId())
                             .append(", ")
                             .append(isEmpty(roleAssociation.getStateAbbreviation()) ? "<Select...>":roleAssociation.getStateAbbreviation()) + 
                          "]"));
        }
        return errors.isEmpty() ? EMPTY_ERRORS : errors;
    }
    
    private boolean isEmpty(String stateAbbreviation) {
        return stateAbbreviation==null || stateAbbreviation.equals("");
    }
}
