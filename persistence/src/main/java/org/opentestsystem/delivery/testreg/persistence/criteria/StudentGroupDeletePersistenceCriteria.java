/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria;

import static org.opentestsystem.delivery.testreg.domain.AnnotationHelper.getFieldLabel;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.opentestsystem.delivery.testreg.domain.Action;
import org.opentestsystem.delivery.testreg.domain.StudentGroup;
import org.opentestsystem.delivery.testreg.service.Sb11NonEntityRepositoryService;
import org.opentestsystem.shared.search.domain.AbstractSearchRequest;
import org.springframework.stereotype.Component;
import org.springframework.validation.FieldError;
import org.springframework.validation.ObjectError;

@Component
public class StudentGroupDeletePersistenceCriteria implements Sb11NonEntityBusinessValidator<StudentGroup> {

    @Resource(name = "sb11NonEntityService")
    private Sb11NonEntityRepositoryService sb11NonEntityRepositoryService;

    @Override
    public boolean supports(Class<? extends StudentGroup> clazz) {
        return StudentGroup.class.isAssignableFrom(clazz);
    }

    @Override
    public List<? extends ObjectError> validate(final StudentGroup studentGroup) {
        AbstractSearchRequest searchRequest = studentGroup.createAlternateKeySearchRequest();
        StudentGroup existingStudentGroup = sb11NonEntityRepositoryService.findByAlternateKey(searchRequest, StudentGroup.class);
        List<FieldError> errors = new ArrayList<FieldError>();
        if (existingStudentGroup == null) {
            String entityIdLabel = getFieldLabel(studentGroup, "studentGroupName");
            errors.add(new FieldError(studentGroup.getFormatType().name(), entityIdLabel, studentGroup.getStudentGroupName(), false, null,
                    null, entityIdLabel + " not found in DB for delete"));
        } else {
            if (!existingStudentGroup.getStudentIds().contains(studentGroup.getStudentId())) {
                String entityIdLabel = getFieldLabel(studentGroup, "studentId");
                errors.add(new FieldError(studentGroup.getFormatType().name(), entityIdLabel, studentGroup.getStudentId(), false, null,
                        null, entityIdLabel + " not found in DB for delete"));               
            }
        }
        return errors;
    }

    @Override
    public Action getAction() {
        return Action.DEL;
    }
}
