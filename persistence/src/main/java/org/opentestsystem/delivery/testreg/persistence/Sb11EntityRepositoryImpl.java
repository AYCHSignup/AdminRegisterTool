/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.persistence;

import java.util.List;
import java.util.Set;

import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.domain.Sb11SuperEntity;
import org.opentestsystem.delivery.testreg.domain.StateEntity;
import org.opentestsystem.delivery.testreg.persistence.cache.CacheType;
import org.opentestsystem.shared.search.domain.AbstractSearchRequest;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.data.mongodb.core.MongoOperations;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;

/**
 * Implementation of Sb11EntityRepositoryCustom.
 */
public class Sb11EntityRepositoryImpl implements Sb11EntityRepositoryCustom {

    private static final Logger LOGGER = LoggerFactory.getLogger(Sb11EntityRepositoryImpl.class);

    /**
     * Field names of Sb11Entity
     */
    private static final String ID = "id";
    private static final String ENTITY_ID = "entityId";
    private static final String ENTITY_NAME = "entityName";
    private static final String PARENT_ENTITY_ID = "parentEntityId";
    private static final String PARENT_ENTITY_TYPE = "parentEntityType";
    private static final String PARENT_ID = "parentId";
    private static final String STATE_ABBREVIATION = "stateAbbreviation";

    @Autowired
    private MongoOperations mongoOperations;

    @Autowired
    ClientEntityRepository clientEntityRepository;

    /**
     * {@inheritDoc}
     */
    @Override
    @Cacheable(CacheType.ShortTerm)
    public <T extends Sb11SuperEntity> T findByEntityId(final String entityId, final Class<T> clazz) {
        final Query query = new Query();
        query.addCriteria(Criteria.where(ENTITY_ID).is(entityId));
        return this.mongoOperations.findOne(query, clazz);
    }
    
    /**
     * Finding Sb11Entities.
     *
     * @param entityIds   Set of all entities(mongoIds) that current user has access to
     * @param clazz          
     * @return            list of matched Sb11Entity records based on entityIds          
     */
    
    @Override
    @Cacheable(CacheType.ShortTerm)
    public <S extends Sb11Entity> List<S> findById(Set<String> entityIds, Class<S> clazz) {
      final Query query = new Query();
      query.addCriteria(Criteria.where(ID).in(entityIds));
      return this.mongoOperations.find(query, clazz);
    }

    @Override
    // @Cacheable(value = "sb11EntityCache", key = "#entityId + #stateAbbreviation + #clazz")
    public <T extends Sb11Entity> T findByEntityIdAndStateAbbreviation(final String entityId, final String stateAbbreviation, final Class<T> clazz) {

        if (stateAbbreviation == null) {
            throw new RuntimeException("stateAbbreviation cannot be null!");
        }

        final Query query = new Query();
        query.addCriteria(Criteria.where(ENTITY_ID).is(entityId));

        if (Sb11SuperEntity.class.isAssignableFrom(clazz)) {
            if (clazz.equals(StateEntity.class)) {
                LOGGER.warn("looking up state entity with entityId (" + entityId + ") and stateAbbreviation (" + stateAbbreviation + ") is redundant; use findByEntity(entityId)");
            } else {
                throw new RuntimeException("cannot lookup Sb11SuperEntity with stateAbbreviation!");
            }
        } else {
            query.addCriteria(Criteria.where(STATE_ABBREVIATION).is(stateAbbreviation));
        }

        return this.mongoOperations.findOne(query, clazz);
    }

    @Override
    public <T extends Sb11SuperEntity> Long getEntityCountByParentEntityId(final String parentEntityId, final Class<T> clazz) {
        final Query query = new Query();
        query.addCriteria(Criteria.where(PARENT_ENTITY_ID).is(parentEntityId));
        return this.mongoOperations.count(query, clazz);
    }

    @Override
    public <T extends Sb11Entity> Long getEntityCountByParentEntityIdAndStateAbbreviation(final String parentEntityId, final String stateAbbreviation, final Class<T> clazz) {

        if (stateAbbreviation == null) {
            throw new RuntimeException("stateAbbreviation cannot be null!");
        }

        final Query query = new Query();
        query.addCriteria(Criteria.where(PARENT_ENTITY_ID).is(parentEntityId));

        if (Sb11SuperEntity.class.isAssignableFrom(clazz)) {
            if (clazz.equals(StateEntity.class)) {
                LOGGER.warn("looking up state entity count with entityId (" + parentEntityId + ") and stateAbbreviation (" + stateAbbreviation
                        + ") is redundant; use getEntityCountByParentEntityId(entityId)");
            } else {
                throw new RuntimeException("cannot lookup count of Sb11SuperEntity with stateAbbreviation!");
            }
        } else {
            query.addCriteria(Criteria.where(STATE_ABBREVIATION).is(stateAbbreviation));
        }

        return this.mongoOperations.count(query, clazz);
    }

    @Override
    public <T extends Sb11Entity> T findByAlternateKey(final AbstractSearchRequest searchRequest, final Class<T> clazz) {
        return this.mongoOperations.findOne(searchRequest.buildQuery(), clazz);
    }

    @Override
    public <T extends Sb11Entity> List<T> findAllByParentEntityTypeAndParentId(final String parentEntityType, final String parentMongoId, final Class<T> clazz) {
        final Query query = new Query();
        query.addCriteria(Criteria.where(PARENT_ID).is(parentMongoId));
        query.addCriteria(Criteria.where(PARENT_ENTITY_TYPE).is(parentEntityType));
        return this.mongoOperations.find(query, clazz);
    }

    @Override
    public <T extends Sb11Entity> List<T> findAllByEntityId(final String entityId, final Class<T> clazz) {
        final Query query = new Query();
        query.addCriteria(Criteria.where(ENTITY_ID).is(entityId));
        return this.mongoOperations.find(query, clazz);
    }

    @Override
    public <T extends Sb11Entity> List<T> findAllByEntityIdAndEntityName(final String entityId, final String entityName, final Class<T> clazz) {
        final Query query = new Query();
        query.addCriteria(Criteria.where(ENTITY_ID).is(entityId));
        query.addCriteria(Criteria.where(ENTITY_NAME).is(entityName));
        return this.mongoOperations.find(query, clazz);
    }

    @Override
    public <T extends Sb11Entity> Long getEntityCountByParentId(final String parentMongoId, final Class<T> clazz) {
        final Query query = new Query();
        query.addCriteria(Criteria.where(PARENT_ID).is(parentMongoId));
        return this.mongoOperations.count(query, clazz);
    }

}
