/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria;

import java.util.List;

import org.apache.commons.collections.CollectionUtils;
import org.opentestsystem.delivery.testreg.domain.Action;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.validation.FieldError;
import org.springframework.validation.ObjectError;

@Component
public class Sb11PersistenceCriteria<T extends Sb11Entity> implements Sb11BusinessValidator<T> {

    private static final Logger LOGGER = LoggerFactory.getLogger(Sb11PersistenceCriteria.class);

    @Autowired
    private HierarchyLevelPermissionValidator hierarchyLevelValidator;

    @Autowired
    private ParentEntityTypeValidator parentEntityTypeValidator;

    @Autowired
    private ClientGroupOfValidator clientGroupOfValidator;

    @Autowired
    private NCESIDValidator ncesIdValidator;

    @Override
    public boolean supports(final Class<? extends T> clazz) {
        return Sb11Entity.class.isAssignableFrom(clazz);
    }

    @Override
    public List<? extends ObjectError> validate(final T entity) {
        if (entity.getFormatType() == FormatType.CLIENT) {
            return clientGroupOfValidator.validate(entity);
        }
        long start = System.currentTimeMillis();

        List<FieldError> errors = parentEntityTypeValidator.validate(entity);

        LOGGER.debug("***** parent entity type validator took: " + (System.currentTimeMillis() - start) + " *****");

        if (CollectionUtils.isEmpty(errors)) {
            start = System.currentTimeMillis();
            errors.addAll(hierarchyLevelValidator.validate(entity));
            LOGGER.debug("***** hierarchy level validator took: " + (System.currentTimeMillis() - start) + " *****");
            start = System.currentTimeMillis();
            errors.addAll(ncesIdValidator.validate(entity));
            LOGGER.debug("***** nces id validator took: " + (System.currentTimeMillis() - start) + " *****");
        }
        return errors;
    }

    @Override
    public Action getAction() {
        return Action.UPD;
    }
}
