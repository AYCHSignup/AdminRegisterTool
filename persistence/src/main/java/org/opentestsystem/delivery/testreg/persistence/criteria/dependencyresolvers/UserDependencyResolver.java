/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria.dependencyresolvers;

import java.util.List;

import javax.annotation.Resource;

import org.opentestsystem.delivery.testreg.domain.HierarchyLevel;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.domain.Sb11SuperEntity;
import org.opentestsystem.delivery.testreg.domain.User;
import org.opentestsystem.delivery.testreg.domain.User.RoleAssociation;
import org.opentestsystem.delivery.testreg.service.Sb11EntityRepositoryService;
import org.opentestsystem.shared.security.domain.permission.UserRole;
import org.opentestsystem.shared.security.integration.PermissionClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component
public class UserDependencyResolver implements TestRegistrationEntitiesDependencyResolver<User> {

    @Resource(name = "sb11EntityService")
    private Sb11EntityRepositoryService sb11EntityRepositoryService;
    
    @Autowired
    private PermissionClient permissionClient;

    @SuppressWarnings("unchecked")
    @Override
    public void resolveDependency(final User user) {

        // Update Role association dependency
        List<RoleAssociation> roles = user.getRoleAssociations();
        for (RoleAssociation roleObj : roles) {
            final HierarchyLevel hierarchyLevel = roleObj.getLevel();
            Sb11Entity parent;
            if(Sb11SuperEntity.class.isAssignableFrom(hierarchyLevel.getEntityClass())) {
                parent = sb11EntityRepositoryService.findByEntityId(roleObj.getAssociatedEntityId(), (Class<Sb11SuperEntity>) hierarchyLevel.getEntityClass());
            } else {
                String stateAbbreviation = roleObj.getStateAbbreviation();
                parent = sb11EntityRepositoryService.findByEntityIdAndStateAbbreviation(roleObj.getAssociatedEntityId(), stateAbbreviation, hierarchyLevel.getEntityClass());
            }
            roleObj.setAssociatedEntityMongoId(parent.getId());
            roleObj.setRole(roleObj.getRole());
        }
        //Lets take the roles that are added to this user and compare that with what is in Permission client.
        //Set the Role Names from Permissions Client so as to make sure TR does not hold any value other than what permission client
        //understands. This would make sure any downstream systems from TR would be in sync
        comapreAndSetRoleNameFromPermissionClient(roles);
    }
    
    private void comapreAndSetRoleNameFromPermissionClient(List<RoleAssociation> roles) {
        List<UserRole> userRolesFromPermissionsClient = permissionClient.getRoles();
        
        for(RoleAssociation roleAssociation: roles) {
            for(UserRole userRole: userRolesFromPermissionsClient) {
                
                String userRoleFromPermissionClient = userRole.getRole();
                
                if(roleAssociation.getRole().equalsIgnoreCase(userRoleFromPermissionClient)) {
                    roleAssociation.setRole(userRoleFromPermissionClient); //Set the value of UserRole from permission client
                }
            }
            
        }
        
    }

}
