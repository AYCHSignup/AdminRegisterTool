/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * https://bitbucket.org/sbacoss/eotds/wiki/AIR_Open_Source_License
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.persistence.criteria;

import static org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.VerifierUtils.getError;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.User;
import org.opentestsystem.delivery.testreg.domain.User.RoleAssociation;
import org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.user.AbstractUserVerifier;
import org.opentestsystem.delivery.testreg.service.TestRegPersister;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.validation.FieldError;

@Component
public class DuplicateUserVerifier extends AbstractUserVerifier {

    @Autowired
    private TestRegPersister userService;

    @Override
    public List<FieldError> verify(final User user) {
        List<FieldError> errors = new ArrayList<>();
        if (user != null && StringUtils.isEmpty(user.getId()) && !StringUtils.isEmpty(user.getEmail())) {
            SearchResponse<User> searchResponse = userService.searchDomainObjects(user.createAlternateKeySearchRequest(), FormatType.USER);
            if (searchResponse.getTotalCount() > 0) {
                errors.add(getError(USER_FORMAT, "email",user.getEmail(), "user.already.exists"));
            }
        }
        return errors.isEmpty() ? EMPTY_ERRORS : errors;
    }
    @Override
    protected FieldError doVerify(final RoleAssociation inRoleAssociation) {
        return null;
    }
}
