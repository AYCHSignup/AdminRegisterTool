/*
 * Educational Online Test Delivery System Copyright (c) 2013 American
 * Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0 See accompanying
 * file AIR-License-1_0.txt or at http://www.smarterapp.org/documents/
 * American_Institutes_for_Research_Open_Source_Software_License.pdf
 * ****************************************************************************
 */

package org.opentestsystem.delivery.testreg.service.impl;

import static org.opentestsystem.delivery.testreg.domain.HierarchyLevel.DISTRICT;
import static org.opentestsystem.delivery.testreg.domain.HierarchyLevel.GROUPOFDISTRICTS;
import static org.opentestsystem.delivery.testreg.domain.HierarchyLevel.GROUPOFINSTITUTIONS;
import static org.opentestsystem.delivery.testreg.domain.HierarchyLevel.INSTITUTION;
import static org.opentestsystem.delivery.testreg.domain.HierarchyLevel.STATE;

import java.io.StringWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.joda.time.DateTime;
import org.joda.time.format.DateTimeFormat;
import org.opentestsystem.delivery.CachedClientEntity;
import org.opentestsystem.delivery.Sb11TimeZoneBuilder;
import org.opentestsystem.delivery.testreg.domain.AccommodationResourceType;
import org.opentestsystem.delivery.testreg.domain.ClientEntity;
import org.opentestsystem.delivery.testreg.domain.ExplicitEligibility;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.GroupOfDistrictsEntity;
import org.opentestsystem.delivery.testreg.domain.GroupOfInstitutionsEntity;
import org.opentestsystem.delivery.testreg.domain.GroupOfStatesEntity;
import org.opentestsystem.delivery.testreg.domain.HierarchyLevel;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.domain.Sb11SuperEntity;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.domain.StudentGroup;
import org.opentestsystem.delivery.testreg.persistence.Sb11EntityRepository;
import org.opentestsystem.delivery.testreg.service.EligibilityService;
import org.opentestsystem.delivery.testreg.service.MasterResourceAccommodationService;
import org.opentestsystem.delivery.testreg.service.StudentGroupService;
import org.opentestsystem.delivery.testreg.service.StudentPackageService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

import com.thoughtworks.xstream.XStream;

@Service
public class StudentPackageServiceImpl implements StudentPackageService
{

  @Autowired
  private XStream                          xstream;

  @Autowired
  private CachedClientEntity               cachedClientEntity;

  @Autowired
  private Sb11EntityRepository<Sb11Entity> sb11EntityRepository;

  @Autowired
  private EligibilityService               eligService;
  
  @Autowired 
  private MasterResourceAccommodationService masterResourceAccommodationService;

  @Autowired
  private Sb11TimeZoneBuilder              sb11TimeZoneBuilder;

  @Autowired
  private StudentGroupService              studentGroupService;

  @Override
  public String exportStudentPackage (final Student student) {
    StringWriter writer = new StringWriter ()
    {
      {
        String str = doExportPackage (student);
        write (str);
      }
    };

    return writer.getBuffer ().toString ();
  }

  public String doExportPackage (final Student student) {

    // client
    ClientEntity client = cachedClientEntity.getClient ();
    // State
    Sb11Entity state = getEntity (student, STATE);

    // District,GroupOfDistrict
    Sb11Entity district = getEntity (student, DISTRICT);
    Sb11Entity grouptOfDistricts = getGroupOfDistrict (district);

    // Institution Parent - Only GOI & GOS (going through Hierarchy)
    Sb11Entity institution = getEntity (student, INSTITUTION);
    Sb11Entity grouptOfInstitutions = getGroupofInstitution (institution);
    Sb11Entity grouptOfStates = getGroupOfStates (institution);

    // get all eligibleAssessments for that particular student
    Map<ExplicitEligibility, DateTime> tests = getEligibility (student.getEntityId (), student.getStateAbbreviation ());

    // get groups for student
    List<StudentGroup> groups = studentGroupService.findGroupsForStudent (student.getEntityId (), student.getStateAbbreviation ());

    try {

      DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance ();
      DocumentBuilder docBuilder = docFactory.newDocumentBuilder ();

      // root elements
      Document doc = docBuilder.newDocument ();
      Element studentPackage = doc.createElement ("StudentPackage");
      Attr attr = doc.createAttribute ("version");
      attr.setValue ("1.0");
      studentPackage.setAttributeNode (attr);
      doc.appendChild (studentPackage);

      // add student to studentpackage
      Element studentElement = doc.createElement ("Student");
      studentPackage.appendChild (studentElement);
      // add children to student
      Element stateAbbreviation = doc.createElement ("StateAbbreviation");
      if (student.getStateAbbreviation () != null)
        stateAbbreviation.appendChild (doc.createTextNode (student.getStateAbbreviation ()));
      studentElement.appendChild (stateAbbreviation);

      Element stateName = doc.createElement ("StateName");
      if (state.getEntityName () != null)
        stateName.appendChild (doc.createTextNode (state.getEntityName ()));
      studentElement.appendChild (stateName);

      Element groupOfDistrictsIdentifier = doc.createElement ("GroupOfDistrictsIdentifier");
      if (grouptOfDistricts.getEntityId () != null)
        groupOfDistrictsIdentifier.appendChild (doc.createTextNode (grouptOfDistricts.getEntityId ()));
      studentElement.appendChild (groupOfDistrictsIdentifier);

      Element groupofDistrictsName = doc.createElement ("GroupofDistrictsName");
      if (grouptOfDistricts.getEntityName () != null)
        groupofDistrictsName.appendChild (doc.createTextNode (grouptOfDistricts.getEntityName ()));
      studentElement.appendChild (groupofDistrictsName);

      Element responsibleDistrictIdentifier = doc.createElement ("ResponsibleDistrictIdentifier");
      if (student.getDistrictIdentifier () != null)
        responsibleDistrictIdentifier.appendChild (doc.createTextNode (student.getDistrictIdentifier ()));
      studentElement.appendChild (responsibleDistrictIdentifier);

      Element organizationName = doc.createElement ("OrganizationName");
      if (district.getEntityName () != null)
        organizationName.appendChild (doc.createTextNode (district.getEntityName ()));
      studentElement.appendChild (organizationName);

      Element groupOfInstitutionsIdentifier = doc.createElement ("GroupOfInstitutionsIdentifier");
      if (grouptOfInstitutions.getEntityId () != null)
        groupOfInstitutionsIdentifier.appendChild (doc.createTextNode (grouptOfInstitutions.getEntityId ()));
      studentElement.appendChild (groupOfInstitutionsIdentifier);

      Element groupOfInstitutionsName = doc.createElement ("GroupOfInstitutionsName");
      if (grouptOfInstitutions.getEntityName () != null)
        groupOfInstitutionsName.appendChild (doc.createTextNode (grouptOfInstitutions.getEntityName ()));
      studentElement.appendChild (groupOfInstitutionsName);

      Element responsibleInstitutionIdentifier = doc.createElement ("ResponsibleInstitutionIdentifier");
      if (institution.getEntityId () != null)
        responsibleInstitutionIdentifier.appendChild (doc.createTextNode (institution.getEntityId ()));
      studentElement.appendChild (responsibleInstitutionIdentifier);

      Element nameOfInstitution = doc.createElement ("NameOfInstitution");
      if (institution.getEntityName () != null)
        nameOfInstitution.appendChild (doc.createTextNode (institution.getEntityName ()));
      studentElement.appendChild (nameOfInstitution);

      Element lastOrSurname = doc.createElement ("LastOrSurname");
      if (student.getLastName () != null)
        lastOrSurname.appendChild (doc.createTextNode (student.getLastName ()));
      studentElement.appendChild (lastOrSurname);

      Element firstName = doc.createElement ("FirstName");
      if (student.getFirstName () != null)
        firstName.appendChild (doc.createTextNode (student.getFirstName ()));
      studentElement.appendChild (firstName);

      Element middleName = doc.createElement ("MiddleName");
      if (student.getMiddleName () != null)
        middleName.appendChild (doc.createTextNode (student.getMiddleName ()));
      studentElement.appendChild (middleName);

      Element birthdate = doc.createElement ("Birthdate");
      if (student.getBirthDate () != null)
        birthdate.appendChild (doc.createTextNode (student.getBirthDate ().toString (DateTimeFormat.forPattern ("yyyy-MM-dd"))));
      studentElement.appendChild (birthdate);

      Element studentIdentifier = doc.createElement ("StudentIdentifier");
      if (student.getEntityId () != null)
        studentIdentifier.appendChild (doc.createTextNode (student.getEntityId ()));
      studentElement.appendChild (studentIdentifier);

      Element alternateSSID = doc.createElement ("AlternateSSID");
      if (student.getExternalSsid () != null)
        alternateSSID.appendChild (doc.createTextNode (student.getExternalSsid ()));
      studentElement.appendChild (alternateSSID);

      Element gradeLevelWhenAssessed = doc.createElement ("GradeLevelWhenAssessed");
      if (student.getGradeLevelWhenAssessed ().name () != null)
        gradeLevelWhenAssessed.appendChild (doc.createTextNode (student.getGradeLevelWhenAssessed ().name ()));
      studentElement.appendChild (gradeLevelWhenAssessed);

      Element sex = doc.createElement ("Sex");
      if (student.getGender ().name () != null)
        sex.appendChild (doc.createTextNode (student.getGender ().name ()));
      studentElement.appendChild (sex);

      Element hispanicOrLatinoEthnicity = doc.createElement ("HispanicOrLatinoEthnicity");
      if (student.getHispanicOrLatino () != null)
        hispanicOrLatinoEthnicity.appendChild (doc.createTextNode (student.getHispanicOrLatino ()));
      studentElement.appendChild (hispanicOrLatinoEthnicity);

      Element americanIndianOrAlaskaNative = doc.createElement ("AmericanIndianOrAlaskaNative");
      if (student.getAmericanIndianOrAlaskaNative () != null)
        americanIndianOrAlaskaNative.appendChild (doc.createTextNode (student.getAmericanIndianOrAlaskaNative ()));
      studentElement.appendChild (americanIndianOrAlaskaNative);

      Element asian = doc.createElement ("Asian");
      if (student.getAsian () != null)
        asian.appendChild (doc.createTextNode (student.getAsian ()));
      studentElement.appendChild (asian);

      Element blackOrAfricanAmerican = doc.createElement ("BlackOrAfricanAmerican");
      if (student.getBlackOrAfricanAmerican () != null)
        blackOrAfricanAmerican.appendChild (doc.createTextNode (student.getBlackOrAfricanAmerican ()));
      studentElement.appendChild (blackOrAfricanAmerican);

      Element white = doc.createElement ("White");
      if (student.getWhite () != null)
        white.appendChild (doc.createTextNode (student.getWhite ()));
      studentElement.appendChild (white);

      Element nativeHawaiianOrOtherPacificIslander = doc.createElement ("NativeHawaiianOrOtherPacificIslander");
      if (student.getNativeHawaiianOrPacificIsland () != null)
        nativeHawaiianOrOtherPacificIslander.appendChild (doc.createTextNode (student.getNativeHawaiianOrPacificIsland ()));
      studentElement.appendChild (nativeHawaiianOrOtherPacificIslander);

      Element demographicRaceTwoOrMoreRaces = doc.createElement ("DemographicRaceTwoOrMoreRaces");
      if (student.getTwoOrMoreRaces () != null)
        demographicRaceTwoOrMoreRaces.appendChild (doc.createTextNode (student.getTwoOrMoreRaces ()));
      studentElement.appendChild (demographicRaceTwoOrMoreRaces);

      Element iDEAIndicator = doc.createElement ("IDEAIndicator");
      if (student.getiDEAIndicator () != null)
        iDEAIndicator.appendChild (doc.createTextNode (student.getiDEAIndicator ()));
      studentElement.appendChild (iDEAIndicator);

      Element lEPStatus = doc.createElement ("LEPStatus");
      if (student.getLepStatus () != null)
        lEPStatus.appendChild (doc.createTextNode (student.getLepStatus ()));
      studentElement.appendChild (lEPStatus);

      Element section504Status = doc.createElement ("Section504Status");
      if (student.getSection504Status () != null)
        section504Status.appendChild (doc.createTextNode (student.getSection504Status ()));
      studentElement.appendChild (section504Status);

      Element economicDisadvantageStatus = doc.createElement ("EconomicDisadvantageStatus");
      if (student.getDisadvantageStatus () != null)
        economicDisadvantageStatus.appendChild (doc.createTextNode (student.getDisadvantageStatus ()));
      studentElement.appendChild (economicDisadvantageStatus);

      Element languageCode = doc.createElement ("LanguageCode");
      if (student.getLanguageCode () != null)
        languageCode.appendChild (doc.createTextNode (student.getLanguageCode ()));
      studentElement.appendChild (languageCode);

      Element englishLanguageProficiencyLevel = doc.createElement ("EnglishLanguageProficiencyLevel");
      if (student.getTitle3ProgressStatus () != null)
        englishLanguageProficiencyLevel.appendChild (doc.createTextNode (student.getTitle3ProgressStatus ()));
      studentElement.appendChild (englishLanguageProficiencyLevel);

      Element migrantStatus = doc.createElement ("MigrantStatus");
      if (student.getMigrantStatus () != null)
        migrantStatus.appendChild (doc.createTextNode (student.getMigrantStatus ()));
      studentElement.appendChild (migrantStatus);

      Element firstEntryDateIntoUSSchool = doc.createElement ("FirstEntryDateIntoUSSchool");
      if (student.getFirstEntryDateIntoUsSchool () != null)
        firstEntryDateIntoUSSchool.appendChild (doc.createTextNode (student.getFirstEntryDateIntoUsSchool ().toString (DateTimeFormat.forPattern ("yyyy-MM-dd"))));
      studentElement.appendChild (firstEntryDateIntoUSSchool);

      Element limitedEnglishProficiencyEntryDate = doc.createElement ("LimitedEnglishProficiencyEntryDate");
      if (student.getLepEntryDate () != null)
        limitedEnglishProficiencyEntryDate.appendChild (doc.createTextNode (student.getLepEntryDate ().toString (DateTimeFormat.forPattern ("yyyy-MM-dd"))));
      studentElement.appendChild (limitedEnglishProficiencyEntryDate);

      Element lEPExitDate = doc.createElement ("LEPExitDate");
      if (student.getLepExitDate () != null)
        lEPExitDate.appendChild (doc.createTextNode (student.getLepExitDate ().toString (DateTimeFormat.forPattern ("yyyy-MM-dd"))));
      studentElement.appendChild (lEPExitDate);

      Element titleIIILanguageInstructionProgramType = doc.createElement
          ("TitleIIILanguageInstructionProgramType");
      if (student.getTitle3ProgramType () != null)
        titleIIILanguageInstructionProgramType.appendChild (doc.createTextNode
            (student.getTitle3ProgramType ().name ()));
      studentElement.appendChild(titleIIILanguageInstructionProgramType);

      Element primaryDisabilityType = doc.createElement
          ("PrimaryDisabilityType");
      if (student.getPrimaryDisabilityType () != null)
        primaryDisabilityType.appendChild
            (doc.createTextNode (student.getPrimaryDisabilityType ().name ()));
      studentElement.appendChild (primaryDisabilityType);

      Element clientId = doc.createElement ("ClientId");
      if (client.getEntityId () != null)
        clientId.appendChild
            (doc.createTextNode (client.getEntityId ()));
      studentElement.appendChild (clientId);

      Element clientName = doc.createElement ("ClientName");
      if (client.getEntityName () != null)
        clientName.appendChild (doc.createTextNode (client.getEntityName ()));
      studentElement.appendChild (clientName);

      Element shareIdentityData = doc.createElement ("ShareIdentityData");
      Boolean identity = client.isShareStudentIdentity ();
      String isShared =
          identity.toString ();
      if (isShared != null)
        shareIdentityData.appendChild (doc.createTextNode
            (isShared));
      studentElement.appendChild (shareIdentityData);

      // Tests
      Element testsElement = doc.createElement ("Tests");
      for (ExplicitEligibility key : tests.keySet ())
      {
        Element test = doc.createElement ("Test");

        Element subjectCode = doc.createElement ("SubjectCode");
        subjectCode.appendChild (doc.createTextNode (key.getSubject ()));
        test.appendChild (subjectCode);
        Element testName = doc.createElement ("TestName");
        testName.appendChild (doc.createTextNode (key.getTestName ()));
        test.appendChild (testName);
        Element testId = doc.createElement ("TestId");
        testId.appendChild (doc.createTextNode (key.getAssessmentMongoId ()));
        test.appendChild (testId);
        Element windowStart = doc.createElement ("WindowStart");
        windowStart.appendChild (doc.createTextNode (tests.get (key).toString ()));
        test.appendChild (windowStart);

        testsElement.appendChild (test);
      }
      studentElement.appendChild (testsElement);

      Element accommodations = doc.createElement ("Accommodations");
      HashMap<String, String> accResourceTypes = masterResourceAccommodationService.getAllResourceTypes ();
      
      if(student.getAccommodations () != null && student.getAccommodations ().length > 0){
        for (Object obj : student.getAccommodations ())
        {
          HashMap<String, Object> newAcc = (HashMap<String, Object>) obj;
          Element accommodation = doc.createElement ("Accommodation");
          for (String key : newAcc.keySet ())
          {
            if (key.equals ("id") || key.equals ("_id") || key.equalsIgnoreCase ("AtleastOneAccommodationField") || key.equalsIgnoreCase ("StudentId") || key.equalsIgnoreCase ("StateAbbreviation"))
              continue;
            char[] keyStr = key.toCharArray ();
            keyStr[0] = Character.toUpperCase (keyStr[0]);
            String keyString = new String (keyStr);
            if (accResourceTypes.containsKey (keyString) && accResourceTypes.get (keyString).equalsIgnoreCase (AccommodationResourceType.MultiSelectResource.name ()))
            {
              for (String str : (ArrayList<String>) newAcc.get (key))
              {
                Element accChild = doc.createElement (keyString);
                accChild.appendChild (doc.createTextNode (str));
                accommodation.appendChild (accChild);
              }
              continue;
            }
            Element accChild;
            // TDS expected tag-name SubjectCode for Subject in Accommodation #SB-1432
            // As Accommodation Resources are dynamically generated we are not hard-coding the tag names in accommodation.  
            // In ART Student Accommodations we are storing it as subject in database. So we are hard-coding Subject to SubjectCode while generating Student package xml.
            if(keyString.equalsIgnoreCase ("Subject")){
              accChild = doc.createElement ("SubjectCode");
            } else{
              accChild = doc.createElement (keyString);
            }
            if (newAcc.get (key) != null)
              accChild.appendChild (doc.createTextNode (newAcc.get (key).toString ()));
            accommodation.appendChild (accChild);
          }
          accommodations.appendChild (accommodation);
        }
      }
      studentElement.appendChild (accommodations);

      Element groupsElement = doc.createElement ("Groups");
      for (StudentGroup group : groups)
      {
        Element groupElement = doc.createElement ("StudentGroupName");
        if (group.getStudentGroupName () != null)
          groupElement.appendChild (doc.createTextNode (group.getStudentGroupName ()));
        groupsElement.appendChild (groupElement);
      }
      studentElement.appendChild (groupsElement);
      // write the content into xml file
      TransformerFactory transformerFactory = TransformerFactory.newInstance ();
      Transformer transformer = transformerFactory.newTransformer ();
      DOMSource source = new DOMSource (doc);
      StringWriter writer = new StringWriter ();
      StreamResult result = new StreamResult (writer);
      transformer.transform (source, result);
      String str = writer.getBuffer ().toString ();
      return str;
    } catch (ParserConfigurationException pce) {
      pce.printStackTrace ();
    } catch (TransformerConfigurationException e) {
      // TODO Auto-generated catch block
      e.printStackTrace ();
    } catch (TransformerException e) {
      // TODO Auto-generated catch block
      e.printStackTrace ();
    }
    return null;
  }

  private Sb11Entity getEntity (final Student student, final HierarchyLevel level) {
    String stateAbbreviation = student.getStateAbbreviation ();
    Sb11Entity ret = null;
    switch (level) {
    case INSTITUTION:
      ret = findEntity (student.getInstitutionIdentifier (), stateAbbreviation, level);
      break;
    case DISTRICT:
      ret = findEntity (student.getDistrictIdentifier (), stateAbbreviation, level);
      break;
    case STATE:
      ret = findEntity (student.getStateAbbreviation (), null, level);
      break;
    default:
      throw new RuntimeException ("Not a Supported Hierarchy");
    }
    return ret == null ? getEmpty (level.getEntityClass ()) : ret;
  }

  private Sb11Entity getGroupofInstitution (final Sb11Entity institution) {
    switch (institution.getParentEntityType ()) {
    case GROUPOFINSTITUTIONS:
      return findEntity (institution.getEntityId (), institution.getStateAbbreviation (), GROUPOFINSTITUTIONS);
    default:
      return getEmpty (GroupOfInstitutionsEntity.class);
    }
  }

  private Sb11Entity getGroupOfStates (final Sb11Entity institution) {
    Sb11Entity gos = getGOS (institution);
    if (gos != null && gos.getFormatType () == FormatType.GROUPOFSTATES) {
      return gos;
    }
    return null;
  }

  private Sb11Entity getGOS (Sb11Entity entity) {
    if (entity.getParentEntityType () == HierarchyLevel.GROUPOFSTATES) {
      return sb11EntityRepository.findByEntityId (entity.getParentEntityId (), GroupOfStatesEntity.class);
    }

    if (isASuperEntity (entity.getEntityType ()) || isASuperEntity (entity.getParentEntityType ())) {
      return entity;
    } else {
      Sb11Entity sb11Entity = sb11EntityRepository.findByEntityIdAndStateAbbreviation (
          entity.getParentEntityId (), entity.getStateAbbreviation (), entity.getParentEntityType ().getEntityClass ());
      return getGOS (sb11Entity);
    }
  }

  private Sb11Entity getGroupOfDistrict (final Sb11Entity district) {
    Sb11Entity ret = getEmpty (GroupOfDistrictsEntity.class);
    if (district != null && district.getParentEntityType () != null) {
      switch (district.getParentEntityType ()) {
      case GROUPOFDISTRICTS:
        Sb11Entity sb11Entity = findEntity (district.getEntityId (), district.getStateAbbreviation (), GROUPOFDISTRICTS);
        ret = sb11Entity == null ? ret : sb11Entity;
      default:
        break;
      }
    }
    return ret;
  }

  @SuppressWarnings ("unchecked")
  private Sb11Entity findEntity (final String entityId, final String stateAbbreviation, final HierarchyLevel level) {
    if (isASuperEntity (level)) {
      return sb11EntityRepository.findByEntityId (entityId, (Class<Sb11SuperEntity>) level.getEntityClass ());
    }

    if (stateAbbreviation != null && stateAbbreviation.length () > 0) {
      return sb11EntityRepository.findByEntityIdAndStateAbbreviation (entityId, stateAbbreviation, level.getEntityClass ());
    } else {
      throw new RuntimeException ("Unable to find Sb11Entity (no state abbrev. specified): " + entityId + ", " + level.name ());
    }
  }

  private boolean isASuperEntity (final HierarchyLevel level) {
    return Sb11SuperEntity.class.isAssignableFrom (level.getEntityClass ());
  }

  private Sb11Entity getEmpty (final Class<? extends Sb11Entity> sb11EntityClass) {
    try {
      return sb11EntityClass.newInstance ();
    } catch (InstantiationException | IllegalAccessException e) {
      throw new RuntimeException ("Unable to Instantiate Sb11Entity" + sb11EntityClass.getName () + " using default constructor");
    }
  }

  private Map<ExplicitEligibility, DateTime> getEligibility (final String studentId, final String stateAbbreviation) {
    DateTime now = new DateTime (sb11TimeZoneBuilder.getDateTimeZone ()); // Use Configured TZ for TestWindows
    return eligService.findAllEligibilityByStudentIdStateAbbreviationAndBeginWindow (studentId, stateAbbreviation, now);
  }

}
