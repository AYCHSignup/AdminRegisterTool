/* Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.service.impl;

import java.io.StringWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.annotation.Resource;

import org.joda.time.DateTime;
import org.opentestsystem.delivery.CachedClientEntity;
import org.opentestsystem.delivery.Sb11TimeZoneBuilder;
import org.opentestsystem.delivery.testreg.domain.Accommodation;
import org.opentestsystem.delivery.testreg.domain.DistrictEntity;
import org.opentestsystem.delivery.testreg.domain.ExplicitEligibility;
import org.opentestsystem.delivery.testreg.domain.GroupOfDistrictsEntity;
import org.opentestsystem.delivery.testreg.domain.GroupOfInstitutionsEntity;
import org.opentestsystem.delivery.testreg.domain.GroupOfStatesEntity;
import org.opentestsystem.delivery.testreg.domain.InstitutionEntity;
import org.opentestsystem.delivery.testreg.domain.StateEntity;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.domain.StudentGroup;
import org.opentestsystem.delivery.testreg.domain.ClientEntity;
import org.opentestsystem.delivery.testreg.service.EligibilityService;
import org.opentestsystem.delivery.testreg.service.Sb11EntityRepositoryService;
import org.opentestsystem.delivery.testreg.service.StudentGroupService;
import org.opentestsystem.delivery.testreg.service.StudentPackageService;
import org.opentestsystem.delivery.testreg.xstream.converters.ExplicitEligibilityConverter;
import org.opentestsystem.delivery.testreg.xstream.converters.StudentConverter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;

@Service
public class StudentPackageServiceImpl implements StudentPackageService {

    @Autowired
    private XStream xstream;
    
    @Autowired
    private EligibilityService eligService;
    
    @Autowired
    private StudentGroupService studentGroupService;
    
    @Autowired
    private Sb11TimeZoneBuilder sb11TimeZoneBuilder;
    
    @Resource(name = "reflectionConverter")
    private Converter reflectionConverter;
    
    @Resource(name = "sb11EntityService")
    private Sb11EntityRepositoryService sb11EntityRepositoryService;
    
    @Autowired
    private CachedClientEntity cachedClientEntity;
   
    
    private static final String XML_DECLARATION             = "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>";
    private static final String STUDENT_PACKAGE_DEC_START   = "<StudentPackage version=\"1.0\">";
    private static final String STUDENT_PACKAGE_DEC_END     = "</StudentPackage>";
    
    private static final String TESTS_NODE                  = "Tests";
    private static final String WINDOW_START_NODE           = "WindowStart";
    
    private static final Class<?>[] annotationTypes;
    static {
        annotationTypes = new Class<?>[] {
                Student.class, 
                Accommodation.class, 
                ExplicitEligibility.class, 
                StudentGroup.class, 
                StateEntity.class, 
                DistrictEntity.class, 
                InstitutionEntity.class,
                GroupOfDistrictsEntity.class,
                GroupOfInstitutionsEntity.class,
                GroupOfStatesEntity.class,
                ClientEntity.class
        };
    }
            
    
    @Override
    public String exportStudentPackage(final Student student) {
        StringWriter writer =  new StringWriter() {{
            write(XML_DECLARATION);
            write(STUDENT_PACKAGE_DEC_START);
            doExportPackage(student, this);
            write(STUDENT_PACKAGE_DEC_END);
        }};
        
        return writer.getBuffer().toString();
    }

    public void doExportPackage(final Student student, Writer writer) {
        xstream.processAnnotations(annotationTypes);
        xstream.registerConverter(getStudentConverter());
        xstream.toXML(student, writer);
    }
    
    private Map<ExplicitEligibility, DateTime> getEligibility(final String studentId, final String stateAbbreviation) {
        DateTime now = new DateTime(sb11TimeZoneBuilder.getDateTimeZone()); //Use Configured TZ for TestWindows
        return eligService.findAllEligibilityByStudentIdStateAbbreviationAndBeginWindow(studentId, stateAbbreviation, now); 
    }
    
    
    private Converter getEligibilityConverter(final DateTime windowStart) {
        return new ExplicitEligibilityConverter(reflectionConverter) {
            @Override
            public void writeCallback(Object object, HierarchicalStreamWriter writer, MarshallingContext context) {
                writer.startNode(WINDOW_START_NODE);
                writer.setValue(windowStart.toString());
                writer.endNode();
            }
        };
    }
    
    private Converter getStudentConverter() {
        return new StudentConverter(reflectionConverter, sb11EntityRepositoryService) {
            @Override
            public void writeCallback(Object object, HierarchicalStreamWriter writer, MarshallingContext context) {
                Student student          = (Student)object;
                
                writeClientInfo(writer, context);
                writeEligibility(student, writer, context);   
                writeAccommodations(student, writer, context);
                writeStudentGroups(student, writer, context);
            }
        };
    }
    
    private void writeClientInfo(HierarchicalStreamWriter writer, MarshallingContext context) {
        reflectionConverter.marshal(cachedClientEntity.getClient(), writer, context);
    }
    
    private void writeEligibility(Student student, HierarchicalStreamWriter writer, MarshallingContext context) {
        writer.startNode(TESTS_NODE);//Start
        
        for(final Entry<ExplicitEligibility, DateTime> entry: getEligibility(student.getEntityId(), student.getStateAbbreviation()).entrySet()) {
            xstream.registerConverter(getEligibilityConverter(entry.getValue()));
            xstream.marshal(entry.getKey(), writer); //Append Eligibility
        }
        writer.endNode(); //End
    }
    
    private void writeAccommodations(Student student, HierarchicalStreamWriter writer, MarshallingContext context) {
        xstream.alias("Accommodations", List.class);
        xstream.marshal(student.hasAccommodations() ? student.getAccommodations():new ArrayList<Accommodation>(), writer);
    }
    
    private void writeStudentGroups(Student student, HierarchicalStreamWriter writer, MarshallingContext context) {
        List<StudentGroup> groups = studentGroupService.findGroupsForStudent(student.getEntityId(), student.getStateAbbreviation());            
        writer.startNode("Groups"); //Start
        
        if(groups !=null)
        for(StudentGroup group: groups) {
            reflectionConverter.marshal(group, writer, context); //Append Student Group
        }
        
        writer.endNode(); //End
    }
}
