/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.assessment;

import static org.opentestsystem.delivery.testreg.domain.AnnotationHelper.getFieldLabel;
import static org.opentestsystem.delivery.testreg.domain.Sb11EntityUtils.getHumanReadableName;
import static org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.VerifierUtils.addFieldError;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.opentestsystem.delivery.testreg.domain.Assessment;
import org.opentestsystem.delivery.testreg.domain.ExplicitEligibility;
import org.opentestsystem.delivery.testreg.persistence.AssessmentRepository;
import org.opentestsystem.delivery.testreg.persistence.ExplicitEligibilityRepository;
import org.opentestsystem.delivery.testreg.persistence.Verifier;
import org.opentestsystem.delivery.testreg.persistence.VersionComparator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.validation.FieldError;

@Component
public class AssessmentEligibilityUpdateVerifier implements Verifier<Assessment> {

    @Autowired
    ExplicitEligibilityRepository explicitEligibilityRepository;

    @Autowired
    AssessmentRepository assessmentRepository;

    @Override
    public List<FieldError> verify(final Assessment entity) {
        List<FieldError> errors = new ArrayList<FieldError>();
        Assessment dbAssessment = assessmentRepository.findByTheAlternateKey(entity.createAlternateKeySearchRequest());

        // if nothing was found, we're trying to look for an assessment with a new version that isn't persisted yet
        // now search for everything except the version and take the latest assessment
        if (dbAssessment == null) {
            List<Assessment> dbAssessments = assessmentRepository.findWithPossiblyNullLabel(entity.getTestName(),
                    entity.getTestLabel(), entity.getTenantId(), entity.getSourceTsb());

            if (dbAssessments.size() > 1) {
                Collections.sort(dbAssessments, new VersionComparator());
                dbAssessment = dbAssessments.get(dbAssessments.size() - 1);
            } else if (dbAssessments.size() == 1) {
                dbAssessment = dbAssessments.get(0);
            }
        }
        List<ExplicitEligibility> eligibilities = explicitEligibilityRepository.findByTestNameAndTestVersion(dbAssessment.getTestName(), dbAssessment.getVersion());

        if (eligibilities != null && eligibilities.size() > 0) {
            if (!isTestFormContains(eligibilities, entity.getTestForm())) {
                String testFormLabel = getFieldLabel(eligibilities, getTestFormField());
                String humanReadableTestFormeLabel = getHumanReadableName(testFormLabel);
                String message = "Cannot update Assessment version: At least one student has been marked as eligible for the test form which has been removed in the test package update";
                addFieldError(errors, entity, humanReadableTestFormeLabel, getTestForm(entity), message);
            }
        }
        return errors;
    }

    private boolean isTestFormContains(List<ExplicitEligibility> eligibilies, List<String> testForms) {
        boolean flag = false;
        MAIN: for (String testFrom : testForms) {
            for (ExplicitEligibility explicitEligibility : eligibilies) {
                if (testFrom.equals(explicitEligibility.getTestForm())) {
                    flag = true;
                    continue MAIN;
                }
            }
            if (!flag) {
                return false;
            }
        }
        return true;
    }

    protected String getTestName(Assessment obj) {
        return obj.getTestName();
    }

    protected String getTenantId(Assessment obj) {
        return obj.getTenantId();
    }

    protected String getTestFormField() {
        return "testForm";
    }

    protected String getTestForm(Assessment obj) {
        if (obj.getTestForm() != null) {
            return obj.getTestForm().toString();
        }
        return null;
    }
}
