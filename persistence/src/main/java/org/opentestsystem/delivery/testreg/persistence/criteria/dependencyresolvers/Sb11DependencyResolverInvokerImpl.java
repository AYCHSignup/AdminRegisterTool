/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria.dependencyresolvers;

import java.lang.reflect.ParameterizedType;
import java.util.Iterator;
import java.util.List;

import org.opentestsystem.delivery.testreg.domain.TestRegistrationBase;
import org.springframework.beans.factory.annotation.Autowire;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Configurable;
import org.springframework.context.annotation.Bean;
import org.springframework.stereotype.Component;

import javax.inject.Inject;
import javax.inject.Qualifier;

@Component
public class Sb11DependencyResolverInvokerImpl implements Sb11DependencyResolverInvoker {
        
    @Autowired
    private List<TestRegistrationEntitiesDependencyResolver<? extends TestRegistrationBase>> testRegistrationEntitiesDependencyResolver;

    private TestRegistrationEntitiesDependencyResolver<TestRegistrationBase> getDependencyResolver(TestRegistrationBase sb11Entity) {
        for (TestRegistrationEntitiesDependencyResolver t : testRegistrationEntitiesDependencyResolver) {
            @SuppressWarnings("unchecked")
            Class<TestRegistrationBase> clazz = (Class<TestRegistrationBase>) ((ParameterizedType) t.getClass().getGenericInterfaces()[0]).getActualTypeArguments()[0];
            if (clazz.isAssignableFrom(sb11Entity.getClass()))
                return t;
        }
        return null;
    }

    @Override
    public void resolveDependency(TestRegistrationBase obj) {
        TestRegistrationEntitiesDependencyResolver<TestRegistrationBase> dependencyResolver = getDependencyResolver(obj);
        if (dependencyResolver != null) {
            dependencyResolver.resolveDependency(obj);
        }
    }

    @Override
    public void resolveDependency(List<TestRegistrationBase> objs) {
        if(objs ==null || objs.isEmpty()) return;  //Guard Clause
        
        TestRegistrationEntitiesDependencyResolver<TestRegistrationBase> dependencyResolver = getDependencyResolver(objs.get(0));
        
        if (dependencyResolver != null) {
            Iterator<TestRegistrationBase> trIterator = objs.iterator();
            while(trIterator.hasNext()) {
                dependencyResolver.resolveDependency(trIterator.next());
            }
        }
    }

}
