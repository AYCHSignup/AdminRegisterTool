/*
Educational Online Test Delivery System Copyright (c) 2013 American Institutes for Research

Distributed under the AIR Open Source License, Version 1.0 See accompanying file AIR-License-1_0.txt or at
http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 */

package org.opentestsystem.delivery.testreg.persistence;

import static org.springframework.data.mongodb.core.query.Criteria.where;

import java.util.Collection;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.joda.time.DateTime;
import org.opentestsystem.delivery.testreg.domain.Assessment;
import org.opentestsystem.shared.search.domain.AbstractSearchRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.mongodb.core.MongoOperations;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;

public class AssessmentRepositoryImpl implements AssessmentRepositoryCustom {

    @Autowired
    private transient MongoOperations mongoOperations;

    @Override
    public Assessment findByTheAlternateKey(final AbstractSearchRequest searchRequest) {
        return mongoOperations.findOne(searchRequest.buildQuery(), Assessment.class);
    }

    @Override
    public List<Assessment> findWithPossiblyNullLabel(final String testName, final String testLabel,
            final String tenantId, final String sourceTsb) {
        // if test label is null then we need to search for a not exists on the testLabel field because it's
        // actually null on the assessment

        Query query = new Query();
        Criteria criteria = Criteria.where("testName").is(testName);

        if (testLabel == null || StringUtils.isBlank(testLabel)) {
            criteria.orOperator(Criteria.where("testLabel").is(null), Criteria.where("testLabel").is(""));
        } else {
            criteria.and("testLabel").is(testLabel);
        }

        criteria.and("tenantId").is(tenantId).and("sourceTsb").is(sourceTsb);

        query.addCriteria(criteria);

        return mongoOperations.find(query, Assessment.class);
    }

    @Override
    public Assessment findMaxOpportunities() {
        Query query = new Query();
        query.with(new Sort(Direction.DESC, "numGlobalOpportunities")).limit(1);
        return mongoOperations.findOne(query, Assessment.class);
    }

    @Override
    public List<Assessment> findAllByTenantsAndBeginWindow(final Collection<String> tenantsList,
            final DateTime date) {
        return mongoOperations.find(
                new Query(new Criteria().andOperator(where("tenantId").in(tenantsList),
                        where("testWindow.beginWindow").lte(date.getMillis()),
                        where("testWindow.endWindow").gte(date.getMillis()))), Assessment.class);
    }

}
