/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.user;

import static org.opentestsystem.delivery.testreg.domain.AnnotationHelper.getFieldLabel;
import static org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.VerifierUtils.getError;

import javax.annotation.Resource;

import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.domain.Sb11SuperEntity;
import org.opentestsystem.delivery.testreg.domain.User;
import org.opentestsystem.delivery.testreg.domain.User.RoleAssociation;
import org.opentestsystem.delivery.testreg.service.Sb11EntityRepositoryService;
import org.springframework.stereotype.Component;
import org.springframework.validation.FieldError;

@Component
public class UserParentVerifier extends AbstractUserVerifier {

    @Resource(name = "sb11EntityService")
    private Sb11EntityRepositoryService sb11EntityRepositoryService;

    @Override
    protected FieldError doVerify(RoleAssociation roleAssociation) {

        Sb11Entity parent = getParentEntity(roleAssociation);
        if (parent == null) {
            return getError(
                    USER_FORMAT,
                    getFieldLabel(new User.RoleAssociation(), "associatedEntityId"),
                    roleAssociation.getAssociatedEntityId(),
                    getFieldLabel(new User.RoleAssociation(), "associatedEntityId") + " not found in the database for the type " + roleAssociation.getLevel());
        }
        switch (parent.getFormatType()) {
        case CLIENT:
        case GROUPOFSTATES:
        case STATE:
            return null;
        default:
            return getValidState(parent, roleAssociation, parent.getStateAbbreviation());
        }

    }

    @SuppressWarnings("unchecked")
    private Sb11Entity getParentEntity(RoleAssociation roleAssociation) {
        if(Sb11SuperEntity.class.isAssignableFrom(roleAssociation.getLevel().getEntityClass())) {
            return sb11EntityRepositoryService.findByEntityId(roleAssociation.getAssociatedEntityId(), (Class<Sb11SuperEntity>) roleAssociation.getLevel().getEntityClass());
        } else {
            return sb11EntityRepositoryService.findByEntityIdAndStateAbbreviation(roleAssociation.getAssociatedEntityId(), roleAssociation.getStateAbbreviation(), roleAssociation.getLevel().getEntityClass());
        }
    }

    private FieldError getValidState(final Sb11Entity parent, RoleAssociation roleAssociation, final String parentStateName) {
        if (!roleAssociation.getStateAbbreviation().equalsIgnoreCase(parentStateName)) {
            String stateAbbreviationLable = getFieldLabel(new User.RoleAssociation(), "stateAbbreviation");
            return getError(parent.getFormatType(), stateAbbreviationLable, parentStateName,
                    stateAbbreviationLable + " is not valid for the User Role parent hierarchy");
        }
        return null;
    }

}
