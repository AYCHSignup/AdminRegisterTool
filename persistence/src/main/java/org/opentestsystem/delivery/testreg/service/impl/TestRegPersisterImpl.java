/*
Educational Online Test Delivery System Copyright (c) 2013 American Institutes for Research

Distributed under the AIR Open Source License, Version 1.0 See accompanying file AIR-License-1_0.txt or at
http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 */

package org.opentestsystem.delivery.testreg.service.impl;

import java.util.Collections;
import java.util.List;

import javax.annotation.Resource;

import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.domain.Sb11NonEntity;
import org.opentestsystem.delivery.testreg.domain.TestRegistrationBase;
import org.opentestsystem.delivery.testreg.service.TestRegPersister;
import org.opentestsystem.delivery.testreg.service.TestRegistrationService;
import org.opentestsystem.shared.search.domain.AbstractSearchRequest;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.stereotype.Component;
import org.springframework.util.CollectionUtils;

@Component
public class TestRegPersisterImpl implements TestRegPersister {

    @Resource(name = "sb11EntityService")
    private TestRegistrationService<? extends Sb11Entity> sb11EntityService;

    @Resource(name = "sb11NonEntityService")
    private TestRegistrationService<? extends Sb11NonEntity> sb11NonEntityService;

    @Resource(name = "accommodationService")
    private TestRegistrationService<? extends Sb11NonEntity> accommodationService;

    @Resource(name = "userService")
    private TestRegistrationService<? extends Sb11NonEntity> userService;

    @Resource(name = "studentService")
    private TestRegistrationService<? extends Sb11NonEntity> studentService;

    @Resource(name = "studentGroupService")
    private TestRegistrationService<? extends Sb11NonEntity> studentGroupService;

    private TestRegistrationService<? extends TestRegistrationBase> getCorrectService(final FormatType formatType) {

        TestRegistrationService<? extends TestRegistrationBase> service = null;

        switch (formatType) {
        case CLIENT:
        case DISTRICT:
        case GROUPOFDISTRICTS:
        case GROUPOFINSTITUTIONS:
        case GROUPOFSTATES:
        case INSTITUTION:
        case STATE:
            service = this.sb11EntityService;
            break;
        case DESIGNATEDSUPPORTSANDACCOMMODATIONS:
            service = this.accommodationService;
            break;
        case USER:
            service = this.userService;
            break;
        case STUDENT:
            service = this.studentService;
            break;
        case STUDENTGROUP:
            service = this.studentGroupService;
            break;
        case EXPLICITELIGIBILITY:
        case ASSESSMENT:
            service = this.sb11NonEntityService;
            break;
        default:
            // noop
            break;
        }

        return service;
    }

    private <T extends TestRegistrationBase> TestRegistrationService<? extends TestRegistrationBase> getCorrectService(
            final T domainObj) {
        return getCorrectService(domainObj.getFormatType());
    }

    @SuppressWarnings("unchecked")
    @Override
    public <T extends TestRegistrationBase> T findById(final String pkId, final FormatType formatType) {
        return ((TestRegistrationService<T>) getCorrectService(formatType)).findById(pkId, formatType);
    }

    @SuppressWarnings("unchecked")
    @Override
    public <T extends TestRegistrationBase> List<T> findAll(final FormatType formatType) {
        return ((TestRegistrationService<T>) getCorrectService(formatType)).findAll(formatType);
    }

    @SuppressWarnings("unchecked")
    @Override
    public <T extends TestRegistrationBase> T saveDomainObject(final T domainObj) {
        return ((TestRegistrationService<T>) getCorrectService(domainObj)).saveDomainObject(domainObj);
    }

    @SuppressWarnings("unchecked")
    @Override
    public <T extends TestRegistrationBase> T updateDomainObject(final T domainObj) {
        return ((TestRegistrationService<T>) getCorrectService(domainObj)).updateDomainObject(domainObj);
    }

    @SuppressWarnings("unchecked")
    @Override
    public <T extends TestRegistrationBase> void deleteDomainObject(final T domainObj) {
        ((TestRegistrationService<T>) getCorrectService(domainObj)).deleteDomainObject(domainObj);
    }

    @SuppressWarnings("unchecked")
    @Override
    public <T extends TestRegistrationBase> void deleteDomainObject(final String pkId, final FormatType formatType) {
        ((TestRegistrationService<T>) getCorrectService(formatType)).deleteDomainObject(pkId, formatType);
    }

    @SuppressWarnings("unchecked")
    @Override
    public <T extends TestRegistrationBase> List<T> saveDomainObjects(final List<T> domainObjList) {
        if (!CollectionUtils.isEmpty(domainObjList)) {
            return ((TestRegistrationService<T>) getCorrectService(domainObjList.get(0))).saveDomainObjects(domainObjList);
        } else {
            return Collections.emptyList();
        }
    }

    @SuppressWarnings("unchecked")
    @Override
    public <T extends TestRegistrationBase> List<T> updateDomainObjects(final List<T> domainObjList) {
        if (!CollectionUtils.isEmpty(domainObjList)) {
            return ((TestRegistrationService<T>) getCorrectService(domainObjList.get(0))).updateDomainObjects(domainObjList);
        } else {
            return Collections.emptyList();
        }
    }

    @SuppressWarnings("unchecked")
    @Override
    public <T extends TestRegistrationBase> void deleteDomainObjects(final List<T> domainObjList) {
        if (!CollectionUtils.isEmpty(domainObjList)) {
            ((TestRegistrationService<T>) getCorrectService(domainObjList.get(0))).deleteDomainObjects(domainObjList);
        }
    }

    @SuppressWarnings("unchecked")
    @Override
    public <T extends TestRegistrationBase> SearchResponse<T> searchDomainObjects(
            final AbstractSearchRequest searchRequest, final FormatType formatType) {

        return ((TestRegistrationService<T>) getCorrectService(formatType)).searchDomainObjects(searchRequest,
                formatType);
    }

    @SuppressWarnings("unchecked")
    @Override
    public <T extends TestRegistrationBase> boolean hasAssociatedEntity(final T domainObj) {

        return ((TestRegistrationService<T>) getCorrectService(domainObj.getFormatType()))
                .hasAssociatedEntity(domainObj);
    }

}
