package org.opentestsystem.delivery.testreg.service.impl.amqp;

import org.opentestsystem.delivery.testreg.domain.amqp.BatchStudent;
import org.opentestsystem.delivery.testreg.service.ExternalStudentService;
import org.opentestsystem.delivery.testreg.service.StudentBatchStatusService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.beans.factory.annotation.Autowired;

import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import java.util.HashSet;

public class Receiver {

    @Autowired
    RabbitTemplate rabbitTemplate;

    @Autowired
    ExternalStudentService externalStudentService;

    @Autowired
    StudentBatchStatusService studentBatchStatusService;

    private static final Logger LOGGER = LoggerFactory.getLogger (Receiver.class);

    // Not throwing an error intentionally so that the message does not get replaced on the queue
    public void receiveMessage(Object message) {
        BatchStudent batchStudent;
        try {
            batchStudent = (BatchStudent) message;
        } catch(Exception ex) {
            LOGGER.error("Unrecognized object sent to AMQP receiver");
            return;
        }
        if(batchStudent.isUpsert()) {
            upsertStudent(batchStudent);
        } else if(batchStudent.isDelete()) {
            deleteStudent(batchStudent);
        } else {
            LOGGER.error("Invalid object sent to AMQP receiver");
        }
    }

    private void upsertStudent(BatchStudent batchStudent) {
        try {
            externalStudentService.upsertStudent(batchStudent.getStudent(), batchStudent.getStateCode());
            studentBatchStatusService.logBatchSuccess(batchStudent.getBatchId());
        } catch (ConstraintViolationException constraintViolationException) {
            String violationMessage = "";
            for(ConstraintViolation<?> violation : constraintViolationException.getConstraintViolations()) {
                violationMessage += violation.getMessage() + "\n";
            }
            studentBatchStatusService.logBatchError(batchStudent.getStudent().getEntityId(), violationMessage, batchStudent.getBatchId());
        } catch(Exception exception) {
            studentBatchStatusService.logBatchError(batchStudent.getStudent().getEntityId(), exception.getMessage(), batchStudent.getBatchId());
        }
    }

    private void deleteStudent(BatchStudent batchStudent) {
        try {
            if(!externalStudentService.deleteStudent(batchStudent.getSsidToDelete(), batchStudent.getStateCode())) {
                throw new IllegalArgumentException("Student with ssid=" + batchStudent.getSsidToDelete() + " and stateCode=" + batchStudent.getStateCode() + " does not exist");
            }
            studentBatchStatusService.logBatchSuccess(batchStudent.getBatchId());
        } catch(Exception exception) {
            studentBatchStatusService.logBatchError(batchStudent.getSsidToDelete(), exception.getMessage(), batchStudent.getBatchId());
        }
    }

}