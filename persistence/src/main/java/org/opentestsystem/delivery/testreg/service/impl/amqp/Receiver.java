package org.opentestsystem.delivery.testreg.service.impl.amqp;

import org.opentestsystem.delivery.testreg.domain.amqp.BatchStudent;
import org.opentestsystem.delivery.testreg.service.ExternalStudentService;
import org.opentestsystem.delivery.testreg.service.StudentBatchStatusService;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.beans.factory.annotation.Autowired;

public class Receiver {

    @Autowired
    RabbitTemplate rabbitTemplate;

    @Autowired
    ExternalStudentService externalStudentService;

    @Autowired
    StudentBatchStatusService studentBatchStatusService;

    public void receiveMessage(Object message) {
        BatchStudent batchStudent;
        try {
            batchStudent = (BatchStudent) message;
        } catch(Exception ex) {
            throw new IllegalArgumentException("Unrecognized object sent to AMQP receiver");
        }
        if(batchStudent.getStudent() != null) {
            upsertStudent(batchStudent);
        } else {
            deleteStudent(batchStudent);
        }
    }

    private void upsertStudent(BatchStudent batchStudent) {
        try {
            externalStudentService.upsertStudent(batchStudent.getStudent());
            studentBatchStatusService.logBatchSuccess(batchStudent.getBatchId());
        } catch(Exception exception) {
            studentBatchStatusService.logBatchError(exception.getMessage(), batchStudent.getBatchId());
        }
    }

    private void deleteStudent(BatchStudent batchStudent) {
        try {
            if(!externalStudentService.deleteStudent(batchStudent.getBatchStudentDelete().getSsid(), batchStudent.getBatchStudentDelete().getStateCode())) {
                throw new IllegalArgumentException("Student with ssid=" + batchStudent.getBatchStudentDelete().getSsid() + " and stateCode=" + batchStudent.getBatchStudentDelete().getStateCode() + " does not exist");
            }
            studentBatchStatusService.logBatchSuccess(batchStudent.getBatchId());
        } catch(Exception exception) {
            studentBatchStatusService.logBatchError(exception.getMessage(), batchStudent.getBatchId());
        }
    }

}