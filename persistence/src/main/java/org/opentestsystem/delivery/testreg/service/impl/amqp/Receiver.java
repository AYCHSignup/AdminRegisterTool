package org.opentestsystem.delivery.testreg.service.impl.amqp;

import org.opentestsystem.delivery.testadmin.service.TestStatusService;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.domain.amqp.BatchStudent;
import org.opentestsystem.delivery.testreg.service.StudentService;
import org.opentestsystem.delivery.testreg.service.TestRegPersister;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoOperations;

public class Receiver {

    @Autowired
    private TestRegPersister studentRepository;

    @Autowired
    private StudentService studentService;

    @Autowired
    private MongoOperations mongoOperations;

    @Autowired
    private TestStatusService testStatusService;

    @Autowired
    RabbitTemplate rabbitTemplate;

    public void receiveMessage(Object message) {
        BatchStudent batchStudent;
        try {
            batchStudent = (BatchStudent) message;
        } catch(Exception ex) {
            throw new IllegalArgumentException("Unrecognized object sent to AMQP receiver");
        }
        if(batchStudent.getStudent() != null) {
            upsertStudent(batchStudent);
        } else {
            deleteStudent(batchStudent);
        }
    }

    private void upsertStudent(BatchStudent batchStudent) {
        try {
            Student existingStudent = studentService.findByStudentIdAndStateAbbreviation(batchStudent.getStudent().getEntityId(), batchStudent.getStudent().getStateAbbreviation());
            if(existingStudent != null) batchStudent.getStudent().setId(existingStudent.getId());
            studentRepository.saveDomainObject(batchStudent.getStudent());
            logBatchSuccess(batchStudent.getBatchId());
        } catch(Exception exception) {
            logBatchError(exception.getMessage(), batchStudent.getBatchId());
        }
    }

    private void deleteStudent(BatchStudent batchStudent) {
        try {
            Student student = studentService.findByStudentIdAndStateAbbreviation(batchStudent.getBatchStudentDelete().getSsid(), batchStudent.getBatchStudentDelete().getStateCode());
            testStatusService.deleteTestStatus(batchStudent.getBatchStudentDelete().getSsid(), batchStudent.getBatchStudentDelete().getStateCode());
            studentRepository.deleteDomainObject(student.getId(), FormatType.STUDENT);
            logBatchSuccess(batchStudent.getBatchId());
        } catch(Exception exception) {
            logBatchError(exception.getMessage(), batchStudent.getBatchId());
        }
    }

    private void logBatchError(String errorMessage, String batchId) {
        mongoOperations.executeCommand("db.studentBatchStatus.update( {_id: \"" + batchId + "\" }, {$inc: { numProcessed: 1, numExceptions: 1 } }, { $addToSet: { exceptions: \""+ errorMessage +  "\"  } } )");
    }

    private void logBatchSuccess(String batchId) {
        mongoOperations.executeCommand("db.studentBatchStatus.update( {_id: \"" + batchId + "\" }, {$inc: { numProcessed: 1, numSuccess: 1 } } )");
    }

}