/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence;

import static org.opentestsystem.delivery.testreg.domain.FormatType.DISTRICT;
import static org.opentestsystem.delivery.testreg.domain.FormatType.GROUPOFDISTRICTS;
import static org.opentestsystem.delivery.testreg.domain.FormatType.GROUPOFINSTITUTIONS;
import static org.opentestsystem.delivery.testreg.domain.FormatType.GROUPOFSTATES;
import static org.opentestsystem.delivery.testreg.domain.FormatType.INSTITUTION;
import static org.opentestsystem.delivery.testreg.domain.FormatType.STATE;

import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.HierarchyLevel;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.convert.converter.Converter;
import org.springframework.core.convert.support.GenericConversionService;

public class HierarchyLevelToFormatTypeConverter implements Converter<HierarchyLevel, FormatType>  {

    @Autowired
    public HierarchyLevelToFormatTypeConverter(final GenericConversionService conversionService) {
        conversionService.addConverter(this);
    }

    @Override
    public FormatType convert(final HierarchyLevel level) {
        return convertFrom(level);
    }
    public static FormatType convertFrom(final HierarchyLevel level) {
        switch(level) {
        case CLIENT:
            return FormatType.CLIENT;
        case STATE:
            return STATE;
        case DISTRICT:
            return DISTRICT;
        case INSTITUTION:
            return INSTITUTION;
        case GROUPOFSTATES:
            return GROUPOFSTATES;
        case GROUPOFDISTRICTS:
            return GROUPOFDISTRICTS;
        case GROUPOFINSTITUTIONS:
            return GROUPOFINSTITUTIONS;
        default:
            throw new IllegalArgumentException("Cannot Convert FormatType " + level + " to Hierarchy level");
        }
    }

}
