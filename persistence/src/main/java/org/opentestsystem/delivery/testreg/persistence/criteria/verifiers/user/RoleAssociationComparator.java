/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria.verifiers.user;

import static org.opentestsystem.delivery.testreg.domain.HierarchyLevel.CLIENT;
import static org.opentestsystem.delivery.testreg.domain.HierarchyLevel.GROUPOFSTATES;
import static org.opentestsystem.delivery.testreg.domain.HierarchyLevel.STATE;

import java.util.Arrays;
import java.util.Comparator;
import java.util.List;

import org.opentestsystem.delivery.testreg.domain.HierarchyLevel;
import org.opentestsystem.delivery.testreg.domain.User.RoleAssociation;

class RoleAssociationComparator implements Comparator<RoleAssociation> {
    List<HierarchyLevel> excludeList = Arrays.asList(
            new HierarchyLevel[]{CLIENT, GROUPOFSTATES, STATE});
    
    @Override
    public int compare(RoleAssociation role1, RoleAssociation role2) {
        /*
         * Two Role Associations are equal when they have the same role and associated entity id and if their hierarchy level
         * is not in exclude list then their State Abbreviation should also match.
         */
        if(roleMatches(role1, role2) && associatedEntityIdMatches(role1, role2) && levelMatches(role1, role2)) {
            
            if(!excludeList.contains(role1.getLevel())) {
                if(stateAbbreviationMatches(role1, role2)) {
                    return 0;
                }
            } else {
                return 0;
            }
            
        }
        return 1; //not Equal
    }
    
    private boolean roleMatches(RoleAssociation role1, RoleAssociation role2) {
        return role1.getRole().equals(role2.getRole());
    }
    
    private boolean associatedEntityIdMatches(RoleAssociation role1, RoleAssociation role2) {
        return role1.getAssociatedEntityId().equals(role2.getAssociatedEntityId());
    }
    
    private boolean stateAbbreviationMatches(RoleAssociation role1, RoleAssociation role2) {
        if(role1.getStateAbbreviation() == null && role2.getStateAbbreviation() == null) return true;
        if(role1.getStateAbbreviation() == null || role2.getStateAbbreviation() == null) return false;
        
        return role1.getStateAbbreviation().equals(role2.getStateAbbreviation());
    }
    
    private boolean levelMatches(RoleAssociation role1, RoleAssociation role2) {
        return role1.getLevel().equals(role2.getLevel());
    }
}
