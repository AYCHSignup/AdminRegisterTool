/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria;

import static org.opentestsystem.delivery.testreg.domain.AnnotationHelper.getFieldLabel;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.opentestsystem.delivery.testreg.domain.Action;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.domain.Sb11SuperEntity;
import org.opentestsystem.delivery.testreg.persistence.ParentEntityClassFinder;
import org.opentestsystem.delivery.testreg.service.impl.Sb11EntityServiceImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.validation.FieldError;

@Component
public class HierarchyLevelPermissionValidator implements Sb11BusinessValidator<Sb11Entity> {

    @Autowired
    private Sb11EntityServiceImpl<? extends Sb11Entity> sb11EntityService;

    @Autowired
    private ParentEntityClassFinder parentEntityClassFinder;

    @Override
    public Action getAction() {
        throw new UnsupportedOperationException("This operation is not supported for this object");
    }

    @SuppressWarnings("unchecked")
    private Class<? extends Sb11Entity> getParentClass(final String parentType) {
        return (Class<? extends Sb11Entity>) parentEntityClassFinder.getParentClass(parentType);
    }

    @Override
    public boolean supports(final Class<? extends Sb11Entity> clazz) {
        return Sb11Entity.class.isAssignableFrom(clazz);
    }

    @Override
    public List<FieldError> validate(final Sb11Entity parentableEntity) {
        if (parentableEntity.getFormatType() == FormatType.CLIENT) {
            return null;
        }
        String parentEntityType = parentableEntity.getParentEntityType().name();
        String parentEntityId = parentableEntity.getParentEntityId();
        List<FieldError> errors = new ArrayList<FieldError>();

        Sb11Entity parent = null;

        switch (parentableEntity.getParentEntityType()) {
        case CLIENT:
        case GROUPOFSTATES:
        case STATE:
            parent = sb11EntityService.findByEntityId(parentEntityId, (Class< Sb11SuperEntity>) getParentClass(parentEntityType));
            break;
        default:
            parent = sb11EntityService.findByEntityIdAndStateAbbreviation(parentEntityId,
                    parentableEntity.getStateAbbreviation(), getParentClass(parentEntityType));
        }

        if (parent == null) {
            String entityIdLabel = getFieldLabel(parentableEntity, "parentEntityId");
            errors.add(new FieldError(parentableEntity.getFormatType().name(), entityIdLabel, parentEntityId, false,
                    null, null, entityIdLabel + " not found in the database for the type " + parentEntityType));
            return errors;
        } else if (StringUtils.isEmpty(parentableEntity.getParentId())) {
            parentableEntity.setParentId(parent.getId());
        } else {
            if (!parentableEntity.getParentId().equals(parent.getId())){
                String entityIdLabel = getFieldLabel(parentableEntity, "parentEntityId");
                errors.add(new FieldError(parentableEntity.getFormatType().name(), entityIdLabel, parentEntityId, false,
                        null, null, "The state of the parent chosen (" +  parentableEntity.getParentEntityType() + " - " + parentableEntity.getParentEntityId()
                        +") does not match the state abbreviation (" + parentableEntity.getStateAbbreviation() +") for this entity"));
            }
        }

        switch (parentableEntity.getParentEntityType()) {
        case CLIENT:
        case GROUPOFSTATES:
            return errors;
        case STATE:
            return isValidState(parentableEntity, parent.getEntityId(), errors);
        default:
            return isValidState(parentableEntity, parent.getStateAbbreviation(), errors);
        }

    }

    private List<FieldError> isValidState(final Sb11Entity parentableEntity, final String parentStateName,
            final List<FieldError> errors) {
        if (!parentableEntity.getStateAbbreviation().equalsIgnoreCase(parentStateName)) {
            String stateAbbreviationLable = getFieldLabel(parentableEntity, "stateAbbreviation");
            errors.add(new FieldError(parentableEntity.getFormatType().name(), stateAbbreviationLable, parentableEntity
                    .getStateAbbreviation(), false, null, null, stateAbbreviationLable
                    + " is not valid for the parent hierarchy"));
        }
        return errors;
    }
}
