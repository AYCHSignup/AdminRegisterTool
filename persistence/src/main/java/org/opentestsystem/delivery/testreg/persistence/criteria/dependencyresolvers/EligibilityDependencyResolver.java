/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria.dependencyresolvers;

import static org.apache.commons.lang.StringUtils.isEmpty;

import javax.annotation.Resource;

import org.opentestsystem.delivery.testreg.domain.Assessment;
import org.opentestsystem.delivery.testreg.domain.DistrictEntity;
import org.opentestsystem.delivery.testreg.domain.ExplicitEligibility;
import org.opentestsystem.delivery.testreg.service.Sb11EntityRepositoryService;
import org.opentestsystem.delivery.testreg.service.Sb11NonEntityRepositoryService;
import org.opentestsystem.shared.search.domain.AbstractSearchRequest;
import org.springframework.stereotype.Component;

@Component
public class EligibilityDependencyResolver implements TestRegistrationEntitiesDependencyResolver<ExplicitEligibility> {

    @Resource(name = "sb11EntityService")
    private Sb11EntityRepositoryService sb11EntityRepositoryService;

    @Resource(name = "sb11NonEntityService")
    private Sb11NonEntityRepositoryService sb11NonEntityRepositoryService;

    @Override
    public void resolveDependency(final ExplicitEligibility eligibility) {

        String districtIdentifier = eligibility.getResponsibleDistrictId();
        String stateAbbreviation = eligibility.getStateAbbreviation();
        String testName = eligibility.getTestName();
        String testVersion = eligibility.getTestVersion();

        if (!isEmpty(districtIdentifier)) {
            eligibility.setResponsibleDistrictMongoId(sb11EntityRepositoryService.findByEntityIdAndStateAbbreviation(districtIdentifier, stateAbbreviation, DistrictEntity.class).getId());
        }
        if (!isEmpty(testName) && !isEmpty(testVersion)) {

            Assessment assessment = new Assessment(testName, testVersion, null);
            AbstractSearchRequest searchRequest = assessment.createAlternateKeySearchRequest();
            eligibility.setAssessmentMongoId(sb11NonEntityRepositoryService.findByAlternateKey(searchRequest, Assessment.class).getId());
        }
    }

}
