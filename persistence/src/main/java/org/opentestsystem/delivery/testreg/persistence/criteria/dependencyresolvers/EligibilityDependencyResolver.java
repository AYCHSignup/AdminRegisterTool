/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.persistence.criteria.dependencyresolvers;

import static org.apache.commons.lang.StringUtils.isEmpty;

import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;

import org.opentestsystem.delivery.testreg.domain.Assessment;
import org.opentestsystem.delivery.testreg.domain.DistrictEntity;
import org.opentestsystem.delivery.testreg.domain.ExplicitEligibility;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.InstitutionEntity;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.persistence.AssessmentRepository;
import org.opentestsystem.delivery.testreg.service.Sb11EntityRepositoryService;
import org.opentestsystem.delivery.testreg.service.Sb11NonEntityRepositoryService;
import org.opentestsystem.delivery.testreg.service.StudentService;
import org.opentestsystem.delivery.testreg.service.TestRegPersister;
import org.opentestsystem.shared.progman.client.ProgManClient;
import org.opentestsystem.shared.progman.client.domain.Tenant;
import org.opentestsystem.shared.progman.client.domain.TenantChain;
import org.opentestsystem.shared.progman.client.domain.TenantType;
import org.opentestsystem.shared.search.domain.AbstractSearchRequest;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.util.CollectionUtils;

@Component
public class EligibilityDependencyResolver implements TestRegistrationEntitiesDependencyResolver<ExplicitEligibility> {

    @Resource(name = "sb11EntityService")
    private Sb11EntityRepositoryService sb11EntityRepositoryService;

    @Resource(name = "sb11NonEntityService")
    private Sb11NonEntityRepositoryService sb11NonEntityRepositoryService;

    @Autowired
    private AssessmentRepository assessmentRepository;

    @Autowired
    private TestRegPersister testRegPersister;

    @Autowired
    private ProgManClient progmanClient;
    
    @Autowired
    private StudentService studentService;


    @Override
    public void resolveDependency(final ExplicitEligibility eligibility) {

        String districtIdentifier = eligibility.getResponsibleDistrictId();
        String stateAbbreviation = eligibility.getStateAbbreviation();

        if (!isEmpty(districtIdentifier)) {
            eligibility.setResponsibleDistrictMongoId(sb11EntityRepositoryService.findByEntityIdAndStateAbbreviation(districtIdentifier, stateAbbreviation, DistrictEntity.class).getId());
        } else if (isEmpty(districtIdentifier) && !isEmpty(stateAbbreviation) && !isEmpty(eligibility.getStudentId ())) {
          Student student = studentService.findByStudentIdAndStateAbbreviation (eligibility.getStudentId (), eligibility.getStateAbbreviation ());
          if (student != null && !isEmpty(student.getDistrictIdentifier ())) {
            eligibility.setResponsibleDistrictId (student.getDistrictIdentifier ());
            eligibility.setResponsibleDistrictMongoId (student.getDistrictEntityMongoId ());
          }
        }
        Assessment resolved = resolveAssessmentForStudent(eligibility);
        if (resolved != null) {
            eligibility.setAssessmentMongoId(resolved.getId());
        }
    }

    public Assessment resolveAssessmentForStudent(final ExplicitEligibility eligibility){
        Assessment retAssessment = null;
        if (!isEmpty(eligibility.getTestName()) && !isEmpty(eligibility.getTestVersion())) {
            //note we are querying this test & version w/out a tenant in the hopes that there is only one assessment loaded
            Assessment assessment = new Assessment(eligibility.getTestName(), eligibility.getTestVersion(), null);
            AbstractSearchRequest searchRequest = assessment.createAlternateKeySearchRequest();
            SearchResponse<Assessment> assessmentEntities = assessmentRepository.search(searchRequest);
            Assessment assessmentEntity = null;
            if (!CollectionUtils.isEmpty(assessmentEntities.getSearchResults())) {
                if (assessmentEntities.getSearchResults().size() == 1) {
                    //this is the cheapest way to get the assessment
                    assessmentEntity = assessmentEntities.getSearchResults().get(0);
                } else {
                    Student toSearch = new Student();
                    toSearch.setEntityId( eligibility.getStudentId());
                    toSearch.setStateAbbreviation(eligibility.getStateAbbreviation());
                    AbstractSearchRequest studentSearchRequest = toSearch.createAlternateKeySearchRequest();
                    Student dbStudent = sb11NonEntityRepositoryService.findByAlternateKey(studentSearchRequest, Student.class);
                    //if there are more than one, we need to calculate tenancy from the eligiblity's student's institution.
                    InstitutionEntity dbInstitution = sb11EntityRepositoryService.findByEntityIdAndStateAbbreviation(dbStudent.getInstitutionIdentifier(), eligibility.getStateAbbreviation(), InstitutionEntity.class);
                    Map<TenantType, String> tenantQueryArgs = new HashMap<TenantType, String>();
                    String parentId = dbInstitution.getId();
                    FormatType parentType = dbInstitution.getFormatType();
                    Sb11Entity parent = dbInstitution;
                    while (parentType != null) {
                        if (parent == null) {
                            parent = this.testRegPersister.findById(parentId, parentType);
                        }
                        if (parent != null) {
                            tenantQueryArgs.put(parent.getTenantType(), parent.getEntityId());
                            parentId = parent.getParentId();
                            parentType = parent.getParentEntityType() == null ? null : FormatType.valueOf(parent.getParentEntityType().toString());
                            parent = null;
                        }
                    }

                    TenantChain tc = progmanClient.getTenantChain(tenantQueryArgs);

                    for (Assessment dbAssessment : assessmentEntities.getSearchResults()) {
                        if (assessmentEntity != null) {
                            break;
                        }
                        for (Tenant tenant : tc.getTenants()) {
                            if (tenant.getId().equals(dbAssessment.getTenantId())){
                                assessmentEntity = dbAssessment;
                                break;
                            }
                        }

                    }
                }
            }
            retAssessment = assessmentEntity;
        }
        return retAssessment;
    }

}
