/*
Educational Online Test Delivery System Copyright (c) 2013 American Institutes for Research

Distributed under the AIR Open Source License, Version 1.0 See accompanying file AIR-License-1_0.txt or at
http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 */

package org.opentestsystem.delivery.testreg.transformer.domain;

import org.apache.commons.lang.StringUtils;
import org.opentestsystem.delivery.testreg.domain.MnaAlertType;
import org.opentestsystem.shared.mna.client.domain.MnaSeverity;
import org.opentestsystem.shared.mna.client.service.AlertBeacon;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

@Component
public class DwConfigs {

    private static final Logger LOGGER = LoggerFactory.getLogger(DwConfigs.class);

    @Autowired
    private AlertBeacon alertBeacon;

    private DwConfig sbacConfig;
    private DwConfig localConfig;

    private static final int PORT_DEFAULT = 22;
    private static final String REMOTE_DIR_DEFAULT = "/";
    private static final String ASSESSMENT_TYPE_DEFAULT = "formative,summative,interim";

    // always need to have an sbac configuration
    // local configuration is optional

    @Autowired
    public void addSbacDwConfig(@Value("${dw.sbac.lz.pub.key.userid}") final String lzPubKeyUserid,
            @Value("${dw.sbac.host}") final String lzHostname, @Value("${dw.sbac.port}") final int lzPort,
            @Value("${dw.sbac.user}") final String lzUser, @Value("${dw.sbac.remote.dir}") final String lzRemoteDir,
            @Value("${student.identity.share}") final boolean shareStudentIdentityData,
            @Value("${dw.sbac.import.types:}") final String assessmentTypesForImport) {

        String fieldsInError = null;

        // all fields are required EXCEPT: dw.sbac.port (defaults to 22), dw.sbac.remote.dir (defaults to /), and
        // dw.sbac.import.types (defaults to "formative,summative,interim")
        // the share identity data field is a boolean so it should be defaulted to false which should be safe

        if (lzPubKeyUserid == null) {
            fieldsInError += "dw.sbac.lz.pub.key.userid, ";
        }
        if (lzHostname == null) {
            fieldsInError += "dw.sbac.host, ";
        }
        if (lzUser == null) {
            fieldsInError += "dw.sbac.user";
        }

        if (fieldsInError != null) {
            LOGGER.error("Missing required progman configuration: " + fieldsInError);
            alertBeacon.sendAlert(MnaSeverity.ERROR, MnaAlertType.DW_EXPORT_SETUP.toString(),
                    "Missing required progman configuration: " + fieldsInError);
        } else {
            setSbacConfig(new DwConfig(lzPubKeyUserid, lzHostname, (lzPort == 0 ? PORT_DEFAULT : lzPort), lzUser,
                    (lzRemoteDir == null ? REMOTE_DIR_DEFAULT : lzRemoteDir), shareStudentIdentityData,
                    (StringUtils.isEmpty(assessmentTypesForImport) ? ASSESSMENT_TYPE_DEFAULT : assessmentTypesForImport),
                    DwConfigType.SBAC));
        }
    }

    @Autowired
    public void addLocalDwConfig(@Value("${dw.local.lz.pub.key.userid}") final String lzPubKeyUserid,
            @Value("${dw.local.host}") final String lzHostname, @Value("${dw.local.port}") final int lzPort,
            @Value("${dw.local.user}") final String lzUser, @Value("${dw.local.remote.dir}") final String lzRemoteDir,
            @Value("${student.identity.share}") final boolean shareStudentIdentityData,
            @Value("${dw.local.import.types}") final String assessmentTypesForImport) {

        boolean atLeastOneFieldFilledIn = false;
        String fieldsInError = null;

        // local config is optional, but if at least one field is defined, the assumption is that all fields should be
        // defined
        // all fields are then required EXCEPT: dw.sbac.port (defaults to 22), dw.sbac.remote.dir (defaults to /), and
        // dw.sbac.import.types (defaults to "formative,summative,interim")
        // the share identity data field is irrelevant

        if (lzPubKeyUserid == null) {
            fieldsInError += "dw.sbac.lz.pub.key.userid, ";
        } else {
            atLeastOneFieldFilledIn = true;
        }

        if (lzHostname == null) {
            fieldsInError += "dw.sbac.host, ";
        } else {
            atLeastOneFieldFilledIn = true;
        }

        if (lzPort != 0) {
            atLeastOneFieldFilledIn = true;
        }

        if (lzUser == null) {
            fieldsInError += "dw.sbac.user";
        } else {
            atLeastOneFieldFilledIn = true;
        }

        if (lzRemoteDir != null) {
            atLeastOneFieldFilledIn = true;
        }

        if (assessmentTypesForImport != null) {
            atLeastOneFieldFilledIn = true;
        }

        if (atLeastOneFieldFilledIn && fieldsInError != null) {
            LOGGER.error("Missing required progman configuration: " + fieldsInError);
            alertBeacon.sendAlert(MnaSeverity.ERROR, MnaAlertType.DW_EXPORT_SETUP.toString(),
                    "Missing required progman configuration: " + fieldsInError);
        } else {

            // always share student identity data with the 'local' data warehouse
            setLocalConfig(new DwConfig(lzPubKeyUserid, lzHostname, lzPort, lzUser, lzRemoteDir, true,
                    assessmentTypesForImport, DwConfigType.LOCAL));
        }
    }

    public DwConfig getSbacConfig() {
        return sbacConfig;
    }

    public void setSbacConfig(final DwConfig sbacConfig) {
        this.sbacConfig = sbacConfig;
    }

    public DwConfig getLocalConfig() {
        return localConfig;
    }

    public void setLocalConfig(final DwConfig localConfig) {
        this.localConfig = localConfig;
    }

    public class DwConfig {

        private final DwConfigType configType;

        private final String lzPubKeyUserid;
        private final String lzHostname;
        private final int lzPort;
        private final String lzUser;
        private final String lzRemoteDir;

        private final boolean shareStudentIdentityData;

        private final String[] assessmentTypesForExport;

        public DwConfig(final String inLzPubKeyUserid, final String inLzHostname, final int inLzPort,
                final String inLzUser, final String inLzRemoteDir, final boolean inShareStudentIdentityData,
                final String inAssessmentTypesForExport, final DwConfigType inConfigType) {
            lzPubKeyUserid = inLzPubKeyUserid;
            lzHostname = inLzHostname;
            lzPort = inLzPort;
            lzUser = inLzUser;
            lzRemoteDir = inLzRemoteDir;
            shareStudentIdentityData = inShareStudentIdentityData;
            assessmentTypesForExport = inAssessmentTypesForExport.split(",");
            configType = inConfigType;
        }

        public String getLzPubKeyUserid() {
            return lzPubKeyUserid;
        }

        public String getLzHostname() {
            return lzHostname;
        }

        public int getLzPort() {
            return lzPort;
        }

        public String getLzUser() {
            return lzUser;
        }

        public String getLzRemoteDir() {
            return lzRemoteDir;
        }

        public boolean isShareStudentIdentityData() {
            return shareStudentIdentityData;
        }

        public String[] getAssessmentTypesForExport() {
            return assessmentTypesForExport;
        }

        public DwConfigType getConfigType() {
            return configType;
        }

    }

    public enum DwConfigType {
        SBAC, LOCAL;
    }

}
