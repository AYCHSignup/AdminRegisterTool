/*
Educational Online Test Delivery System Copyright (c) 2013 American Institutes for Research

Distributed under the AIR Open Source License, Version 1.0 See accompanying file AIR-License-1_0.txt or at
http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 */

package org.opentestsystem.delivery.testadmin.domain.schedule;

import java.util.List;
import java.util.Objects;

import org.opentestsystem.delivery.testadmin.domain.AccessibilityEquipment;
import org.opentestsystem.delivery.testadmin.domain.Seat;
import org.opentestsystem.delivery.testadmin.domain.TestPlatform;
import org.opentestsystem.delivery.testreg.domain.Assessment;
import org.opentestsystem.delivery.testreg.domain.Student;

/**
 * A ScheduledSeat is an extension of the Seat class and also associates the seat with a particular Student and
 * Assessment
 * 
 */
public class ScheduledSeat extends Seat {

    private static final long serialVersionUID = 8920509205461506703L;

    // Seat has test platform only as string, this needs the full object
    private TestPlatform testPlatformObj;
    // Seat has accessibility equipment as Strings, this needs full objects
    private List<AccessibilityEquipment> accessibilityEquipmentObjs;

    private Student student;

    private Assessment assessment;

    /*
     * Needed for manual scheduling. Instead of making multiple calls (1 per student), this will hold all eligible
     * assessments that this student can take. May or may not be populated from Scheduler???
     */
    private List<Assessment> eligibleAssessments;

    private boolean seatScheduled = false;

    private boolean manuallyScheduled = false;

    public ScheduledSeat() {
        super();
    }

    public ScheduledSeat(Seat seat) {

        super(seat.getSeatNumber(), seat.getTestPlatform(), seat.getAccessibilityEquipments());

        // need to convert test platform and accessibility equipment into objects
    }

    public boolean isSeatScheduled() {
        return seatScheduled;
    }

    public boolean isManuallyScheduled() {
        return manuallyScheduled;
    }

    public void setManuallyScheduled(final boolean inManuallyScheduled) {
        this.manuallyScheduled = inManuallyScheduled;
    }

    public void setSeatScheduled(boolean seatScheduled) {
        this.seatScheduled = seatScheduled;
    }

    public TestPlatform getTestPlatformObj() {
        return testPlatformObj;
    }

    public void setTestPlatformObj(TestPlatform testPlatformObj) {
        this.testPlatformObj = testPlatformObj;
    }

    public List<AccessibilityEquipment> getAccessibilityEquipmentObjs() {
        return accessibilityEquipmentObjs;
    }

    public void setAccessibilityEquipmentObjs(List<AccessibilityEquipment> accessibilityEquipmentObjs) {
        this.accessibilityEquipmentObjs = accessibilityEquipmentObjs;
    }

    public Student getStudent() {
        return student;
    }

    public void setStudent(Student student) {
        this.student = student;
    }

    public Assessment getAssessment() {
        return assessment;
    }

    public void setAssessment(Assessment assessment) {
        this.assessment = assessment;
    }

    @Override
    public boolean equals(Object obj) {

        if (obj == null) {
            return false;
        }

        if (!(obj instanceof ScheduledSeat)) {
            return false;
        }

        ScheduledSeat otherObj = (ScheduledSeat) obj;

        return super.equals(obj) && Objects.equals(this.student, otherObj.getStudent())
                && Objects.equals(this.assessment, otherObj.getAssessment());
    }

    @Override
    public int hashCode() {
        return Objects.hash(super.hashCode(), this.student, this.assessment);
    }

    public List<Assessment> getEligibleAssessments() {
        return eligibleAssessments;
    }

    public void setEligibleAssessments(List<Assessment> eligibleAssessments) {
        this.eligibleAssessments = eligibleAssessments;
    }

}
