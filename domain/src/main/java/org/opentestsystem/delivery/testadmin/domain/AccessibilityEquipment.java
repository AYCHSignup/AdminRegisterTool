/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testadmin.domain;

import java.util.List;
import java.util.Objects;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.hibernate.validator.constraints.NotBlank;
import org.opentestsystem.delivery.testreg.domain.ImplicitEligibilityRule;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.index.CompoundIndex;
import org.springframework.data.mongodb.core.index.CompoundIndexes;
import org.springframework.data.mongodb.core.mapping.Document;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;

@Document
@JsonIgnoreProperties(ignoreUnknown = true)
@CompoundIndexes(value = { @CompoundIndex(name = "nameAndCategoryAndType", def = "{'name':1, 'category':1, 'type':1}", unique = true) })
public class AccessibilityEquipment implements TestAdminBase {

    private static final long serialVersionUID = 1830323774952289121L;
    private static final String GET_RESOURCE_NAME = "/accessibilityEquipment/";

    @Id
    private String id;

    @NotBlank(message = "{accessibility.category.blank}")
    private String category;

    @NotNull(message = "{accessibility.type.blank}")
    private EquipmentType type;

    @NotBlank(message = "{accessibility.name.blank}")
    private String name;

    @Valid
    private List<ImplicitEligibilityRule> rules;

    public AccessibilityEquipment() {
        super();
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getCategory() {
        return category;
    }

    public void setCategory(String category) {
        this.category = category;
    }

    public EquipmentType getType() {
        return type;
    }

    public void setType(EquipmentType type) {
        this.type = type;
    }

    public List<ImplicitEligibilityRule> getRules() {
        return rules;
    }

    public void setRules(List<ImplicitEligibilityRule> rules) {
        this.rules = rules;
    }

    public enum EquipmentType {
        SOFTWARE, HARDWARE;
    }

    @JsonProperty
    public String getUrl() {
        return GET_RESOURCE_NAME + this.id;
    }

    @Override
    public boolean equals(Object obj) {

        if (obj == null) {
            return false;
        }

        if (!(obj instanceof AccessibilityEquipment)) {
            return false;
        }

        AccessibilityEquipment otherObj = (AccessibilityEquipment) obj;

        return Objects.equals(this.name, otherObj.getName()) && Objects.equals(this.type, otherObj.getType())
                && Objects.equals(this.category, otherObj.getCategory());
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.name, this.type, this.category);
    }
}
