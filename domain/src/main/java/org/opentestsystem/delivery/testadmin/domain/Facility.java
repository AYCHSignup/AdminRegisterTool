/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testadmin.domain;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import javax.validation.Valid;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.RandomStringUtils;
import org.hibernate.validator.constraints.NotBlank;
import org.hibernate.validator.constraints.NotEmpty;
import org.opentestsystem.delivery.testreg.domain.FieldLabel;
import org.opentestsystem.delivery.testreg.domain.constraints.Alphanumeric;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.index.CompoundIndex;
import org.springframework.data.mongodb.core.index.CompoundIndexes;
import org.springframework.data.mongodb.core.mapping.Document;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;

@Document
@JsonIgnoreProperties(ignoreUnknown = true)
@CompoundIndexes(value = { @CompoundIndex(name = "nameAndInstitution", def = "{'facilityName':1, 'institutionIdentifier':1}", unique = true) })
public class Facility implements TestAdminBase {

    private static final long serialVersionUID = 1830323774952289120L;

    private static final String GET_RESOURCE_NAME = "/facility/";

    @Id
    private String id;

    @NotBlank(message = "{facility.name.blank}")
    @Alphanumeric(spacesAllowed = true, message = "{facility.name.alphanumeric}")
    protected String facilityName;

    @NotBlank(message = "{facility.institutionidentifier.blank}")
    @Alphanumeric(message = "{facility.institutionidentifier.alphanumeric}")
    @Size(max = 40, message = "{facility.institutionidentifier.size.max}")
    @FieldLabel("InstitutionIdentifier")
    protected String institutionIdentifier;

    protected String institutionId; // mongo id of the institution

    protected String location;

    @NotEmpty(message = "{facility.seatconfiguration.empty}")
    @Valid
    protected List<SeatConfiguration> seatConfigurations;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getFacilityName() {
        return facilityName;
    }

    public void setFacilityName(String facilityName) {
        this.facilityName = facilityName;
    }

    public String getInstitutionIdentifier() {
        return institutionIdentifier;
    }

    public void setInstitutionIdentifier(String institutionIdentifier) {
        this.institutionIdentifier = institutionIdentifier;
    }

    public String getInstitutionId() {
        return institutionId;
    }

    public void setInstitutionId(String institutionId) {
        this.institutionId = institutionId;
    }

    public String getLocation() {
        return location;
    }

    public void setLocation(String location) {
        this.location = location;
    }

    public List<Seat> getSeats() {

        createSeatsFromConfiguration();

        List<Seat> seats = new ArrayList<Seat>();
        if (CollectionUtils.isNotEmpty(seatConfigurations)) {
            for (SeatConfiguration config : this.seatConfigurations) {
                seats.addAll(config.getSeats());
            }
        }

        return seats;
    }

    public List<SeatConfiguration> getSeatConfigurations() {
        return seatConfigurations;
    }

    public void setSeatConfigurations(List<SeatConfiguration> seatConfigurations) {
        this.seatConfigurations = seatConfigurations;
    }

    public void createSeatsFromConfiguration() {
        int seatNumber = 0;
        if (CollectionUtils.isNotEmpty(seatConfigurations)) {
            for (SeatConfiguration config : seatConfigurations) {
                if (config.getNumberOfSeats() != null) {
                    List<Seat> seats = new ArrayList<Seat>();
                    for (int i = 0; i < config.getNumberOfSeats(); i++) {
                        Seat seat = new Seat(++seatNumber, config.getTestPlatform(), config.getAccessibilityEquipments());
                        seats.add(seat);
                    }
                    config.setSeats(seats);
                    config.setConfigId(RandomStringUtils.randomAlphanumeric(16));
                }
            }
        }
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static class SeatConfiguration implements Serializable {

        private static final long serialVersionUID = 7008932168976376115L;

        private String configId;

        @NotNull(message = "{facility.seatconfiguration.numberofseats.blank}")
        @Min(value = 1, message = "{facility.seatconfiguration.numberofseats.numeric}")
        @Max(value = 1000, message = "{facility.seatconfiguration.numberofseats.max}")
        private Integer numberOfSeats;

        @NotBlank(message = "{facility.seatconfiguration.testplatform.blank}")
        private String testPlatform;

        private List<String> accessibilityEquipments;

        private List<Seat> seats;

        public String getConfigId() {
            return configId;
        }

        public void setConfigId(String configId) {
            this.configId = configId;
        }

        public Integer getNumberOfSeats() {
            return numberOfSeats;
        }

        public void setNumberOfSeats(Integer numberOfSeats) {
            this.numberOfSeats = numberOfSeats;
        }

        public String getTestPlatform() {
            return testPlatform;
        }

        public void setTestPlatform(String testPlatform) {
            this.testPlatform = testPlatform;
        }

        public List<String> getAccessibilityEquipments() {
            return accessibilityEquipments;
        }

        public void setAccessibilityEquipments(List<String> accessibilityEquipments) {
            this.accessibilityEquipments = accessibilityEquipments;
        }

        public List<Seat> getSeats() {
            return seats;
        }

        public void setSeats(List<Seat> seats) {
            this.seats = seats;
        }

    }

    @JsonProperty
    public String getUrl() {
        return GET_RESOURCE_NAME + this.id;
    }

    @Override
    public boolean equals(Object obj) {

        if (obj == null) {
            return false;
        }

        if (!(obj instanceof Facility)) {
            return false;
        }

        Facility otherObj = (Facility) obj;

        return Objects.equals(this.facilityName, otherObj.getFacilityName())
                && Objects.equals(this.institutionIdentifier, otherObj.getInstitutionIdentifier());
    }

    @Override
    public int hashCode() {

        return Objects.hash(this.facilityName, this.institutionIdentifier);
    }

}
