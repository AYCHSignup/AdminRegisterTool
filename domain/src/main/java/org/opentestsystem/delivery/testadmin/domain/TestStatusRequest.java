/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testadmin.domain;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import javax.validation.constraints.NotNull;

import org.hibernate.validator.constraints.NotBlank;
import org.joda.time.DateTime;
import org.opentestsystem.delivery.testreg.domain.constraints.ValidStateCode;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;

@SuppressWarnings({ "PMD.ShortVariable" })
@JsonIgnoreProperties(ignoreUnknown = true)
public class TestStatusRequest implements Serializable {

    private static final long serialVersionUID = -6515566689625044467L;

    private String id;

    @NotBlank(message = "{teststatus.testId.blank}")
    private String testId;

    @NotBlank(message = "{teststatus.stateAbbreviation.blank}")
    @ValidStateCode
    private String stateAbbreviation;

    @NotBlank(message = "{teststatus.studentId.blank}")
    private String studentId;

    @NotBlank(message = "{teststatus.status.blank}")
    private String status;

    @NotNull(message = "{teststatus.opportunity.blank}")
    private Integer opportunity;

    @NotNull(message = "{teststatus.updatedTime.blank}")
    private DateTime updatedTime;

    public Integer getOpportunity() {
        return opportunity;
    }

    public void setOpportunity(Integer opportunity) {
        this.opportunity = opportunity;
    }

    public String getStudentId() {
        return studentId;
    }

    public DateTime getUpdatedTime() {
        return updatedTime;
    }

    @JsonDeserialize
    public void setUpdatedTime(DateTime updatedTime) {
        this.updatedTime = updatedTime;
    }

    public void setStudentId(String studentId) {
        this.studentId = studentId;
    }

    public String getStatus() {
        return status;
    }

    public String getStateAbbreviation() {
        return stateAbbreviation;
    }

    public void setStateAbbreviation(String stateAbbreviation) {
        this.stateAbbreviation = stateAbbreviation;
    }

    public String getTestId() {
        return testId;
    }

    public void setTestId(String testId) {
        this.testId = testId;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public static List<TestStatus> converToTestStatus(List<TestStatusRequest> requestList) {
        List<TestStatus> statusList = new ArrayList<TestStatus>();
        for (TestStatusRequest request : requestList) {
            TestStatus status = new TestStatus();
            status.setAssessmentId(request.getTestId());
            status.setOpportunity(request.getOpportunity());
            status.setStateAbbreviation(request.getStateAbbreviation());
            status.setStudentId(request.getStudentId());
            status.setStatus(Status.valueOf(request.getStatus()));
            if (status.getStatus() == Status.STARTED) {
                status.setActualStart(request.getUpdatedTime());
            } else if (status.getStatus() == Status.COMPLETED) {
                status.setActualComplete(request.getUpdatedTime());
            }
            statusList.add(status);
        }
        return statusList;
    }
}
