/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testadmin.domain.constraintvalidators;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.opentestsystem.delivery.testadmin.domain.Proctor;
import org.opentestsystem.delivery.testadmin.domain.Proctor.AvailabilityWindow;

public class DuplicateWindowValidationUtil {
    
    public Set<AvailabilityWindow> getDuplicateWindows(Proctor proctor) {
        Set<AvailabilityWindow> uniqueAvailabilityWindowSet = new HashSet<>();       
        Set<AvailabilityWindow> duplicateWindows = new HashSet<>();
        
        for(AvailabilityWindow availabilityWindow: proctor.getAvailabilityWindow()) {
            if(!uniqueAvailabilityWindowSet.add(availabilityWindow)) {
                duplicateWindows.add(availabilityWindow);
            }
        }    
        return duplicateWindows;
    }
    
    public List<Integer> getDuplicateIndices(Proctor proctor) {
        Set<AvailabilityWindow> uniqueAvailabilityWindowSet = new HashSet<>();       
        List<AvailabilityWindow> windowList = proctor.getAvailabilityWindow();
        
        List<Integer> duplicateIndices = new ArrayList<>();
        for(int i=0; i<windowList.size(); i++) {
            
            AvailabilityWindow window = windowList.get(i);
            if(!uniqueAvailabilityWindowSet.add(window)) {
                duplicateIndices.add(i);
            }
        }
        
        return duplicateIndices;
    }
    
    public boolean hasDuplicateWindows(Proctor proctor) {
        return getDuplicateIndices(proctor).isEmpty() ? false : true;
    }
}