/*
Educational Online Test Delivery System Copyright (c) 2013 American Institutes for Research

Distributed under the AIR Open Source License, Version 1.0 See accompanying file AIR-License-1_0.txt or at
http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 */

package org.opentestsystem.delivery.testadmin.domain.schedule;

import java.util.Objects;
import java.util.TreeSet;

import org.opentestsystem.delivery.testadmin.domain.Facility;

/**
 * A ScheduledFacility is an extension of Facility that adds an ordered set of ScheduledTimeSlots which define the time
 * slots for this facility on a particular day and what is allocated to each.
 * 
 */
public class ScheduledFacility extends Facility {

    private static final long serialVersionUID = -9039942323390668548L;

    private TreeSet<ScheduledTimeSlot> timeSlots;

    public ScheduledFacility() {
        super();
        this.timeSlots = new TreeSet<ScheduledTimeSlot>();
    }

    public ScheduledFacility(final Facility facility) {
        this();
        setId(facility.getId());
        this.facilityName = facility.getFacilityName();
        this.institutionId = facility.getInstitutionId();
        this.institutionIdentifier = facility.getInstitutionIdentifier();
        this.location = facility.getLocation();
        this.seatConfigurations = facility.getSeatConfigurations();
    }

    public TreeSet<ScheduledTimeSlot> getTimeSlots() {
        return timeSlots;
    }

    public void setTimeSlots(final TreeSet<ScheduledTimeSlot> timeSlots) {
        this.timeSlots = timeSlots;
    }

    public void addTimeSlot(final ScheduledTimeSlot timeSlot) {

        this.timeSlots.add(timeSlot);
    }

    @Override
    public boolean equals(Object obj) {

        if (obj == null) {
            return false;
        }

        if (!(obj instanceof ScheduledFacility)) {
            return false;
        }

        ScheduledFacility otherObj = (ScheduledFacility) obj;

        return super.equals(obj) && Objects.equals(this.timeSlots, otherObj.getTimeSlots());
    }

    @Override
    public int hashCode() {

        return Objects.hash(super.hashCode(), this.timeSlots);
    }

}
