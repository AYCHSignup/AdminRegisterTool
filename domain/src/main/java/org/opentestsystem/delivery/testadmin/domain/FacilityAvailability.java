/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testadmin.domain;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.apache.commons.lang.RandomStringUtils;
import org.hibernate.validator.constraints.NotBlank;
import org.hibernate.validator.constraints.NotEmpty;
import org.joda.time.DateTime;
import org.opentestsystem.delivery.testadmin.domain.Facility.SeatConfiguration;
import org.opentestsystem.delivery.testadmin.domain.constraints.ValidFacilityAvailabilityDate;
import org.opentestsystem.delivery.testreg.domain.constraints.Alphanumeric;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;
import org.springframework.util.CollectionUtils;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;

@Document
@JsonIgnoreProperties(ignoreUnknown = true)
@ValidFacilityAvailabilityDate
public class FacilityAvailability implements TestAdminBase {

    private static final long serialVersionUID = -7637255997529927194L;

    private static final String GET_RESOURCE_NAME = "/facilityAvailability/";

    @Id
    private String id;

    private String facilityId;

    @NotBlank(message = "{facilityavailability.name.blank}")
    @Alphanumeric(spacesAllowed = true, message = "{facilityavailability.name.alphanumeric}")
    private String facilityName;

    @NotBlank(message = "{facilityavailability.stateAbbreviation.blank}")
    private String stateAbbreviation;

    @NotBlank(message = "{facilityavailability.institutionidentifier.blank}")
    @Alphanumeric(message = "{facilityavailability.institutionidentifier.alphanumeric}")
    @Size(max = 40, message = "{facilityavailability.institutionidentifier.size.max}")
    private String institutionIdentifier;

    private String institutionId;

    @NotNull(message = "{facilityavailability.fromdate.blank}")
    private DateTime fromDate;

    @NotNull(message = "{facilityavailability.todate.blank}")
    private DateTime toDate;

    @NotEmpty(message = "{facilityavailability.facilitytimes.empty}")
    @Valid
    private List<FacilityTimeSlot> facilityTimes;

    @NotNull(message = "{facilityavailability.availability.blank}")
    private Availability status;

    public String getId() {
        return this.id;
    }

    public void setId(final String id) {
        this.id = id;
    }

    public String getFacilityName() {
        return this.facilityName;
    }

    public void setFacilityName(final String facilityName) {
        this.facilityName = facilityName;
    }

    public String getFacilityId() {
        return this.facilityId;
    }

    public void setFacilityId(final String facilityId) {
        this.facilityId = facilityId;
    }

    public String getInstitutionIdentifier() {
        return this.institutionIdentifier;
    }

    public String getInstitutionId() {
        return this.institutionId;
    }

    public void setInstitutionId(final String institutionId) {
        this.institutionId = institutionId;
    }

    public void setInstitutionIdentifier(final String institutionIdentifier) {
        this.institutionIdentifier = institutionIdentifier;
    }

    public DateTime getFromDate() {
        return this.fromDate;
    }

    public void setFromDate(final DateTime fromDate) {
        this.fromDate = fromDate;
    }

    public DateTime getToDate() {
        return this.toDate;
    }

    public void setToDate(final DateTime toDate) {
        this.toDate = toDate;
    }

    public List<FacilityTimeSlot> getFacilityTimes() {
        return this.facilityTimes;
    }

    public void setFacilityTimes(final List<FacilityTimeSlot> facilityTimes) {
        this.facilityTimes = facilityTimes;
    }

    public Availability getStatus() {
        return this.status;
    }

    public void setStatus(final Availability status) {
        this.status = status;
    }

    public String getAvailability() {
        return this.status.toString();
    }

    public String getStateAbbreviation() {
        return this.stateAbbreviation;
    }

    public void setStateAbbreviation(final String stateAbbreviation) {
        this.stateAbbreviation = stateAbbreviation;
    }

    /**
     * Defines facility availability/unavailability and testing slots
     */
    @JsonIgnoreProperties(ignoreUnknown = true)
    public static class FacilityTimeSlot implements Serializable {

        private static final long serialVersionUID = -1450185936207802443L;

        @Valid
        private TimeSlot timeSlot;

        private List<SeatConfiguration> seatConfigurations;

        public FacilityTimeSlot() {
            this(null, null);
        }

        public FacilityTimeSlot(final TimeSlot timeSlot, final List<SeatConfiguration> seatConfigurations) {
            this.seatConfigurations = seatConfigurations;
            this.timeSlot = timeSlot;
        }

        public TimeSlot getTimeSlot() {
            return this.timeSlot;
        }

        public void setTimeSlot(final TimeSlot timeSlot) {
            this.timeSlot = timeSlot;
        }

        public List<SeatConfiguration> getSeatConfigurations() {
            return this.seatConfigurations;
        }

        public void setSeatConfigurations(final List<SeatConfiguration> seatConfigurations) {
            this.seatConfigurations = seatConfigurations;
        }

        public void createSeatsFromConfiguration() {
            int seatNumber = 0;
            if (!CollectionUtils.isEmpty(this.seatConfigurations)) {
                for (final SeatConfiguration config : this.seatConfigurations) {
                    final List<Seat> seats = new ArrayList<Seat>();
                    for (int i = 0; i < config.getNumberOfSeats(); i++) {
                        final Seat seat = new Seat(++seatNumber, config.getTestPlatform(),
                                config.getAccessibilityEquipments());
                        seats.add(seat);
                    }
                    config.setSeats(seats);
                    config.setConfigId(RandomStringUtils.randomAlphanumeric(16));
                }
            }
        }

    }

    @JsonProperty
    public String getUrl() {
        return GET_RESOURCE_NAME + this.id;
    }
}
