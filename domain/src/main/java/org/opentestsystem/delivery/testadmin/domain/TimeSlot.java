/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testadmin.domain;

import java.util.Arrays;
import java.util.List;
import java.util.Objects;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.bson.types.ObjectId;
import org.joda.time.DateTime;
import org.opentestsystem.delivery.testadmin.domain.Affinity.AffinityType;
import org.opentestsystem.delivery.testadmin.domain.constraints.ValidTimeSlot;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;
import org.springframework.util.CollectionUtils;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

@Document
@JsonIgnoreProperties(ignoreUnknown = true)
@ValidTimeSlot
public class TimeSlot implements TestAdminBase, Comparable<TimeSlot> {

    private static final long serialVersionUID = -3964502357240057123L;

    @Id
    private final String id;

    @NotNull(message = "{timeslot.starttime.blank}")
    protected DateTime startTime;

    @NotNull(message = "{timeslot.endtime.blank}")
    protected DateTime endTime;

    @Valid
    protected List<Affinity> affinities;

    public TimeSlot() {
        this(null, null);
    }

    public TimeSlot(final DateTime startTime, final DateTime endTime, final Affinity... affinities) {
        this.startTime = startTime;
        this.endTime = endTime;
        this.id = new ObjectId().toStringMongod();

        if (affinities != null && affinities.length > 0) {
            this.affinities = Arrays.asList(affinities);
        }
    }

    public String getId() {
        return this.id;
    }

    public DateTime getStartTime() {
        return this.startTime;
    }

    public void setStartTime(final DateTime startTime) {
        this.startTime = startTime;
    }

    public DateTime getEndTime() {
        return this.endTime;
    }

    public void setEndTime(final DateTime endTime) {
        this.endTime = endTime;
    }

    @Override
    public boolean equals(final Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final TimeSlot other = (TimeSlot) obj;

        return Objects.equals(this.startTime, other.getStartTime()) && Objects.equals(this.endTime, other.getEndTime());
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.startTime, this.endTime);
    }

    @Override
    public int compareTo(final TimeSlot inTimeSlot) {
        return new Long(getStartTime().getMillis()).compareTo(inTimeSlot.getStartTime().getMillis());
    }

    public List<Affinity> getAffinities() {
        return this.affinities;
    }

    public void setAffinities(final List<Affinity> affinities) {
        this.affinities = affinities;
    }

    public boolean hasSubjectAffinity() {
        if (hasAffinities()) {
            for (final Affinity affinity : this.affinities) {
                if (affinity.getType() == AffinityType.SUBJECT) {
                    return true;
                }
            }
        }
        return false;
    }

    public boolean hasGradeAffinity() {
        if (hasAffinities()) {
            for (final Affinity affinity : this.affinities) {
                if (affinity.getType() == AffinityType.GRADE) {
                    return true;
                }
            }
        }
        return false;
    }

    public boolean hasAssessmentAffinity() {
        if (hasAffinities()) {
            for (final Affinity affinity : this.affinities) {
                if (affinity.getType() == AffinityType.ASSESSMENT) {
                    return true;
                }
            }
        }
        return false;
    }

    /*
     * public boolean hasStrictAffinity() {
     * return (assessment != null ? assessment.isStrict() : false) || (grade != null ? grade.isStrict() : false)
     * || (subject != null ? subject.isStrict() : false);
     * }
     */

    public boolean hasAffinities() {
        return !CollectionUtils.isEmpty(this.affinities);
    }
}
