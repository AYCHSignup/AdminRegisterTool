/*
Educational Online Test Delivery System Copyright (c) 2013 American Institutes for Research

Distributed under the AIR Open Source License, Version 1.0 See accompanying file AIR-License-1_0.txt or at
http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 */

package org.opentestsystem.delivery.testreg.domain;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.index.CompoundIndex;
import org.springframework.data.mongodb.core.index.CompoundIndexes;
import org.springframework.data.mongodb.core.mapping.Document;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

@Document
@JsonIgnoreProperties(ignoreUnknown = true)
@CompoundIndexes(value = {
        @CompoundIndex(name = "studentid", def = "{'student.entityId':1, 'student.stateAbbreviation':1}", unique = true),
        @CompoundIndex(name = "inWindowWithTenant", def = "{'assessments.tenantId':1, 'assessments.testWindow.beginWindow':1, 'assessments.testWindow.endWindow':1}", unique = false),
        @CompoundIndex(name = "assessmentMongoId", def = "{'assessments._id':1}"),
        @CompoundIndex(name = "academicYearIdx", def = "{'assessments.academicYear':1, 'assessments.type':1, 'student._id':1}"),
        @CompoundIndex(name = "studentMongoId", def = "{'student._id':1}", unique = true) })
public class EligibleStudent implements Serializable {

    private static final long serialVersionUID = -8720376115436476492L;

    @Id
    private String id;

    private Student student;

    private Set<Assessment> assessments;

    private Map<String, String> testNameFormMap; // This property is provided for easy access to TestForm and/or
                                                 // TestName that the student is eligible for

    public EligibleStudent() {
        assessments = new HashSet<Assessment>(5);
    }

    public EligibleStudent(final Student inStudent) {
        student = inStudent;
        assessments = new HashSet<Assessment>(5);
    }

    public String getId() {
        return id;
    }

    public void setId(final String inId) {
        this.id = inId;
    }

    public Student getStudent() {
        return student;
    }

    public void setStudent(final Student inStudent) {
        this.student = inStudent;
    }

    public Set<Assessment> getAssessments() {

        if (assessments == null) {
            return Collections.emptySet();
        } else {
            return assessments;
        }
    }

    public List<Assessment> getAssessmentsAsList() {
        if (assessments == null) {
            return Collections.emptyList();
        } else {
            return new ArrayList<Assessment>(assessments);
        }

    }

    public void setAssessments(final Set<Assessment> assessments) {
        this.assessments = assessments;
    }

    public void addAssessment(final Assessment assessment) {
        if (assessments == null) {
            assessments = new HashSet<Assessment>(5);
        }

        assessments.add(assessment);
    }

    public void removeAssessment(final Assessment assessment) {
        if (assessments != null && !assessments.isEmpty()) {
            assessments.remove(assessment);
        }
    }

    public boolean hasAssessments() {
        if (assessments == null || assessments.isEmpty()) {
            return false;
        }

        return true;
    }

    public void addTestNameAndForm(String testName, String testForm) {
        if (testNameFormMap == null) {
            testNameFormMap = new HashMap<>();
        }

        testNameFormMap.put(testName, testForm);
    }

    public Map<String, String> getTestNameFormMap() {
        if (testNameFormMap == null) {
            return Collections.emptyMap();
        }

        return testNameFormMap;
    }

}
