/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.domain.constraintvalidators;

import javax.validation.ConstraintValidator;
import javax.validation.ConstraintValidatorContext;

import org.opentestsystem.delivery.testreg.domain.Assessment;
import org.opentestsystem.delivery.testreg.domain.Assessment.TestWindow;
import org.opentestsystem.delivery.testreg.domain.constraints.ValidTestWindow;

public class TestWindowValidator implements ConstraintValidator<ValidTestWindow, Assessment> {

    @SuppressWarnings("unused")
    private static final String NUM_OF_OPPORTUNITIES_INVALID_MESSAGE = "{assessment.numopportunities.not.valid}";
    private static final String NUM_OF_OPPORTUNITIES_MESSAGE = "{assessment.numopportunities.required}";

    @Override
    public void initialize(final ValidTestWindow constraintAnnotation) {

    }

    @Override
    public boolean isValid(final Assessment assessment, final ConstraintValidatorContext context) {

        TestWindow[] testWindow = assessment.getTestWindow();

        if (testWindow.length > 1) {
            int i = 0;
            for (TestWindow testObj : testWindow) {
                Integer numOfOpportunities = testObj.getNumOpportunities();
                if (numOfOpportunities == null) {
                    context.disableDefaultConstraintViolation();
                    context.buildConstraintViolationWithTemplate(NUM_OF_OPPORTUNITIES_MESSAGE)
                            .addPropertyNode("testWindow[" + i + "].numOpportunities") //
                            .addConstraintViolation();
                    return false;
                }
                i++;
            }
        }

        return true;
    }

}
