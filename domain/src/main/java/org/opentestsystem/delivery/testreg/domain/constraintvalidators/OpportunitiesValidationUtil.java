/*
Educational Online Test Delivery System Copyright (c) 2013 American Institutes for Research

Distributed under the AIR Open Source License, Version 1.0 See accompanying file AIR-License-1_0.txt or at
http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 */

package org.opentestsystem.delivery.testreg.domain.constraintvalidators;

import javax.validation.ConstraintValidatorContext;

import org.opentestsystem.delivery.testreg.domain.Assessment;
import org.opentestsystem.delivery.testreg.domain.Assessment.TestWindow;

public enum OpportunitiesValidationUtil {

    // singleton instance
    INSTANCE;


    private static final String NUM_GLOBAL_OPPORTUNITIES = "numGlobalOpportunities";
    private static final String DELAY_RULE = "delayRule";
    private static final String NUM_OF_OPPORTUNITIES_COUNT = "{assessment.numopportunities.count}";
    private static final String DELAY_RULE_MESSAGE = "{assessment.delayrule.not.valid}";
    private static final String DELAY_RULE_REQUIRED_MESSAGE = "{assessment.delayrule.required}";

    private OpportunitiesValidationUtil() {
        // private constructor for enum
    }

    public boolean validate(final Assessment assessmentObj, final ConstraintValidatorContext context) {

        TestWindow[] testWindow = assessmentObj.getTestWindow();
        if(assessmentObj.getNumGlobalOpportunities() == null ){
            return true;//Validation handle else where
        }
        if ( assessmentObj.getNumGlobalOpportunities() == 1) {
            if (assessmentObj.getDelayRule() != null) {
                addConstraintViolation(context, DELAY_RULE_MESSAGE, DELAY_RULE);
                return false;
            }
        }
        if ( assessmentObj.getNumGlobalOpportunities() > 1) {
            if (assessmentObj.getDelayRule()  == null) {
                addConstraintViolation(context, DELAY_RULE_REQUIRED_MESSAGE, DELAY_RULE);
                return false;
            }
        }
        return true;
    }

    private void addConstraintViolation(final ConstraintValidatorContext context, final String message, final String node) {
        context.disableDefaultConstraintViolation();
        context.buildConstraintViolationWithTemplate(message)
        .addPropertyNode(node) // This constraint validates across fields but messages are specific to a node. So lets add the field name where this violation occurred
        .addConstraintViolation();
    }
}
