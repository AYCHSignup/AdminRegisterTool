/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.domain;

import static org.apache.commons.lang.StringUtils.isNotBlank;
import static org.apache.commons.lang.StringUtils.trim;
import static org.apache.commons.lang.math.NumberUtils.toInt;
import static org.springframework.core.annotation.AnnotationUtils.getAnnotation;
import static org.springframework.util.ReflectionUtils.findField;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.lang.StringUtils;
import org.opentestsystem.delivery.testreg.domain.constraints.Numeric;

public final class Sb11EntityUtils {

    private Sb11EntityUtils() {}

    public static <T extends Sb11Entity> boolean hasANumericTypeEntityId(final T entity) {
        Numeric numeric = getAnnotation(findField(entity.getClass(), "entityId"), Numeric.class);
        return isNotBlank(entity.getEntityId()) && (numeric != null);
    }

    public static <T extends Sb11Entity> String getNumericEntityId(final T entity) {
        return String.valueOf(toInt(trim(entity.getEntityId())));
    }

    /**
     * This is done to trim the leading zeros for numeric based entity ids.
     * 
     * @param entity
     *            Entity Object
     */
    public static <T extends Sb11Entity> void convertEntityIdToNumericValue(final T entity) {
        try {
            BeanUtils.setProperty(entity, "entityId", getNumericEntityId(entity));
        } catch (IllegalAccessException | InvocationTargetException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * 
     * Returns Camel cased string to human readable text.Take a look at the examples below <br>
     * <code>
     * <br>
        "lowercase"         => lowercase<br>
        "Class"             => Class<br>
        "MyClass",          => My Class<br>
        "HTML",             => HTML<br>
        "PDFLoader",        => PDF Loader<br>
        "AString",          => A String<br>
        "SimpleXMLParser", =>  Simple XML Parser<br>
        "GL11Version",     =>  GL 11 Version<br>
        "99Bottles",       =>  99 Bottles<br>
        "May5",            =>  May 5<br>
        "BFG9000",         =>  BFG 9000<br>
        <br>
     * </code>
     * 
     * 
     * @param label
     *            CamelCased label
     * @return Normal Human readable text.
     */
    public static String getHumanReadableName(final String label) {
        return StringUtils.join(StringUtils.splitByCharacterTypeCamelCase(label), ' ');
    }
    
    /**
     * Given a {@link HierarchyLevel}, this method returns an empty instance of {@link Sb11Entity}
     * 
     * @param level
     *      Hierarchy Level
     * @return
     *      Empty Sb11Entity
     */
    public static Sb11Entity getEmptySb11Entity(HierarchyLevel level) {
        
        Class<? extends Sb11Entity> sb11EntityClass = level.getEntityClass();
        try {
            Constructor<? extends Sb11Entity> cs = sb11EntityClass.getConstructor();
            return cs.newInstance();
            
        } catch (NoSuchMethodException | SecurityException | InstantiationException | 
                IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
            throw new RuntimeException("Problem getting Sb11Entity from Hierarchy Level.", e);
        }
    }
    
    /**
     * Sets Property on a {@link Sb11Entity}
     * 
     * @param sb11Entity
     *      Sb11Entity
     * @param property
     *      property name on the Sb11Entity
     * @param value
     *      Value of the property to be set
     */
    public static void setProperty(Sb11Entity sb11Entity, String property, Object value) {
        try {
            BeanUtils.setProperty(sb11Entity, property, value);
        }
        catch (IllegalAccessException | InvocationTargetException e) {
            throw new RuntimeException("Problem setting property: " + property, e);
        }
    }
}
