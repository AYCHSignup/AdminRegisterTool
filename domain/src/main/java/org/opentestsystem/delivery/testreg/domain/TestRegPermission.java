/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.domain;

import org.opentestsystem.shared.security.domain.SbacPermission;

import com.google.common.base.Function;
import com.google.common.collect.Iterables;
import com.google.common.collect.Lists;

//---------------------------------------------------------------------------------------------
// NOTE: To find actual usage, you need to do a String search for the enum value
// since the @Secured annotation uses the String literal (since it can't use the enum)
//---------------------------------------------------------------------------------------------

public enum TestRegPermission {
    ASSESSMENT_READ("Assessment Read"),
    ASSESSMENT_MODIFY("Assessment Modify"),
    ASSESSMENT_IMPORT("Assessment Import"),
    ENTITY_READ("Entity Read"),
    ENTITY_MODIFY("Entity Modify"),
    ENTITY_UPLOAD("Entity Upload"),
    TEMPLATE_DOWNLOAD("Template Download"),
    STUDENT_READ("Student Read"),
    STUDENT_MODIFY("Student Modify"),
    STUDENT_UPLOAD("Student Upload"),
    ACCOMMODATIONS_READ("Accommodations Read"),
    ACCOMMODATIONS_MODIFY("Accommodations Modify"),
    ACCOMMODATIONS_UPLOAD("Accommodations Upload"),
    USER_READ("User Read"),
    USER_MODIFY("User Modify"),
    USER_UPLOAD("User Upload"),
    STUDENTGROUP_READ("StudentGroup Read"),
    STUDENTGROUP_MODIFY("StudentGroup Modify"),
    STUDENTGROUP_UPLOAD("StudentGroup Upload"),
    WAREHOUSE_EXTRACT_ADMIN("Warehouse Extract Admin"),
    ELIGIBILITY_EXTRACT("Eligibility Extract"),
    ELIGIBILITY_MODIFY("Eligibility Modify"),
    CLIENT_ADMINISTRATOR("Client Administrator");

    private static final String[] NAMES_AS_STRING = EnumNamesAsString.NAME_VALUES_AS_STRING(values());

    private final String title;

    private TestRegPermission(final String inTitle) {
        this.title = inTitle;
    }

    public String getTitle() {
        return this.title;
    }

    public String toSpringRoleName() {
        return SbacPermission.ROLE_PREFIX + getTitle();
    }

    @Override
    public String toString() {
        return this.title;
    }

    public static String[] valuesAsString() {
        return NAMES_AS_STRING;
    }

    private static final class EnumNamesAsString {
        public static <T extends Enum> String[] NAME_VALUES_AS_STRING(final T[] enumValues) {
            return Iterables.toArray(Iterables.transform(Lists.newArrayList(enumValues), new Function<T, String>() {
                @Override
                public String apply(final T enumIn) {
                    if (enumIn != null) {
                        return enumIn.name();
                    }
                    return "";
                }
            }), String.class);
        }
    }

    public static TestRegPermission lookup(final String permission) {
        for (TestRegPermission testRegPermission : values()) {
            String str = permission.startsWith("ROLE_") ? permission.substring(5) : permission;
            if (testRegPermission.title.equals(str)) {
                return testRegPermission;
            }
        }
        throw new IllegalArgumentException("no permission found for: " + permission);
    }
}
