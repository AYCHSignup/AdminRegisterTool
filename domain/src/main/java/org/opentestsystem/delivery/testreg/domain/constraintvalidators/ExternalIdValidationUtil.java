/*
Educational Online Test Delivery System Copyright (c) 2013 American Institutes for Research

Distributed under the AIR Open Source License, Version 1.0 See accompanying file AIR-License-1_0.txt or at
http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 */

package org.opentestsystem.delivery.testreg.domain.constraintvalidators;

import java.lang.reflect.InvocationTargetException;
import java.util.regex.Pattern;

import javax.validation.ConstraintValidatorContext;

import org.apache.commons.beanutils.BeanUtils;
import org.opentestsystem.delivery.testreg.domain.HierarchyLevel;
import org.springframework.util.StringUtils;

public enum ExternalIdValidationUtil {

    // singleton instance
    INSTANCE;

    private static final String ALPHANUMERIC_REGEX = "^[a-zA-Z\\d]*$";
    private static final String STATE_REGEX = "^[a-zA-z][a-zA-Z]$";

    private ExternalIdValidationUtil() {
        // private constructor for enum
    }

    public boolean validate(final Object value, final ConstraintValidatorContext context, final String idField,
            final String typeField, final String stateMessageKey) {

        String parentEntityType = getProperty(value, typeField);
        if (!StringUtils.hasText(parentEntityType)) {
            return true; // Not handled here
        }

        CharSequence externalId = getProperty(value, idField);
        if (!StringUtils.hasText(externalId)) {
            return true; // This condition is handled elsewhere
        }

        HierarchyLevel externaltype = HierarchyLevel.valueOf(getProperty(value, typeField));

        if (externaltype == HierarchyLevel.STATE) {
            context.disableDefaultConstraintViolation();
            context
            .buildConstraintViolationWithTemplate(stateMessageKey)
            .addPropertyNode(idField) //This constraint validates across fields but messages are specific to a node. So lets add the field name where this violation occurred
            .addConstraintViolation();
            return Pattern.matches(STATE_REGEX, externalId);

        } else {
            /*
             * Default Constraint violation is disabled so that a node name can be added but it reverts to use
             * default message template to preserve the message from the constraint itself.
             */
            context.disableDefaultConstraintViolation();
            context
            .buildConstraintViolationWithTemplate(context.getDefaultConstraintMessageTemplate())
            .addPropertyNode(idField)
            .addConstraintViolation();
            return Pattern.matches(ALPHANUMERIC_REGEX, externalId);
        }

    }

    private String getProperty(final Object value, final String property) {
        try {
            return BeanUtils.getProperty(value, property);
        } catch (IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {
            return null;
        }
    }

}
