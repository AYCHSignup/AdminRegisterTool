/*
Educational Online Test Delivery System Copyright (c) 2013 American Institutes for Research

Distributed under the AIR Open Source License, Version 1.0 See accompanying file AIR-License-1_0.txt or at
http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 */

package org.opentestsystem.delivery.testreg.domain;

import static org.apache.commons.lang.StringUtils.isNotEmpty;

import java.util.HashMap;
import java.util.Map;

import javax.validation.constraints.Size;

import org.hibernate.validator.constraints.NotBlank;
import org.opentestsystem.delivery.testreg.domain.constraints.Alpha;
import org.opentestsystem.delivery.testreg.domain.constraints.Alphanumeric;
import org.opentestsystem.delivery.testreg.domain.constraints.ValidStateCode;
import org.opentestsystem.delivery.testreg.domain.search.ExplicitEligibilitySearchRequest;
import org.opentestsystem.shared.search.domain.AbstractSearchRequest;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.index.CompoundIndex;
import org.springframework.data.mongodb.core.index.CompoundIndexes;
import org.springframework.data.mongodb.core.index.Indexed;
import org.springframework.data.mongodb.core.mapping.Document;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.google.common.base.Objects;
import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.annotations.XStreamOmitField;

@XStreamAlias("Test")
@SuppressWarnings({ "PMD.ShortVariable" })
@Document
@JsonIgnoreProperties(ignoreUnknown = true)
@CompoundIndexes(value = { @CompoundIndex(name = "eligibilityAlternate", def = "{'studentId':1, 'stateAbbreviation':1,'testName':1,'testVersion':1}", unique = true) })
@XmlNotNull({ "subject", "testName", "assessmentMongoId" })
@XmlOrderSequence({ "subject", "testName", "assessmentMongoId", "testForm" })
public class ExplicitEligibility implements Sb11NonEntity {

    private static final long serialVersionUID = 4895827093563543608L;

    public static final FormatType FORMAT_TYPE = FormatType.EXPLICITELIGIBILITY;

    @XStreamOmitField
    @Id
    private String id;

    @XStreamOmitField
    @Indexed
    @NotBlank(message = "{expliciteligibility.studentid.blank}")
    @Alphanumeric(message = "{expliciteligibility.studentid.alphanumeric}")
    @Size(max = 40, message = "{expliciteligibility.studentid.size.max}")
    @FieldLabel("StudentIdentifier")
    private String studentId;

    @XStreamOmitField
    @NotBlank(message = "{expliciteligibility.administrationname.blank}")
    @Alphanumeric(message = "{expliciteligibility.administrationname.alphanumeric}")
    @Size(max = 60, message = "{expliciteligibility.administrationname.size.max}")
    @FieldLabel("AssessmentAdministrationAssessmentFamily")
    private String administrationName;

    @XStreamOmitField
    @NotBlank(message = "{stateabbreviation.blank}")
    @ValidStateCode
    @FieldLabel("StateAbbreviation")
    private String stateAbbreviation;

    @XStreamOmitField
    @Alphanumeric(message = "{expliciteligibility.responsibledistrictid.alphanumeric}")
    @Size(max = 40, message = "{expliciteligibility.responsibledistrictid.size.max}")
    @FieldLabel("ResponsibleDistrictIdentifier")
    private String responsibleDistrictId;

    @XStreamOmitField
    private String responsibleDistrictMongoId;

    @XStreamAlias("TestId")
    private String assessmentMongoId;

    @XStreamAlias("SubjectCode")
    @NotBlank(message = "{expliciteligibility.subject.blank}")
    @Alphanumeric(message = "{expliciteligibility.subject.alphanumeric}")
    @Size(max = 20, message = "{expliciteligibility.subject.size.max}")
    @FieldLabel("Subject")
    private String subject;

    @XStreamAlias("TestName")
    @NotBlank(message = "{expliciteligibility.testname.blank}")
    @Alphanumeric(dashesAllowed = true, spacesAllowed = true, parenthesisAllowed = true, message = "{expliciteligibility.testname.alphanumeric}")
    @Size(max = 200, message = "{expliciteligibility.testname.size.max}")
    @FieldLabel("TestName")
    private String testName;

    @XStreamOmitField
    @NotBlank(message = "{expliciteligibility.testversion.blank}")
    @Alphanumeric(decimalAllowed = true, message = "{expliciteligibility.testversion.alphanumeric}")
    @Size(max = 50, message = "{expliciteligibility.testversion.size.max}")
    @FieldLabel("TestVersion")
    private String testVersion;

    @XStreamAlias("TestForm")
    @Alphanumeric(dashesAllowed = true, message = "{expliciteligibility.testform.alphanumeric}")
    @Size(max = 50, message = "{expliciteligibility.testform.size.max}")
    @FieldLabel("TestForm")
    private String testForm;

    @XStreamOmitField
    @Alpha(message = "{delete.alpha}")
    @Size(max = 6, message = "{delete.size.max}")
    @FieldLabel("Delete")
    private String delete;

    public static class Builder implements TestRegistrationBuilder<ExplicitEligibility> {

        private final Object[] builderVals;

        public Builder(final Object... inVals) {
            this.builderVals = inVals;
        }

        public ExplicitEligibility build() {

            ExplicitEligibility builtObject = new ExplicitEligibility();

            builtObject.setStudentId((String) builderVals[0]);
            builtObject.setAdministrationName((String) builderVals[1]);
            builtObject.setStateAbbreviation(isNotEmpty((String) builderVals[2]) ? ((String) builderVals[2]).toUpperCase() : "");
            builtObject.setResponsibleDistrictId((String) builderVals[3]);
            builtObject.setSubject((String) builderVals[4]);
            builtObject.setTestName((String) builderVals[5]);
            builtObject.setTestVersion((String) builderVals[6]);
            builtObject.setTestForm((String) builderVals[7]);
            builtObject.setDelete((String) builderVals[8]);

            return builtObject;

        }

    }

    public String getId() {
        return id;
    }

    public void setId(final String inId) {
        this.id = inId;
    }

    public String getStudentId() {
        return studentId;
    }

    public void setStudentId(final String inStudentId) {
        this.studentId = inStudentId;
    }

    public String getSubject() {
        return subject;
    }

    public void setSubject(final String inSubject) {
        this.subject = inSubject;
    }

    public String getTestName() {
        return testName;
    }

    public void setTestName(final String inTestName) {
        this.testName = inTestName;
    }

    public String getTestForm() {
        return testForm;
    }

    public void setTestForm(final String inTestForm) {
        this.testForm = inTestForm;
    }

    public String getDelete() {
        return delete;
    }

    public void setDelete(final String inDelete) {
        this.delete = inDelete;
    }

    public String getAdministrationName() {
        return administrationName;
    }

    public void setAdministrationName(final String inAdministrationName) {
        this.administrationName = inAdministrationName;
    }

    public String getStateAbbreviation() {
        return stateAbbreviation;
    }

    public void setStateAbbreviation(final String inStateAbbreviation) {
        this.stateAbbreviation = inStateAbbreviation;
    }

    public String getResponsibleDistrictId() {
        return responsibleDistrictId;
    }

    public void setResponsibleDistrictId(final String inResponsibleDistrictId) {
        this.responsibleDistrictId = inResponsibleDistrictId;
    }

    public String getResponsibleDistrictMongoId() {
        return responsibleDistrictMongoId;
    }

    public void setResponsibleDistrictMongoId(final String inResponsibleDistrictMongoId) {
        this.responsibleDistrictMongoId = inResponsibleDistrictMongoId;
    }

    public String getTestVersion() {
        if (isNotEmpty(testVersion)) {
            try {
                return Double.parseDouble(testVersion) + "";
            } catch (NumberFormatException ex) {
            }
        }
        return testVersion;
    }

    public void setTestVersion(String testVersion) {
        this.testVersion = testVersion;
    }

    public String getAssessmentMongoId() {
        return assessmentMongoId;
    }

    public void setAssessmentMongoId(String assessmentMongoId) {
        this.assessmentMongoId = assessmentMongoId;
    }

    @Override
    public FormatType getFormatType() {
        return FORMAT_TYPE;
    }

    // TODO replace with correct array when fields are known
    @Override
    public String[] toStringArray() {
        return new String[] { };
    }

    @Override
    public String getAlternateKey() {
        return new StringBuilder().append("studentId: ").append(studentId).append(", stateAbbreviation: ")
                .append(stateAbbreviation).append(", testName: ").append(testName).append(", testVersion: ")
                .append(testVersion).toString();
    }

    @Override
    public AbstractSearchRequest createAlternateKeySearchRequest() {
        Map<String, String[]> reqMap = new HashMap<String, String[]>();
        reqMap.put(ExplicitEligibilitySearchRequest.SEARCH_KEY_STUDENT_ID, new String[] { studentId });
        reqMap.put(ExplicitEligibilitySearchRequest.SEARCH_KEY_STATE_ABBR, new String[] { stateAbbreviation });
        reqMap.put(ExplicitEligibilitySearchRequest.SEARCH_KEY_TEST_NAME, new String[] { testName });
        reqMap.put(ExplicitEligibilitySearchRequest.SEARCH_KEY_TEST_VERSION, new String[] { testVersion });
        ExplicitEligibilitySearchRequest request = new ExplicitEligibilitySearchRequest(reqMap);

        return request;
    }

    // TODO this is not needed and will change globally
    @Override
    public Action getAction() {
        return "DELETE".equals(delete) ? Action.DEL : Action.UPD;
    }

    @Override
    public String toString() {
        return Objects.toStringHelper(getClass()).add("id", id).add("studentId", studentId)
                .add("stateAbbreviation", stateAbbreviation).add("responsibleDistrictId", responsibleDistrictId)
                .add("responsibleDistrictMongoId", responsibleDistrictMongoId)
                .add("assessmentMongoId", assessmentMongoId).add("subject", subject).add("testName", testName)
                .add("testVersion", testVersion).add("testForm", testForm).toString();

    }

}
