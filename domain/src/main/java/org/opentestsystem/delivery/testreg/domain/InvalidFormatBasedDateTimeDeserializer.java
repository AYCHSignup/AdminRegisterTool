/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.domain;

import java.io.IOException;

import org.joda.time.DateTime;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.ReadableDateTime;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.datatype.joda.deser.DateTimeDeserializer;

import static com.fasterxml.jackson.datatype.joda.cfg.FormatConfig.DEFAULT_DATEONLY_FORMAT;
import static com.fasterxml.jackson.datatype.joda.cfg.FormatConfig.DEFAULT_DATETIME_PRINTER;

public class InvalidFormatBasedDateTimeDeserializer extends JsonDeserializer<DateTime> {

    DateTimeDeserializer dateTimeDeSerializer;

    public InvalidFormatBasedDateTimeDeserializer() {
        dateTimeDeSerializer = new DateTimeDeserializer(DateTime.class);
    }
    
    
    public DateTime deserialize(JsonParser jp, DeserializationContext ctxt)
            throws IOException, JsonProcessingException {
        
        try {
            ReadableDateTime dateTime = dateTimeDeSerializer.deserialize(jp, ctxt);
            if (dateTime != null) {
                //check if year is 4 digits
                if (String.valueOf(dateTime.getYear()).length() != 4) {
                    throw new IllegalArgumentException();
                }
                return dateTime.toDateTime();
            }
            return null;
            
        } catch (IllegalFieldValueException exception) {
            throw convertToInvalidFormatException(exception);
            
        } catch(IllegalArgumentException exception) {
            throw new InvalidFormatException("date", jp.getText(), DateTime.class);
            
        }
    }
    
    private InvalidFormatException convertToInvalidFormatException(IllegalFieldValueException exception) {
            return new InvalidFormatException(exception.getFieldName(), 
                exception.getIllegalValueAsString(), DateTime.class);
    }
}
