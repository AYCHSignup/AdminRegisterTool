/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.domain.constraintvalidators;

import java.util.Map;

import javax.annotation.Resource;
import javax.validation.ConstraintValidator;
import javax.validation.ConstraintValidatorContext;

import org.apache.commons.lang.StringUtils;
import org.opentestsystem.delivery.testreg.domain.StateEntity;
import org.opentestsystem.delivery.testreg.domain.constraints.ValidStateName;

public class StateNameValidator implements ConstraintValidator<ValidStateName, StateEntity> {

    private static final String ORIGIN_FIELD_FOR_VIOLATION = "entityName";

    @Resource(name = "stateMap")
    private Map<String, String> stateMap;

    @Override
    public void initialize(final ValidStateName inConstraintAnnotation) {
    }

    @Override
    public boolean isValid(final StateEntity inValue, final ConstraintValidatorContext inContext) {
        if (inValue != null && !StringUtils.isBlank(inValue.getEntityId()) && stateMap.containsKey(inValue.getEntityId())){
            if (!stateMap.get(inValue.getEntityId()).equalsIgnoreCase(inValue.getEntityName())) {
                /*
                 * This validation is a sort of cross-field( @ClassLevel) validation. We need to pass a field for the
                 * constraint processor to lookup an invalid value. So lets add a node to the message.
                 */
                inContext.disableDefaultConstraintViolation();
                inContext.buildConstraintViolationWithTemplate(inContext.getDefaultConstraintMessageTemplate())
                .addPropertyNode(ORIGIN_FIELD_FOR_VIOLATION)
                .addConstraintViolation();
                return false;
            }
        }
        return true;
    }
}
