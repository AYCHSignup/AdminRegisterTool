/*
Educational Online Test Delivery System Copyright (c) 2013 American Institutes for Research

Distributed under the AIR Open Source License, Version 1.0 See accompanying file AIR-License-1_0.txt or at
http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 */

package org.opentestsystem.delivery.testreg.domain;

import static org.apache.commons.lang.StringUtils.isNotEmpty;
import static org.apache.commons.lang.StringUtils.isNumeric;
import static org.apache.commons.lang.StringUtils.trim;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;
import javax.validation.constraints.Size;

import org.hibernate.validator.constraints.NotBlank;
import org.joda.time.DateTime;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.opentestsystem.delivery.testreg.domain.constraints.Alpha;
import org.opentestsystem.delivery.testreg.domain.constraints.Alphanumeric;
import org.opentestsystem.delivery.testreg.domain.constraints.Ascii;
import org.opentestsystem.delivery.testreg.domain.constraints.BirthDateFormat;
import org.opentestsystem.delivery.testreg.domain.constraints.DateFormat;
import org.opentestsystem.delivery.testreg.domain.constraints.LanguageCode;
import org.opentestsystem.delivery.testreg.domain.constraints.StudentEntryDate;
import org.opentestsystem.delivery.testreg.domain.constraints.StudentOrigin;
import org.opentestsystem.delivery.testreg.domain.constraints.ValidEnumType;
import org.opentestsystem.delivery.testreg.domain.constraints.ValidStateCode;
import org.opentestsystem.delivery.testreg.domain.search.StudentSearchRequest;
import org.opentestsystem.shared.search.domain.AbstractSearchRequest;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.index.CompoundIndex;
import org.springframework.data.mongodb.core.index.CompoundIndexes;
import org.springframework.data.mongodb.core.index.Indexed;
import org.springframework.data.mongodb.core.mapping.Document;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import com.google.common.base.Objects;
import com.google.common.collect.ObjectArrays;
import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.annotations.XStreamAsAttribute;
import com.thoughtworks.xstream.annotations.XStreamConverter;
import com.thoughtworks.xstream.annotations.XStreamOmitField;

/**
 * The StudentIdentifier in Student class is being used as an entityId.
 */
@SuppressWarnings({ "PMD.ShortVariable" })
@Document
@JsonIgnoreProperties(ignoreUnknown = true)
@CompoundIndexes(value = {
        @CompoundIndex(name = "idAndState", def = "{'entityId':1, 'stateAbbreviation':1}", unique = true),
        @CompoundIndex(name = "externalSsidAndState", def = "{'externalSsid':1, 'stateAbbreviation':1}", unique = true) })
@StudentOrigin
@StudentEntryDate
@XStreamAlias("Student")
@XmlNotNull({ "stateAbbreviation", "lastName", "firstName", "birthDate", "entityId", "externalSsid",
        "gradeLevelWhenAssessed", "gender", "migrantStatus", "title3ProgramType" })
// Based on Validations, UI and Student Package Schema
@XmlOrderSequence({ "stateAbbreviation", "districtIdentifier", "institutionIdentifier", "lastName", "firstName",
        "middleName", "birthDate", "entityId", "externalSsid", "gradeLevelWhenAssessed", "gender", "hispanicOrLatino",
        "americanIndianOrAlaskaNative", "asian", "blackOrAfricanAmerican", "white", "nativeHawaiianOrPacificIsland",
        "twoOrMoreRaces", "iDEAIndicator", "lepStatus", "section504Status", "disadvantageStatus", "languageCode",
        "title3ProgressStatus", "migrantStatus", "firstEntryDateIntoUsSchool", "lepEntryDate", "lepExitDate",
        "title3ProgramType", "primaryDisabilityType", })
public class Student implements Sb11NonEntity, MultiRowExportable {

    private static final long serialVersionUID = -8120474136096618225L;

    private static final String GET_RESOURCE_NAME = "/student/";

    public static final FormatType FORMAT_TYPE = FormatType.STUDENT;

    private static final String DATE_FORMAT = "yyyy-MM-dd";

    @Id
    @XStreamOmitField
    private String id;

    @NotBlank(message = "{stateabbreviation.blank}")
    @ValidStateCode
    @FieldLabel("StateAbbreviation")
    @XStreamOmitField
    private String stateAbbreviation;

    @Indexed
    @NotBlank(message = "{student.studentId.blank}")
    @Alphanumeric(message = "{student.studentId.alphanumeric}")
    @Size(max = 40, message = "{student.studentId.size.max}")
    @FieldLabel("StudentIdentifier")
    @XStreamAlias("StudentIdentifier")
    private String entityId;

    @NotBlank(message = "{student.institutionidentifier.blank}")
    @Alphanumeric(message = "{student.institutionidentifier.alphanumeric}")
    @Size(max = 40, message = "{student.institutionidentifier.size.max}")
    @FieldLabel("ResponsibleInstitutionIdentifier")
    @XStreamOmitField
    private String institutionIdentifier;

    @XStreamOmitField
    private String institutionEntityMongoId;

    @Alphanumeric(message = "{student.districtidentifier.alphanumeric}")
    @Size(max = 40, message = "{student.districtidentifier.size.max}")
    @FieldLabel("ResponsibleDistrictIdentifier")
    @XStreamOmitField
    private String districtIdentifier;

    @XStreamOmitField
    private String districtEntityMongoId;

    @Ascii(isExtended = true, message = "{student.firstname.alphanumeric}")
    @Size(min = 0, max = 35, message = "{student.firstname.size.max}")
    @FieldLabel("FirstName")
    @XStreamAlias("FirstName")
    private String firstName;

    @Ascii(isExtended = true, message = "{student.lastname.alphanumeric}")
    @Size(min = 0, max = 35, message = "{student.lastname.size.max}")
    @FieldLabel("LastOrSurname")
    @XStreamAlias("LastOrSurname")
    private String lastName;

    @Ascii(isExtended = true, message = "{student.middlename.alphanumeric}")
    @Size(min = 0, max = 35, message = "{student.middlename.size.max}")
    @FieldLabel("MiddleName")
    @XStreamAlias("MiddleName")
    private String middleName;

    @BirthDateFormat(datePattern = DATE_FORMAT, message = "{student.birthdate.format}")
    @FieldLabel("Birthdate")
    @XStreamAlias("Birthdate")
    private String birthDate;

    @Indexed
    @NotBlank(message = "{student.externalssid.blank}")
    @Alphanumeric(message = "{student.externalssid.alphanumeric}")
    @Size(max = 50, message = "{student.externalssid.size.max}")
    @FieldLabel("ExternalSSID")
    @XStreamAlias("AlternateSSID")
    private String externalSsid;

    @NotBlank(message = "{student.entrygradelevel.blank}")
    @ValidEnumType(types = { "IT", "PR", "PK", "TK", "KG", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10",
            "11", "12", "13", "PS", "UG" }, message = "{student.entrygradelevel.type}")
    @FieldLabel("GradeLevelWhenAssessed")
    @XStreamAlias("GradeLevelWhenAssessed")
    private String gradeLevelWhenAssessed;

    @NotBlank(message = "{student.sex.blank}")
    @ValidEnumType(types = { "MALE", "FEMALE" }, casesensitive = false, message = "{student.sex.options}")
    @FieldLabel("Sex")
    @XStreamAlias("Sex")
    @XStreamConverter(value = EnumBasedXStreamConverter.class, useImplicitType = false, types = { Gender.class }, strings = { "TITLECASE" })
    private String gender;

    @NotBlank(message = "{student.hispanicorlatino.blank}")
    @ValidEnumType(types = { "YES", "NO" }, message = "{student.hispanicorlatino.option}")
    @FieldLabel("HispanicOrLatinoEthnicity")
    @XStreamAlias("HispanicOrLatinoEthnicity")
    @XStreamConverter(value = EnumBasedXStreamConverter.class, useImplicitType = false, types = { YesNoBoolean.class }, strings = { "TITLECASE" })
    private String hispanicOrLatino;

    @NotBlank(message = "{student.americanindianoralaskanative.blank}")
    @ValidEnumType(types = { "YES", "NO" }, message = "{student.americanindianoralaskanative.option}")
    @FieldLabel("AmericanIndianOrAlaskaNative")
    @XStreamAlias("AmericanIndianOrAlaskaNative")
    @XStreamConverter(value = EnumBasedXStreamConverter.class, useImplicitType = false, types = { YesNoBoolean.class }, strings = { "TITLECASE" })
    private String americanIndianOrAlaskaNative;

    @NotBlank(message = "{student.asian.blank}")
    @ValidEnumType(types = { "YES", "NO" }, message = "{student.asian.option}")
    @FieldLabel("Asian")
    @XStreamAlias("Asian")
    @XStreamConverter(value = EnumBasedXStreamConverter.class, useImplicitType = false, types = { YesNoBoolean.class }, strings = { "TITLECASE" })
    private String asian;

    @NotBlank(message = "{student.blackorafricanamerican.blank}")
    @ValidEnumType(types = { "YES", "NO" }, message = "{student.blackorafricanamerican.option}")
    @FieldLabel("BlackOrAfricanAmerican")
    @XStreamAlias("BlackOrAfricanAmerican")
    @XStreamConverter(value = EnumBasedXStreamConverter.class, useImplicitType = false, types = { YesNoBoolean.class }, strings = { "TITLECASE" })
    private String blackOrAfricanAmerican;

    @NotBlank(message = "{student.white.blank}")
    @ValidEnumType(types = { "YES", "NO" }, message = "{student.white.option}")
    @FieldLabel("White")
    @XStreamAlias("White")
    @XStreamConverter(value = EnumBasedXStreamConverter.class, useImplicitType = false, types = { YesNoBoolean.class }, strings = { "TITLECASE" })
    private String white;

    @NotBlank(message = "{student.nativehawaiianorpacificisland.blank}")
    @ValidEnumType(types = { "YES", "NO" }, message = "{student.nativehawaiianorpacificisland.option}")
    @FieldLabel("NativeHawaiianOrOtherPacificIslander")
    @XStreamAlias("NativeHawaiianOrOtherPacificIslander")
    @XStreamConverter(value = EnumBasedXStreamConverter.class, useImplicitType = false, types = { YesNoBoolean.class }, strings = { "TITLECASE" })
    private String nativeHawaiianOrPacificIsland;

    @NotBlank(message = "{student.demographicracetwoormoreraces.blank}")
    @ValidEnumType(types = { "YES", "NO" }, message = "{student.demographicracetwoormoreraces.option}")
    @FieldLabel("DemographicRaceTwoOrMoreRaces")
    @XStreamAlias("DemographicRaceTwoOrMoreRaces")
    @XStreamConverter(value = EnumBasedXStreamConverter.class, useImplicitType = false, types = { YesNoBoolean.class }, strings = { "TITLECASE" })
    private String twoOrMoreRaces;

    @NotBlank(message = "{student.ideaindicator.blank}")
    @ValidEnumType(types = { "YES", "NO" }, message = "{student.ideaindicator.option}")
    @FieldLabel("IDEAIndicator")
    @XStreamAlias("IDEAIndicator")
    @XStreamConverter(value = EnumBasedXStreamConverter.class, useImplicitType = false, types = { YesNoBoolean.class }, strings = { "TITLECASE" })
    private String iDEAIndicator;

    @NotBlank(message = "{student.lepstatus.blank}")
    @ValidEnumType(types = { "YES", "NO" }, message = "{student.lepstatus.option}")
    @FieldLabel("LEPStatus")
    @XStreamConverter(value = EnumBasedXStreamConverter.class, useImplicitType = false, types = { YesNoBoolean.class }, strings = { "TITLECASE" })
    @XStreamAlias("LEPStatus")
    private String lepStatus;

    @NotBlank(message = "{student.section504status.blank}")
    @ValidEnumType(types = { "YES", "NO", "UNKNOWN/CANNOT PROVIDE" }, message = "{student.section504status.option}")
    @FieldLabel("Section504Status")
    @XStreamAlias("Section504Status")
    @XStreamConverter(value = EnumBasedXStreamConverter.class, useImplicitType = false, types = { Section504Status.class }, strings = {
            "UPPERCASE", "TITLECASE" })
    private String section504Status;

    @NotBlank(message = "{student.disadvantagestatus.blank}")
    @ValidEnumType(types = { "YES", "NO" }, message = "{student.disadvantagestatus.option}")
    @FieldLabel("EconomicDisadvantageStatus")
    @XStreamAlias("EconomicDisadvantageStatus")
    @XStreamConverter(value = EnumBasedXStreamConverter.class, useImplicitType = false, types = { YesNoBoolean.class }, strings = { "TITLECASE" })
    private String disadvantageStatus;

    @LanguageCode(message = "{student.languagecode.invalid}")
    @FieldLabel("LanguageCode")
    @XStreamAlias("LanguageCode")
    private String languageCode; // listed as an enum, values should be at: http://ceds.ed.gov/languageCodes.aspx

    @Ascii(message = "{student.title3progress.option}")
    @FieldLabel("EnglishLanguageProficiencyLevel")
    @XStreamAlias("EnglishLanguageProficiencyLevel")
    private String title3ProgressStatus;

    @ValidEnumType(types = { "YES", "NO" }, message = "{student.migrantstatus.option}")
    @FieldLabel("MigrantStatus")
    @XStreamAlias("MigrantStatus")
    @XStreamConverter(value = EnumBasedXStreamConverter.class, useImplicitType = false, types = { YesNoBoolean.class }, strings = { "TITLECASE_HANDLE_NULL_EMPTY" })
    private String migrantStatus;

    @DateFormat(datePattern = DATE_FORMAT, message = "{student.schoolfirstdate.format}")
    @FieldLabel("FirstEntryDateIntoUSSchool")
    @XStreamAlias("FirstEntryDateIntoUSSchool")
    private String firstEntryDateIntoUsSchool; // format YYYY-MM-DD

    @DateFormat(datePattern = DATE_FORMAT, message = "{student.lepentrydate.format}")
    @FieldLabel("LimitedEnglishProficiencyEntryDate")
    @XStreamAlias("LimitedEnglishProficiencyEntryDate")
    private String lepEntryDate; // format YYYY-MM-DD

    @DateFormat(datePattern = DATE_FORMAT, message = "{student.lepexitdate.format}")
    @FieldLabel("LEPExitDate")
    @XStreamAlias("LEPExitDate")
    private String lepExitDate; // format YYYY-MM-DD

    @ValidEnumType(types = { "DUALLANGUAGE", "TWOWAYIMMERSION", "TRANSITIONALBILINGUAL", "DEVELOPMENTALBILINGUAL",
            "HERITAGELANGUAGE", "SHELTEREDENGLISHINSTRUCTION", "STRUCTUREDENGLISHIMMERSION", "SDAIE",
            "CONTENTBASEDESL", "PULLOUTESL", "OTHER" }, message = "{student.title3ProgramType.option}")
    @FieldLabel("TitleIIILanguageInstructionProgramType")
    @XStreamAlias("TitleIIILanguageInstructionProgramType")
    @XStreamConverter(value = EnumBasedXStreamConverter.class, useImplicitType = false, types = { Title3ProgramType.class }, strings = {
            "UPPERCASE", "TITLECASE_HANDLE_NULL_EMPTY" }, booleans = { false })
    private String title3ProgramType;

    @ValidEnumType(types = { "AUT", "DB", "DD", "EMN", "HI", "ID", "MD", "OI", "OHI", "SLD", "SLI", "TBI", "VI" }, message = "{student.primarydisabilitytype.format}")
    @FieldLabel("PrimaryDisabilityType")
    @XStreamAlias("PrimaryDisabilityType")
    private String primaryDisabilityType;

    @Valid
    @XStreamAlias("Accommodations")
    private List<Accommodation> accommodations;

    @Alpha(message = "{delete.alpha}")
    @Size(max = 6, message = "{delete.size.max}")
    @FieldLabel("Delete")
    @XStreamOmitField
    private String delete;

    @FieldLabel("<Any of the Student Origin Fields>")
    @XStreamOmitField
    private String race = ""; // Stub for Display. Not to be used anywhere

    @XStreamAsAttribute
    @XStreamAlias("StudentPackageVersion")
    private Double studentPackageVersion = 2.0; // This is fixed for now. Not sure at this point if we need to increment
                                                // this.
    private boolean inValidAccommodationsSubject;

    public String getRace() {
        return race;
    }

    public enum Gender {
        Male, Female;
    }

    public enum YesNoBoolean {
        Yes, No
    }

    public enum Section504Status {
        YES("Yes"), NO("No"), UNKNOWN_CANNOTPROVIDE("Unknown/Cannot Provide");

        String desc;

        private Section504Status(final String inDescription) {
            desc = inDescription;
        }

        public static Section504Status getEnumByValue(final String value) {
            for (Section504Status val : Section504Status.values()) {
                if (val.desc.equalsIgnoreCase(value)) {
                    return val;
                }
            }
            throw new IllegalArgumentException("Section504Status Not Found");
        }

        public String toString() {
            return desc;
        }

    }

    public enum GradeLevel {

        INFANTTODDLER("IT"), PRESCHOOL("PR"), PREKINDERGARTEN("PK"), TRANSITIONALKINDERGARTEN("TK"), KINDERGARTEN("KG"), FIRSTGRADE(
                "01"), SECONDGRADE("02"), THIRDGRADE("03"), FOURTHGRADE("04"), FIFTHGRADE("05"), SIXTHGRADE("06"), SEVENTHGRADE(
                "07"), EIGHTHGRADE("08"), NINTHGRADE("09"), TENTHGRADE("10"), ELEVENTHGRADE("11"), TWELFTHGRADE("12"), GRADE13(
                "13"), POSTSECONDARY("PS"), UNGRADED("UG");

        private String grade;

        private GradeLevel(final String inGrade) {
            this.grade = inGrade;
        }

        public String getGrade() {
            return grade;
        }

        public static String padZeroIfNeeded(final String inGrade) {
            // Append leading '0' for grades between 1 and 9
            return isNotEmpty(inGrade) && isNumeric(inGrade) && Integer.parseInt(inGrade) < 10 ? "0"
                    + Integer.parseInt(inGrade) : inGrade;
        }

        public static GradeLevel fromGrade(String inGrade) {
            String zeroPaddedGrade = padZeroIfNeeded(inGrade);
            for (GradeLevel level : values()) {

                if (zeroPaddedGrade.equalsIgnoreCase(level.getGrade())) {
                    return level;
                }
            }
            throw new IllegalArgumentException("Invalid GradeLevel");

        }

        /**
         * Alias for fromGrade to make things more consistent between all enums
         */
        public static GradeLevel getEnumByValue(final String value) {
            return fromGrade(value);
        }

        @JsonValue
        public String toString() {
            return grade;
        }

    }

    public enum Title3ProgramType {
        DUALLANGUAGE("DualLanguage"), TWOWAYIMMERSION("TwoWayImmersion"), TRANSITIONALBILINGUAL("TransitionalBilingual"), DEVELOPMENTALBILINGUAL(
                "DevelopmentalBilingual"), HERITAGELANGUAGE("HeritageLanguage"), SHELTEREDENGLISHINSTRUCTION(
                "ShelteredEnglishInstruction"), STRUCTUREDENGLISHIMMERSION("StructuredEnglishImmersion"), SDAIE("SDAIE"), CONTENTBASEDESL(
                "ContentBasedESL"), PULLOUTESL("PullOutESL"), OTHER("Other");

        private String description;

        private Title3ProgramType(final String inDescription) {
            this.description = inDescription;
        }

        public String getDescription() {
            return description;
        }

        public void setDescription(final String description) {
            this.description = description;
        }

        public String toString() {
            return description;
        }
    }

    public enum PrimaryDisabilityType {

        AUT("Autism"), DB("Deaf-blindness"), DD("Developmental delay"), EMN("Emotional disturbance"), HI(
                "Hearing impairment"), ID("Intellectual Disability"), MD("Multiple disabilities"), OI(
                "Orthopedic impairment"), OHI("Other health impairment"), SLD("Specific learning disability"), SLI(
                "Speech or language impairment"), TBI("Traumatic brain injury"), VI("Visual impairment");

        private String description;

        private PrimaryDisabilityType(final String inDescription) {
            this.description = inDescription;
        }

        public String getDescription() {
            return description;
        }

        public void setDescription(final String description) {
            this.description = description;
        }
    }

    public String getId() {
        return id;
    }

    public void setId(final String inId) {
        this.id = inId;
    }

    public String getEntityId() {
        return entityId;
    }

    public void setEntityId(final String entityId) {
        this.entityId = entityId;
    }

    public String getStateAbbreviation() {
        return stateAbbreviation;
    }

    public void setStateAbbreviation(final String stateAbbreviation) {
        this.stateAbbreviation = stateAbbreviation;
    }

    public String getInstitutionIdentifier() {
        return institutionIdentifier;
    }

    public void setInstitutionIdentifier(final String institutionIdentifier) {
        this.institutionIdentifier = institutionIdentifier;
    }

    public String getDistrictIdentifier() {
        return districtIdentifier;
    }

    public void setDistrictIdentifier(final String districtIdentifier) {
        this.districtIdentifier = districtIdentifier;
    }

    public GradeLevel getGradeLevelWhenAssessed() {
        if (isNotEmpty(gradeLevelWhenAssessed)) {

            if (gradeLevelWhenAssessed.length() > 2) {// name is used
                return GradeLevel.valueOf(gradeLevelWhenAssessed);
            }
            return GradeLevel.fromGrade(gradeLevelWhenAssessed); // two character grade is used
        }
        throw new IllegalArgumentException("Invalid GradeLevel");
    }

    @JsonProperty
    public void setGradeLevelWhenAssessed(final String gradeLevelWhenAssessed) {
        if (isNotEmpty(gradeLevelWhenAssessed)) {
            try {
                this.gradeLevelWhenAssessed = GradeLevel.valueOf(gradeLevelWhenAssessed).grade;
            } catch (IllegalArgumentException ex) {
                this.gradeLevelWhenAssessed = gradeLevelWhenAssessed;
                // Not required to rethrow
            }
        } else {
            this.gradeLevelWhenAssessed = gradeLevelWhenAssessed;
        }
    }

    public void setGradeLevelWhenAssessed(final GradeLevel gradeLevel) {
        if (gradeLevel != null) {
            this.gradeLevelWhenAssessed = gradeLevel.grade;
        }
    }

    public String getTwoOrMoreRaces() {
        return twoOrMoreRaces;
    }

    public void setTwoOrMoreRaces(final String twoOrMoreRaces) {
        if (isNotEmpty(twoOrMoreRaces)) {
            this.twoOrMoreRaces = twoOrMoreRaces.toUpperCase();
        } else {
            this.twoOrMoreRaces = twoOrMoreRaces;
        }
    }

    public String getiDEAIndicator() {
        return iDEAIndicator;
    }

    public void setiDEAIndicator(final String iDEAIndicator) {
        if (isNotEmpty(iDEAIndicator)) {
            this.iDEAIndicator = iDEAIndicator.toUpperCase();
        } else {
            this.iDEAIndicator = iDEAIndicator;
        }
    }

    public String getLepStatus() {
        return lepStatus;
    }

    public void setLepStatus(final String lepStatus) {
        if (isNotEmpty(lepStatus)) {
            this.lepStatus = lepStatus.toUpperCase();
        } else {
            this.lepStatus = lepStatus;
        }
    }

    public String getSection504Status() {
        return section504Status;

    }

    @JsonProperty
    public void setSection504Status(final String section504Status) {
        if (isNotEmpty(section504Status)) {
            this.section504Status = section504Status.toUpperCase();
        } else {
            this.section504Status = section504Status;
        }
    }

    public void setSection504Status(final Section504Status section504Status) {
        if (section504Status != null) {
            this.section504Status = section504Status.name();
        }
    }

    public void setHispanicOrLatino(final String hispanicOrLatino) {
        if (isNotEmpty(hispanicOrLatino)) {
            this.hispanicOrLatino = hispanicOrLatino.toUpperCase();
        } else {
            this.hispanicOrLatino = hispanicOrLatino;
        }
    }

    public void setAmericanIndianOrAlaskaNative(final String americanIndianOrAlaskaNative) {
        if (isNotEmpty(americanIndianOrAlaskaNative)) {
            this.americanIndianOrAlaskaNative = americanIndianOrAlaskaNative.toUpperCase();
        } else {
            this.americanIndianOrAlaskaNative = americanIndianOrAlaskaNative;
        }
    }

    public void setAsian(final String asian) {
        if (isNotEmpty(asian)) {
            this.asian = asian.toUpperCase();
        } else {
            this.asian = asian;
        }
    }

    public void setBlackOrAfricanAmerican(final String blackOrAfricanAmerican) {
        if (isNotEmpty(blackOrAfricanAmerican)) {
            this.blackOrAfricanAmerican = blackOrAfricanAmerican.toUpperCase();
        } else {
            this.blackOrAfricanAmerican = blackOrAfricanAmerican;
        }
    }

    public void setWhite(final String white) {
        if (isNotEmpty(white)) {
            this.white = white.toUpperCase();
        } else {
            this.white = white;
        }
    }

    public void setNativeHawaiianOrPacificIsland(final String nativeHawaiianOrPacificIsland) {
        if (isNotEmpty(nativeHawaiianOrPacificIsland)) {
            this.nativeHawaiianOrPacificIsland = nativeHawaiianOrPacificIsland.toUpperCase();
        } else {
            this.nativeHawaiianOrPacificIsland = nativeHawaiianOrPacificIsland;
        }
    }

    public String getTitle3ProgressStatus() {

        return title3ProgressStatus;
    }

    @JsonProperty
    public void setTitle3ProgressStatus(final String title3ProgressStatus) {
        this.title3ProgressStatus = title3ProgressStatus;

    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(final String inFirstName) {
        this.firstName = inFirstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(final String inLastName) {
        this.lastName = inLastName;
    }

    public String getMiddleName() {
        return middleName;
    }

    public void setMiddleName(final String inMiddleName) {
        this.middleName = inMiddleName;
    }

    public DateTime getBirthDate() {
        return getDate(birthDate);

    }

    @JsonProperty
    public void setBirthDate(final String inBirthDate) {
        this.birthDate = inBirthDate;
    }

    public void setBirthDate(final DateTime inBirthDate) {
        if (inBirthDate != null) {
            this.birthDate = formatDate(inBirthDate);
        }
    }

    public String getExternalSsid() {
        return externalSsid;
    }

    public void setExternalSsid(final String inExternalSsid) {
        this.externalSsid = inExternalSsid;
    }

    public Gender getGender() {
        if (isNotEmpty(gender)) {
            return Gender.valueOf(gender);
        }
        throw new IllegalArgumentException("Invalid Gender");
    }

    @JsonProperty
    public void setGender(final String inGender) {

        if (isNotEmpty(inGender)) {
            this.gender = Character.toTitleCase(inGender.charAt(0)) + inGender.substring(1).toLowerCase();
        } else {

            this.gender = inGender;
        }
    }

    public void setGender(final Gender genderType) {
        if (genderType != null) {
            this.gender = genderType.name();
        }
    }

    public String getLanguageCode() {
        return languageCode;
    }

    public void setLanguageCode(final String inLanguageCode) {
        this.languageCode = inLanguageCode;
    }

    public String getMigrantStatus() {
        return migrantStatus;
    }

    public void setMigrantStatus(final String inMigrantStatus) {
        if (isNotEmpty(inMigrantStatus)) {
            this.migrantStatus = inMigrantStatus.toUpperCase();
        } else {
            this.migrantStatus = inMigrantStatus;
        }
    }

    public DateTime getFirstEntryDateIntoUsSchool() {
        return getDate(firstEntryDateIntoUsSchool);
    }

    @JsonProperty
    public void setFirstEntryDateIntoUsSchool(final String inFirstEntryDateIntoUsSchool) {
        this.firstEntryDateIntoUsSchool = inFirstEntryDateIntoUsSchool;
    }

    public void setFirstEntryDateIntoUsSchool(final DateTime inFirstEntryDateIntoUsSchool) {
        if (inFirstEntryDateIntoUsSchool != null) {
            this.firstEntryDateIntoUsSchool = formatDate(inFirstEntryDateIntoUsSchool);
        }
    }

    public DateTime getLepEntryDate() {
        return getDate(lepEntryDate);
    }

    @JsonProperty
    public void setLepEntryDate(final String inLepEntryDate) {
        this.lepEntryDate = inLepEntryDate;
    }

    public void setLepEntryDate(final DateTime inLepEntryDate) {
        if (inLepEntryDate != null) {
            this.lepEntryDate = formatDate(inLepEntryDate);
        }
    }

    public DateTime getLepExitDate() {
        return getDate(lepExitDate);
    }

    public void setLepExitDate(final DateTime inLepExitDate) {
        if (inLepExitDate != null) {
            this.lepExitDate = formatDate(inLepExitDate);
        }
    }

    @JsonProperty
    public void setLepExitDate(final String inLepExitDate) {
        this.lepExitDate = inLepExitDate;
    }

    public Title3ProgramType getTitle3ProgramType() {
        if (isNotEmpty(title3ProgramType)) {
            return Title3ProgramType.valueOf(title3ProgramType);
        }
        return null;
    }

    @JsonProperty
    public void setTitle3ProgramType(final String title3Program) {
        if (isNotEmpty(title3Program)) {
            this.title3ProgramType = title3Program.toUpperCase();
        } else {
            this.title3ProgramType = title3Program;
        }
    }

    public void setTitle3ProgramType(final Title3ProgramType title3ProgramType) {
        if (title3ProgramType != null) {
            this.title3ProgramType = title3ProgramType.name();
        }
    }

    public PrimaryDisabilityType getPrimaryDisabilityType() {
        if (isNotEmpty(primaryDisabilityType)) {
            return PrimaryDisabilityType.valueOf(primaryDisabilityType);
        }
        return null;
    }

    public void setPrimaryDisabilityType(final PrimaryDisabilityType inPrimaryDisabilityType) {
        if (inPrimaryDisabilityType != null) {
            this.primaryDisabilityType = inPrimaryDisabilityType.name();
        }
    }

    @JsonProperty
    public void setPrimaryDisabilityType(final String inPrimaryDisabilityType) {
        if (isNotEmpty(inPrimaryDisabilityType)) {
            this.primaryDisabilityType = inPrimaryDisabilityType.toUpperCase();
        } else {
            this.primaryDisabilityType = inPrimaryDisabilityType;
        }
    }

    public String getDisadvantageStatus() {
        return disadvantageStatus;
    }

    public void setDisadvantageStatus(final String disadvantageStatus) {
        if (isNotEmpty(disadvantageStatus)) {
            this.disadvantageStatus = disadvantageStatus.toUpperCase();
        } else {
            this.disadvantageStatus = disadvantageStatus;
        }
    }

    public String getHispanicOrLatino() {
        return hispanicOrLatino;
    }

    public String getAmericanIndianOrAlaskaNative() {
        return americanIndianOrAlaskaNative;
    }

    public String getAsian() {
        return asian;
    }

    public String getBlackOrAfricanAmerican() {
        return blackOrAfricanAmerican;
    }

    public String getWhite() {
        return white;
    }

    public String getNativeHawaiianOrPacificIsland() {
        return nativeHawaiianOrPacificIsland;
    }

    public void setDelete(final String inDelete) {
        this.delete = trim(inDelete);
    }

    private DateTime getDate(final String strDate) {
        if (isNotEmpty(strDate)) {
            return DateTime.parse(strDate);
        }
        return null;
    }

    private String formatDate(final DateTime date) {
        DateTimeFormatter fmt = DateTimeFormat.forPattern("yyyy-MM-dd");
        return fmt.print(date);

    }

    /**
     * @return the accommodations
     */
    public List<Accommodation> getAccommodations() {
        if (this.accommodations == null) {
            this.accommodations = new ArrayList<Accommodation>();
        }
        return this.accommodations;
    }

    /**
     * @param accommodations
     *        the accommodations to set
     */
    public void setAccommodations(List<Accommodation> accommodations) {
        this.accommodations = accommodations;
    }

    public String getInstitutionEntityMongoId() {
        return institutionEntityMongoId;
    }

    public void setInstitutionEntityMongoId(String institutionEntityMongoId) {
        this.institutionEntityMongoId = institutionEntityMongoId;
    }

    public String getDistrictEntityMongoId() {
        return districtEntityMongoId;
    }

    public void setDistrictEntityMongoId(String districtEntityMongoId) {
        this.districtEntityMongoId = districtEntityMongoId;
    }

    public static class Builder implements TestRegistrationBuilder<Student> {

        private final Object[] builderVals;

        public Builder(final Object... inVals) {
            this.builderVals = inVals;
        }

        public Student build() {

            Student builtObject = new Student();
            builtObject.setStateAbbreviation(isNotEmpty((String) builderVals[0]) ? ((String) builderVals[0])
                    .toUpperCase() : "");
            builtObject.setDistrictIdentifier((String) builderVals[1]);
            builtObject.setInstitutionIdentifier((String) builderVals[2]);
            builtObject.setLastName((String) builderVals[3]);
            builtObject.setFirstName((String) builderVals[4]);
            builtObject.setMiddleName((String) builderVals[5]);
            builtObject.setBirthDate((String) builderVals[6]);
            builtObject.setEntityId((String) builderVals[7]);
            builtObject.setExternalSsid((String) builderVals[8]);
            builtObject.setGradeLevelWhenAssessed(GradeLevel.padZeroIfNeeded((String) builderVals[9]));
            builtObject.setGender((String) builderVals[10]);
            builtObject.setHispanicOrLatino((String) builderVals[11]);
            builtObject.setAmericanIndianOrAlaskaNative((String) builderVals[12]);
            builtObject.setAsian((String) builderVals[13]);
            builtObject.setBlackOrAfricanAmerican((String) builderVals[14]);
            builtObject.setWhite((String) builderVals[15]);
            builtObject.setNativeHawaiianOrPacificIsland((String) builderVals[16]);
            builtObject.setTwoOrMoreRaces((String) builderVals[17]);
            builtObject.setiDEAIndicator((String) builderVals[18]);
            builtObject.setLepStatus((String) builderVals[19]);
            builtObject.setSection504Status((String) builderVals[20]);
            builtObject.setDisadvantageStatus((String) builderVals[21]);
            builtObject.setLanguageCode((String) builderVals[22]);
            builtObject.setTitle3ProgressStatus((String) builderVals[23]);
            builtObject.setMigrantStatus((String) builderVals[24]);
            builtObject.setFirstEntryDateIntoUsSchool((String) builderVals[25]);
            builtObject.setLepEntryDate((String) builderVals[26]);
            builtObject.setLepExitDate((String) builderVals[27]);
            builtObject.setTitle3ProgramType((String) builderVals[28]);
            builtObject.setPrimaryDisabilityType((String) builderVals[29]);
            builtObject.setDelete((String) builderVals[30]);
            builtObject.setAccommodations(new ArrayList<Accommodation>(0)); // Make it empty

            return builtObject;

        }

    }

    public Action getAction() {
        return "DELETE".equals(delete) ? Action.DEL : Action.UPD;
    }

    public String getDelete() {
        return delete;
    }

    public FormatType getFormatType() {
        return FORMAT_TYPE;
    }

    @JsonProperty
    public String getUrl() {
        return GET_RESOURCE_NAME + this.id;
    }

    @Override
    public String[] toStringArray() {
        String[] elements = new String[30];
        elements[0] = this.stateAbbreviation;
        elements[1] = this.districtIdentifier;
        elements[2] = this.institutionIdentifier;
        elements[3] = this.lastName;
        elements[4] = this.firstName;
        elements[5] = this.middleName;
        elements[6] = this.birthDate;
        elements[7] = this.entityId;
        elements[8] = this.externalSsid;
        elements[9] = this.gradeLevelWhenAssessed;
        elements[10] = this.gender;
        elements[11] = this.hispanicOrLatino;
        elements[12] = this.americanIndianOrAlaskaNative;
        elements[13] = this.asian;
        elements[14] = this.blackOrAfricanAmerican;
        elements[15] = this.white;
        elements[16] = this.nativeHawaiianOrPacificIsland;
        elements[17] = this.twoOrMoreRaces;
        elements[18] = this.iDEAIndicator;
        elements[19] = this.lepStatus;
        elements[20] = this.section504Status;
        elements[21] = this.disadvantageStatus;
        elements[22] = this.languageCode;
        elements[23] = this.title3ProgressStatus;
        elements[24] = this.migrantStatus;
        elements[25] = this.firstEntryDateIntoUsSchool;
        elements[26] = this.lepEntryDate;
        elements[27] = this.lepExitDate;
        elements[28] = this.title3ProgramType;
        elements[29] = this.primaryDisabilityType;
        return elements;
    }

    @Override
    public String getAlternateKey() {
        return new StringBuilder().append("entityId: ").append(entityId).append(", externalSsid: ")
                .append(externalSsid).append(", stateAbbreviation: ").append(stateAbbreviation).toString();
    }

    @Override
    public AbstractSearchRequest createAlternateKeySearchRequest() {

        Map<String, String[]> reqMap = new HashMap<String, String[]>();
        reqMap.put(StudentSearchRequest.SEARCH_KEY_ENTITY_ID, new String[] { entityId });
        reqMap.put(StudentSearchRequest.SEARCH_KEY_STATE_ID, new String[] { stateAbbreviation });
        reqMap.put(StudentSearchRequest.SEARCH_KEY_EXTERNAL_SSID, new String[] { externalSsid });

        StudentSearchRequest request = new StudentSearchRequest(reqMap);

        return request;
    }

    // equals and hashcode based upon alternate key
    @Override
    public boolean equals(Object obj) {
        if (obj instanceof Student) {
            Student student = (Student) obj;
            return com.google.common.base.Objects.equal(entityId, student.getEntityId())
                    && com.google.common.base.Objects.equal(stateAbbreviation, student.getStateAbbreviation());
        }

        return false;
    }

    @Override
    public int hashCode() {
        return com.google.common.base.Objects.hashCode(entityId, stateAbbreviation);
    }

    /**
     * Returns {@code Accommodation} attached to the {@code Assessment}
     * 
     * @param assessment
     *        Assessment for which the Accommodation is needed
     * @return Attached Accommodation
     */
    public Accommodation getAccommodation(Assessment assessment) {
        for (Accommodation accommodation : getAccommodations()) {
            if (assessment.getSubjectCode().equalsIgnoreCase(accommodation.getSubject()))
                return accommodation;
        }
        return null;
    }

    public boolean hasAccommodations() {
        if (accommodations != null) {
            return !accommodations.isEmpty();
        }
        return false;
    }

    public boolean hasAccommodations(Assessment assessment) {
        for (Accommodation accommodation : getAccommodations()) {
            if (assessment.getSubjectCode().equalsIgnoreCase(accommodation.getSubject())) {
                return true;
            }
        }

        return false;
    }

    public boolean isInValidAccommodationsSubject() {
        return inValidAccommodationsSubject;
    }

    public void setInValidAccommodationsSubject(boolean inValidAccommodationsSubject) {
        this.inValidAccommodationsSubject = inValidAccommodationsSubject;
    }

    @Override
    public String toString() {
        return Objects.toStringHelper(getClass()).add("id", id).add("entityId", entityId)
                .add("stateAbbreviation", stateAbbreviation).add("institutionIdentifier", institutionIdentifier)
                .add("institutionEntityMongoId", institutionEntityMongoId)
                .add("districtIdentifier", districtIdentifier).add("districtEntityMongoId", districtEntityMongoId)
                .add("firstName", firstName).add("lastName", lastName).toString();

    }

    @Override
    public String[][] toMultiRowStringArray() {  
        String[][] rows;
        if(!getAccommodations().isEmpty()) {
            rows = new String[accommodations.size()][toStringArray().length + getAccommodations().get(0).toStringArray().length];
            
            int rowCount = 0;
            for(Accommodation accommodation: getAccommodations()) {
                rows[rowCount++] = ObjectArrays.concat(toStringArray(), accommodation.toStringArray(), String.class);
            }
        } else {
            rows = new String[1][toStringArray().length];
            rows[0] = toStringArray();
        }
        
        return rows;
    }
}
