/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.domain.constraintvalidators;

import static org.apache.commons.lang.StringUtils.isEmpty;

import java.lang.reflect.InvocationTargetException;

import javax.validation.ConstraintValidator;
import javax.validation.ConstraintValidatorContext;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.lang.StringUtils;
import org.opentestsystem.delivery.testreg.domain.HierarchyLevel;
import org.opentestsystem.delivery.testreg.domain.constraints.ValidStateRule;

/**
 * Validator checks for StateAbbreviation based on the User HierarchyLevel
 */
public class UserStateValidator implements ConstraintValidator<ValidStateRule, Object> {

    private static final String STATE_ABBREVIATION = "stateAbbreviation";
    private static final String LEVEL = "level";
    private static final String STATE_ABBREVIATION_MESSAGE = "{user.stateabbreviation.blank}";

    @Override
    public void initialize(final ValidStateRule constraintAnnotation) {

    }

    @Override
    public boolean isValid(final Object value, final ConstraintValidatorContext context) {
        String levelObj = getProperty(value, LEVEL);
        if (isEmpty(levelObj)) {
            //this is handled as part of level validation
            return true;
        }
        switch (HierarchyLevel.valueOf(levelObj)) {
        case DISTRICT:
        case GROUPOFDISTRICTS:
        case GROUPOFINSTITUTIONS:
        case INSTITUTION:
            String stateVal = getProperty(value, STATE_ABBREVIATION);
            if (StringUtils.isBlank(stateVal)) {
                context.disableDefaultConstraintViolation();
                context.buildConstraintViolationWithTemplate(STATE_ABBREVIATION_MESSAGE)
                .addPropertyNode(STATE_ABBREVIATION)
                .addConstraintViolation();
                return false;
            }
        default:
            return true;

        }

    }
    private String getProperty(final Object value, final String property) {
        try {
            return BeanUtils.getProperty(value, property);
        } catch (IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {
            return null;
        }
    }
}
