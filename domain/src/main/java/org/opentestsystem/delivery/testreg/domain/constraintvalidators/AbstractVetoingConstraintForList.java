/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.domain.constraintvalidators;

import static org.apache.commons.lang.StringUtils.isBlank;
import static org.apache.commons.lang.StringUtils.trim;

import java.lang.annotation.Annotation;
import java.util.List;
import java.util.ArrayList;

import javax.validation.ConstraintValidator;
import javax.validation.ConstraintValidatorContext;

/**
 * Vetoing constraints are those which might return 'true' from isValid method to prevent any additional
 * validation of the property. 
 */
public abstract class AbstractVetoingConstraintForList<A extends Annotation> implements ConstraintValidator<A, List<String>> {

    protected boolean skipNullValues() {
        // a null is not a value we should even check in most cases
        return true;
    }

    protected boolean skipBlankValues() {
        // Most constraints ignore blank values, leaving it to the explicit "blank" constraint.
        return true;
    }
    
    public boolean isValid(List<String> value, ConstraintValidatorContext context) {
        List<Boolean> statusList = new ArrayList<>();
        Boolean defaultStatus = false;
        
        if(value!=null){
        for(String val : value) {
          if(skipNullValues() && val == null) {
            statusList.add(true);
          }

          if(skipBlankValues() && isBlank(val.toString())) {
            statusList.add(true);
          }

          statusList.add( processValidateWithVetoing(trim(val.toString()), context));
        }

        if(statusList.contains(defaultStatus)) 
          return false;
        else 
          return true;
        
        }else
        {
          return true;
        }
    }
    
    public abstract boolean processValidateWithVetoing(String value, ConstraintValidatorContext context);
    
}

