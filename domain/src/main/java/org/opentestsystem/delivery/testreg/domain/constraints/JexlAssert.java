/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.domain.constraints;

import static java.lang.annotation.ElementType.TYPE;
import static java.lang.annotation.RetentionPolicy.RUNTIME;

import java.lang.annotation.Documented;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;

import javax.validation.Constraint;
import javax.validation.Payload;

import org.hibernate.validator.constraints.ScriptAssert;

/**
 * A class-level constraint, that evaluates a script expression against the
 * annotated element. This constraint can be used to implement validation
 * routines, that depend on multiple attributes of the annotated element.
 * 
 * Script expressions should be written in JEXL scripting language.
 * 
 * Note that inspiration for this annotation came from  {@link ScriptAssert}
 *
 */
@Target({ TYPE })
@Retention(RUNTIME)
@Constraint(validatedBy = {org.opentestsystem.delivery.testreg.domain.constraintvalidators.JexlAssertValidator.class})
@Documented
public @interface JexlAssert {
    String message() default "{org.opentestsystem.delivery.testreg.jexlassert.invalid.default}";

    Class<?>[] groups() default {};

    Class<? extends Payload>[] payload() default {};

    /**
     * @return The expression to be executed. The expression must return
     *         <code>Boolean.TRUE</code>, if the annotated element could
     *         successfully be validated, otherwise <code>Boolean.FALSE</code>.
     *         Returning null or any type other than Boolean will cause a
     *         {@link javax.validation.ConstraintDeclarationException} upon validation. Any
     *         exception occurring during script evaluation will be wrapped into
     *         a ConstraintDeclarationException, too. Within the script, the
     *         validated object can be accessed from the {@link javax.script.ScriptContext
     *         script context} using the name specified in the
     *         <code>alias</code> attribute.
     */
    String expression();

    /**
     * @return The name, under which the annotated element shall be registered
     *         within the expression context. Defaults to "this".
     */
    String alias() default "this";

    /**
     * Defines several {@code @JexlAssert} annotations on the same element.
     */
    @Target({ TYPE })
    @Retention(RUNTIME)
    @Documented
    public @interface List {
        JexlAssert[] value();
    }
}
