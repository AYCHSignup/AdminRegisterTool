/*
Educational Online Test Delivery System Copyright (c) 2013 American Institutes for Research

Distributed under the AIR Open Source License, Version 1.0 See accompanying file AIR-License-1_0.txt or at
http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 */

package org.opentestsystem.delivery.testreg.domain;

import static org.apache.commons.lang.StringUtils.isNotEmpty;
import static org.apache.commons.lang.StringUtils.trim;

import java.util.HashMap;
import java.util.Map;

import javax.validation.constraints.Size;

import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;
import org.hibernate.validator.constraints.NotBlank;
import org.opentestsystem.delivery.testreg.domain.constraints.Alpha;
import org.opentestsystem.delivery.testreg.domain.constraints.Alphanumeric;
import org.opentestsystem.delivery.testreg.domain.constraints.ValidParentEntityType;
import org.opentestsystem.delivery.testreg.domain.constraints.ValidStateCode;
import org.opentestsystem.delivery.testreg.domain.constraints.ValidStateName;
import org.opentestsystem.delivery.testreg.domain.search.StateEntitySearchRequest;
import org.opentestsystem.shared.progman.client.domain.TenantType;
import org.opentestsystem.shared.search.domain.AbstractSearchRequest;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.index.Indexed;
import org.springframework.data.mongodb.core.mapping.Document;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.annotations.XStreamOmitField;

@SuppressWarnings({ "PMD.ShortVariable" })
@Document
@JsonIgnoreProperties(ignoreUnknown = true)
@XmlNotNull({ "entityId", "entityName" })
@ValidStateName
@XmlOrderSequence({ "entityId", "entityName" })
public class StateEntity implements Sb11SuperEntity {

    private static final long serialVersionUID = 2656035573610266028L;
    private static final String GET_RESOURCE_NAME = "/state/";
    public static final FormatType FORMAT_TYPE = FormatType.STATE;
    public static final HierarchyLevel ENTITY_TYPE = HierarchyLevel.STATE;
    public static final TenantType TENANT_TYPE = TenantType.STATE;

    @Id
    @XStreamOmitField
    private String id;

    @NotBlank(message = "{stateabbreviation.blank}")
    @ValidStateCode
    @FieldLabel("StateAbbreviation")
    @Indexed(unique = true)
    @XStreamAlias("StateAbbreviation")
    private String entityId;

    @NotBlank(message = "{state.entityname.blank}")
    @Alpha(isSpaceAllowed = true, isCommaAllowed = true, message = "{state.entityname.alpha}")
    @Size(max = 50, message = "{state.entityname.max}")
    @FieldLabel("StateName")
    @XStreamAlias("StateName")
    private String entityName;

    @NotBlank(message = "{parententitytype.blank}")
    @ValidParentEntityType(types = { "CLIENT", "GROUPOFSTATES" })
    @FieldLabel("ParentEntityType")
    @XStreamOmitField
    private String parentEntityType;

    @NotBlank(message = "{parententityid.blank}")
    @Alphanumeric(message = "{parententityid.alphanumeric}")
    @Size(max = 40, message = "{parententityid.size.max}")
    @FieldLabel("ParentExternalId")
    @XStreamOmitField
    private String parentEntityId; // this is mapped to parent external id in the upload file

    @Alpha(message = "{delete.alpha}")
    @Size(max = 6, message = "{delete.size.max}")
    @FieldLabel("Delete")
    @XStreamOmitField
    private String delete;

    private String parentId; // this is the mongo id of the parent entity

    public StateEntity() {
    }

    public StateEntity(final String entityId, final String entityName) {
        this.entityId = entityId;
        this.entityName = entityName;
    }

    public static class Builder implements TestRegistrationBuilder<StateEntity> {

        private final Object[] builderVals;

        public Builder(final Object... inVals) {
            this.builderVals = inVals;
        }

        @Override
        public StateEntity build() {
            StateEntity builtObject = new StateEntity();
            builtObject.setEntityId(isNotEmpty((String) builderVals[DomainIndexConstants.STATE_PARENT_ENTITY_ID_INDEX]) ? ((String) builderVals[DomainIndexConstants.STATE_ENTITY_ID_INDEX]).toUpperCase() : "");
            builtObject.setEntityName(isNotEmpty((String) builderVals[DomainIndexConstants.STATE_ENTITY_NAME_INDEX]) ? ((String) builderVals[DomainIndexConstants.STATE_ENTITY_NAME_INDEX]).toUpperCase() : "");
            builtObject.setParentEntityType((String) builderVals[DomainIndexConstants.STATE_PARENT_ENTITY_TYPE_INDEX]);
            builtObject.setParentEntityId((String) builderVals[DomainIndexConstants.STATE_PARENT_ENTITY_ID_INDEX]);
            // Adding new column ParentEntityName in import file based on TO-15( SB-1426 ) requirement 3.9.2
            // for Harmonizing Export and Import File Formats new column added to import file and data in corresponding column is not validated or stored 
            builtObject.setDelete((String) builderVals[DomainIndexConstants.STATE_DELETE_INDEX]);
            return builtObject;
        }
    }

    @Override
    public String getId() {
        return id;
    }

    @Override
    public void setId(final String inId) {
        this.id = inId;
    }

    @Override
    public Action getAction() {
        return "DELETE".equals(delete) ? Action.DEL : Action.UPD;
    }

    public String getDelete() {
        return delete;
    }

    @JsonIgnore
    public void setDelete(final String inAction) {
        this.delete = trim(inAction);
    }

    @Override
    public HierarchyLevel getParentEntityType() {
        return parentEntityType == null ? null : HierarchyLevel.valueOf(parentEntityType);
    }

    public void setParentEntityType(final String inParentEntityType) {
        this.parentEntityType = trim(inParentEntityType);
    }

    @Override
    @JsonProperty
    public void setParentEntityType(final HierarchyLevel inParentEntityType) {
        if (inParentEntityType != null) {
            this.parentEntityType = inParentEntityType.name();
        }
    }

    @Override
    public String getParentEntityId() {
        return parentEntityId;
    }

    @Override
    public void setParentEntityId(final String inParentEntityId) {
        this.parentEntityId = inParentEntityId;
    }

    @Override
    public String getParentId() {
        return parentId;
    }

    @Override
    public void setParentId(final String inParentId) {
        this.parentId = inParentId;
    }

    @Override
    public String getEntityId() {
        return entityId;
    }

    @Override
    public String getStateAbbreviation() {
        return getEntityId();
    }

    public void setEntityId(final String inEntityId) {
        this.entityId = inEntityId;
    }

    @Override
    public String getEntityName() {
        return entityName;
    }

    public void setEntityName(final String inEntityName) {
        this.entityName = inEntityName;
    }

    @JsonProperty
    public String getUrl() {
        return GET_RESOURCE_NAME + this.id;
    }

    @Override
    public String[] toStringArray() {
        String[] elements = new String[5];
        elements[DomainIndexConstants.STATE_ENTITY_ID_INDEX] = this.getEntityId();
        elements[DomainIndexConstants.STATE_ENTITY_NAME_INDEX] = this.getEntityName();
        elements[DomainIndexConstants.STATE_PARENT_ENTITY_TYPE_INDEX] = this.getParentEntityType().toString();
        elements[DomainIndexConstants.STATE_PARENT_ENTITY_ID_INDEX] = this.getParentEntityId();
        return elements;
    }

    @Override
    public String toString() {
        return ToStringBuilder.reflectionToString(this, ToStringStyle.SHORT_PREFIX_STYLE);
    }

    @Override
    public String getAlternateKey() {
        return new StringBuilder().append("entityId: ").append(entityId).toString();
    }

    @Override
    public AbstractSearchRequest createAlternateKeySearchRequest() {
        Map<String, String[]> reqMap = new HashMap<String, String[]>();
        reqMap.put(StateEntitySearchRequest.SEARCH_KEY_ENTITY_ID, new String[] { entityId });
        StateEntitySearchRequest request = new StateEntitySearchRequest(reqMap);
        return request;
    }

    @Override
    public FormatType getFormatType() {
        return FORMAT_TYPE;
    }

    @Override
    public HierarchyLevel getEntityType() {
        return ENTITY_TYPE;
    }

    @Override
    public TenantType getTenantType() {
        return TENANT_TYPE;
    }
}
