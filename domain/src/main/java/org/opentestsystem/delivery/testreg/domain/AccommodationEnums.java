/*
Educational Online Test Delivery System Copyright (c) 2013 American Institutes for Research

Distributed under the AIR Open Source License, Version 1.0 See accompanying file AIR-License-1_0.txt or at
http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 */

package org.opentestsystem.delivery.testreg.domain;

public class AccommodationEnums {

    public enum AmericanSignLanguage {
        TDS_ASL0("Do not show ASL videos"), TDS_ASL1("Show ASL videos");

        private String description;

        private AmericanSignLanguage(final String inDescription) {
            description = inDescription;
        }

        public String getDescription() {
            return description;
        }

        public static AmericanSignLanguage getEnumByValue(final String value) {
            return AmericanSignLanguage.valueOf(value);
        }
    }

    public enum ColorContrast {

        TDS_CCMagenta("Black on Rose"), TDS_CCMedGrayLtGray("Medium Grey on Light Grey"), TDS_CCYellowB(
                "Yellow on Blue"), TDS_CCInvert("Reverse Contrast"), TDS_CC0("Black on White");

        private String description;

        private ColorContrast(final String inDescription) {
            description = inDescription;
        }

        public String getDescription() {
            return description;
        }

        public static ColorContrast getEnumByValue(final String value) {
            return ColorContrast.valueOf(value);
        }

    }

    public enum ClosedCaptioning {
        TDS_ClosedCap0("Closed Captioning Not Available"), TDS_ClosedCap1("Closed Captioning Available");

        private String description;

        private ClosedCaptioning(final String inDescription) {
            description = inDescription;
        }

        public String getDescription() {
            return description;
        }

        public static ClosedCaptioning getEnumByValue(final String value) {
            return ClosedCaptioning.valueOf(value);
        }
    }

    public enum Language {

        // input for ENUBraille is ENU-Braille
        // ESN is for Math only
        ENU("English"), ENUBraille("Braille"), ESN("Spanish (Stacked Translation)");

        private String description;

        private Language(final String inDescription) {
            description = inDescription;
        }

        public String getDescription() {
            return description;
        }

        public static Language getEnumByValue(final String value) {
            String newValue = "ENU-Braille".equals(value) ? "ENUBraille" : value;

            return Language.valueOf(newValue);
        }

    }

    public enum Masking {

        TDS_Masking0("Masking Not Available"), TDS_Masking1("Masking Available");

        private String description;

        private Masking(final String inDescription) {
            description = inDescription;
        }

        public String getDescription() {
            return description;
        }

        public static Masking getEnumByValue(final String value) {
            return Masking.valueOf(value);
        }

    }

    public enum PermissiveMode {

        TDS_PM0("Permissive Mode Disabled"), TDS_PM1("Permissive Mode Enabled");

        private String description;

        private PermissiveMode(final String inDescription) {
            description = inDescription;
        }

        public String getDescription() {
            return description;
        }

        public static PermissiveMode getEnumByValue(final String value) {
            return PermissiveMode.valueOf(value);
        }

    }

    public enum PrintOnDemand {

        TDS_PoD_Stim("Stimuli"), TDS_PoD0("None");

        private String description;

        private PrintOnDemand(final String inDescription) {
            description = inDescription;
        }

        public String getDescription() {
            return description;
        }

        public static PrintOnDemand getEnumByValue(final String value) {
            return PrintOnDemand.valueOf(value);
        }

    }

    public enum PrintSize {

        TDS_PS_L0("No default zoom applied"), TDS_PS_L1("Level 1"), TDS_PS_L2("Level 2"), TDS_PS_L3("Level 3"), TDS_PS_L4(
                "Level 4");

        private String description;

        private PrintSize(final String inDescription) {
            description = inDescription;
        }

        public String getDescription() {
            return description;
        }

        public static PrintSize getEnumByValue(final String value) {
            return PrintSize.valueOf(value);
        }

    }

    public enum StreamlinedInterface {

        TDS_TS_Modern("Standard"), TDS_TS_Accessibility("Streamlined");

        private String description;

        private StreamlinedInterface(final String inDescription) {
            description = inDescription;
        }

        public String getDescription() {
            return description;
        }

        public static StreamlinedInterface getEnumByValue(final String value) {
            return StreamlinedInterface.valueOf(value);
        }

    }

    public enum TextToSpeech {

        // input string for first item is TDS_TTS_Stim&TDS_TTS_Item
        // TDS_TTS_Item and TDS_TTS_Stim is for ELA only
        TDS_TTS_StimAndTDS_TTS_Item("Stimuli and Items"), TDS_TTS_Item("Items Only"), TDS_TTS_Stim("Stimuli Only"), TDS_TTS0(
                "None");

        private String description;

        private TextToSpeech(final String inDescription) {
            description = inDescription;
        }

        public String getDescription() {
            return description;
        }

        public static TextToSpeech getEnumByValue(final String value) {
            String newValue = value.replace("&", "And");

            return TextToSpeech.valueOf(newValue);
        }

    }

    public enum Translation {

        // All Translations are Math only except English and None
        TDS_WL_Glossary("English"), TDS_WL_ArabicGloss("Arabic"), TDS_WL_CantoneseGloss("Cantonese"), TDS_WL_ESNGlossary(
                "Spanish"), TDS_WL_KoreanGloss("Korean"), TDS_WL_MandarinGloss("Mandarin"), TDS_WL_PunjabiGloss(
                "Punjabi"), TDS_WL_RussianGloss("Russian"), TDS_WL_TagalGloss("Filipino"), TDS_WL_UkrainianGloss(
                "Ukrainian"), TDS_WL_VietnameseGloss("Vietnamese"), TDS_WL_GlossaryAndTDS_WL_ArabicGloss(
                "English & Arabic"), TDS_WL_GlossaryAndTDS_WL_CantoneseGloss("English & Cantonese"), TDS_WL_GlossaryAndTDS_WL_ESNGlossary(
                "English & Spanish"), TDS_WL_GlossaryAndTDS_WL_KoreanGloss("English & Korean"), TDS_WL_GlossaryAndTDS_WL_MandarinGloss(
                "English & Mandarin"), TDS_WL_GlossaryAndTDS_WL_PunjabiGloss("English & Punjabi"), TDS_WL_GlossaryAndTDS_WL_RussianGloss(
                "English & Russian"), TDS_WL_GlossaryAndTDS_WL_TagalGloss("English & Filipino"), TDS_WL_GlossaryAndTDS_WL_UkrainianGloss(
                "English & Ukrainian"), TDS_WL_GlossaryAndTDS_WL_VietnameseGloss("English & Vietnamese"), TDS_WL0(
                "None");

        private String description;

        private Translation(final String inDescription) {
            description = inDescription;
        }

        public String getDescription() {
            return description;
        }

        public static Translation getEnumByValue(final String value) {

            String newValue = value.replace("&", "And");

            return Translation.valueOf(newValue);
        }

    }

    public enum NonEmbeddedDesignatedSupports {

        NEDS0("None"),

        // bilingual dictionary is ELA only
        NEDS_BD("Bilingual Dictionary"), NEDS_CC("Color Contrast"), NEDS_CO("Color Overlay"), NEDS_Mag("Magnification"), NEDS_RA_Items(
                "Read Aloud Items"), NEDS_SC_Items("Scribe Items (Non-Writing)"), NEDS_SS("Separate Setting"), NEDS_TransDirs("Translated Test Directions"),

        // all glossary enums are Math only
        NEDS_TArabic("Glossary - Arabic"), NEDS_TCantonese("Glossary - Cantonese"), NEDS_TFilipino(
                "Glossary - Filipino"), NEDS_TKorean("Glossary - Korean"), NEDS_TMandarin("Glossary - Mandarin"), NEDS_TPunjabi(
                "Glossary - Punjabi"), NEDS_TRussian("Glossary - Russian"), NEDS_TSpanish("Glossary - Spanish"), NEDS_TUkrainian(
                "Glossary - Ukrainian"), NEDS_TVietnamese("Glossary - Vietnamese");

        private String description;

        private NonEmbeddedDesignatedSupports(final String inDescription) {
            description = inDescription;
        }

        public String getDescription() {
            return description;
        }

        public static NonEmbeddedDesignatedSupports getEnumByValue(final String value) {
            return NonEmbeddedDesignatedSupports.valueOf(value);
        }

    }

    public enum NonEmbeddedAccommodations {

        NEA0("None"), NEA_AR("Alternate Response Options"),

        // read aloud stimuli and scribe items are ELA only
        NEA_RA_Stimuli("Read Aloud Stimuli"), NEA_SC_WritItems("Scribe Items (Writing)"),

        NEA_STT("Speech-to-Text"),

        NEA_NoiseBuf("Noise Buffer"),

        // abacus, calculator, and multiplication table are Math only
        NEA_Abacus("Abacus"), NEA_Calc("Calculator"), NEA_MT("Multiplication Table");

        private String description;

        private NonEmbeddedAccommodations(final String inDescription) {
            description = inDescription;
        }

        public String getDescription() {
            return description;
        }

        public static NonEmbeddedAccommodations getEnumByValue(final String value) {
            return NonEmbeddedAccommodations.valueOf(value);
        }

    }

}
