/*
Educational Online Test Delivery System Copyright (c) 2013 American Institutes for Research

Distributed under the AIR Open Source License, Version 1.0 See accompanying file AIR-License-1_0.txt or at
http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 */

package org.opentestsystem.delivery.testreg.domain;

import static org.apache.commons.lang.StringUtils.isNotEmpty;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.validation.constraints.Size;

import org.hibernate.validator.constraints.NotBlank;
import org.opentestsystem.delivery.testreg.domain.constraints.Alpha;
import org.opentestsystem.delivery.testreg.domain.constraints.Alphanumeric;
import org.opentestsystem.delivery.testreg.domain.constraints.ValidStateCode;
import org.opentestsystem.delivery.testreg.domain.search.StudentGroupSearchRequest;
import org.opentestsystem.shared.search.domain.AbstractSearchRequest;
import org.springframework.data.annotation.Id;
import org.springframework.data.annotation.Transient;
import org.springframework.data.mongodb.core.index.CompoundIndex;
import org.springframework.data.mongodb.core.index.CompoundIndexes;
import org.springframework.data.mongodb.core.mapping.Document;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.annotations.XStreamOmitField;

@SuppressWarnings({ "PMD.ShortVariable" })
@Document
@JsonIgnoreProperties(ignoreUnknown = true)
@CompoundIndexes(value = { @CompoundIndex(name = "studentGroupIdx", def = "{'stateAbbreviation':1, 'studentGroupName':1, 'institutionIdentifier':1}", unique = true) })
@XmlOrderSequence({ "studentGroupName" })
public class StudentGroup implements Sb11NonEntity {

    private static final long serialVersionUID = 8774463551718043519L;

    public static final FormatType FORMAT_TYPE = FormatType.STUDENTGROUP;

    private static final String GET_RESOURCE_NAME = "/studentGroup/";

    @Id
    @XStreamOmitField
    private String id;

    @NotBlank(message = "{studentgroup.institutionid.blank}")
    @Alphanumeric(message = "{studentgroup.institutionid.alphanumeric}")
    @Size(max = 40, message = "{studentgroup.institutionid.size.max}")
    @FieldLabel("InstitutionIdentifier")
    @XStreamOmitField
    private String institutionIdentifier;

    @XStreamOmitField
    private String institutionEntityMongoId;

    @NotBlank(message = "{studentgroup.email.blank}")
    @FieldLabel("ElectronicMailAddress")
    @XStreamOmitField
    private String ownerEmail;

    @NotBlank(message = "{studentgroup.groupname.blank}")
    @Alphanumeric(spacesAllowed = true, message = "{studentgroup.groupname.alphanumeric}")
    @Size(max = 50, message = "{studentgroup.groupname.size.max}")
    @FieldLabel("StudentGroupName")
    @XStreamAlias("StudentGroupName")
    private String studentGroupName;

    @NotBlank(message = "{studentgroup.studentid.blank}", groups = ImportFileValidationGroup.class)
    @Alphanumeric(message = "{studentgroup.studentid.alphanumeric}", groups = ImportFileValidationGroup.class)
    @Size(max = 40, message = "{studentgroup.studentid.size.max}", groups = ImportFileValidationGroup.class)
    @FieldLabel("StudentIdentifier")
    @Transient
    @XStreamOmitField
    private String studentId;

    @XStreamOmitField
    private List<String> studentIds;

    private List<String> studentMongoIds;

    @NotBlank(message = "{stateabbreviation.blank}")
    @ValidStateCode
    @FieldLabel("StateAbbreviation")
    @XStreamOmitField
    private String stateAbbreviation;

    @Alphanumeric(message = "{studentgroup.districtid.alphanumeric}")
    @Size(max = 40, message = "{studentgroup.districtid.size.max}")
    @FieldLabel("ResponsibleDistrictIdentifier")
    @XStreamOmitField
    private String districtIdentifier;

    @XStreamOmitField
    private String districtEntityMongoId;

    @Alpha(message = "{delete.alpha}")
    @Size(max = 6, message = "{delete.size.max}")
    @FieldLabel("Delete")
    @XStreamOmitField
    private String delete;

    public static class Builder implements TestRegistrationBuilder<StudentGroup> {

        private final Object[] builderVals;

        public Builder(final Object... inVals) {
            this.builderVals = inVals;
        }

        public StudentGroup build() {

            StudentGroup builtObject = new StudentGroup();

            // code goes here to build

            // object array is in the order of file: InstitutionIdentifier, ElectronicMailAddress, StudentGroupName,
            // StudentIdentifier, StateAbbreviation, ResponsibleDistrictIdentifier, Delete

            builtObject.setInstitutionIdentifier((String) builderVals[0]);
            builtObject.setOwnerEmail((String) builderVals[1]);
            builtObject.setStudentGroupName((String) builderVals[2]);
            builtObject.setStudentId((String) builderVals[3]);
            builtObject.setStateAbbreviation(isNotEmpty((String) builderVals[4]) ? ((String) builderVals[4]).toUpperCase() : "");
            builtObject.setDistrictIdentifier((String) builderVals[5]);
            builtObject.setDelete((String) builderVals[6]);

            return builtObject;

        }

    }

    public String getId() {
        return id;
    }

    public void setId(final String inId) {
        this.id = inId;
    }

    /**
     * @return the studentId
     */
    public String getStudentId() {
        return studentId;
    }

    /**
     * @param studentId
     *        the studentId to set
     */
    public void setStudentId(String studentId) {
        this.studentId = studentId;
    }

    public Action getAction() {
        return "DELETE".equals(delete) ? Action.DEL : Action.UPD;
    }

    /**
     * @return the studentIds
     */
    public List<String> getStudentIds() {
        return studentIds;
    }

    /**
     * @param studentIds
     *        the studentIds to set
     */
    public void setStudentIds(List<String> studentIds) {
        this.studentIds = studentIds;
    }

    /**
     * @return the studentMongoIds
     */
    public List<String> getStudentMongoIds() {
        return studentMongoIds;
    }

    /**
     * @param studentMongoIds
     *        the studentMongoIds to set
     */
    public void setStudentMongoIds(List<String> studentMongoIds) {
        this.studentMongoIds = studentMongoIds;
    }

    /**
     * @return the institutionIdentifier
     */
    public String getInstitutionIdentifier() {
        return institutionIdentifier;
    }

    /**
     * @param institutionIdentifier
     *        the institutionIdentifier to set
     */
    public void setInstitutionIdentifier(String institutionIdentifier) {
        this.institutionIdentifier = institutionIdentifier;
    }

    /**
     * @return the institutionEntityMongoId
     */
    public String getInstitutionEntityMongoId() {
        return institutionEntityMongoId;
    }

    /**
     * @param institutionEntityMongoId
     *        the institutionEntityMongoId to set
     */
    public void setInstitutionEntityMongoId(String institutionEntityMongoId) {
        this.institutionEntityMongoId = institutionEntityMongoId;
    }

    public String getOwnerEmail() {
        return ownerEmail;
    }

    public void setOwnerEmail(final String inOwnerEmail) {
        this.ownerEmail = inOwnerEmail;
    }

    public String getStudentGroupName() {
        return studentGroupName;
    }

    public void setStudentGroupName(final String inStudentGroupName) {
        this.studentGroupName = inStudentGroupName;
    }

    public String getStateAbbreviation() {
        return stateAbbreviation;
    }

    public void setStateAbbreviation(final String inStateAbbreviation) {
        this.stateAbbreviation = inStateAbbreviation;
    }

    /**
     * @return the districtIdentifier
     */
    public String getDistrictIdentifier() {
        return districtIdentifier;
    }

    /**
     * @param districtIdentifier
     *        the districtIdentifier to set
     */
    public void setDistrictIdentifier(String districtIdentifier) {
        this.districtIdentifier = districtIdentifier;
    }

    /**
     * @return the districtEntityMongoId
     */
    public String getDistrictEntityMongoId() {
        return districtEntityMongoId;
    }

    /**
     * @param districtEntityMongoId
     *        the districtEntityMongoId to set
     */
    public void setDistrictEntityMongoId(String districtEntityMongoId) {
        this.districtEntityMongoId = districtEntityMongoId;
    }

    public String getDelete() {
        return delete;
    }

    public void setDelete(final String delete) {
        this.delete = delete;
    }

    @Override
    public FormatType getFormatType() {
        return FORMAT_TYPE;
    }

    @JsonProperty
    public String getUrl() {
        return GET_RESOURCE_NAME + this.id;
    }

    @Override
    public String[] toStringArray() {
        String[] elements = new String[6];
        elements[0] = this.studentGroupName;
        elements[1] = this.districtIdentifier;
        elements[2] = this.institutionIdentifier;
        elements[3] = this.studentId;
        elements[4] = this.stateAbbreviation;
        elements[5] = this.ownerEmail;        
        return elements;
    }

    @Override
    public String getAlternateKey() {
        return new StringBuilder().append(", stateAbbreviation: ").append(stateAbbreviation)
                .append(", studentGroupName: ").append(studentGroupName).append(", institutionId: ")
                .append(institutionIdentifier).toString();
    }

    @Override
    public AbstractSearchRequest createAlternateKeySearchRequest() {
        Map<String, String[]> reqMap = new HashMap<String, String[]>();
        reqMap.put(StudentGroupSearchRequest.SEARCH_KEY_STATE_ABBR, new String[] { stateAbbreviation });
        reqMap.put(StudentGroupSearchRequest.SEARCH_KEY_GROUP_NAME, new String[] { studentGroupName });
        reqMap.put(StudentGroupSearchRequest.SEARCH_KEY_INST_ID, new String[] { institutionIdentifier });

        StudentGroupSearchRequest request = new StudentGroupSearchRequest(reqMap);

        return request;
    }

    public void addStudentIds(final String studentId) {
        if (this.studentIds == null) {
            studentIds = new ArrayList<String>();
        }

        if (!this.studentIds.contains(studentId)) {
            this.studentIds.add(studentId);
        }
    }

    public void removeStudentIds(final String studentId) {
        this.studentIds.remove(studentId);
    }

    public void addStudentMongoIds(final String studentMongoId) {
        if (this.studentMongoIds == null) {
            studentMongoIds = new ArrayList<String>();
        }

        if (!this.studentMongoIds.contains(studentMongoId)) {
            this.studentMongoIds.add(studentMongoId);
        }
    }

    public void removeStudentMongoIds(final String studentMongoId) {
        this.studentMongoIds.remove(studentMongoId);
    }

    @Override
    public int hashCode() {
        return com.google.common.base.Objects.hashCode(this.studentGroupName, this.institutionIdentifier,
                this.stateAbbreviation);
    }

    @Override
    public boolean equals(final Object obj) {

        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final StudentGroup other = (StudentGroup) obj;
        return com.google.common.base.Objects.equal(this.studentGroupName, other.studentGroupName)
                && com.google.common.base.Objects.equal(this.institutionIdentifier, other.institutionIdentifier)
                && com.google.common.base.Objects.equal(this.stateAbbreviation, other.stateAbbreviation)
                && com.google.common.base.Objects.equal(this.studentId, other.studentId);
    }
}
