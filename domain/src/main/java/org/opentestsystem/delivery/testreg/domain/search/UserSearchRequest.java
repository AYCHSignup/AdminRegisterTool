/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.domain.search;

import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.opentestsystem.shared.exception.LocalizedException;
import org.opentestsystem.shared.search.domain.SearchFilter;
import org.opentestsystem.shared.search.domain.SearchFilter.Operator;
import org.opentestsystem.shared.search.domain.SearchFilter.SearchDataType;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;

/**
 * SearchRequest class for the Student domain object
 */
public class UserSearchRequest extends AbstractTestRegNonEntitySearchRequest {

    private static final long serialVersionUID = 2778125280969640341L;
    private static final Logger LOGGER = LoggerFactory.getLogger(UserSearchRequest.class);
    public static final String SEARCH_KEY_FIRST_NAME = "firstName";
    public static final String SEARCH_KEY_LAST_NAME = "lastName";
    public static final String SEARCH_KEY_EMAIL = "email";
    public static final String SEARCH_KEY_EMAIL_EXACT = "emailExact";
    public static final String SEARCH_KEY_EMAIL_INSENSITIVE = "emailinsensitive";
    public static final String SEARCH_KEY_ERROR = "changeEventExportError";
    public static final String SEARCH_KEY_STATE = "roleAssociations.stateAbbreviation";
    public static final String SEARCH_KEY_ROLE = "roleAssociations.role";
    public static final String SEARCH_KEY_LEVEL = "roleAssociations.level";
    public static final String SEARCH_KEY_ASSOCIATED_ENTITY_ID = "roleAssociations.associatedEntityId";
    public static final String SEARCH_KEY_ENTITY_NAME = "entityName";
    public static final String SEARCH_KEY_LAST_PAGE_CLICKED = "lastPageClicked";
    public static final String SEARCH_KEY_EXPORT_SEARCH = "exportSearch";
    public static final String SEARCH_KEY_INSTITUTION_NAME = "institutionName";
    public static final String SEARCH_KEY_DISTRICT_NAME = "districtName";

    public static final String SEARCH_KEY_NAME_STATE_CODE = "stateAbbreviation";
    public static final String SEARCH_KEY_NAME_ROLE = "role";
    public static final String SEARCH_KEY_NAME_LEVEL = "level";
    public static final String SEARCH_KEY_NAME_ASSOCIATED_ENTITY_ID = "associatedEntityId";

    private static final String SEARCH_RESOURCE = "/user";

    private static final List<SearchFilter> SEARCH_FILTERS = Arrays.asList(new SearchFilter[] {
            new SearchFilter(SEARCH_KEY_FIRST_NAME, Operator.WLD_REG, SearchDataType.String),
            new SearchFilter(SEARCH_KEY_EMAIL, Operator.WLD_REG, SearchDataType.String),
            new SearchFilter(SEARCH_KEY_EMAIL_EXACT, "email", Operator.EQ, SearchDataType.String),
            new SearchFilter(SEARCH_KEY_EMAIL_INSENSITIVE, "email", Operator.CASE_INSENSITIVE, SearchDataType.String),
            new SearchFilter(SEARCH_KEY_LAST_NAME, Operator.WLD_REG, SearchDataType.String),
            new SearchFilter(SEARCH_KEY_ERROR, Operator.NOTNULL),
            new SearchFilter(SEARCH_KEY_STATE),
            new SearchFilter(SEARCH_KEY_ROLE),
            new SearchFilter(SEARCH_KEY_NAME_STATE_CODE, SEARCH_KEY_STATE, Operator.EQ, SearchDataType.String),
            new SearchFilter(SEARCH_KEY_NAME_ROLE, SEARCH_KEY_ROLE, Operator.EQ, SearchDataType.String),
            new SearchFilter(SEARCH_KEY_NAME_ASSOCIATED_ENTITY_ID, SEARCH_KEY_ASSOCIATED_ENTITY_ID, Operator.EQ, SearchDataType.String),
            new SearchFilter(SEARCH_KEY_DISTRICT_NAME, SEARCH_KEY_DISTRICT_NAME, Operator.WLD_REG, SearchDataType.String),
            new SearchFilter(SEARCH_KEY_INSTITUTION_NAME, SEARCH_KEY_INSTITUTION_NAME, Operator.WLD_REG, SearchDataType.String),
            new SearchFilter(SEARCH_KEY_NAME_LEVEL, SEARCH_KEY_LEVEL, Operator.EQ, SearchDataType.String) });

    private MongoTemplate mongoTemplate;
    
	private Set<String> accessibleEntityIds;

    private boolean lastPageSearch;

    private boolean isExportSearch;

    public UserSearchRequest(final Map<String, String[]> inRequestMap) {
        super(inRequestMap);
        lastPageSearch = inRequestMap.containsKey(SEARCH_KEY_LAST_PAGE_CLICKED);
        isExportSearch = inRequestMap.containsKey(SEARCH_KEY_EXPORT_SEARCH);
    }

    @Override
    public List<SearchFilter> getSearchFilters() {
        return SEARCH_FILTERS;
    }

    @Override
    public String getSearchResource() {
        return SEARCH_RESOURCE;
    }

    public void setMongoTemplate(final MongoTemplate mongoTemplate) {
        this.mongoTemplate = mongoTemplate;
    }

    public MongoTemplate getMongoTemplate() {
        return mongoTemplate;
    }

    @Override
    protected Map<String, Criteria> buildCustomCriteria(Map<String, Criteria> currentCriteriaMap) {
        Collection<String> permissibleEntityIds = getPermissibleEntityIds();
        boolean permissibleEntityIdsAvailable = permissibleEntityIds != null && permissibleEntityIds.size() > 0;
        Map<String, Criteria> newCriteriaMap = new HashMap<>(currentCriteriaMap);
        try {
			if (permissibleEntityIdsAvailable) {
				permissibleEntityIds.add(getCurrentUserId());
			    accessibleEntityIds = new HashSet<>(permissibleEntityIds);
			    Criteria accessibleUserCriteria = null;
                // Previously, the cached list of "visible" users was used as a filtering criteria for the search query.
                // For large loads (100k+ users), the size of the query resulting from having each userId can grow dramatically and effect performance.
                // Instead, let us filter by the list of accessible entity ids which is a much smaller query but should
                // yield the same results.
                //accessibleUserCriteria = Criteria.where("roleAssociations").elemMatch(Criteria.where("associatedEntityMongoId").in(accessibleEntityIds));
                accessibleUserCriteria = getAccessibleUserEntitiesCriteria(accessibleEntityIds);
				newCriteriaMap.put(accessibleUserCriteria.getKey(), accessibleUserCriteria);
			}

            // we need a more flexible way to search for the state abbreviation since the role assoc. at the state level don't hold
            // state abbreviation in the stateAbbreviation field (they store it as their associatedEntityId)
            Map<String, String[]> currentCriteria = this.getSearchCriteria();
            String keys[] = { UserSearchRequest.SEARCH_KEY_STATE, UserSearchRequest.SEARCH_KEY_NAME_STATE_CODE };
            for (String key : keys) {
                if (currentCriteria.containsKey(key)) {
                    Criteria replacementCriteria = new Criteria().orOperator(
                            Criteria.where(UserSearchRequest.SEARCH_KEY_ASSOCIATED_ENTITY_ID).is(currentCriteria.get(key)[0]),
                            Criteria.where(UserSearchRequest.SEARCH_KEY_STATE).is(currentCriteria.get(key)[0]));
                    newCriteriaMap.remove(UserSearchRequest.SEARCH_KEY_STATE); // since it was a copy of the currentCriteriaMap
                    newCriteriaMap.put(key, replacementCriteria);
                }
            }

        } catch (RuntimeException e) {
          LOGGER.error("Error forming search query due to invalid entities or other exception " , e);
          throw new LocalizedException("search.request.error");
        }
 
        return newCriteriaMap;
    }

	public Set<String> getAccessibleEntityIds() {
		if (accessibleEntityIds == null) {
  		    Collection<String> permissibleEntityIds = getPermissibleEntityIds();
			if (permissibleEntityIds != null && permissibleEntityIds.size() > 0) {
			    accessibleEntityIds = new HashSet<>(permissibleEntityIds);
		    	accessibleEntityIds.add(getCurrentUserId());
			}
		}
		return accessibleEntityIds;
	}

	public Criteria getAccessibleUserEntitiesCriteria(Collection<String> accessibleUserEntityIds) {
		Criteria accessibleUserCriteria = null;
		// Based on bug SB-1474 criteria to query user collection modified
		// Allowing Logged-in-User with out any protected roles can view/modify user that has at least one non-protected roles with in his jurisdiction
		// for that purpose criteria not in protectedRoles condition removed
		accessibleUserCriteria = Criteria.where("roleAssociations.associatedEntityMongoId").in(accessibleUserEntityIds);
		return accessibleUserCriteria;
	}

    public boolean isLastPageSearch() {
        return lastPageSearch;
    }

    public boolean isExportSearch() {
        return isExportSearch;
    }
}
