/*
Educational Online Test Delivery System Copyright (c) 2013 American Institutes for Research

Distributed under the AIR Open Source License, Version 1.0 See accompanying file AIR-License-1_0.txt or at
http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 */

package org.opentestsystem.delivery.testreg.domain;


import static org.apache.commons.lang.StringUtils.isNotEmpty;


import java.util.HashMap;
import java.util.Map;

import javax.validation.constraints.Size;

import org.hibernate.validator.constraints.NotBlank;

import org.opentestsystem.delivery.testreg.domain.constraints.Alphanumeric;

import org.opentestsystem.delivery.testreg.domain.constraints.ValidStateCode;
import org.opentestsystem.delivery.testreg.domain.search.AccommodationSearchRequest;
import org.opentestsystem.delivery.testreg.domain.search.StudentSearchRequest;
import org.opentestsystem.shared.search.domain.AbstractSearchRequest;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.index.CompoundIndex;
import org.springframework.data.mongodb.core.index.CompoundIndexes;
import org.springframework.data.mongodb.core.index.Indexed;
import org.springframework.data.mongodb.core.mapping.Document;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.annotations.XStreamOmitField;

/**
 * Be aware that accommodation work a bit differently from the other types. They are either add or replace when imported
 * via file.
 */
@SuppressWarnings({ "PMD.ShortVariable" })
@Document
@JsonIgnoreProperties(ignoreUnknown = true)
@CompoundIndexes(value = { @CompoundIndex(name = "ssidAndStateAndSubject", def = "{'studentId':1, 'stateAbbreviation':1, 'subject':1}", unique = true) })
@XStreamAlias("Accommodation")
@XmlNotNull({ "americanSignLanguage", "closedCaptioning", "colorContrast", "textToSpeech", "language", "masking",
        "permissiveMode", "translation", "printOnDemand", "printSize", "streamlinedInterface", "textToSpeech",
        "nonEmbeddedDesignatedSupports", "nonEmbeddedAccommodations", "other" })
@XmlOrderSequence({ "subject", "americanSignLanguage", "colorContrast", "closedCaptioning", "language",
        "masking", "permissiveMode", "printOnDemand", "printSize", "streamlinedInterface",
        "textToSpeech", "translation", "nonEmbeddedDesignatedSupports", "nonEmbeddedAccommodations", "other" })
// fix xml order sequence when student package def is updated
public class Accommodation implements Sb11NonEntity {

    private static final long serialVersionUID = -7403059313251895455L;
    private static final String GET_RESOURCE_NAME = "/accommodation/";
    public static final FormatType FORMAT_TYPE = FormatType.DESIGNATEDSUPPORTSANDACCOMMODATIONS;
    public static final char DELIMETER = ';';

    @Id
    @XStreamOmitField
    private String id;

    @Indexed
    @NotBlank(message = "{accommodation.studentid.blank}")
    @Alphanumeric(message = "{accommodation.studentid.alphanumeric}")
    @Size(max = 40, message = "{accommodation.studentid.size.max}")
    @FieldLabel("StudentIdentifier")
    @XStreamOmitField
    private String studentId;

    // length of 2, alpha
    @NotBlank(message = "{stateabbreviation.blank}")
    @ValidStateCode
    @FieldLabel("StateAbbreviation")
    @XStreamOmitField
    private String stateAbbreviation;

    @NotBlank(message = "{accommodation.subject.blank}")
    @Alphanumeric(message = "{accommodation.subject.alphanumeric}")
    @Size(max = 20, message = "{accommodation.subject.size.max}")
    @FieldLabel("Subject")
    @XStreamAlias("SubjectCode")
    private String subject;

    
    public static class Builder implements TestRegistrationBuilder<Accommodation> {

        private final Object[] builderVals;

        public Builder(final Object... inVals) {
            this.builderVals = inVals;
        }

        @Override
        public Accommodation build() {

            final Accommodation builtObject = new Accommodation();

            // object array is in the order of file: StudentIdentifier, StateAbbreviation, Subject,
            // AmericanSignLanguage, ColorContrast, ClosedCaptioning, Language, Masking, PermissiveMode,
            // PrintOnDemand, PrintSize, StreamlinedInterface, TexttoSpeech, Translation,
            // NonEmbeddedDesignatedSupports, NonEmbeddedAccommodations, Other

            builtObject.setStudentId((String) this.builderVals[0]);
            builtObject.setStateAbbreviation(isNotEmpty((String) this.builderVals[1]) ? ((String) this.builderVals[1])
                    .toUpperCase() : "");
            builtObject.setSubject(((String) this.builderVals[2]).toUpperCase());

            return builtObject;

        }

    }

    @Override
    public String getId() {
        return this.id;
    }

    @Override
    public void setId(final String inId) {
        this.id = inId;
    }

    public String getStudentId() {
        return this.studentId;
    }

    public void setStudentId(final String inStudentId) {
        this.studentId = inStudentId;
    }
    

    public String getStateAbbreviation() {
        return this.stateAbbreviation;
    }

    public void setStateAbbreviation(final String inStateAbbreviation) {
        this.stateAbbreviation = inStateAbbreviation;
    }

    public String getSubject() {
        return this.subject;
    }

    public void setSubject(final String inSubject) {

        this.subject = inSubject;

    }

    @Override
    public String[] toStringArray() {
        final String[] elements = new String[15];
        elements[0] = getSubject();
        return elements;

    }

    @JsonProperty
    public String getUrl() {
        return GET_RESOURCE_NAME + this.id;
    }

    @Override
    public FormatType getFormatType() {
        return FORMAT_TYPE;
    }

    // TODO this is not needed and will change globally
    @Override
    public Action getAction() {
        return Action.UPD;
    }

    @Override
    public String getAlternateKey() {
        return new StringBuilder().append("studentId: ").append(this.studentId).append(", stateAbbreviation: ")
                .append(this.stateAbbreviation).append(", subject: ").append("subject").toString();
    }

    @Override
    public AbstractSearchRequest createAlternateKeySearchRequest() {
        final Map<String, String[]> reqMap = new HashMap<String, String[]>();
        reqMap.put(AccommodationSearchRequest.SEARCH_KEY_STUDENT_ID, new String[] { this.studentId });
        reqMap.put(AccommodationSearchRequest.SEARCH_KEY_STATE_ABBR, new String[] { this.stateAbbreviation });
        reqMap.put(AccommodationSearchRequest.SEARCH_KEY_SUBJECT_EXACT, new String[] { this.subject });

        final AccommodationSearchRequest request = new AccommodationSearchRequest(reqMap);

        return request;
    }

    public AbstractSearchRequest createParentAlternateKeySearchRequest() {
        final Map<String, String[]> reqMap = new HashMap<String, String[]>();
        reqMap.put(StudentSearchRequest.SEARCH_KEY_ENTITY_ID_EXACT, new String[] { this.studentId });
        reqMap.put(StudentSearchRequest.SEARCH_KEY_STATE_ID, new String[] { this.stateAbbreviation });

        final StudentSearchRequest request = new StudentSearchRequest(reqMap);

        return request;
    }

    @Override
    public boolean equals(final Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Accommodation other = (Accommodation) obj;

        return com.google.common.base.Objects.equal(this.studentId, other.studentId)
                && com.google.common.base.Objects.equal(this.stateAbbreviation, other.stateAbbreviation)
                && com.google.common.base.Objects.equal(this.subject, other.subject);
    }

    @Override
    public int hashCode() {
        return com.google.common.base.Objects.hashCode(this.studentId, this.stateAbbreviation, this.subject);
    }
}
