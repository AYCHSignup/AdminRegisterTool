/*
Educational Online Test Delivery System Copyright (c) 2013 American Institutes for Research

Distributed under the AIR Open Source License, Version 1.0 See accompanying file AIR-License-1_0.txt or at
http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 */

package org.opentestsystem.delivery.testreg.domain;

import static org.apache.commons.lang.StringUtils.isNotEmpty;

import java.util.HashMap;
import java.util.Map;

import javax.validation.constraints.Size;

import org.hibernate.validator.constraints.NotBlank;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.AmericanSignLanguage;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.ClosedCaptioning;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.ColorContrast;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.Language;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.Masking;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.NonEmbeddedAccommodations;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.NonEmbeddedDesignatedSupports;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.PermissiveMode;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.PrintOnDemand;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.PrintSize;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.StreamlinedInterface;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.TextToSpeech;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.Translation;
import org.opentestsystem.delivery.testreg.domain.constraints.Alphanumeric;
import org.opentestsystem.delivery.testreg.domain.constraints.Ascii;
import org.opentestsystem.delivery.testreg.domain.constraints.AtLeastOneAccommodation;
import org.opentestsystem.delivery.testreg.domain.constraints.ValidEnumType;
import org.opentestsystem.delivery.testreg.domain.constraints.ValidStateCode;
import org.opentestsystem.delivery.testreg.domain.search.AccommodationSearchRequest;
import org.opentestsystem.delivery.testreg.domain.search.StudentSearchRequest;
import org.opentestsystem.shared.search.domain.AbstractSearchRequest;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.index.CompoundIndex;
import org.springframework.data.mongodb.core.index.CompoundIndexes;
import org.springframework.data.mongodb.core.index.Indexed;
import org.springframework.data.mongodb.core.mapping.Document;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.annotations.XStreamOmitField;

/**
 * Be aware that accommodation work a bit differently from the other types. They are either add or replace when imported
 * via file.
 */
@SuppressWarnings({ "PMD.ShortVariable" })
@Document
@JsonIgnoreProperties(ignoreUnknown = true)
@AtLeastOneAccommodation
@CompoundIndexes(value = { @CompoundIndex(name = "ssidAndStateAndSubject", def = "{'studentId':1, 'stateAbbreviation':1, 'subject':1}", unique = true) })
@XStreamAlias("Accommodation")
@XmlNotNull({ "americanSignLanguage", "closedCaptioning", "colorContrast", "textToSpeech", "language", "masking",
        "permissiveMode", "translation", "printOnDemand", "printSize", "streamlinedInterface", "textToSpeech",
        "nonEmbeddedDesignatedSupports", "nonEmbeddedAccommodations", "other" })
@XmlOrderSequence({ "subject", "americanSignLanguage", "colorContrast", "closedCaptioning", "language",
        "masking", "permissiveMode", "printOnDemand", "printSize", "streamlinedInterface",
        "textToSpeech", "translation", "nonEmbeddedDesignatedSupports", "nonEmbeddedAccommodations", "other" })
// fix xml order sequence when student package def is updated
public class Accommodation implements Sb11NonEntity {

    private static final long serialVersionUID = -7403059313251895455L;
    private static final String GET_RESOURCE_NAME = "/accommodation/";
    public static final FormatType FORMAT_TYPE = FormatType.ACCOMMODATIONS;

    @Id
    @XStreamOmitField
    private String id;

    @Indexed
    @NotBlank(message = "{accommodation.studentid.blank}")
    @Alphanumeric(message = "{accommodation.studentid.alphanumeric}")
    @Size(max = 40, message = "{accommodation.studentid.size.max}")
    @FieldLabel("StudentIdentifier")
    @XStreamOmitField
    private String studentId;

    // length of 2, alpha
    @NotBlank(message = "{stateabbreviation.blank}")
    @ValidStateCode
    @FieldLabel("StateAbbreviation")
    @XStreamOmitField
    private String stateAbbreviation;

    @NotBlank(message = "{accommodation.subject.blank}")
    @Alphanumeric(message = "{accommodation.subject.alphanumeric}")
    @Size(max = 20, message = "{accommodation.subject.size.max}")
    @FieldLabel("Subject")
    @XStreamAlias("SubjectCode")
    private String subject;

    @ValidEnumType(types = { "TDS_ASL0", "TDS_ASL1" }, message = "{accommodation.asl.invalid}")
    @FieldLabel("AmericanSignLanguage")
    @XStreamAlias("AmericanSignLanguage")
    private String americanSignLanguage;

    @ValidEnumType(types = { "TDS_CCMagenta", "TDS_CCMedGrayLtGray", "TDS_CCYellowB", "TDS_CCInvert", "TDS_CC0" }, message = "{accommodation.colorcontrast.invalid}")
    @FieldLabel("ColorContrast")
    @XStreamAlias("ColorChoice")
    private String colorContrast;

    @ValidEnumType(types = { "TDS_ClosedCap0", "TDS_ClosedCap1" }, message = "{accommodation.closedcaptioning.invalid}")
    @FieldLabel("ClosedCaptioning")
    @XStreamAlias("ClosedCaptioning")
    private String closedCaptioning;

    @ValidEnumType(types = { "ENU", "ENU-Braille", "ESN" }, message = "{accommodation.language.invalid}")
    @FieldLabel("Language")
    @XStreamAlias("Language")
    private String language;

    @ValidEnumType(types = { "TDS_Masking0", "TDS_Masking1" }, message = "{accommodation.masking.invalid}")
    @FieldLabel("Masking")
    @XStreamAlias("Masking")
    private String masking;

    @ValidEnumType(types = { "TDS_PM0", "TDS_PM1" }, message = "{accommodation.permissivemode.invalid}")
    @FieldLabel("PermissiveMode")
    @XStreamAlias("PermissiveMode")
    private String permissiveMode;

    @ValidEnumType(types = { "TDS_PoD_Stim", "TDS_PoD0" }, message = "{accommodation.printondemand.invalid}")
    @FieldLabel("PrintOnDemand")
    @XStreamAlias("PrintOnDemand")
    private String printOnDemand;

    @ValidEnumType(types = { "TDS_PS_L0", "TDS_PS_L1", "TDS_PS_L2", "TDS_PS_L3", "TDS_PS_L4" }, message = "{accommodation.printsize.invalid}")
    @FieldLabel("PrintSize")
    @XStreamAlias("PrintSize")
    private String printSize;

    @ValidEnumType(types = { "TDS_TS_Modern", "TDS_TS_Accessibility" }, message = "{accommodation.streamlinedinterface.invalid}")
    @FieldLabel("StreamlinedInterface")
    @XStreamAlias("StreamlinedInterface")
    private String streamlinedInterface;

    @ValidEnumType(types = { "TDS_TTS_Stim&TDS_TTS_Item", "TDS_TTS_Item", "TDS_TTS_Stim", "TDS_TTS0" }, message = "{accommodation.texttospeech.invalid}")
    @FieldLabel("TexttoSpeech")
    @XStreamAlias("TexttoSpeech")
    private String textToSpeech;

    @ValidEnumType(types = { "TDS_WL_Glossary", "TDS_WL_ArabicGloss", "TDS_WL_CantoneseGloss", "TDS_WL_ESNGlossary",
            "TDS_WL_KoreanGloss", "TDS_WL_MandarinGloss", "TDS_WL_PunjabiGloss", "TDS_WL_RussianGloss",
            "TDS_WL_TagalGloss", "TDS_WL_UkrainianGloss", "TDS_WL_VietnameseGloss",
            "TDS_WL_Glossary&TDS_WL_ArabicGloss", "TDS_WL_Glossary&TDS_WL_CantoneseGloss",
            "TDS_WL_Glossary&TDS_WL_ESNGlossary", "TDS_WL_Glossary&TDS_WL_KoreanGloss",
            "TDS_WL_Glossary&TDS_WL_MandarinGloss", "TDS_WL_Glossary&TDS_WL_PunjabiGloss",
            "TDS_WL_Glossary&TDS_WL_RussianGloss", "TDS_WL_Glossary&TDS_WL_TagalGloss",
            "TDS_WL_Glossary&TDS_WL_UkrainianGloss", "TDS_WL_Glossary&TDS_WL_VietnameseGloss", "TDS_WL0" }, message = "{accommodation.translation.invalid}")
    @FieldLabel("Translation")
    @XStreamAlias("Translation")
    private String translation;

    @ValidEnumType(types = { "NEDS0", "NEDS_BD", "NEDS_CC", "NEDS_CO", "NEDS_Mag", "NEDS_RA_Items", "NEDS_SC_Items",
            "NEDS_SS", "NEDS_TArabic", "NEDS_TCantonese", "NEDS_TFilipino", "NEDS_TKorean", "NEDS_TMandarin",
            "NEDS_TPunjabi", "NEDS_TRussian", "NEDS_TSpanish", "NEDS_TUkrainian", "NEDS_TVietnamese" }, message = "{accommodation.nonembedded.designatedsupports.invalid}")
    @FieldLabel("NonEmbeddedDesignatedSupports")
    @XStreamAlias("NonEmbeddedDesignatedSupports")
    private String nonEmbeddedDesignatedSupports;

    @ValidEnumType(types = { "NEA0", "NEA_AR", "NEA_RA_Stimuli", "NEA_SC_WritItems", "NEA_STT", "NEA_Abacus",
            "NEA_Calc", "NEA_MT" }, message = "{accommodation.nonembedded.accommodations.invalid}")
    @FieldLabel("NonEmbeddedAccommodations")
    @XStreamAlias("NonEmbeddedAccommodations")
    private String nonEmbeddedAccommodations;

    @Ascii(isExtended = true, message = "{accommodation.other.invalid}")
    @Size(max = 300, message = "{accommodation.other.size.max}")
    @FieldLabel("Other")
    @XStreamAlias("Other")
    private String other;

    @FieldLabel("<Any of the Accommodation Related Field>")
    @XStreamOmitField
    private final String atleastOneAccommodationField = ""; // Stub for Display. Not to be used anywhere

    public static class Builder implements TestRegistrationBuilder<Accommodation> {

        private final Object[] builderVals;

        public Builder(final Object... inVals) {
            this.builderVals = inVals;
        }

        @Override
        public Accommodation build() {

            final Accommodation builtObject = new Accommodation();

            // object array is in the order of file: StudentIdentifier, StateAbbreviation, Subject,
            // AmericanSignLanguage, ColorContrast, ClosedCaptioning, Language, Masking, PermissiveMode,
            // PrintOnDemand, PrintSize, StreamlinedInterface, TexttoSpeech, Translation,
            // NonEmbeddedDesignatedSupports, NonEmbeddedAccommodations, Other

            builtObject.setStudentId((String) this.builderVals[0]);
            builtObject.setStateAbbreviation(isNotEmpty((String) this.builderVals[1]) ? ((String) this.builderVals[1])
                    .toUpperCase() : "");
            builtObject.setSubject(((String) this.builderVals[2]).toUpperCase());
            builtObject.setAmericanSignLanguage((String) this.builderVals[3]);
            builtObject.setColorContrast((String) this.builderVals[4]);
            builtObject.setClosedCaptioning((String) this.builderVals[5]);
            builtObject.setLanguage((String) this.builderVals[6]);
            builtObject.setMasking((String) this.builderVals[7]);
            builtObject.setPermissiveMode((String) this.builderVals[8]);
            builtObject.setPrintOnDemand((String) this.builderVals[9]);
            builtObject.setPrintSize((String) this.builderVals[10]);
            builtObject.setStreamlinedInterface((String) this.builderVals[11]);
            builtObject.setTextToSpeech((String) this.builderVals[12]);
            builtObject.setTranslation((String) this.builderVals[13]);
            builtObject.setNonEmbeddedDesignatedSupports((String) this.builderVals[14]);
            builtObject.setNonEmbeddedAccommodations((String) this.builderVals[15]);
            builtObject.setOther((String) this.builderVals[16]);

            return builtObject;

        }

    }

    @Override
    public String getId() {
        return this.id;
    }

    @Override
    public void setId(final String inId) {
        this.id = inId;
    }

    public String getStudentId() {
        return this.studentId;
    }

    public void setStudentId(final String inStudentId) {
        this.studentId = inStudentId;
    }

    public String getSubject() {
        return this.subject;
    }

    public void setSubject(final String inSubject) {

        this.subject = inSubject;

    }

    public AmericanSignLanguage getAmericanSignLanguage() {
        if (isNotEmpty(this.americanSignLanguage)) {
            return AmericanSignLanguage.getEnumByValue(this.americanSignLanguage);
        } else {
            return null;
        }
    }

    public void setAmericanSignLanguage(final AmericanSignLanguage inAslVideos) {
        if (inAslVideos != null) {
            this.americanSignLanguage = inAslVideos.name();
        }
    }

    @JsonProperty
    public void setAmericanSignLanguage(final String inAmericanSignLanguage) {
        this.americanSignLanguage = inAmericanSignLanguage;
    }

    public ClosedCaptioning getClosedCaptioning() {
        if (isNotEmpty(this.closedCaptioning)) {
            return ClosedCaptioning.getEnumByValue(this.closedCaptioning);
        } else {
            return null;
        }
    }

    public void setClosedCaptioning(final ClosedCaptioning inClosedCaptioning) {
        if (inClosedCaptioning != null) {
            this.closedCaptioning = inClosedCaptioning.name();
        }
    }

    @JsonProperty
    public void setClosedCaptioning(final String inClosedCaptioning) {
        this.closedCaptioning = inClosedCaptioning;
    }

    public ColorContrast getColorContrast() {
        if (isNotEmpty(this.colorContrast)) {
            return ColorContrast.getEnumByValue(this.colorContrast);
        } else {
            return null;
        }
    }

    public void setColorContrast(final ColorContrast inColorChoice) {
        if (inColorChoice != null) {
            this.colorContrast = inColorChoice.name();
        }
    }

    @JsonProperty
    public void setColorContrast(final String inColorContrast) {
        this.colorContrast = inColorContrast;
    }

    public TextToSpeech getTextToSpeech() {
        if (isNotEmpty(this.textToSpeech)) {
            return TextToSpeech.getEnumByValue(this.textToSpeech);
        } else {
            return null;
        }
    }

    public void setTextToSpeech(final TextToSpeech inTextToSpeech) {
        if (inTextToSpeech != null) {
            this.textToSpeech = inTextToSpeech.name();
        }
    }

    @JsonProperty
    public void setTextToSpeech(final String inTextToSpeech) {
        this.textToSpeech = inTextToSpeech;
    }

    public Language getLanguage() {
        if (isNotEmpty(this.language)) {
            return Language.getEnumByValue(this.language);
        } else {
            return null;
        }
    }

    public void setLanguage(final Language inLanguage) {
        if (inLanguage != null) {
            this.language = inLanguage.name();
        }
    }

    @JsonProperty
    public void setLanguage(final String inLanguage) {
        this.language = inLanguage;
    }

    public Translation getTranslation() {
        if (isNotEmpty(this.translation)) {
            return Translation.getEnumByValue(this.translation);
        } else {
            return null;
        }
    }

    @JsonProperty
    public void setTranslation(final String inTranslation) {
        this.translation = inTranslation;
    }

    public void setTranslation(final Translation inGlossary) {
        if (inGlossary != null) {
            this.translation = inGlossary.name();
        }
    }

    public PrintOnDemand getPrintOnDemand() {
        if (isNotEmpty(this.printOnDemand)) {
            return PrintOnDemand.getEnumByValue(this.printOnDemand);
        } else {
            return null;
        }
    }

    @JsonProperty
    public void setPrintOnDemand(final String inPrintOnDemand) {
        this.printOnDemand = inPrintOnDemand;
    }

    public void setPrintOnDemand(final PrintOnDemand inPrintOnRequest) {
        if (inPrintOnRequest != null) {
            this.printOnDemand = inPrintOnRequest.name();
        }
    }

    public PrintSize getPrintSize() {
        if (isNotEmpty(this.printSize)) {
            return PrintSize.getEnumByValue(this.printSize);
        } else {
            return null;
        }
    }

    public void setPrintSize(final PrintSize inPrintSize) {
        if (inPrintSize != null) {
            this.printSize = inPrintSize.name();
        }
    }

    @JsonProperty
    public void setPrintSize(final String inPrintSize) {
        this.printSize = inPrintSize;
    }

    public String getStateAbbreviation() {
        return this.stateAbbreviation;
    }

    public void setStateAbbreviation(final String inStateAbbreviation) {
        this.stateAbbreviation = inStateAbbreviation;
    }

    public Masking getMasking() {
        if (isNotEmpty(this.masking)) {
            return Masking.getEnumByValue(this.masking);
        } else {
            return null;
        }
    }

    @JsonProperty
    public void setMasking(final String masking) {
        this.masking = masking;
    }

    public void setMasking(final Masking inMasking) {
        if (inMasking != null) {
            this.masking = inMasking.name();
        }
    }

    public PermissiveMode getPermissiveMode() {
        if (isNotEmpty(this.permissiveMode)) {
            return PermissiveMode.getEnumByValue(this.permissiveMode);
        } else {
            return null;
        }
    }

    @JsonProperty
    public void setPermissiveMode(final String permissiveMode) {
        this.permissiveMode = permissiveMode;
    }

    public void setPermissiveMode(final PermissiveMode inPermissiveMode) {
        if (inPermissiveMode != null) {
            this.permissiveMode = inPermissiveMode.name();
        }
    }

    public StreamlinedInterface getStreamlinedInterface() {
        if (isNotEmpty(this.streamlinedInterface)) {
            return StreamlinedInterface.getEnumByValue(this.streamlinedInterface);
        } else {
            return null;
        }
    }

    @JsonProperty
    public void setStreamlinedInterface(final String streamlinedInterface) {
        this.streamlinedInterface = streamlinedInterface;
    }

    public void setStreamlinedInterface(final StreamlinedInterface inStreamlinedInterface) {
        if (inStreamlinedInterface != null) {
            this.streamlinedInterface = inStreamlinedInterface.name();
        }
    }

    public NonEmbeddedDesignatedSupports getNonEmbeddedDesignatedSupports() {
        if (isNotEmpty(this.nonEmbeddedDesignatedSupports)) {
            return NonEmbeddedDesignatedSupports.getEnumByValue(this.nonEmbeddedDesignatedSupports);
        } else {
            return null;
        }
    }

    @JsonProperty
    public void setNonEmbeddedDesignatedSupports(final String nonEmbeddedDesignatedSupports) {
        this.nonEmbeddedDesignatedSupports = nonEmbeddedDesignatedSupports;
    }

    public void setNonEmbeddedDesignatedSupports(final NonEmbeddedDesignatedSupports inNonEmbeddedDesignatedSupports) {
        if (inNonEmbeddedDesignatedSupports != null) {
            this.nonEmbeddedDesignatedSupports = inNonEmbeddedDesignatedSupports.name();
        }
    }

    public NonEmbeddedAccommodations getNonEmbeddedAccommodations() {
        if (isNotEmpty(this.nonEmbeddedAccommodations)) {
            return NonEmbeddedAccommodations.getEnumByValue(this.nonEmbeddedAccommodations);
        } else {
            return null;
        }
    }

    @JsonProperty
    public void setNonEmbeddedAccommodations(final String nonEmbeddedAccommodations) {
        this.nonEmbeddedAccommodations = nonEmbeddedAccommodations;
    }

    public void setNonEmbeddedAccommodations(final NonEmbeddedAccommodations inNonEmbeddedAccommodations) {
        if (inNonEmbeddedAccommodations != null) {
            this.nonEmbeddedAccommodations = inNonEmbeddedAccommodations.name();
        }
    }

    public String getAtleastOneAccommodationField() {
        return this.atleastOneAccommodationField;
    }

    public String getOther() {
        return this.other;
    }

    public void setOther(final String other) {
        this.other = other;
    }

    @Override
    public String[] toStringArray() {
        final String[] elements = new String[15];
        elements[0] = getSubject();
        elements[1] = getAmericanSignLanguage() != null ? getAmericanSignLanguage().name() : "";
        elements[2] = getColorContrast() != null ? getColorContrast().name() : "";
        elements[3] = getClosedCaptioning() != null ? getClosedCaptioning().name() : "";
        elements[4] = getLanguage() != null ? getLanguage().name() : "";
        elements[5] = getMasking() != null ? getMasking().name() : "";
        elements[6] = getPermissiveMode() != null ? getPermissiveMode().name() : "";
        elements[7] = getPrintOnDemand() != null ? getPrintOnDemand().name() : "";
        elements[8] = getPrintSize() != null ? getPrintSize().name() : "";
        elements[9] = getStreamlinedInterface() != null ? getStreamlinedInterface().name() : "";
        elements[10] = getTextToSpeech() != null ? getTextToSpeech().name() : "";
        elements[11] = getTranslation() != null ? getTranslation().name() : "";
        elements[12] = getNonEmbeddedDesignatedSupports() != null ? getNonEmbeddedDesignatedSupports().name() : "";
        elements[13] = getNonEmbeddedAccommodations() != null ? getNonEmbeddedAccommodations().name() : "";
        elements[14] = getOther();

        return elements;

    }

    @JsonProperty
    public String getUrl() {
        return GET_RESOURCE_NAME + this.id;
    }

    @Override
    public FormatType getFormatType() {
        return FORMAT_TYPE;
    }

    // TODO this is not needed and will change globally
    @Override
    public Action getAction() {
        return Action.UPD;
    }

    @Override
    public String getAlternateKey() {
        return new StringBuilder().append("studentId: ").append(this.studentId).append(", stateAbbreviation: ")
                .append(this.stateAbbreviation).append(", subject: ").append("subject").toString();
    }

    @Override
    public AbstractSearchRequest createAlternateKeySearchRequest() {
        final Map<String, String[]> reqMap = new HashMap<String, String[]>();
        reqMap.put(AccommodationSearchRequest.SEARCH_KEY_STUDENT_ID, new String[] { this.studentId });
        reqMap.put(AccommodationSearchRequest.SEARCH_KEY_STATE_ABBR, new String[] { this.stateAbbreviation });
        reqMap.put(AccommodationSearchRequest.SEARCH_KEY_SUBJECT_EXACT, new String[] { this.subject });

        final AccommodationSearchRequest request = new AccommodationSearchRequest(reqMap);

        return request;
    }

    public AbstractSearchRequest createParentAlternateKeySearchRequest() {
        final Map<String, String[]> reqMap = new HashMap<String, String[]>();
        reqMap.put(StudentSearchRequest.SEARCH_KEY_ENTITY_ID_EXACT, new String[] { this.studentId });
        reqMap.put(StudentSearchRequest.SEARCH_KEY_STATE_ID, new String[] { this.stateAbbreviation });

        final StudentSearchRequest request = new StudentSearchRequest(reqMap);

        return request;
    }

    @Override
    public boolean equals(final Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Accommodation other = (Accommodation) obj;

        return com.google.common.base.Objects.equal(this.studentId, other.studentId)
                && com.google.common.base.Objects.equal(this.stateAbbreviation, other.stateAbbreviation)
                && com.google.common.base.Objects.equal(this.subject, other.subject);
    }

    @Override
    public int hashCode() {
        return com.google.common.base.Objects.hashCode(this.studentId, this.stateAbbreviation, this.subject);
    }
}
