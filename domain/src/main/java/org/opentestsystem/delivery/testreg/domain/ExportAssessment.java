/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.domain;

import static java.lang.String.valueOf;
import static org.apache.commons.lang.ArrayUtils.isEmpty;

import java.util.ArrayList;
import java.util.List;

import org.opentestsystem.delivery.testreg.domain.Assessment.TestWindow;

/**
 * A Class Type intended for exporting {@link Assessment}. Understand that this class is used during all forms of
 * export. (csv, excel or json).
 */
public class ExportAssessment {

    List<Assessment> assessments;

    public ExportAssessment(List<Assessment> assessments) {
        this.assessments = assessments;
    }

    public List<Assessment> getAssessments() {
        return assessments;
    }

    /**
     * Assessments are individualized based on the number of TestWindows. This is mainly done to flatten the Assessment
     * object to report multiple test windows for it to be properly exported as excel or csv.
     *
     * @return List of Assessments containing only one TestWindow
     */
    public List<Assessment> getIndividualizedTestWindowAssessment() {
        List<Assessment> assessmentWithIndividualTestWindow = new ArrayList<Assessment>();
        for (final Assessment assessment : assessments) {

            if (isEmpty(assessment.getTestWindow())) {
                flattenAssessmentWithTestWindow(assessmentWithIndividualTestWindow, assessment,
                        new Assessment.TestWindow());

            } else {
                for (final TestWindow testWindow : assessment.getTestWindow()) {
                    flattenAssessmentWithTestWindow(assessmentWithIndividualTestWindow, assessment, testWindow);
                }
            }
        }
        return assessmentWithIndividualTestWindow;
    }

    @SuppressWarnings("serial")
    private void flattenAssessmentWithTestWindow(List<Assessment> assessmentWithIndividualTestWindow,
            final Assessment assessment, final TestWindow testWindow) {
        assessmentWithIndividualTestWindow.add(new Assessment() {
            {
                setDelayRule(assessment.getDelayRule());
                setEligibilityType(assessment.getEligibilityType());
                setEntityId(assessment.getEntityId());
                setImplicitEligibilityRules(assessment.getImplicitEligibilityRules());
                setNumGlobalOpportunities(assessment.getNumGlobalOpportunities());
                setSubjectCode(assessment.getSubjectCode());
                setGrade(assessment.getGrade());
                setTenantId(assessment.getTenantId());
                setTestName(assessment.getTestName());
                setTestWindow(new TestWindow[] { testWindow });
                setVersion(assessment.getVersion());
                setId(assessment.getId());
                setAcademicYear(assessment.getAcademicYear());
            }

            /**
             * Overrides the default and returns the only columns that are needed. Mainly used during export as CSV and
             * Excel.
             */
            @Override
            public String[] toStringArray() {
                return new String[] {
                        getEntityId(),
                        getTestName(),
                        getTestWindow()[0].getBeginWindow() == null ? "" : getTestWindow()[0].getBeginWindow()
                                .toString(),
                        getTestWindow()[0].getEndWindow() == null ? "" : getTestWindow()[0].getEndWindow().toString(),
                        getTestWindow()[0].getNumOpportunities() == null ? "" : valueOf(getTestWindow()[0]
                                .getNumOpportunities()), getSubjectCode(), getVersion(),
                        getDelayRule() == null ? "" : valueOf(getDelayRule()),
                        getNumGlobalOpportunities() == null ? "" : valueOf(getNumGlobalOpportunities()),
                        getEligibilityType().name(),
                        getAcademicYear() == null ? "" : getAcademicYear(),
                        getGrade() == null ? "" : getGrade() };
            }
        });
    }
}
