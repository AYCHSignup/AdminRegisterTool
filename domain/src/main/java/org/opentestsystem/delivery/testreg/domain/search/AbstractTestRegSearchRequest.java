/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.domain.search;

import org.opentestsystem.shared.search.domain.AbstractSearchRequest;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;

import java.util.Collection;
import java.util.Map;

public abstract class AbstractTestRegSearchRequest extends AbstractSearchRequest {

    private static final long serialVersionUID = 15641654L;

    private static final Logger LOGGER = LoggerFactory.getLogger(AbstractTestRegSearchRequest.class);

    private Collection<String> permissibleEntityIds;
    private Collection<String> inaccessibleProtectedRoles;
    private String currentUserId;

    /**
     * Whether or not to apply the hierarchy filtering. True by default
     */
    private boolean filter = true;

    public AbstractTestRegSearchRequest(final Map<String, String[]> requestMap) {
        super(requestMap);
    }

    public void setFilter(final boolean inFilter) {
        this.filter = inFilter;
    }

    public boolean isFilter() {
        return filter;
    }

    // AOP will be calling this method...
    public void setPermissibleEntityIds(final Collection<String> permissibleEntityIds) {
        this.permissibleEntityIds = permissibleEntityIds;
    }

    // AOP will be calling this method...
    public void setInaccessibleProtectedRoleNames(final Collection<String> inaccessibleProtectedRoles) {
        this.inaccessibleProtectedRoles = inaccessibleProtectedRoles;
    }

    // AOP will be calling this method...
    public void setCurrentUserId(String currentUserId) {
        this.currentUserId = currentUserId;
    }

    protected abstract Map<String, Criteria> buildCustomCriteria(Map<String, Criteria> incomingCriteria);

    // entities that are accessible by the current user
    protected Collection<String> getPermissibleEntityIds() {
        return permissibleEntityIds;
    }

    // roles that are NOT accessible by the current user
    protected Collection<String> getInaccessibleProtectedRoleNames() {
        return inaccessibleProtectedRoles;
    }

    protected String getCurrentUserId() {
        return currentUserId;
    }

    /*
     * This method will add an additional filter to limit results to only objects that the current user has permission
     * to interact with.
     */
    @Override
    protected Map<String, Criteria> buildCriteria() {
        LOGGER.trace("enhancing criteria with where applicable...");
        Map<String, Criteria> currentCriteriaMap = super.buildCriteria();
        return buildCustomCriteria(currentCriteriaMap);
    }

    @Override
    public final Query buildQuery() {
        return super.composeQuery(this.buildCriteria().values());
    }
}
