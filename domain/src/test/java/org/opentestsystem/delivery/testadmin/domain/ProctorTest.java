/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testadmin.domain;

import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;
import static org.opentestsystem.delivery.testadmin.domain.Affinity.AffinityType.GRADE;
import static org.opentestsystem.delivery.testadmin.domain.Affinity.AffinityType.SUBJECT;

import java.util.Arrays;
import java.util.Set;

import javax.validation.ConstraintViolation;
import javax.validation.Validator;

import org.joda.time.DateTime;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.delivery.testadmin.domain.Affinity.AffinityRule;
import org.opentestsystem.delivery.testadmin.domain.Proctor.AvailabilityWindow;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import com.google.common.collect.Lists;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "classpath:spring/domain-context.xml" })
public class ProctorTest {

    private static final String TIMEPERIOD_END_TIME_MESSAGE = "Start time must be before the end time for a time period";

    private static final String TIMEPERIOD_NULL_END_TIME_MESSAGE = "End Time is required";

    private static final String TIMEPERIOD_NULL_START_TIME_MESSAGE = "Start Time is required";

    private static final String TIMEPERIOD_AVAILABILITY_EMPTY_MESSAGE = "Availability is required";

    @Autowired
    private Validator validator;

    private Proctor proctor;

    @Before
    public void setup() {
        proctor = new Proctor();
    }

    @After
    public void teardown() {
        proctor = null;
    }

    @Test
    public void testNullOrBlankEndTime() {
        AvailabilityWindow t1 = new AvailabilityWindow(new DateTime(2014, 10, 22, 11, 15), null,
                Availability.NOTAVAILABLE);
        Set<ConstraintViolation<AvailabilityWindow>> constraintViolations = validator.validate(t1);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is(TIMEPERIOD_NULL_END_TIME_MESSAGE));
    }

    @Test
    public void testNullOrBlankStartTime() {
        AvailabilityWindow t1 = new AvailabilityWindow(null, new DateTime(2014, 10, 22, 11, 15),
                Availability.NOTAVAILABLE);
        Set<ConstraintViolation<AvailabilityWindow>> constraintViolations = validator.validate(t1);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is(TIMEPERIOD_NULL_START_TIME_MESSAGE));
    }

    @Test
    public void testStartAndEndTime() {
        setAffinityAndSubjects(proctor);
        proctor.setAvailabilityWindow(Lists.newArrayList(new AvailabilityWindow(new DateTime(2014, 10, 22, 11, 15),
                new DateTime(2013, 10, 22, 11, 15), Availability.NOTAVAILABLE)));
        Set<ConstraintViolation<Proctor>> constraintViolations = validator.validate(proctor);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is(TIMEPERIOD_END_TIME_MESSAGE));
    }

    @Test
    public void testTimePeriodAvailability() {
        setAffinityAndSubjects(proctor);
        proctor.setAvailabilityWindow(Lists.newArrayList(new AvailabilityWindow(new DateTime(2012, 10, 22, 11, 15),
                new DateTime(2013, 10, 22, 11, 15), null)));
        Set<ConstraintViolation<Proctor>> constraintViolations = validator.validate(proctor);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is(TIMEPERIOD_AVAILABILITY_EMPTY_MESSAGE));
    }

    private void setAffinityAndSubjects(Proctor proctor) {
        Affinity subject1 = new Affinity(AffinityRule.STRICT, "ELA", SUBJECT);
        Affinity subject2 = new Affinity(AffinityRule.STRICT, "MATH", SUBJECT);
        Affinity grade = new Affinity(AffinityRule.STRICT, "07", GRADE);
        proctor.setAffinities(Arrays.asList(new Affinity[]{subject1, subject2, grade}));
    }

}