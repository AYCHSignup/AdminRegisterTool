/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testadmin.domain.constraintvalidators;

import static org.hamcrest.collection.IsCollectionWithSize.hasSize;
import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;
import static org.opentestsystem.delivery.testadmin.domain.Affinity.AffinityType.GRADE;
import static org.opentestsystem.delivery.testadmin.domain.Affinity.AffinityType.SUBJECT;

import java.util.Arrays;

import javax.validation.Validator;

import org.joda.time.DateTime;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.delivery.testadmin.domain.Affinity;
import org.opentestsystem.delivery.testadmin.domain.Affinity.AffinityRule;
import org.opentestsystem.delivery.testadmin.domain.Availability;
import org.opentestsystem.delivery.testadmin.domain.Proctor;
import org.opentestsystem.delivery.testadmin.domain.Proctor.AvailabilityWindow;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.validation.BeanPropertyBindingResult;
import org.springframework.validation.Errors;
import org.springframework.validation.beanvalidation.SpringValidatorAdapter;

import com.google.common.collect.Lists;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "classpath:spring/domain-context.xml" })
public class OverlappingAvailabilityWindowValidatorTest {

    @Autowired
    private Validator validator;

    private Proctor mockProctor;

    SpringValidatorAdapter springValidator;

    Errors errors;

    @Before
    public void setup() {
        mockProctor = new Proctor();
        Affinity subject = new Affinity(AffinityRule.STRICT, "ELA", SUBJECT);
        Affinity grade = new Affinity(AffinityRule.STRICT, "08", GRADE);
        mockProctor.setAffinities(Arrays.asList(new Affinity[]{subject, grade}));

        springValidator = new SpringValidatorAdapter(validator);
        errors = new BeanPropertyBindingResult(mockProctor, "proctor");
    }

    @Test
    public void testOverlappingDates_second_start_date_starts_within_first() {
        AvailabilityWindow aw1 = new AvailabilityWindow(new DateTime(2014, 06, 12, 0, 0), new DateTime(2014, 12, 24, 0,
                0), Availability.AVAILABLE);
        AvailabilityWindow aw2 = new AvailabilityWindow(new DateTime(2014, 12, 11, 0, 0), new DateTime(2015, 12, 12, 0,
                0), Availability.AVAILABLE);

        mockProctor.setAvailabilityWindow(Lists.newArrayList(aw1, aw2));

        springValidator.validate(mockProctor, errors);

        assertThat(errors.hasErrors(), is(true));
        assertThat(errors.getAllErrors(), hasSize(1));
        assertThat(errors.getAllErrors().get(0).getDefaultMessage(),
                is("Overlapping Availability Time Periods are present "));
    }
    
    @Test
    public void testOverlappingDates_all_second_dates_within_first_interval() {
        AvailabilityWindow aw1 = new AvailabilityWindow(new DateTime(2014, 06, 12, 0, 0), new DateTime(2014, 12, 24, 0,
                0), Availability.AVAILABLE);
        AvailabilityWindow aw2 = new AvailabilityWindow(new DateTime(2014, 07, 11, 0, 0), new DateTime(2014, 11, 01, 0,
                0), Availability.AVAILABLE);

        mockProctor.setAvailabilityWindow(Lists.newArrayList(aw1, aw2));

        springValidator.validate(mockProctor, errors);

        assertThat(errors.hasErrors(), is(true));
        assertThat(errors.getAllErrors(), hasSize(1));
        assertThat(errors.getAllErrors().get(0).getDefaultMessage(),
                is("Overlapping Availability Time Periods are present "));
    }
    
    @Test
    public void testOverlappingDates_second_end_date_within_first_interval() {
        AvailabilityWindow aw1 = new AvailabilityWindow(new DateTime(2014, 06, 12, 0, 0), new DateTime(2014, 12, 24, 0,
                0), Availability.AVAILABLE);
        AvailabilityWindow aw2 = new AvailabilityWindow(new DateTime(2013, 07, 11, 0, 0), new DateTime(2014, 11, 01, 0,
                0), Availability.AVAILABLE);

        mockProctor.setAvailabilityWindow(Lists.newArrayList(aw1, aw2));

        springValidator.validate(mockProctor, errors);

        assertThat(errors.hasErrors(), is(true));
        assertThat(errors.getAllErrors(), hasSize(1));
        assertThat(errors.getAllErrors().get(0).getDefaultMessage(),
                is("Overlapping Availability Time Periods are present "));
    }
    
    

    @Test
    public void testNoOverlappingDates() { // Abts
        AvailabilityWindow aw1 = new AvailabilityWindow(new DateTime(2014, 06, 12, 0, 0), new DateTime(2014, 12, 24, 0,
                0), Availability.AVAILABLE);
        AvailabilityWindow aw2 = new AvailabilityWindow(new DateTime(2014, 12, 24, 0, 0), new DateTime(2015, 12, 12, 0,
                0), Availability.AVAILABLE);

        mockProctor.setAvailabilityWindow(Lists.newArrayList(aw1, aw2));

        springValidator.validate(mockProctor, errors);

        assertThat(errors.hasErrors(), is(false));
    }

    @Test
    public void testOverlappingDatesWithDuplicates() {
        AvailabilityWindow aw1 = new AvailabilityWindow(new DateTime(2014, 06, 12, 0, 0), new DateTime(2014, 12, 24, 0,
                0), Availability.AVAILABLE);
        AvailabilityWindow aw2 = new AvailabilityWindow(new DateTime(2014, 12, 11, 0, 0), new DateTime(2015, 12, 12, 0,
                0), Availability.AVAILABLE);
        AvailabilityWindow aw3 = new AvailabilityWindow(new DateTime(2014, 06, 12, 0, 0), new DateTime(2014, 12, 24, 0,
                0), Availability.AVAILABLE);

        mockProctor.setAvailabilityWindow(Lists.newArrayList(aw1, aw2, aw3));

        springValidator.validate(mockProctor, errors);

        assertThat(errors.hasErrors(), is(true));
        assertThat(errors.getAllErrors(), hasSize(1));
        assertThat(errors.getAllErrors().get(0).getDefaultMessage(),
                is("Duplicate Availability Time Periods are present "));
    }

}