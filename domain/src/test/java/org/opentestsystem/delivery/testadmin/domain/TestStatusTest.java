/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testadmin.domain;

import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;

import java.util.Set;

import javax.validation.ConstraintViolation;
import javax.validation.Validator;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "classpath:spring/domain-context.xml", "classpath:test-domain-context.xml" })
public class TestStatusTest {

    static final String ASSESSEMENTID_BLANK_MESSAGE = "Test Id cannot be blank";
    static final String STUDENTID_BLANK_MESSAGE = "Student Id cannot be blank";
    static final String STATUS_BLANK_MESSAGE = "Status cannot be blank";
    static final String STATE_ABBREVIATION_BLANK_MESSAGE = "State Abbreviation cannot be blank";
    TestStatus studentTestReport;

    @Autowired
    private Validator validator;

    @Before
    public void setup() {
        studentTestReport = new TestStatus();
    }

    @Test
    public void nullOrBlankAssessmentId() {
        validate("assessmentId", ASSESSEMENTID_BLANK_MESSAGE);
    }

    @Test
    public void nullOrBlankStudentId() {
        validate("studentId", STUDENTID_BLANK_MESSAGE);
    }

    @Test
    public void nullOrBlankStatus() {
        validate("status", STATUS_BLANK_MESSAGE);
    }

    @Test
    public void nullOrBlankStateAbbreviation() {
        validate("stateAbbreviation", STATE_ABBREVIATION_BLANK_MESSAGE);
    }

    @Test
    public void testInvalidStateAbbreviation() {
        studentTestReport.setStateAbbreviation("BC");
        assertInvalidStateAbbreviation("stateAbbreviation");
        studentTestReport.setStateAbbreviation("nmn");
        assertInvalidStateAbbreviation("stateAbbreviation");
        studentTestReport.setStateAbbreviation("--");
        assertInvalidStateAbbreviation("stateAbbreviation");
        studentTestReport.setStateAbbreviation("$$"); // special characters
        assertInvalidStateAbbreviation("stateAbbreviation");
        studentTestReport.setStateAbbreviation("æ♪"); // non-ascii
        assertInvalidStateAbbreviation("stateAbbreviation");
    }

    // State Abbreviation Validations
    protected void assertInvalidStateAbbreviation(String property) {
        Set<ConstraintViolation<TestStatus>> constraintViolations = validator.validateProperty(studentTestReport, property);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("State Abbreviation is not valid"));
    }

    private void validate(String property, String message) {
        Set<ConstraintViolation<TestStatus>> constraintViolations = validator.validateProperty(studentTestReport, property);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is(message));
    }
}
