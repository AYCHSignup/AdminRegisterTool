/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.domain;

import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;

import java.util.Set;

import javax.validation.ConstraintViolation;
import javax.validation.Validator;

import org.joda.time.DateTime;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.delivery.testreg.domain.ImplicitEligibilityRule.OperatorType;
import org.opentestsystem.delivery.testreg.domain.ImplicitEligibilityRule.RuleType;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "classpath:spring/domain-context.xml" })
public class ImplicitEligibilityRuleTest {

    @Autowired
    protected Validator validator;

    private ImplicitEligibilityRule implicitEligibilityRule;

    @Before
    public void before() {
        implicitEligibilityRule = new ImplicitEligibilityRule();
    }

    @Test
    public void testBlankOrNullRuleField() {
        String message = "Rule Field is required";

        implicitEligibilityRule.setField(null);
        assertBlankOrNullCheck("field", message);

        implicitEligibilityRule.setField("");
        assertBlankOrNullCheck("field", message);

        implicitEligibilityRule.setField("  ");
        assertBlankOrNullCheck("field", message);
    }

    @Test
    public void testBlankOrNullRuleValue() {
        String message = "Rule Value is required";

        implicitEligibilityRule.setValue(null);
        assertBlankOrNullCheck("value", message);

        implicitEligibilityRule.setValue("");
        assertBlankOrNullCheck("value", message);

        implicitEligibilityRule.setValue("  ");
        assertBlankOrNullCheck("value", message);
    }
    
    @Test
    public void testNonAsciiRuleValue() {
        String message = "Rule Value should be alphanumeric";
        
        implicitEligibilityRule.setRuleType(RuleType.ENABLER);
        implicitEligibilityRule.setField("externalSsid");
        implicitEligibilityRule.setValue("adenoz~Ç");
        Set<ConstraintViolation<ImplicitEligibilityRule>> constraintViolations = validator.validate(implicitEligibilityRule);   
        assertThat(constraintViolations.size(), is(0));
        
        implicitEligibilityRule.setField("languageCode");
        constraintViolations = validator.validate(implicitEligibilityRule);   
        assertThat(constraintViolations.size(), is(1)); 
        assertThat(constraintViolations.iterator().next().getMessage(), is(message));
        
        implicitEligibilityRule.setField(null);
        implicitEligibilityRule.setRuleType(RuleType.ENABLER);
        implicitEligibilityRule.setValue("adenoz~Ç");
        constraintViolations = validator.validate(implicitEligibilityRule);   
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("Rule Field is required"));
    }

    @Test
    public void testNullRuleOperatorType() {// OperatorType defaulted to EQUALS
        implicitEligibilityRule.setOperatorType(null);
        assertThat(implicitEligibilityRule.getOperatorType(), is(OperatorType.EQUALS));
    }

    @Test
    public void testNullRuleType() {
        String message = "RuleType is required";

        implicitEligibilityRule.setRuleType(null);
        assertBlankOrNullCheck("ruleType", message);
    }

    private void assertBlankOrNullCheck(String property, String message) {
        Set<ConstraintViolation<ImplicitEligibilityRule>> constraintViolations = validator.validateProperty(
                implicitEligibilityRule, property);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is(message));
    }

    @Test
    public void testStringValidForEquals() {
        assertThat(OperatorType.EQUALS.isValidFor(String.class), is(true));
    }

    @Test
    public void testStringInvalidForGreaterThan() {
        assertThat(OperatorType.GREATER_THAN.isValidFor(String.class), is(false));
    }

    @Test
    public void testEnumInvalidForGreaterThan() {
        assertThat(OperatorType.GREATER_THAN.isValidFor(Student.Gender.class), is(false));
    }

    @Test
    public void testDateTimeValidForGreaterThan() {
        assertThat(OperatorType.GREATER_THAN.isValidFor(DateTime.class), is(true));
    }

}
