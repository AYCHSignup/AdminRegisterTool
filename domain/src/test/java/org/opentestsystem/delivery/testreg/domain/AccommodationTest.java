/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.domain;

import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;

import java.util.Set;
import java.util.List;
import java.util.ArrayList;

import javax.validation.ConstraintViolation;
import javax.validation.Validator;
import javax.validation.constraints.Size;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.delivery.testreg.domain.constraints.Alphanumeric;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "classpath:spring/domain-context.xml", "classpath:test-domain-context.xml" })
public class AccommodationTest {

    public static final String STUDENTID_REQUIRED_MESSAGE = "Student Identifier is required";
    public static final String STUDENTID_ALPHANUM_MESSAGE = "Student Identifier should be alphanumeric";
    public static final String STUDENTID_MAX_MESSAGE = "Student Identifier size must be between 1 and 30";
    public static final String SUBJECT_REQUIRED_MESSAGE = "Subject is required";
    public static final String SUBJECT_ALPHANUM_MESSAGE = "Subject should be alphanumeric";
    public static final String SUBJECT_MAX_MESSAGE = "Subject size must be between 1 and 20";
    public static final String STATEABBR_REQUIRED_MESSAGE = "State Abbreviation is not valid";
    public static final String STATEABBR_INVALID_MESSAGE = "State Abbreviation is not valid";
    public static final String ASL_INVALID_MESSAGE = "Invalid value for American Sign Language accommodation";
    public static final String CC_INVALID_MESSAGE = "Invalid value for Closed Captioning accommodation";
    public static final String COLORCONTRAST_INVALID_MESSAGE = "Invalid value for Color Contrast accommodation";
    public static final String TEXTTOSPEECH_INVALID_MESSAGE = "Invalid value for Text to Speech accommodation";
    public static final String LANGUAGE_INVALID_MESSAGE = "Invalid value for Language accommodation";
    public static final String TRANSLATION_INVALID_MESSAGE = "Invalid value for Translation (Glossary) accommodation";
    public static final String PRINTONDEMAND_INVALID_MESSAGE = "Invalid value for Print on Demand accommodation";
    public static final String PRINTSIZE_INVALID_MESSAGE = "Invalid value for Print Size accommodation";
    public static final String MASKING_INVALID_MESSAGE = "Invalid value for Masking accommodation";
    public static final String PERMISSIVEMODE_INVALID_MESSAGE = "Invalid value for Permissive Mode accommodation";
    public static final String STREAMLINED_INVALID_MESSAGE = "Invalid value for Streamlined Interface accommodation";
    public static final String DESIGSUPPORTS_INVALID_MESSAGE = "Invalid value for Non-embedded Designated Supports accommodation";
    public static final String NONEMBEDDED_INVALID_MESSAGE = "Invalid value for Non-embedded Accommodations";
    public static final String OTHER_INVALID_MESSAGE = "Valid values for Other accommodation are alphanumeric characters, spaces, dashes, and periods";
    public static final String OTHER_MAX_MESSAGE = "Maximum length for Other accommodation is 90 characters";
    public static final String AT_LEAST_ONE_ACCOMM_SELECTED = "At least one Accommodation is required to be selected";

    @Autowired
    protected Validator validator;

    private Accommodation accommodation;

    @Before
    public void setup() {
        this.accommodation = new Accommodation();
    }

    @After
    public void tearDown() {
        this.accommodation = null;
    }

    @Test
    public void testBlankOrNullStudentIdentifier() {
        this.accommodation.setStudentId(null);
        assertBlankOrNullCheck(this.accommodation, "studentId", STUDENTID_REQUIRED_MESSAGE);
        this.accommodation.setStudentId("");
        assertBlankOrNullCheck(this.accommodation, "studentId", STUDENTID_REQUIRED_MESSAGE);
        this.accommodation.setStudentId("   ");
        assertBlankOrNullCheck(this.accommodation, "studentId", STUDENTID_REQUIRED_MESSAGE);
    }

    @Test
    public void testStudentIdentifierUnicodeInvalid() {
        this.accommodation.setStudentId("Specialcharsẘ✹⚅☈");
        final Set<ConstraintViolation<Accommodation>> constraintViolations = this.validator.validateProperty(this.accommodation,
                "studentId");
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is(STUDENTID_ALPHANUM_MESSAGE));

    }

    @Test
    public void testSizeForaccommodationIdentifier() {
        this.accommodation.setStudentId("126627626726GGHGHg77277367882378ywsjkbjwe773899qq");
        Set<ConstraintViolation<Accommodation>> constraintViolations = this.validator.validateProperty(this.accommodation,
                "studentId");
        assertThat(constraintViolations.size(), is(1));
        this.accommodation.setStudentId("12662762aa");
        constraintViolations = this.validator.validateProperty(this.accommodation, "studentId");
        assertThat(constraintViolations.size(), is(0));
    }

    @Test
    public void testInvalidStateAbbreviation() {
        this.accommodation.setStateAbbreviation("BC");
        assertInvalidStateAbbreviation("stateAbbreviation");
        this.accommodation.setStateAbbreviation("nmn");
        assertInvalidStateAbbreviation("stateAbbreviation");
        this.accommodation.setStateAbbreviation("--");
        assertInvalidStateAbbreviation("stateAbbreviation");
        this.accommodation.setStateAbbreviation("$$"); // special characters
        assertInvalidStateAbbreviation("stateAbbreviation");
        this.accommodation.setStateAbbreviation("æ♪"); // non-ascii
        assertInvalidStateAbbreviation("stateAbbreviation");
    }

    @Test
    public void testBlankOrNullSubject() {
        this.accommodation.setSubject(null);
        assertBlankOrNullCheck(this.accommodation, "subject", SUBJECT_REQUIRED_MESSAGE);
        this.accommodation.setSubject("");
        assertBlankOrNullCheck(this.accommodation, "subject", SUBJECT_REQUIRED_MESSAGE);
        this.accommodation.setSubject("   ");
        assertBlankOrNullCheck(this.accommodation, "subject", SUBJECT_REQUIRED_MESSAGE);
    }

    @Test
    public void testSubjectUnicodeInvalid() {
        this.accommodation.setSubject("Specialcharsẘ✹⚅☈");
        final Set<ConstraintViolation<Accommodation>> constraintViolations = this.validator.validateProperty(this.accommodation,
                "subject");
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is(SUBJECT_ALPHANUM_MESSAGE));

    }

    @Test
    public void testSizeForSubject() {
        this.accommodation.setSubject("126627626726GGHGHg77277367882378ywsjkbjwe773899qq");
        Set<ConstraintViolation<Accommodation>> constraintViolations = this.validator.validateProperty(this.accommodation,
                "subject");
        assertThat(constraintViolations.size(), is(1));
        this.accommodation.setSubject("12662762aa");
        constraintViolations = this.validator.validateProperty(this.accommodation, "subject");
        assertThat(constraintViolations.size(), is(0));
    }

    @Test
    public void testInvalidLanguageCodes() {

        this.accommodation.setLanguage("BCA");
        assertInvalidPropertyCheck(this.accommodation, "language", LANGUAGE_INVALID_MESSAGE);
        this.accommodation.setLanguage("ABC");
        assertInvalidPropertyCheck(this.accommodation, "language", LANGUAGE_INVALID_MESSAGE);

    }

    @Test
    public void testValidLanguageCodes() {
        this.accommodation.setLanguage("ENU");
        Set<ConstraintViolation<Accommodation>> constraintViolations = this.validator.validateProperty(this.accommodation,
                "language");
        assertThat(constraintViolations.size(), is(0));
        this.accommodation.setLanguage("ENU-Braille");
        constraintViolations = this.validator.validateProperty(this.accommodation, "language");
        assertThat(constraintViolations.size(), is(0));
        this.accommodation.setLanguage("ESN");
        constraintViolations = this.validator.validateProperty(this.accommodation, "language");
        assertThat(constraintViolations.size(), is(0));
    }

    @Test
    public void testInvalidAmericanSignLanguage() {

        this.accommodation.setAmericanSignLanguage("ENG");
        assertInvalidPropertyCheck(this.accommodation, "americanSignLanguage", ASL_INVALID_MESSAGE);
        this.accommodation.setAmericanSignLanguage("SPN");
        assertInvalidPropertyCheck(this.accommodation, "americanSignLanguage", ASL_INVALID_MESSAGE);

    }

    @Test
    public void testValidAmericanSignLanguage() {
        this.accommodation.setAmericanSignLanguage("TDS_ASL0");
        Set<ConstraintViolation<Accommodation>> constraintViolations = this.validator.validateProperty(this.accommodation,
                "americanSignLanguage");
        assertThat(constraintViolations.size(), is(0));
        this.accommodation.setAmericanSignLanguage("TDS_ASL1");
        constraintViolations = this.validator.validateProperty(this.accommodation, "americanSignLanguage");
        assertThat(constraintViolations.size(), is(0));
    }

    @Test
    public void testInvalidClosedCaptioning() {

        this.accommodation.setClosedCaptioning("TDS");
        assertInvalidPropertyCheck(this.accommodation, "closedCaptioning", CC_INVALID_MESSAGE);
        this.accommodation.setClosedCaptioning("ClosedO");
        assertInvalidPropertyCheck(this.accommodation, "closedCaptioning", CC_INVALID_MESSAGE);

    }

    @Test
    public void testValidClosedCaptioning() {
        this.accommodation.setClosedCaptioning("TDS_ClosedCap0");
        Set<ConstraintViolation<Accommodation>> constraintViolations = this.validator.validateProperty(this.accommodation,
                "closedCaptioning");
        assertThat(constraintViolations.size(), is(0));
        this.accommodation.setClosedCaptioning("TDS_ClosedCap1");
        constraintViolations = this.validator.validateProperty(this.accommodation, "closedCaptioning");
        assertThat(constraintViolations.size(), is(0));
    }

    @Test
    public void testInvalidColorContrast() {

        this.accommodation.setColorContrast("TDS");
        assertInvalidPropertyCheck(this.accommodation, "colorContrast", COLORCONTRAST_INVALID_MESSAGE);
        this.accommodation.setColorContrast("ClosedO");
        assertInvalidPropertyCheck(this.accommodation, "colorContrast", COLORCONTRAST_INVALID_MESSAGE);

    }

    @Test
    public void testValidColorContrast() {

        final String[] coloChoices = { "TDS_CCMagenta", "TDS_CCMedGrayLtGray", "TDS_CCYellowB", "TDS_CCInvert", "TDS_CC0" };
        for (final String coloChoice : coloChoices) {
            this.accommodation.setColorContrast(coloChoice);
            assertThat(this.validator.validateProperty(this.accommodation, "colorContrast").size(), is(0));

        }
    }

    @Test
    public void testInvalidTexttoSpeech() {

        this.accommodation.setTextToSpeech("TDS");
        assertInvalidPropertyCheck(this.accommodation, "textToSpeech", TEXTTOSPEECH_INVALID_MESSAGE);
        this.accommodation.setTextToSpeech("TTS");
        assertInvalidPropertyCheck(this.accommodation, "textToSpeech", TEXTTOSPEECH_INVALID_MESSAGE);
    }

    @Test
    public void testValidTexttoSpeech() {

        final String[] textChoice = { "TDS_TTS_Stim&TDS_TTS_Item", "TDS_TTS_Item", "TDS_TTS_Stim", "TDS_TTS0" };
        for (final String element : textChoice) {
            this.accommodation.setTextToSpeech(element);
            assertThat(this.validator.validateProperty(this.accommodation, "textToSpeech").size(), is(0));
        }

    }

    @Test
    public void testInvalidTranslation() {

        this.accommodation.setTranslation("TDS");
        assertInvalidPropertyCheck(this.accommodation, "translation", TRANSLATION_INVALID_MESSAGE);
        this.accommodation.setTranslation("TTS");
        assertInvalidPropertyCheck(this.accommodation, "translation", TRANSLATION_INVALID_MESSAGE);

    }

    @Test
    public void testValidTranslation() {

        final String[] glossary = { "TDS_WL_Glossary", "TDS_WL_ArabicGloss", "TDS_WL_CantoneseGloss", "TDS_WL_ESNGlossary",
                "TDS_WL_KoreanGloss", "TDS_WL_MandarinGloss", "TDS_WL_PunjabiGloss", "TDS_WL_RussianGloss",
                "TDS_WL_TagalGloss", "TDS_WL_UkrainianGloss", "TDS_WL_VietnameseGloss",
                "TDS_WL_ArabicGloss&TDS_WL_Glossary", "TDS_WL_CantoneseGloss&TDS_WL_Glossary",
                "TDS_WL_ESNGlossary&TDS_WL_Glossary", "TDS_WL_KoreanGloss&TDS_WL_Glossary",
                "TDS_WL_MandarinGloss&TDS_WL_Glossary", "TDS_WL_PunjabiGloss&TDS_WL_Glossary",
                "TDS_WL_RussianGloss&TDS_WL_Glossary", "TDS_WL_TagalGloss&TDS_WL_Glossary",
                "TDS_WL_UkrainianGloss&TDS_WL_Glossary", "TDS_WL_VietnameseGloss&TDS_WL_Glossary", "TDS_WL0" };
        for (final String element : glossary) {
            this.accommodation.setTranslation(element);
            assertThat(this.validator.validateProperty(this.accommodation, "translation").size(), is(0));
        }

    }

    @Test
    public void testInvalidPrintOnDemand() {

        this.accommodation.setPrintOnDemand("TDS");
        assertInvalidPropertyCheck(this.accommodation, "printOnDemand", PRINTONDEMAND_INVALID_MESSAGE);
        this.accommodation.setPrintOnDemand("TTS");
        assertInvalidPropertyCheck(this.accommodation, "printOnDemand", PRINTONDEMAND_INVALID_MESSAGE);

    }

    @Test
    public void testValidPrintOnDemand() {

        final String[] glossary = { "TDS_PoD_Stim", "TDS_PoD0" };
        for (final String element : glossary) {
            this.accommodation.setPrintOnDemand(element);
            assertThat(this.validator.validateProperty(this.accommodation, "printOnDemand").size(), is(0));
        }

    }

    @Test
    public void testInvalidPrintSize() {

        this.accommodation.setPrintSize("TDS");
        assertInvalidPropertyCheck(this.accommodation, "printSize", PRINTSIZE_INVALID_MESSAGE);
        this.accommodation.setPrintSize("TTS");
        assertInvalidPropertyCheck(this.accommodation, "printSize", PRINTSIZE_INVALID_MESSAGE);

    }

    @Test
    public void testValidPrintSize() {

        final String[] glossary = { "TDS_PS_L0", "TDS_PS_L1", "TDS_PS_L2", "TDS_PS_L3", "TDS_PS_L4" };
        for (final String element : glossary) {
            this.accommodation.setPrintSize(element);
            assertThat(this.validator.validateProperty(this.accommodation, "printSize").size(), is(0));
        }

    }

    @Test
    public void testInvalidPermissiveMode() {

        this.accommodation.setPermissiveMode("TDS");
        assertInvalidPropertyCheck(this.accommodation, "permissiveMode", PERMISSIVEMODE_INVALID_MESSAGE);
        this.accommodation.setPermissiveMode("TTS");
        assertInvalidPropertyCheck(this.accommodation, "permissiveMode", PERMISSIVEMODE_INVALID_MESSAGE);

    }

    @Test
    public void testValidPermissiveMode() {

        final String[] choices = { "TDS_PM0", "TDS_PM1" };
        for (final String choice : choices) {
            this.accommodation.setPermissiveMode(choice);
            assertThat(this.validator.validateProperty(this.accommodation, "permissiveMode").size(), is(0));
        }

    }

    @Test
    public void testInvalidStreamlinedInterface() {

        this.accommodation.setStreamlinedInterface("TDS");
        assertInvalidPropertyCheck(this.accommodation, "streamlinedInterface", STREAMLINED_INVALID_MESSAGE);
        this.accommodation.setStreamlinedInterface("TTS");
        assertInvalidPropertyCheck(this.accommodation, "streamlinedInterface", STREAMLINED_INVALID_MESSAGE);

    }

    @Test
    public void testValidStreamlinedInterface() {

        final String[] choices = { "TDS_SLM0", "TDS_SLM1" };
        for (final String choice : choices) {
            this.accommodation.setStreamlinedInterface(choice);
            assertThat(this.validator.validateProperty(this.accommodation, "streamlinedInterface").size(), is(0));
        }

    }

    @Test
    public void testInvalidNonEmbeddedDesignatedSupports() {

      final List<String> supportList = new ArrayList<String>();
      supportList.add ("TDS");
      supportList.add ("TTS");
      this.accommodation.setNonEmbeddedDesignatedSupports(supportList);
      assertInvalidPropertyCheck(this.accommodation, "nonEmbeddedDesignatedSupports", DESIGSUPPORTS_INVALID_MESSAGE);

    }

    @Test
    public void testValidNonEmbeddedDesignatedSupports() {

        final String[] choices = { "NEDS0", "NEDS_BD", "NEDS_CC", "NEDS_CO", "NEDS_Mag", "NEDS_RA_Items", "NEDS_RA_Items_ESN", "NEDS_RA_Stimuli_ESN", "NEDS_SC_Items",
                "NEDS_SS", "NEDS_TArabic", "NEDS_TCantonese", "NEDS_TFilipino", "NEDS_TKorean", "NEDS_TMandarin",
                "NEDS_TPunjabi", "NEDS_TRussian", "NEDS_TSpanish", "NEDS_TUkrainian", "NEDS_TVietnamese" };
        final List<String> supportList = new ArrayList<String>();
        for (final String choice : choices) {
            supportList.add (choice);            
        }
        this.accommodation.setNonEmbeddedDesignatedSupports(supportList);
        assertThat(this.validator.validateProperty(this.accommodation, "nonEmbeddedDesignatedSupports").size(), is(0));

    }

    @Test
    public void testInvalidNonEmbeddedAccommodations() {

      List<String> accommodationList = new ArrayList<String>();
      accommodationList.add ("TDS");
      accommodationList.add ("TTS");
      this.accommodation.setNonEmbeddedAccommodations(accommodationList);
      assertInvalidPropertyCheck(this.accommodation, "nonEmbeddedAccommodations", NONEMBEDDED_INVALID_MESSAGE);

    }

    @Test
    public void testValidNonEmbeddedAccommodations() {

        final String[] choices = { "NEA0", "NEA_AR", "NEA_RA_Stimuli", "NEA_SC_WritItems", "NEA_STT", "NEA_Abacus",
                "NEA_Calc", "NEA_MT" };
        final List<String> accommodationList = new ArrayList<String>();
        for (final String choice : choices) {
            accommodationList.add(choice);
        }
        this.accommodation.setNonEmbeddedAccommodations(accommodationList);
        assertThat(this.validator.validateProperty(this.accommodation, "nonEmbeddedAccommodations").size(), is(0));

    }

    @Alphanumeric(dashesAllowed = true, decimalAllowed = true, spacesAllowed = true, message = "{accommodation.other.invalid}")
    @Size(max = 300, message = "{accommodation.other.size.max}")
    @FieldLabel("Other")
    // @XStreamAlias("unknown")
    private String other;

    @Test
    public void testOtherTooLong() {

        this.accommodation
                .setOther("this is a very very long string used to test out the maximum length of the other field in an accommodations object this can be up to 300 characters long so we still have a long way to go at this point can we get all the way to 300 characters we will see not too certain at this point oh wait we did it");
        final Set<ConstraintViolation<Accommodation>> constraintViolations = this.validator.validateProperty(this.accommodation,
                "other");
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is(OTHER_MAX_MESSAGE));
    }

    @Test
    public void testDeleteOtherWithSpecialChars() {
        this.accommodation.setOther("this should be - invalid.");
        final Set<ConstraintViolation<Accommodation>> constraintViolations = this.validator.validateProperty(this.accommodation,
                "other");

        assertThat(constraintViolations.size(), is(0));
    }

    @Test
    public void testValidOther() {
        final Set<ConstraintViolation<Accommodation>> constraintViolations = this.validator.validateProperty(this.accommodation,
                "other");
        assertThat(constraintViolations.size(), is(0));
    }

    @Test
    public void testValidaccommodation() {
        this.accommodation.setStudentId("110AA");
        this.accommodation.setStateAbbreviation("WI");
        this.accommodation.setSubject("MATH");
        this.accommodation.setAmericanSignLanguage("TDS_ASL0");
        this.accommodation.setClosedCaptioning("TDS_ClosedCap1");
        this.accommodation.setColorContrast("TDS_CCYellowB");
        this.accommodation.setTextToSpeech("TDS_TTS_Item");
        this.accommodation.setLanguage("ENU");
        this.accommodation.setTranslation("TDS_WL_ILOGlossary");
        this.accommodation.setPrintOnDemand("TDS_PoD0");
        this.accommodation.setPrintSize("TDS_PS_L1");
    }

    private void assertInvalidPropertyCheck(final Accommodation accommodation, final String property, final String message) {
        final Set<ConstraintViolation<Accommodation>> constraintViolations = this.validator.validateProperty(accommodation,
                property);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is(message));
    }

    private void assertBlankOrNullCheck(final Accommodation accommodation, final String property, final String message) {
        final Set<ConstraintViolation<Accommodation>> constraintViolations = this.validator.validateProperty(accommodation,
                property);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is(message));
    }

    // State Abbreviation Validations
    protected void assertInvalidStateAbbreviation(final String property) {
        final Set<ConstraintViolation<Accommodation>> constraintViolations = this.validator.validateProperty(this.accommodation,
                property);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is(STATEABBR_INVALID_MESSAGE));
    }

    @Test
    public void testValidStateAbbreviation() {
        this.accommodation.setStateAbbreviation("WI");
        final Set<ConstraintViolation<Accommodation>> constraintViolations = this.validator.validateProperty(this.accommodation,
                "stateAbbreviation");
        assertThat(constraintViolations.size(), is(0));
    }

    @Test
    public void testAtLeastOneSelected() {
        this.accommodation.setStateAbbreviation("WI");
        this.accommodation.setSubject("MTH");
        this.accommodation.setStudentId("111");

        final Set<ConstraintViolation<Accommodation>> constraintViolations = this.validator.validate(this.accommodation);
        assertThat(constraintViolations, org.hamcrest.Matchers.hasSize(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is(AT_LEAST_ONE_ACCOMM_SELECTED));
    }

}
