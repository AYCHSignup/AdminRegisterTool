/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.domain.constraintvalidators;

import static org.hamcrest.collection.IsCollectionWithSize.hasSize;
import static org.hamcrest.collection.IsEmptyCollection.empty;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsNot.not;
import static org.junit.Assert.assertThat;

import java.util.Set;

import javax.validation.ConstraintViolation;
import javax.validation.Validator;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = {"classpath:spring/domain-context.xml"})
public class JexlAssertValidatorTest {

    
    @Autowired
    private Validator validator;
    
    MockUser user;
    
    @Before
    public void setup() {
        user = new MockUser();
    }
    
    private Set<ConstraintViolation<MockUser>> validate(MockUser user) {
        return validator.validate(user);
    }
    
    @Test
    public void validationSuccessForSingleField() {
        MockUser user = new MockUser();
        user.setfName("Issac");
        Set<ConstraintViolation<MockUser>> violations = validate(user);
        assertThat(violations, is(empty()));
    }
    
    @Test
    public void validationFailedForSingleField() {
        MockUser user = new MockUser();
        Set<ConstraintViolation<MockUser>> violations = validate(user);
        
        assertThat(violations, is(not(empty())));
        assertThat(violations, hasSize(1));
    }
    
    @Test
    public void validationSuccessForCrossField() {
        MockUser user = new MockUser();
        user.setfName("Issac");
        user.setAddress1("200 Bass Lake Road");
        user.setAddress2("Maple Grove MN");
        Set<ConstraintViolation<MockUser>> violations = validate(user);
        
        assertThat(violations, is(empty()));
    }
    
    
    @Test
    public void failureCrossFieldValidationSingleViolation() {
        MockUser user = new MockUser();
        user.setfName("Issac");
        user.setAddress1("200 Bass Lake Road");
        Set<ConstraintViolation<MockUser>> violations = validate(user);
        
        assertThat(violations, is(not(empty())));
        assertThat(violations, hasSize(1));
    }
    
    @Test
    public void failureCrossFieldValidationMultipleViolations() {
        MockUser user = new MockUser();
        user.setAddress1("200 Bass Lake Road");
        Set<ConstraintViolation<MockUser>> violations = validate(user);
        
        assertThat(violations, is(not(empty())));
        assertThat(violations, hasSize(2));
    }
        
}
