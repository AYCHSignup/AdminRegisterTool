/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.integration;

import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;

import java.util.Set;

import javax.validation.ConstraintViolation;
import javax.validation.Validator;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.delivery.testreg.domain.ImportFileValidationGroup;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.util.ReflectionTestUtils;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "classpath:spring/domain-context.xml", "classpath:test-domain-context.xml" })
public abstract class AbstractDomainTest {

    @Autowired
    protected Validator validator;

    private Sb11Entity sb11Entity;

    public void setSb11Entity(Sb11Entity sb11Entity) {
        this.sb11Entity = sb11Entity;
    }

    protected void assertValid(String property) {
        assertThat(validator.validateProperty(sb11Entity, property).size(), is(0));
    }

    // State Abbreviation Validations
    protected void assertInvalidStateAbbreviation(String property) {
        Set<ConstraintViolation<Sb11Entity>> constraintViolations = validator.validateProperty(sb11Entity, property, ImportFileValidationGroup.class);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("State Abbreviation is not valid"));
    }

    protected void assertBlankOrNullStateAbbreviation(String property) {
        Set<ConstraintViolation<Sb11Entity>> constraintViolations = validator.validateProperty(sb11Entity, property, ImportFileValidationGroup.class);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("State Abbreviation is required"));
    }

    // Parent Entity Type Validations
    protected void assertInvalidParentEntityType() {
        Set<ConstraintViolation<Sb11Entity>> constraintViolations = validator.validateProperty(sb11Entity,
                "parentEntityType", ImportFileValidationGroup.class);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("Parent Entity Type is not valid"));
    }

    // Parent Entity Id Validations
    protected void assertInvalidParentEntityId() {
        Set<ConstraintViolation<Sb11Entity>> constraintViolations = validator.validateProperty(sb11Entity,
                "parentEntityId", ImportFileValidationGroup.class);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("Parent External Id should contain alphanumeric"));
    }

    protected void assertInvalidSizeParentEntityId() {
        Set<ConstraintViolation<Sb11Entity>> constraintViolations = validator.validateProperty(sb11Entity,
                "parentEntityId", ImportFileValidationGroup.class);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("Parent External Id size must be equal to or less than 40"));
    }

    protected void assertBlankOrNullParentEntityId() {
        Set<ConstraintViolation<Sb11Entity>> constraintViolations = validator.validateProperty(sb11Entity, "parentEntityId", ImportFileValidationGroup.class);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("Parent External Id is required"));
    }

    protected void assertNoErrorForBlankOrNullDelete() {
        Set<ConstraintViolation<Sb11Entity>> constraintViolations = validator.validateProperty(sb11Entity, "delete", ImportFileValidationGroup.class);
        assertThat(constraintViolations.size(), is(0));
    }

    protected void assertInvalidDelete() {
        Set<ConstraintViolation<Sb11Entity>> constraintViolations = validator.validateProperty(sb11Entity, "delete", ImportFileValidationGroup.class);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("Delete can only contain letters"));
    }

    protected void assertInvalidDeleteSize() {
        Set<ConstraintViolation<Sb11Entity>> constraintViolations = validator.validateProperty(sb11Entity, "delete", ImportFileValidationGroup.class);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("Delete size must be between 1 and 6"));
    }

    protected void assertValidDelete() {
        assertValid("delete");
    }

    public void assertAllDeleteTests() {
        testBlankOrNullDelete();
        testInvalidDelete();
        testValidDelete();
    }

    private void setProperty(Object target, String name, String value) {
        ReflectionTestUtils.invokeSetterMethod(target, name, value);
    }

    @Test
    public void testBlankOrNullDelete() {
        setProperty(sb11Entity, "delete", (String) null);
        assertNoErrorForBlankOrNullDelete();

        setProperty(sb11Entity, "delete", (String) "");
        assertNoErrorForBlankOrNullDelete();

        setProperty(sb11Entity, "delete", (String) "  ");
        assertNoErrorForBlankOrNullDelete();

        setProperty(sb11Entity, "delete", (String) "");
        assertNoErrorForBlankOrNullDelete();
    }

    @Test
    public void testInvalidDelete() {

        setProperty(sb11Entity, "delete", (String) "¢₧Ñ▓");
        assertInvalidDelete();

        setProperty(sb11Entity, "delete", (String) "AD D");
        assertInvalidDelete();

        setProperty(sb11Entity, "delete", (String) "U P D");
        assertInvalidDelete();
    }

    @Test
    public void testValidDelete() {
        setProperty(sb11Entity, "delete", "UPDATE");
        assertValidDelete();

        setProperty(sb11Entity, "delete", "UPD");
        assertValidDelete();

        setProperty(sb11Entity, "delete", "UPD ");
        assertValidDelete();

        setProperty(sb11Entity, "delete", " UPD");
        assertValidDelete();

        setProperty(sb11Entity, "delete", " UPD ");
        assertValidDelete();

        setProperty(sb11Entity, "delete", "ADD");
        assertValidDelete();

        setProperty(sb11Entity, "delete", "DEL");
        assertValidDelete();

        setProperty(sb11Entity, "delete", "upd");
        assertValidDelete();

        setProperty(sb11Entity, "delete", "add");
        assertValidDelete();

        setProperty(sb11Entity, "delete", "del");
        assertValidDelete();
    }

}
