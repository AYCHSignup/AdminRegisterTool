/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.domain;

import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsNull.notNullValue;
import static org.hamcrest.core.IsNull.nullValue;
import static org.junit.Assert.assertThat;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

import javax.validation.ConstraintViolation;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.integration.AbstractDomainTest;

public class GroupOfDistrictsEntityTest extends AbstractDomainTest {

    private GroupOfDistrictsEntity groupOfDistricts;

    public GroupOfDistrictsEntityTest() {
    }

    @Before
    public void setup() {
        groupOfDistricts = new GroupOfDistrictsEntity();
        setSb11Entity(groupOfDistricts);
    }

    @After
    public void tearDown() {
        setSb11Entity(null);
    }

    // GroupOfDistricts Identifier Tests
    @Test
    public void testInvalidGroupOfDistrictsIdentifier() {

        groupOfDistricts.setEntityId("$$"); // special characters
        assertInvalidGroupOfDistrictsIdentifier("entityId");

        groupOfDistricts.setEntityId("æ♪"); // non-ascii
        assertInvalidGroupOfDistrictsIdentifier("entityId");

        groupOfDistricts.setEntityId("AD-123");
        assertInvalidGroupOfDistrictsIdentifier("entityId");
    }

    @Test
    public void testBlankOrNullGroupOfDistrictsIdentifier() {
        groupOfDistricts.setEntityId(null);
        assertBlankOrNullGroupOfDistrictsIdentifier("entityId");

        groupOfDistricts.setEntityId("");
        assertBlankOrNullGroupOfDistrictsIdentifier("entityId");

        groupOfDistricts.setEntityId("   ");
        assertBlankOrNullGroupOfDistrictsIdentifier("entityId");
    }

    @Test
    public void testValidGroupOfDistrictsIdentifier() {
        groupOfDistricts.setEntityId("1234");
        assertThat(validator.validateProperty(groupOfDistricts, "entityId").size(), is(0));

        groupOfDistricts.setEntityId("ad23er43"); // Lowercase
        assertThat(validator.validateProperty(groupOfDistricts, "entityId").size(), is(0));

        groupOfDistricts.setEntityId("AS23Erty43"); // Mixedcase
        assertThat(validator.validateProperty(groupOfDistricts, "entityId").size(), is(0));
    }

    @Test
    public void testInvalidGroupOfDistrictsIdentifierSize() {
        groupOfDistricts.setEntityId("2341241243123412341234123412412343235563563565653645645645645645645");
        Set<ConstraintViolation<GroupOfDistrictsEntity>> constraintViolations = validator.validateProperty(groupOfDistricts, "entityId", ImportFileValidationGroup.class);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("Group Of Districts Identifier size must be between 1 and 40"));
    }

    // GroupOfDistricts Name Tests
    @Test
    public void testInvalidSizeGroupOfDistrictsNames() {
        groupOfDistricts.setEntityName("MinnesotaDistrictsumbiammnbmnbmnbmnbmnboooooooooooomnbmnbmnbmnbmnbmmnmnmnuuuuuuuuuuuuuuuuuuuuuuuuuuuuur"); // >100
        Set<ConstraintViolation<GroupOfDistrictsEntity>> constraintViolations = validator.validateProperty(groupOfDistricts, "entityName", ImportFileValidationGroup.class);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("Group Of Districts Name size must be between 1 and 100"));
    }

    @Test
    public void testInvalidGroupOfDistrictsNames() {

        groupOfDistricts.setEntityName("NorthЩΏ¶&&CarolinaGROUP");
        assertInvalidGroupOfDistrictsName();
    }

    @Test
    public void testValidSizeGroupOfDistrictsName() {
        groupOfDistricts.setEntityName("Californiaffsdddfdfdqwdssdffssdfgsggwrtyqwertyqwer"); // =50
        assertThat(validator.validateProperty(groupOfDistricts, "entityName").size(), is(0));

        groupOfDistricts.setEntityName("Californiaffsdddfdfgsggwrtyqwertyqwer"); // <50
        assertThat(validator.validateProperty(groupOfDistricts, "entityName").size(), is(0));
    }

    @Test
    public void testBlankOrNullGroupOfDistrictsNames() {
        groupOfDistricts.setEntityName(null);
        assertBlankOrNullGroupOfDistrictsName();

        groupOfDistricts.setEntityName("");
        assertBlankOrNullGroupOfDistrictsName();

        groupOfDistricts.setEntityName("   ");
        assertBlankOrNullGroupOfDistrictsName();
    }

    @Test
    public void testValidGroupOfDistrictsNames() {
        groupOfDistricts.setEntityName("North Group Of States");
        assertValid("entityName");
    }

    // Parent Entity Type Tests
    @Test
    public void testValidParentEntityTypes() {
        groupOfDistricts.setParentEntityType("CLIENT");
        assertValid("parentEntityType");

        groupOfDistricts.setParentEntityType("STATE");
        assertValid("parentEntityType");

        groupOfDistricts.setParentEntityType("GROUPOFSTATES");
        assertValid("parentEntityType");
    }

    @Test
    public void testInvalidParentEntityTypes() {

        groupOfDistricts.setParentEntityType("DISTRICT");
        assertInvalidParentEntityType();
    }

    // Parent Entity Id Tests
    @Test
    public void testBlankOrNullParentEntityId() {
        groupOfDistricts.setParentEntityId((String) null);
        assertBlankOrNullParentEntityId();

        groupOfDistricts.setParentEntityId("");
        assertBlankOrNullParentEntityId();

        groupOfDistricts.setParentEntityId("  ");
        assertBlankOrNullParentEntityId();

        groupOfDistricts.setParentEntityId("");
        assertBlankOrNullParentEntityId();
    }

    @Test
    public void testInvalidSizeParentEntityId() {
        groupOfDistricts.setParentEntityId("9087716623656088988377388973784674564563453453453454354345645645646464564564564556458"); // >40
        assertInvalidSizeParentEntityId();
    }

    @Test
    public void testValidParentEntityId() {
        groupOfDistricts.setParentEntityId("908771662"); // <20 & numeric
        assertThat(validator.validateProperty(groupOfDistricts, "parentEntityId").size(), is(0));

        groupOfDistricts.setParentEntityId("9087716628833442344"); // =20
        assertThat(validator.validateProperty(groupOfDistricts, "parentEntityId").size(), is(0));

        groupOfDistricts.setParentEntityId("00012000200"); // Numeric
        assertThat(validator.validateProperty(groupOfDistricts, "parentEntityId").size(), is(0));

        groupOfDistricts.setParentEntityId("AB7716628833442344"); // Alphanumeric
        assertThat(validator.validateProperty(groupOfDistricts, "parentEntityId").size(), is(0));
    }

    @Test
    public void testInvalidStateAbbreviation() {
        groupOfDistricts.setStateAbbreviation("BC");
        assertInvalidStateAbbreviation("stateAbbreviation");

        groupOfDistricts.setStateAbbreviation("nmn");
        assertInvalidStateAbbreviation("stateAbbreviation");

        groupOfDistricts.setStateAbbreviation("--");
        assertInvalidStateAbbreviation("stateAbbreviation");

        groupOfDistricts.setStateAbbreviation("$$"); // special characters
        assertInvalidStateAbbreviation("stateAbbreviation");

        groupOfDistricts.setStateAbbreviation("æ♪"); // non-ascii
        assertInvalidStateAbbreviation("stateAbbreviation");
    }

    @Test
    public void testGroupOfDistrictsEntityForMultipleViolations() {
        groupOfDistricts.setEntityId("");
        groupOfDistricts.setEntityName("Wisconsin");
        groupOfDistricts.setParentEntityType("DISTRICT");
        groupOfDistricts.setParentEntityId("I&^&^^^POPPP_++_+");
        groupOfDistricts.setStateAbbreviation("MN1");
        groupOfDistricts.setDelete((String) null);

        Set<ConstraintViolation<GroupOfDistrictsEntity>> constraintViolations = validator.validate(groupOfDistricts, ImportFileValidationGroup.class);

        assertThat(constraintViolations.size(), is(4));
        Map<String, ConstraintViolation<GroupOfDistrictsEntity>> constraintViolationMap = new HashMap<String, ConstraintViolation<GroupOfDistrictsEntity>>();
        Iterator<ConstraintViolation<GroupOfDistrictsEntity>> iterator = constraintViolations.iterator();
        while (iterator.hasNext()) {
            ConstraintViolation<GroupOfDistrictsEntity> violation = iterator.next();
            constraintViolationMap.put(violation.getPropertyPath().toString(), violation);
        }

        assertThat(constraintViolationMap.get("entityId"), notNullValue());
        assertThat(constraintViolationMap.get("entityName"), nullValue());
        assertThat(constraintViolationMap.get("parentEntityType"), notNullValue());
        assertThat(constraintViolationMap.get("parentEntityId"), notNullValue());// ExternalIdValidation now attaches field name for errors. So this field has errors
        assertThat(constraintViolationMap.get("stateAbbreviation"), notNullValue());
    }

    @Test
    public void testGroupOfDistrictsEntityWithUIValidationGroup() {
        groupOfDistricts.setEntityId("23");
        groupOfDistricts.setEntityName("MIDWESTGROUPDIRSTRICTS");
        groupOfDistricts.setParentEntityType("CLIENT");
        groupOfDistricts.setParentEntityId("345345");
        groupOfDistricts.setStateAbbreviation("WI");
        groupOfDistricts.setDelete((String) null);
        Set<ConstraintViolation<GroupOfDistrictsEntity>> constraintViolations = validator.validate(groupOfDistricts, UIValidationGroup.class);
        assertThat(constraintViolations.size(), is(0));
    }

    @Test
    public void testGroupOfDistrictsEntityWithStateType() {
        groupOfDistricts.setEntityId("23");
        groupOfDistricts.setEntityName("MIDWESTGROUPDIRSTRICTS");
        groupOfDistricts.setParentEntityType("STATE");
        groupOfDistricts.setParentEntityId("IL");
        groupOfDistricts.setStateAbbreviation("WI");
        groupOfDistricts.setDelete("");
        Set<ConstraintViolation<GroupOfDistrictsEntity>> constraintViolations = validator.validate(groupOfDistricts);
        assertThat(constraintViolations.size(), is(0));
    }

    @Test
    public void testGroupOfDistrictsEntityWithInvalidEntityId() {
        groupOfDistricts.setEntityId("23");
        groupOfDistricts.setEntityName("MIDWESTGROUPDIRSTRICTS");
        groupOfDistricts.setParentEntityType("GROUPOFSTATES");
        groupOfDistricts.setParentEntityId("IL-01"); // Make it invalid
        groupOfDistricts.setStateAbbreviation("WI");
        groupOfDistricts.setDelete("");
        Set<ConstraintViolation<GroupOfDistrictsEntity>> constraintViolations = validator.validate(groupOfDistricts);
        assertThat(constraintViolations.size(), is(1));
    }

    private void assertBlankOrNullGroupOfDistrictsName() {
        Set<ConstraintViolation<GroupOfDistrictsEntity>> constraintViolations = validator.validateProperty(groupOfDistricts, "entityName", ImportFileValidationGroup.class);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("Group Of Districts Name is required"));
    }

    private void assertInvalidGroupOfDistrictsName() {
        Set<ConstraintViolation<GroupOfDistrictsEntity>> constraintViolations = validator.validateProperty(groupOfDistricts, "entityName", ImportFileValidationGroup.class);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("Group Of Districts Name should contain alphanumeric/special"));
    }

    // GroupOfDistricts Identifier Validations
    protected void assertInvalidGroupOfDistrictsIdentifier(String property) {
        Set<ConstraintViolation<GroupOfDistrictsEntity>> constraintViolations = validator.validateProperty(groupOfDistricts, property, ImportFileValidationGroup.class);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("Group Of Districts Identifier should contain alphanumeric"));
    }

    protected void assertBlankOrNullGroupOfDistrictsIdentifier(String property) {
        Set<ConstraintViolation<GroupOfDistrictsEntity>> constraintViolations = validator.validateProperty(groupOfDistricts, property, ImportFileValidationGroup.class);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("Group Of Districts Identifier is required"));
    }

}
