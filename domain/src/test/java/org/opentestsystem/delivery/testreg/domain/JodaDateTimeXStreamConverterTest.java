/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.domain;

import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;

import java.sql.Date;

import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.format.DateTimeFormat;
import org.junit.Before;
import org.junit.Test;

public class JodaDateTimeXStreamConverterTest {

    private static String defaultTZOffset = DateTimeFormat.forPattern("ZZ").withZone(DateTimeZone.getDefault()).print(0);
    JodaDateTimeXStreamConverter defaultJodaTimeConverter;

    @Before
    public void before() {
        defaultJodaTimeConverter = new JodaDateTimeXStreamConverter();
    }

    @Test
    public void testCanConvert() {
        assertThat(defaultJodaTimeConverter.canConvert(DateTime.class), is(true));
        assertThat(defaultJodaTimeConverter.canConvert(Date.class), is(false)); //use iso8601dateconverter
        assertThat(defaultJodaTimeConverter.canConvert(java.sql.Date.class), is(false)); //use sqldateconverter
    }

    @Test
    public void testToString() {
        assertThat(defaultJodaTimeConverter.toString(new DateTime(2013, 12, 12, 0, 0)), is("2013-12-12T00:00:00.000"+defaultTZOffset));
    }
    
    @Test
    public void testToString_noTimeStamp() {
        assertThat(new JodaDateTimeXStreamConverter("yyyy-MM-dd").toString(new DateTime(2013, 12, 12, 0, 0)), is("2013-12-12"));
    }
}
