/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.domain.constraintvalidators;

import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;
import static org.opentestsystem.delivery.testreg.domain.constraintvalidators.ValidatorContextHelper.getContextStub;

import javax.validation.ConstraintValidatorContext;
import java.util.List;
import java.util.ArrayList;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.Accommodation;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.AmericanSignLanguage;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.ClosedCaptioning;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.ColorContrast;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.Language;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.Masking;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.NonEmbeddedAccommodations;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.NonEmbeddedDesignatedSupports;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.PermissiveMode;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.PrintOnDemand;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.PrintSize;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.StreamlinedInterface;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.TextToSpeech;
import org.opentestsystem.delivery.testreg.domain.AccommodationEnums.Translation;
import org.opentestsystem.delivery.testreg.domain.constraints.AtLeastOneAccommodation;

public class AtLeastOneAccommodationValidatorTest {

    private AtLeastOneAccommodationValidator validator;
    ConstraintValidatorContext contextStub;

    @Before
    public void setup() {
        validator = new AtLeastOneAccommodationValidator();
        validator.initialize(Accommodation.class.getAnnotation(AtLeastOneAccommodation.class));
    }

    /**
     * This test uses stub for {@code ConstraintValidatorContext} instead of {@code Validator} to run the validation.
     * The reason for that is the intention of this test is to exercise a single class level validation as suppose to
     * all the fields in the class.
     */
    @Test
    public void noAccommodationField() {
        assertThat(validator.isValid(new Accommodation(), getContextStub()), is(false));
    }

    @Test
    public void oneAccommodationField() {
        Accommodation accommodation = new Accommodation();
        accommodation.setClosedCaptioning("JUNK Value");
        assertThat(validator.isValid(accommodation, contextStub), is(true));
    }

    @Test
    public void americanSignLanuage() {
        Accommodation accommodation = new Accommodation();
        accommodation.setAmericanSignLanguage(AmericanSignLanguage.TDS_ASL0);
        assertThat(validator.isValid(accommodation, contextStub), is(true));
        accommodation.setAmericanSignLanguage("SIGNNNN");
        assertThat(validator.isValid(accommodation, contextStub), is(true));
    }

    @Test
    public void closedCaptioning() {
        Accommodation accommodation = new Accommodation();
        accommodation.setClosedCaptioning(ClosedCaptioning.TDS_ClosedCap0);
        assertThat(validator.isValid(accommodation, contextStub), is(true));
        accommodation.setClosedCaptioning("CLOSED");
        assertThat(validator.isValid(accommodation, contextStub), is(true));
    }

    @Test
    public void colorContrast() {
        Accommodation accommodation = new Accommodation();
        accommodation.setColorContrast(ColorContrast.TDS_CC0);
        assertThat(validator.isValid(accommodation, contextStub), is(true));
        accommodation.setColorContrast("COLOR");
        assertThat(validator.isValid(accommodation, contextStub), is(true));
    }

    @Test
    public void language() {
        Accommodation accommodation = new Accommodation();
        accommodation.setLanguage(Language.ENU);
        assertThat(validator.isValid(accommodation, contextStub), is(true));
        accommodation.setLanguage("LAN");
        assertThat(validator.isValid(accommodation, contextStub), is(true));
    }

    @Test
    public void masking() {
        Accommodation accommodation = new Accommodation();
        accommodation.setMasking(Masking.TDS_Masking0);
        assertThat(validator.isValid(accommodation, contextStub), is(true));
        accommodation.setMasking("LAN");
        assertThat(validator.isValid(accommodation, contextStub), is(true));
    }

    @Test
    public void nonEmbeddedAccommodations() {
        Accommodation accommodation = new Accommodation();
        List<String> accommodationList = new ArrayList<>();
        accommodationList.add(NonEmbeddedAccommodations.NEA0.toString());
        accommodation.setNonEmbeddedAccommodations(accommodationList);
        assertThat(validator.isValid(accommodation, contextStub), is(true));
        List<String> accommodationList1 = new ArrayList<>();
        accommodationList1.add("LAN");
        accommodation.setNonEmbeddedAccommodations(accommodationList1);
        assertThat(validator.isValid(accommodation, contextStub), is(true));
    }

    @Test
    public void nonEmbeddedDesignatedSupports() {
        Accommodation accommodation = new Accommodation();
        List<String> supportList = new ArrayList<>();
        supportList.add(NonEmbeddedDesignatedSupports.NEDS0.toString());
        accommodation.setNonEmbeddedDesignatedSupports(supportList);
        assertThat(validator.isValid(accommodation, contextStub), is(true));
        List<String> supportList1 = new ArrayList<>();
        supportList1.add("LAN");
        accommodation.setNonEmbeddedDesignatedSupports(supportList1);
        assertThat(validator.isValid(accommodation, contextStub), is(true));
    }

    @Test
    public void permissiveMode() {
        Accommodation accommodation = new Accommodation();
        accommodation.setPermissiveMode(PermissiveMode.TDS_PM0);
        assertThat(validator.isValid(accommodation, contextStub), is(true));
        accommodation.setPermissiveMode("LAN");
        assertThat(validator.isValid(accommodation, contextStub), is(true));
    }

    @Test
    public void printOnDemand() {
        Accommodation accommodation = new Accommodation();
        accommodation.setPrintOnDemand(PrintOnDemand.TDS_PoD0);
        assertThat(validator.isValid(accommodation, contextStub), is(true));
        accommodation.setPrintOnDemand("LAN");
        assertThat(validator.isValid(accommodation, contextStub), is(true));
    }

    @Test
    public void printSize() {
        Accommodation accommodation = new Accommodation();
        accommodation.setPrintSize(PrintSize.TDS_PS_L0);
        assertThat(validator.isValid(accommodation, contextStub), is(true));
        accommodation.setPrintSize("LAN");
        assertThat(validator.isValid(accommodation, contextStub), is(true));
    }

    @Test
    public void streamlinedInterface() {
        Accommodation accommodation = new Accommodation();
        accommodation.setStreamlinedInterface(StreamlinedInterface.TDS_SLM0);
        assertThat(validator.isValid(accommodation, contextStub), is(true));
        accommodation.setStreamlinedInterface("LAN");
        assertThat(validator.isValid(accommodation, contextStub), is(true));
    }

    @Test
    public void textToSpeech() {
        Accommodation accommodation = new Accommodation();
        accommodation.setTextToSpeech(TextToSpeech.TDS_TTS0);;
        assertThat(validator.isValid(accommodation, contextStub), is(true));
        accommodation.setTextToSpeech("LAN");
        assertThat(validator.isValid(accommodation, contextStub), is(true));
    }

    @Test
    public void translation() {
        Accommodation accommodation = new Accommodation();
        accommodation.setTranslation(Translation.TDS_WL0);
        assertThat(validator.isValid(accommodation, contextStub), is(true));
        accommodation.setTranslation("BBB");
        assertThat(validator.isValid(accommodation, contextStub), is(true));
    }

    @Test
    public void other() {
        Accommodation accommodation = new Accommodation();
        accommodation.setOther("other accommodation");
        assertThat(validator.isValid(accommodation, contextStub), is(true));
    }

}
