/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.domain;

import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsNull.notNullValue;
import static org.hamcrest.core.IsNull.nullValue;
import static org.junit.Assert.assertThat;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

import javax.validation.ConstraintViolation;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.integration.AbstractDomainTest;

public class GroupOfStatesEntityTest extends AbstractDomainTest {

    private GroupOfStatesEntity groupOfStates;

    @Before
    public void setup() {
        groupOfStates = new GroupOfStatesEntity();
        setSb11Entity(groupOfStates);
    }

    @After
    public void tearDown() {
        setSb11Entity(null);
    }

    // GroupOfStates Identifier Tests
    @Test
    public void testInvalidGroupOfStatesIdentifier() {

        groupOfStates.setEntityId("$$"); // special characters
        assertInvalidGroupOfStatesIdentifier("entityId");

        groupOfStates.setEntityId("æ♪"); // non-ascii
        assertInvalidGroupOfStatesIdentifier("entityId");

        groupOfStates.setEntityId("AD-123"); // Non-Alphanumeric - dash
        assertInvalidGroupOfStatesIdentifier("entityId");

        groupOfStates.setEntityId("$$"); // Non-Alphanumeric - symbols
        assertInvalidGroupOfStatesIdentifier("entityId");
    }

    @Test
    public void testBlankOrNullGroupOfStatesIdentifier() {
        groupOfStates.setEntityId(null);
        assertBlankOrNullGroupOfStatesIdentifier("entityId");

        groupOfStates.setEntityId("");
        assertBlankOrNullGroupOfStatesIdentifier("entityId");

        groupOfStates.setEntityId("   ");
        assertBlankOrNullGroupOfStatesIdentifier("entityId");
    }

    @Test
    public void testValidGroupOfStatesIdentifier() {
        groupOfStates.setEntityId("1234"); // Numeric
        assertThat(validator.validateProperty(groupOfStates, "entityId").size(), is(0));

        groupOfStates.setEntityId("0001232"); // Leading Zeros
        assertThat(validator.validateProperty(groupOfStates, "entityId").size(), is(0));

        groupOfStates.setEntityId("0012AL"); // Alphanumeric
        assertThat(validator.validateProperty(groupOfStates, "entityId").size(), is(0));

        groupOfStates.setEntityId("abcvf234vbvb"); // Alphanumeric Lowercase
        assertThat(validator.validateProperty(groupOfStates, "entityId").size(), is(0));

        groupOfStates.setEntityId("abvcRtr12Bn"); // Alphanumeric Mixedcase
        assertThat(validator.validateProperty(groupOfStates, "entityId").size(), is(0));
    }

    @Test
    public void testInvalidGroupOfStatesIdentifierSize() {
        groupOfStates.setEntityId("234124124312341234123412341241234325645645645645645645645654");
        Set<ConstraintViolation<GroupOfStatesEntity>> constraintViolations = validator.validateProperty(groupOfStates,
                "entityId", ImportFileValidationGroup.class);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(),
                is("Group Of States Identifier size must be between 1 and 40"));
    }

    // GroupOfStates Name Tests
    @Test
    public void testInvalidSizeGroupOfStatesNames() {
        groupOfStates.setEntityName("Minnesotalumbiammnbmnbmnbmnbmnbmnbmnbmnbmnbmnbmmnmnmn"); // >50
        Set<ConstraintViolation<GroupOfStatesEntity>> constraintViolations = validator.validateProperty(groupOfStates,
                "entityName", ImportFileValidationGroup.class);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(),
                is("Group Of States Name size must be between 1 and 50"));
    }

    @Test
    public void testValidSizeGroupOfStatesName() {
        groupOfStates.setEntityName("Californiaffsdddfdfdqwdssdffssdfgsggwrtyqwertyqwer"); // =50
        assertThat(validator.validateProperty(groupOfStates, "entityName").size(), is(0));

        groupOfStates.setEntityName("Californiaffsdddfdfgsggwrtyqwertyqwer"); // <50
        assertThat(validator.validateProperty(groupOfStates, "entityName").size(), is(0));
    }

    @Test
    public void testBlankOrNullGroupOfStatesNames() {
        groupOfStates.setEntityName(null);
        assertBlankOrNullGroupOfStatesName();

        groupOfStates.setEntityName("");
        assertBlankOrNullGroupOfStatesName();

        groupOfStates.setEntityName("   ");
        assertBlankOrNullGroupOfStatesName();
    }

    @Test
    public void testValidGroupOfStatesNames() {
        groupOfStates.setEntityName("North Group Of States");
        assertValid("entityName");
    }

    // Parent Entity Type Tests
    @Test
    public void testValidParentEntityTypes() {
        groupOfStates.setParentEntityType("CLIENT");
        assertValid("parentEntityType");
    }

    @Test
    public void testInvalidParentEntityTypes() {
        groupOfStates.setParentEntityType("STATE");
        assertInvalidParentEntityType();

        groupOfStates.setParentEntityType("GROUPOFDISTRICTS");
        assertInvalidParentEntityType();

        groupOfStates.setParentEntityType("DISTRICT");
        assertInvalidParentEntityType();
    }

    // Parent Entity Id Tests
    @Test
    public void testBlankOrNullParentEntityId() {
        groupOfStates.setParentEntityId((String) null);
        assertBlankOrNullParentEntityId();

        groupOfStates.setParentEntityId("");
        assertBlankOrNullParentEntityId();

        groupOfStates.setParentEntityId("  ");
        assertBlankOrNullParentEntityId();

        groupOfStates.setParentEntityId("");
        assertBlankOrNullParentEntityId();
    }

    @Test
    public void testInvalidParentEntityId() {
        groupOfStates.setParentEntityId("YUYY-90");
        assertInvalidParentEntityId();

        groupOfStates.setParentEntityId("-");
        assertInvalidParentEntityId();

    }

    @Test
    public void testInvalidSizeParentEntityId() {
        groupOfStates.setParentEntityId("908771662365608898837738897378845645645645645890808080864564546456456455645645645"); // >40
        assertInvalidSizeParentEntityId();
    }

    @Test
    public void testValidParentEntityId() {
        groupOfStates.setParentEntityId("908771662"); // <20
        assertThat(validator.validateProperty(groupOfStates, "parentEntityId").size(), is(0));

        groupOfStates.setParentEntityId("9087716628833442344"); // =20
        assertThat(validator.validateProperty(groupOfStates, "parentEntityId").size(), is(0));

        groupOfStates.setParentEntityId("AB628833442344"); // Alphanumeric
        assertThat(validator.validateProperty(groupOfStates, "parentEntityId").size(), is(0));
    }

    @Test
    public void testGroupOfStatesEntityForMultipleViolations() {
        groupOfStates.setEntityId("");
        groupOfStates.setEntityName("Wisconsin");
        groupOfStates.setParentEntityType("DISTRICT");
        groupOfStates.setParentEntityId("I&^&^^^POPPP_++_+");
        groupOfStates.setDelete((String) null);

        Set<ConstraintViolation<GroupOfStatesEntity>> constraintViolations = validator.validate(groupOfStates,
                ImportFileValidationGroup.class);

        assertThat(constraintViolations.size(), is(3));
        Map<String, ConstraintViolation<GroupOfStatesEntity>> constraintViolationMap = new HashMap<String, ConstraintViolation<GroupOfStatesEntity>>();
        Iterator<ConstraintViolation<GroupOfStatesEntity>> iterator = constraintViolations.iterator();
        while (iterator.hasNext()) {
            ConstraintViolation<GroupOfStatesEntity> violation = iterator.next();
            constraintViolationMap.put(violation.getPropertyPath().toString(), violation);
        }

        assertThat(constraintViolationMap.get("entityId"), notNullValue());
        assertThat(constraintViolationMap.get("entityName"), nullValue());
        assertThat(constraintViolationMap.get("parentEntityType"), notNullValue());
        assertThat(constraintViolationMap.get("parentEntityId"), notNullValue());
    }

    @Test
    public void testGroupOfStatesEntityWithUIValidationGroup() {
        groupOfStates.setEntityId("23");
        groupOfStates.setEntityName("MIDWESTGROUP");
        groupOfStates.setParentEntityType("CLIENT");
        groupOfStates.setParentEntityId("345345");
        groupOfStates.setDelete((String) null);
        Set<ConstraintViolation<GroupOfStatesEntity>> constraintViolations = validator.validate(groupOfStates,
                UIValidationGroup.class);
        assertThat(constraintViolations.size(), is(0));
    }

    private void assertBlankOrNullGroupOfStatesName() {
        Set<ConstraintViolation<GroupOfStatesEntity>> constraintViolations = validator.validateProperty(groupOfStates,
                "entityName", ImportFileValidationGroup.class);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("Group Of States Name is required"));
    }

    // GroupOfStates Identifier Validations
    protected void assertInvalidGroupOfStatesIdentifier(final String property) {
        Set<ConstraintViolation<GroupOfStatesEntity>> constraintViolations = validator.validateProperty(groupOfStates,
                property, ImportFileValidationGroup.class);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(),
                is("Group Of States Identifier should contain alphanumeric"));
    }

    protected void assertBlankOrNullGroupOfStatesIdentifier(final String property) {
        Set<ConstraintViolation<GroupOfStatesEntity>> constraintViolations = validator.validateProperty(groupOfStates,
                property, ImportFileValidationGroup.class);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("Group Of States Identifier is required"));
    }
}
