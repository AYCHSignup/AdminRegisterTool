/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.domain;

import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;

import java.util.Set;

import javax.validation.ConstraintViolation;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.integration.AbstractDomainTest;

public class InstitutionEntityTest extends AbstractDomainTest {

    private InstitutionEntity institution;

    @Before
    public void setup() {
        institution = new InstitutionEntity();
        setSb11Entity(institution);
    }

    @After
    public void tearDown() {
        setSb11Entity(null);
    }

    @Test
    public void testSizeForInstitutionIdentifier() {
        institution.setEntityId("126627626726GGHGH77277367882378WEEYUYYTRRR773899");
        Set<ConstraintViolation<InstitutionEntity>> constraintViolations = validator.validateProperty(institution,
                "entityId", ImportFileValidationGroup.class);
        assertThat(constraintViolations.size(), is(1));

        institution.setEntityId("12662762");
        constraintViolations = validator.validateProperty(institution, "entityId", ImportFileValidationGroup.class);
        assertThat(constraintViolations.size(), is(0));
    }

    @Test
    public void testValidEntityId() {
        institution.setEntityId("AB0090"); // Alphanumeric Uppercase
        assertValid("entityId");

        institution.setEntityId("00090"); // Leading Zeros
        assertValid("entityId");

        institution.setEntityId("1234567"); // Numeric
        assertValid("entityId");

        institution.setEntityId("abbcvccvvbv0090"); // lowercase
        assertValid("entityId");

        institution.setEntityId("abbcUiUh0019"); // mixedcase
        assertValid("entityId");

    }

    @Test
    public void testBlankOrNullInstitutionIdentifier() {
        institution.setEntityId(null);
        assertBlankOrNullInstitutionIdentifier(institution);

        institution.setEntityId("");
        assertBlankOrNullInstitutionIdentifier(institution);

        institution.setEntityId("   ");
        assertBlankOrNullInstitutionIdentifier(institution);
    }

    @Test
    public void testInvalidEntityId() {
        institution.setEntityId("AB-0090");
        Set<ConstraintViolation<InstitutionEntity>> constraintViolations = validator.validateProperty(institution,
                "entityId", ImportFileValidationGroup.class);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("Institution Identifier should contain alphanumeric"));
    }

    @Test
    public void testValidParentEntityTypes() {
        institution.setParentEntityType("CLIENT");
        assertThat(validator.validateProperty(institution, "parentEntityType").size(), is(0));

        institution.setParentEntityType("STATE");
        assertThat(validator.validateProperty(institution, "parentEntityType").size(), is(0));

        institution.setParentEntityType("GROUPOFSTATES ");
        assertThat(validator.validateProperty(institution, "parentEntityType").size(), is(0));

        institution.setParentEntityType("DISTRICT");
        assertThat(validator.validateProperty(institution, "parentEntityType").size(), is(0));

        institution.setParentEntityType(" GROUPOFDISTRICTS");
        assertThat(validator.validateProperty(institution, "parentEntityType").size(), is(0));

        institution.setParentEntityType("GROUPOFINSTITUTIONS");
        assertThat(validator.validateProperty(institution, "parentEntityType").size(), is(0));
    }

    @Test
    public void testInvalidParentEntityTypes() {
        institution.setParentEntityType("INSTITUTION");
        assertInvalidParentEntityType();
    }

    @Test
    public void testInvalidStateAbbreviation() {
        institution.setStateAbbreviation("BC");
        assertInvalidStateAbbreviation("stateAbbreviation");

        institution.setStateAbbreviation("nmn");
        assertInvalidStateAbbreviation("stateAbbreviation");

        institution.setStateAbbreviation("--");
        assertInvalidStateAbbreviation("stateAbbreviation");

        institution.setStateAbbreviation("$$"); // special characters
        assertInvalidStateAbbreviation("stateAbbreviation");

        institution.setStateAbbreviation("æ♪"); // non-ascii
        assertInvalidStateAbbreviation("stateAbbreviation");
    }

    @Test
    public void testSizeForNameOfInstitution() {
        institution.setEntityName("126627626726GGHGHg77277367882378ywsjkbjwe773899elkjwe8832oklklsdlhf87239023907327kbaskjbaskjk");
        Set<ConstraintViolation<InstitutionEntity>> constraintViolations = validator.validateProperty(institution,
                "entityName", ImportFileValidationGroup.class);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("Name of Institution size must be between 1 and 60"));

        institution.setEntityName("126627626726GGHGHg7727");
        constraintViolations = validator.validateProperty(institution, "entityName", ImportFileValidationGroup.class);
        assertThat(constraintViolations.size(), is(0));
    }

    @Test
    public void testBlankOrNullParentEntityId() {
        institution.setParentEntityId((String) null);
        assertBlankOrNullParentEntityId();

        institution.setParentEntityId("");
        assertBlankOrNullParentEntityId();

        institution.setParentEntityId("  ");
        assertBlankOrNullParentEntityId();

        institution.setParentEntityId("");
        assertBlankOrNullParentEntityId();
    }

    @Test
    public void testValidParentEntityId() {
        institution.setParentEntityId("CA123"); // <20
        assertThat(validator.validateProperty(institution, "parentEntityId").size(), is(0));

        institution.setParentEntityId("WI"); // =20
        assertThat(validator.validateProperty(institution, "parentEntityId").size(), is(0));
    }

    @Test
    public void testValidInstitutionEntity() {
        institution.setEntityId("123");
        institution.setEntityName("Middleton High School");
        institution.setParentEntityType("DISTRICT");
        institution.setParentEntityId("100");
        institution.setStateAbbreviation("WI");
        institution.setNationwideIdentifier("1212");
        institution.setDelete("");

        Set<ConstraintViolation<InstitutionEntity>> violations = validator.validate(institution);
        assertThat(violations.size(), is(0));
    }

    @Test
    public void testInValidInstitutionEntityId() {
        institution.setEntityId("123");
        institution.setEntityName("Middleton High School");
        institution.setParentEntityType("DISTRICT");
        institution.setParentEntityId("CA-001"); // Make it an invalid alphanumeric value
        institution.setStateAbbreviation("WI");
        institution.setNationwideIdentifier("1212");
        institution.setDelete("");

        Set<ConstraintViolation<InstitutionEntity>> violations = validator.validate(institution);
        assertThat(violations.size(), is(1));
    }

    private void assertBlankOrNullInstitutionIdentifier(Sb11Entity sb11Entity) {
        Set<ConstraintViolation<InstitutionEntity>> constraintViolations = validator.validateProperty(institution, "entityId");
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("Institution Identifier is required"));
    }

}
