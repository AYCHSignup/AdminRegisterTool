/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.domain;

import static org.hamcrest.CoreMatchers.not;
import static org.hamcrest.Matchers.hasSize;
import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;

import java.util.HashSet;
import java.util.Set;

import javax.validation.ConstraintViolation;
import javax.validation.Validator;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "classpath:spring/domain-context.xml", "classpath:test-domain-context.xml" })
public class StudentGroupTest {

    private static final String INSTITUTION_ID_BLANK = "Institution Identifier is required";
    private static final String INSTITUTION_ID_ALPHA = "Institution Identifier should be alphanumeric";
    private static final String INSTITUTION_ID_SIZE = "Institution Identifier length must be between 1 and 40 characters";
    private static final String EMAIL_BLANK = "User is required";
    private static final String EMAIL_SIZE = "Electronic Mail Address length must be between 1 and 50 characters";
    private static final String EMAIL_VALID = "Electronic Mail Address must be a valid email address";
    private static final String GROUPNAME_BLANK = "Student Group Name is required";
    private static final String GROUPNAME_ALPHA = "Student Group Name should be alphanumeric and can include spaces";
    private static final String GROUPNAME_SIZE = "Student Group Name length must be between 1 and 50 characters";
    private static final String STUDENT_ID_BLANK = "Student Identifier is required";
    private static final String STUDENT_ID_ALPHA = "Student Identifier should be alphanumeric";
    private static final String STUDENT_ID_SIZE = "Student Identifier length must be between 1 and 40 characters";
    private static final String STATE_ABBR_BLANK = "State Abbreviation is required";
    private static final String STATE_ABBR_VALID = "State Abbreviation is not valid";
    private static final String DISTRICT_ID_BLANK = "Responsible District Identifier is required";
    private static final String DISTRICT_ID_ALPHA = "Responsible District Identifier should be alphanumeric";
    private static final String DISTRICT_ID_SIZE = "Responsible District Identifier length must be between 1 and 40 characters";
    private static final String DELETE_ALPHA = "Delete can only contain letters";
    private static final String DELETE_SIZE = "Delete size must be between 1 and 6";

    @Autowired
    protected Validator validator;

    private StudentGroup studentgroup;

    @Before
    public void setup() {

        studentgroup = new StudentGroup();
    }

    @After
    public void tearDown() {
        studentgroup = null;
    }

    @Test
    public void testBlankOrNullInstitutionIdentifier() {
        studentgroup.setInstitutionIdentifier(null);
        assertBlankOrNullCheck(studentgroup, "institutionIdentifier", INSTITUTION_ID_BLANK);
        studentgroup.setInstitutionIdentifier("");
        assertBlankOrNullCheck(studentgroup, "institutionIdentifier", INSTITUTION_ID_BLANK);
        studentgroup.setInstitutionIdentifier("   ");
        assertBlankOrNullCheck(studentgroup, "institutionIdentifier", INSTITUTION_ID_BLANK);
    }

    @Test
    public void testAlphaOnlyForInstitutionIdentifier() {
        studentgroup.setInstitutionIdentifier("blah46$g");
        Set<ConstraintViolation<StudentGroup>> constraintViolations = validator.validateProperty(studentgroup,
                "institutionIdentifier");
        assertThat(constraintViolations, hasSize(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is(INSTITUTION_ID_ALPHA));

        studentgroup.setInstitutionIdentifier("blah46 g");
        constraintViolations = validator.validateProperty(studentgroup, "institutionIdentifier");
        assertThat(constraintViolations, hasSize(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is(INSTITUTION_ID_ALPHA));
    }

    @Test
    public void testSizeForInstitutionIdentifier() {
        studentgroup.setInstitutionIdentifier("126627626726GGHGHg7723452345234523452345234520803485023485034345234523452345");
        Set<ConstraintViolation<StudentGroup>> constraintViolations = validator.validateProperty(studentgroup,
                "institutionIdentifier");
        assertThat(constraintViolations, hasSize(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is(INSTITUTION_ID_SIZE));
    }

    @Test
    public void testValidInstitutionIdentifier() {
        studentgroup.setInstitutionIdentifier("1345556g");
        Set<ConstraintViolation<StudentGroup>> constraintViolations = validator.validateProperty(studentgroup,
                "institutionIdentifier");
        assertThat(constraintViolations, hasSize(0));
    }

    @Test
    public void testEmailBlankOrNull() {
        studentgroup.setOwnerEmail(null);
        assertBlankOrNullCheck(studentgroup, "ownerEmail", EMAIL_BLANK);

        studentgroup.setOwnerEmail("");
        assertBlankOrNullCheck(studentgroup, "ownerEmail", EMAIL_BLANK);

        studentgroup.setOwnerEmail("   "); // because this is spaces, technically there's no value, but it triggers the
                                           // @email validation

        Set<ConstraintViolation<StudentGroup>> constraintViolations = validator.validateProperty(studentgroup,
                "ownerEmail");
        assertThat(constraintViolations, hasSize(1));

        Set<String> messages = new HashSet<String>();
        for (ConstraintViolation<StudentGroup> violation : constraintViolations) {
            messages.add(violation.getMessage());
        }

        assertThat(messages, org.hamcrest.Matchers.containsInAnyOrder(EMAIL_BLANK));
    }

    @Test
    public void testBlankOrNullGroupName() {
        studentgroup.setStudentGroupName(null);
        assertBlankOrNullCheck(studentgroup, "studentGroupName", GROUPNAME_BLANK);
        studentgroup.setStudentGroupName("");
        assertBlankOrNullCheck(studentgroup, "studentGroupName", GROUPNAME_BLANK);
        studentgroup.setStudentGroupName("   ");
        assertBlankOrNullCheck(studentgroup, "studentGroupName", GROUPNAME_BLANK);
    }

    @Test
    public void testAlphaOnlyForGroupName() {
        studentgroup.setStudentGroupName("blah46$g");
        Set<ConstraintViolation<StudentGroup>> constraintViolations = validator.validateProperty(studentgroup,
                "studentGroupName");
        assertThat(constraintViolations, hasSize(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is(GROUPNAME_ALPHA));

        studentgroup.setStudentGroupName("blah46-g");
        constraintViolations = validator.validateProperty(studentgroup, "studentGroupName");
        assertThat(constraintViolations, hasSize(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is(GROUPNAME_ALPHA));

        studentgroup.setStudentGroupName("blah46.g");
        constraintViolations = validator.validateProperty(studentgroup, "studentGroupName");
        assertThat(constraintViolations, hasSize(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is(GROUPNAME_ALPHA));
    }

    @Test
    public void testSizeForGroupName() {
        studentgroup
                .setStudentGroupName("thisisareallylonggroupnametotestoutwhetherornotthemaxlengthvalidationworkscorrectly");
        Set<ConstraintViolation<StudentGroup>> constraintViolations = validator.validateProperty(studentgroup,
                "studentGroupName");
        assertThat(constraintViolations, hasSize(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is(GROUPNAME_SIZE));
    }

    @Test
    public void testValidGroupName() {
        studentgroup.setStudentGroupName("cool group");
        Set<ConstraintViolation<StudentGroup>> constraintViolations = validator.validateProperty(studentgroup,
                "studentGroupName");
        assertThat(constraintViolations, hasSize(0));
    }

    @Test
    public void testBlankOrNullStudentIdentifier() {
        studentgroup.setStudentId(null);
        assertBlankOrNullCheck(studentgroup, "studentId", STUDENT_ID_BLANK);
        studentgroup.setStudentId("");
        assertBlankOrNullCheck(studentgroup, "studentId", STUDENT_ID_BLANK);
        studentgroup.setStudentId("  ");
        assertBlankOrNullCheck(studentgroup, "studentId", STUDENT_ID_BLANK);
    }

    @Test
    public void testSizeForStudentIdentifier() {
        studentgroup.setStudentId("126627626726GGHGHg77277367882378ywsjkbjwe7738995564564564564");
        Set<ConstraintViolation<StudentGroup>> constraintViolations = validator.validateProperty(studentgroup,
                "studentId", ImportFileValidationGroup.class);
        assertThat(constraintViolations, hasSize(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is(STUDENT_ID_SIZE));
    }

    @Test
    public void testAlphaOnlyForStudentId() {
        studentgroup.setStudentId("blah46$g");
        Set<ConstraintViolation<StudentGroup>> constraintViolations = validator.validateProperty(studentgroup,
                "studentId", ImportFileValidationGroup.class);
        assertThat(constraintViolations, hasSize(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is(STUDENT_ID_ALPHA));

        constraintViolations = validator.validateProperty(studentgroup, "studentId", ImportFileValidationGroup.class);
        assertThat(constraintViolations, hasSize(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is(STUDENT_ID_ALPHA));

        studentgroup.setStudentId("blah46.g");
        constraintViolations = validator.validateProperty(studentgroup, "studentId", ImportFileValidationGroup.class);
        assertThat(constraintViolations, hasSize(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is(STUDENT_ID_ALPHA));

        studentgroup.setStudentId("blah46 g");
        constraintViolations = validator.validateProperty(studentgroup, "studentId", ImportFileValidationGroup.class);
        assertThat(constraintViolations, hasSize(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is(STUDENT_ID_ALPHA));
    }

    @Test
    public void testValidStudentId() {
        studentgroup.setStudentId("383203a393b");
        Set<ConstraintViolation<StudentGroup>> constraintViolations = validator.validateProperty(studentgroup,
                "studentId");
        assertThat(constraintViolations, hasSize(0));
    }

    @Test
    public void testBlankOrNullStateAbbreviation() {
        studentgroup.setStateAbbreviation(null);
        assertBlankOrNullCheck(studentgroup, "stateAbbreviation", STATE_ABBR_BLANK);
        studentgroup.setStateAbbreviation("");
        assertBlankOrNullCheck(studentgroup, "stateAbbreviation", STATE_ABBR_BLANK);
        studentgroup.setStateAbbreviation("   ");
        assertBlankOrNullCheck(studentgroup, "stateAbbreviation", STATE_ABBR_BLANK);
    }

    @Test
    public void testInvalidStateAbbreviation() {
        studentgroup.setStateAbbreviation("BC");
        assertInvalidStateAbbreviation("stateAbbreviation");
        studentgroup.setStateAbbreviation("nmn");
        assertInvalidStateAbbreviation("stateAbbreviation");
        studentgroup.setStateAbbreviation("--");
        assertInvalidStateAbbreviation("stateAbbreviation");
        studentgroup.setStateAbbreviation("$$"); // special characters
        assertInvalidStateAbbreviation("stateAbbreviation");
        studentgroup.setStateAbbreviation("æ♪"); // non-ascii
        assertInvalidStateAbbreviation("stateAbbreviation");
    }

    @Test
    public void testValidStateAbbreviation() {
        studentgroup.setStateAbbreviation("WI");
        Set<ConstraintViolation<StudentGroup>> constraintViolations = validator.validateProperty(studentgroup,
                "stateAbbreviation");
        assertThat(constraintViolations.size(), is(0));
    }

    @Test
    public void testNullDistrictId() {
        studentgroup.setDistrictIdentifier(null);
        Set<ConstraintViolation<StudentGroup>> constraintViolations = validator.validateProperty(studentgroup, "districtIdentifier");
        assertThat(constraintViolations.size(), is(0));
    }

    @Test
    public void testAlphaOnlyForDistrictId() {
        studentgroup.setDistrictIdentifier("blah46$g");
        Set<ConstraintViolation<StudentGroup>> constraintViolations = validator.validateProperty(studentgroup,
                "districtIdentifier");
        assertThat(constraintViolations, hasSize(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is(DISTRICT_ID_ALPHA));

        studentgroup.setDistrictIdentifier("blah46-g");
        constraintViolations = validator.validateProperty(studentgroup, "districtIdentifier");
        assertThat(constraintViolations, hasSize(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is(DISTRICT_ID_ALPHA));

        studentgroup.setDistrictIdentifier("blah46.g");
        constraintViolations = validator.validateProperty(studentgroup, "districtIdentifier");
        assertThat(constraintViolations, hasSize(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is(DISTRICT_ID_ALPHA));

        studentgroup.setDistrictIdentifier("blah46 g");
        constraintViolations = validator.validateProperty(studentgroup, "districtIdentifier");
        assertThat(constraintViolations, hasSize(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is(DISTRICT_ID_ALPHA));
    }

    @Test
    public void testSizeForDistrictId() {
        studentgroup.setDistrictIdentifier("126627626726GGHGHg77277367882378ywsjkbjwe773899453453453546456456454534534");
        Set<ConstraintViolation<StudentGroup>> constraintViolations = validator.validateProperty(studentgroup,
                "districtIdentifier");
        assertThat(constraintViolations, hasSize(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is(DISTRICT_ID_SIZE));
    }

    @Test
    public void testValidDistrictId() {
        studentgroup.setDistrictIdentifier("5443133");
        Set<ConstraintViolation<StudentGroup>> constraintViolations = validator.validateProperty(studentgroup,
                "districtIdentifier");
        assertThat(constraintViolations.size(), is(0));
    }

    @Test
    public void testValidDelete() {
        studentgroup.setDelete("");
        Set<ConstraintViolation<StudentGroup>> constraintViolations = validator
                .validateProperty(studentgroup, "delete");
        assertThat(constraintViolations.size(), is(0));

        studentgroup.setDelete("DELETE");
        constraintViolations = validator.validateProperty(studentgroup, "delete");
        assertThat(constraintViolations.size(), is(0));
    }

    @Test
    public void testIncorrectAction() {
        studentgroup.setDelete("Yes");
        assertThat(studentgroup.getAction(), not(Action.DEL));
    }

    @Test
    public void testCorrectAction() {
        studentgroup.setDelete("DELETE");
        assertThat(studentgroup.getAction(), is(Action.DEL));
    }

    @Test
    public void testAlphaOnlyForDelete() {
        studentgroup.setDelete("b$g");
        Set<ConstraintViolation<StudentGroup>> constraintViolations = validator
                .validateProperty(studentgroup, "delete");
        assertThat(constraintViolations, hasSize(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is(DELETE_ALPHA));

        studentgroup.setDelete("b-g");
        constraintViolations = validator.validateProperty(studentgroup, "delete");
        assertThat(constraintViolations, hasSize(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is(DELETE_ALPHA));

        studentgroup.setDelete("b.g");
        constraintViolations = validator.validateProperty(studentgroup, "delete");
        assertThat(constraintViolations, hasSize(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is(DELETE_ALPHA));

        studentgroup.setDelete("b g");
        constraintViolations = validator.validateProperty(studentgroup, "delete");
        assertThat(constraintViolations, hasSize(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is(DELETE_ALPHA));

        studentgroup.setDelete("123");
        constraintViolations = validator.validateProperty(studentgroup, "delete");
        assertThat(constraintViolations, hasSize(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is(DELETE_ALPHA));
    }

    @Test
    public void testSizeForDelete() {
        studentgroup.setDelete("waytoolong");
        Set<ConstraintViolation<StudentGroup>> constraintViolations = validator
                .validateProperty(studentgroup, "delete");
        assertThat(constraintViolations, hasSize(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is(DELETE_SIZE));
    }

    private void assertBlankOrNullCheck(StudentGroup studentgroup2, String property, String message) {
        Set<ConstraintViolation<StudentGroup>> constraintViolations = validator.validateProperty(studentgroup2,
                property, ImportFileValidationGroup.class);
        assertThat(constraintViolations, hasSize(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is(message));
    }

    // State Abbreviation Validations
    private void assertInvalidStateAbbreviation(String property) {
        Set<ConstraintViolation<StudentGroup>> constraintViolations = validator
                .validateProperty(studentgroup, property);
        assertThat(constraintViolations, hasSize(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is(STATE_ABBR_VALID));
    }
}
