/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.domain;

import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsNull.notNullValue;
import static org.hamcrest.core.IsNull.nullValue;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertThat;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

import javax.validation.ConstraintViolation;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.integration.AbstractDomainTest;

public class StateEntityTest extends AbstractDomainTest {

    private StateEntity state;

    public StateEntityTest() {
    }

    @Before
    public void setup() {
        state = new StateEntity();
        setSb11Entity(state);
        ;
    }

    @After
    public void tearDown() {
        setSb11Entity(null);
    }

    // State Code Tests
    @Test
    public void testInvalidStateCodes() {
        state.setEntityId("BC");
        assertInvalidStateAbbreviation("entityId");

        state.setEntityId("nmn");
        assertInvalidStateAbbreviation("entityId");

        state.setEntityId("--");
        assertInvalidStateAbbreviation("entityId");

        state.setEntityId("$$"); // special characters
        assertInvalidStateAbbreviation("entityId");

        state.setEntityId("æ♪"); // non-ascii
        assertInvalidStateAbbreviation("entityId");
    }

    @Test
    public void testInvalidStateName() {

        state.setParentEntityId("222");
        state.setParentEntityType("CLIENT");
        state.setEntityId("WI");
        state.setEntityName("dude");
        Set<ConstraintViolation<StateEntity>> constraintViolations = validator.validate(state, ImportFileValidationGroup.class);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("State Name "+ state.getEntityName() +" is not valid for the given abbreviation " + state.getEntityId() +"."));

        constraintViolations.clear();
        state.setEntityName("Minnesota");
        constraintViolations = validator.validate(state, ImportFileValidationGroup.class);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("State Name "+ state.getEntityName() +" is not valid for the given abbreviation " + state.getEntityId() +"."));

        constraintViolations.clear();
        state.setEntityName("Wisconsin");
        constraintViolations = validator.validateProperty(state, "entityName", ImportFileValidationGroup.class);
        assertThat(constraintViolations.size(), is(0));
    }

    @Test
    public void testBlankOrNullStateCodes() {
        state.setEntityId(null);
        assertBlankOrNullStateAbbreviation("entityId");

        state.setEntityId("");
        assertBlankOrNullStateAbbreviation("entityId");

        state.setEntityId("   ");
        assertBlankOrNullStateAbbreviation("entityId");
    }

    @Test
    public void testValidStateCodes() {
        state.setEntityId("MN");
        assertThat(validator.validateProperty(state, "entityId").size(), is(0));

        state.setEntityId(" MN"); // leading space
        assertThat(validator.validateProperty(state, "entityId").size(), is(0));

        state.setEntityId("MN "); // trailing space
        assertThat(validator.validateProperty(state, "entityId").size(), is(0));

        state.setEntityId(" MN "); // leading & trailing space
        assertThat(validator.validateProperty(state, "entityId").size(), is(0));

        state.setEntityId("AA"); // Lowercase
        assertThat(validator.validateProperty(state, "entityId").size(), is(0));

        state.setEntityId("MN");
        assertThat(validator.validateProperty(state, "entityId").size(), is(0));

        state.setEntityId(" MN ");
        assertThat(validator.validateProperty(state, "entityId").size(), is(0));

        state.setEntityId("MN ");
        assertThat(validator.validateProperty(state, "entityId").size(), is(0));

        state.setEntityId(" IL");
        assertThat(validator.validateProperty(state, "entityId").size(), is(0));
    }

    // State Name Tests
    @Test
    public void testInvalidSizeStateNames() {
        state.setEntityName("Minnesotalumbiammnbmnbmnbmnbmnbmnbmnbmnbmnbmnbmmnmnmn"); // >50
        Set<ConstraintViolation<StateEntity>> constraintViolations = validator.validateProperty(state, "entityName", ImportFileValidationGroup.class);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("State Name size must be between 1 and 50"));
    }

    @Test
    public void testInvalidStateNames() {
        state.setEntityName("Minnesota1");
        assertInvalidStateName();

        state.setEntityName("North%20Carolina");
        assertInvalidStateName();

        state.setEntityName("North¶Carolina");
        assertInvalidStateName();

        state.setEntityName("North(Carolina");
        assertInvalidStateName();
    }

    @Test
    public void testValidSizeStateName() {
        state.setEntityName("Californiaffsdddfdfdqwdssdffssdfgsggwrtyqwertyqwer"); // =50
        assertThat(validator.validateProperty(state, "entityName").size(), is(0));

        state.setEntityName("Californiaffsdddfdfgsggwrtyqwertyqwer"); // <50
        assertThat(validator.validateProperty(state, "entityName").size(), is(0));
    }

    @Test
    public void testBlankOrNullStateNames() {
        state.setEntityName(null);
        assertBlankOrNullStateName();

        state.setEntityName("");
        assertBlankOrNullStateName();

        state.setEntityName("   ");
        assertBlankOrNullStateName();
    }

    @Test
    public void testValidStateNames() {
        state.setEntityName("Louisiana");
        assertValid("entityName");

        state.setEntityName("minnesota"); // lowercase
        assertValid("entityName");

        state.setEntityName("MINNESOTA"); // UPPERCASE
        assertValid("entityName");

        state.setEntityName("mInNeSoTA"); // mIxEdCasE
        assertValid("entityName");

        state.setEntityName(" North Carolina"); // leading space
        assertValid("entityName");

        state.setEntityName("Alaska   "); // trailing space
        assertValid("entityName");

        state.setEntityName(" West Virginia "); // leading & trailing space
        assertValid("entityName");

        state.setEntityName("North Carolina");
        assertValid("entityName");

        state.setEntityName("British Columbia");
        assertValid("entityName");
    }

    // Parent Entity Type Tests
    @Test
    public void testValidParentEntityTypes() {
        state.setParentEntityType("CLIENT");
        assertValid("parentEntityType");

        state.setParentEntityType(" GROUPOFSTATES ");
        assertValid("parentEntityType");
    }

    @Test
    public void testInvalidParentEntityTypes() {
        state.setParentEntityType("STATE");
        assertInvalidParentEntityType();

        state.setParentEntityType("GROUPOFDISTRICTS");
        assertInvalidParentEntityType();

        state.setParentEntityType("DISTRICT");
        assertInvalidParentEntityType();
    }

    // Parent Entity Id Tests
    @Test
    public void testBlankOrNullParentEntityId() {
        state.setParentEntityId((String) null);
        assertBlankOrNullParentEntityId();

        state.setParentEntityId("");
        assertBlankOrNullParentEntityId();

        state.setParentEntityId("  ");
        assertBlankOrNullParentEntityId();

        state.setParentEntityId("");
        assertBlankOrNullParentEntityId();
    }

    @Test
    public void testInvalidParentEntityId() {
        state.setParentEntityId("YUYY-90");
        assertInvalidParentEntityId();

        state.setParentEntityId("-");
        assertInvalidParentEntityId();
    }

    @Test
    public void testInvalidSizeParentEntityId() {
        state.setParentEntityId("9087716623656088988377388973784534534534534453445634563456345634563456345"); // >40
        assertInvalidSizeParentEntityId();
    }

    @Test
    public void testValidParentEntityId() {
        state.setParentEntityId("908771662"); // <40
        assertThat(validator.validateProperty(state, "parentEntityId").size(), is(0));

        state.setParentEntityId("9087716628833442344"); // =20
        assertThat(validator.validateProperty(state, "parentEntityId").size(), is(0));

        state.setParentEntityId("YUYY9087716236560GT");
        assertThat(validator.validateProperty(state, "parentEntityId").size(), is(0));
    }

    @Test
    public void testStateEntityForMultipleViolations() {
        state.setEntityId("");
        state.setEntityName("Wisconsin");
        state.setParentEntityType("DISTRICT");
        state.setParentEntityId("I&^&^^^POPPP_++_+");
        state.setDelete((String) null);

        Set<ConstraintViolation<StateEntity>> constraintViolations = validator.validate(state, ImportFileValidationGroup.class);

        assertThat(constraintViolations.size(), is(3));
        Map<String, ConstraintViolation<StateEntity>> constraintViolationMap = new HashMap<String, ConstraintViolation<StateEntity>>();
        Iterator<ConstraintViolation<StateEntity>> iterator = constraintViolations.iterator();
        while (iterator.hasNext()) {
            ConstraintViolation<StateEntity> violation = iterator.next();
            constraintViolationMap.put(violation.getPropertyPath().toString(), violation);
        }

        assertThat(constraintViolationMap.get("entityId"), notNullValue());
        assertThat(constraintViolationMap.get("entityName"), nullValue());
        assertThat(constraintViolationMap.get("parentEntityType"), notNullValue());
        assertThat(constraintViolationMap.get("parentEntityId"), notNullValue());
    }

    @Test
    public void testStateEntityWithUIValidationGroup() {
        state.setEntityId("WI");
        state.setEntityName("Wisconsin");
        state.setParentEntityType("CLIENT");
        state.setParentEntityId("345345");
        state.setDelete((String) null);
        Set<ConstraintViolation<StateEntity>> constraintViolations = validator.validate(state, UIValidationGroup.class);
        assertThat(constraintViolations.size(), is(0));
    }

    @Test
    public void testToStringArray() {
        state.setEntityId("WI");
        state.setEntityName("Wisconsin");
        state.setParentEntityType("CLIENT");
        state.setParentEntityId("345345");
        String[] columns = state.toStringArray();
        assertNotNull(columns);
        assertThat(columns.length, is(4));
    }

    private void assertBlankOrNullStateName() {
        Set<ConstraintViolation<StateEntity>> constraintViolations = validator.validateProperty(state, "entityName", ImportFileValidationGroup.class);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("State Name is required"));
    }

    private void assertInvalidStateName() {
        Set<ConstraintViolation<StateEntity>> constraintViolations = validator.validateProperty(state, "entityName", ImportFileValidationGroup.class);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("State Name should contain text"));
    }
}
