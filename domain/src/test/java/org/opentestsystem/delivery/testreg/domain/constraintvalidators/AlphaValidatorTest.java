/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.domain.constraintvalidators;

import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;

import java.lang.reflect.Field;

import javax.validation.ConstraintValidatorContext;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.constraints.Alpha;
import org.springframework.util.ReflectionUtils;

public class AlphaValidatorTest {
    
    AlphaValidator alphaValidator;
    ConstraintValidatorContext contextStub;

    private class ValidAlphaNoSpace {
        @Alpha
        private String name;
    }
    
    private class ValidAlphaSpace {
        @Alpha(isSpaceAllowed=true)
        private String name;
    }
    
    private Alpha getAnnotation(Class<?> clazz) {
        Field field = ReflectionUtils.findField(clazz, "name");
        return field.getAnnotation(Alpha.class);
    }  
    
    @Before
    public void setup() {
        alphaValidator = new AlphaValidator() ;
        contextStub = null;
    }
    
    @Test
    public void testValidAlphaNoSpace() {
        alphaValidator.initialize(getAnnotation(ValidAlphaNoSpace.class));
        
        assertThat(alphaValidator.isValid("Adam", contextStub), is(true));
        assertThat(alphaValidator.isValid("Jerry ", contextStub), is(true));
        assertThat(alphaValidator.isValid(" Gene", contextStub), is(true));
        assertThat(alphaValidator.isValid(" Amanda ", contextStub), is(true));
        assertThat(alphaValidator.isValid("NiCoLe", contextStub), is(true));
        assertThat(alphaValidator.isValid("TIFFANY", contextStub), is(true));
        assertThat(alphaValidator.isValid("barry", contextStub), is(true));
    }
    
    @Test
    public void testInValidAlphaNoSpace() {
        alphaValidator.initialize(getAnnotation(ValidAlphaNoSpace.class));
        
        assertThat(alphaValidator.isValid("Test Case", contextStub), is(false));
        assertThat(alphaValidator.isValid("2 hours", contextStub), is(false));
        assertThat(alphaValidator.isValid(" talked to ", contextStub), is(false));
    }
    
    @Test
    public void testValidAlphaSpace() {
        alphaValidator.initialize(getAnnotation(ValidAlphaSpace.class));
        
        assertThat(alphaValidator.isValid("Test Case", contextStub), is(true));
        assertThat(alphaValidator.isValid(" talked to ", contextStub), is(true));
        assertThat(alphaValidator.isValid("Wisconsin", contextStub), is(true));
        assertThat(alphaValidator.isValid("North Carolina", contextStub), is(true));
        assertThat(alphaValidator.isValid("New Jersey", contextStub), is(true));
        assertThat(alphaValidator.isValid(" First Data    ", contextStub), is(true));
        assertThat(alphaValidator.isValid(" Adam", contextStub), is(true));
        assertThat(alphaValidator.isValid("Air America ", contextStub), is(true));
    }
    
    @Test
    public void testInValidAlphaSpace() {
        alphaValidator.initialize(getAnnotation(ValidAlphaSpace.class));
        
        assertThat(alphaValidator.isValid("North Carolina1", contextStub), is(false));
        assertThat(alphaValidator.isValid("B2B", contextStub), is(false));
        assertThat(alphaValidator.isValid("2 Passes", contextStub), is(false));
    }
    
    @Test
    public void testNonAscii() {
        alphaValidator.initialize(getAnnotation(ValidAlphaNoSpace.class));
        assertThat(alphaValidator.isValid("North%20Carolina", contextStub), is(false));
        assertThat(alphaValidator.isValid("Minnesotaœ¥", contextStub), is(false));
        
        alphaValidator.initialize(getAnnotation(ValidAlphaSpace.class));
        assertThat(alphaValidator.isValid("North%20Carolina", contextStub), is(false));
        assertThat(alphaValidator.isValid("Minnesotaœ¥", contextStub), is(false));
        
    }
}
