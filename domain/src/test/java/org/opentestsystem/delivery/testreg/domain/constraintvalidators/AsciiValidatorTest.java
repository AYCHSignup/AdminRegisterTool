/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.domain.constraintvalidators;

import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;

import java.io.UnsupportedEncodingException;
import java.lang.reflect.Field;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.constraints.Ascii;
import org.springframework.util.ReflectionUtils;

public class AsciiValidatorTest {

    AsciiValidator asciiValidator;

    private class ValidAscii {
        @Ascii
        private String asciiText;
    }

    private class ValidExtendedAscii {
        @Ascii(isExtended = true)
        private String asciiText;
    }

    @Before
    public void setup() {
        this.asciiValidator = new AsciiValidator();
    }

    @Test
    public void testAscii() {
        this.asciiValidator.initialize(getAnnotation(ValidAscii.class));

        assertThat(this.asciiValidator.isValid("123", null), is(true));
        assertThat(this.asciiValidator.isValid("adenoz", null), is(true));
        assertThat(this.asciiValidator.isValid("a2deno2z90", null), is(true));
        assertThat(this.asciiValidator.isValid("adenoz~", null), is(true)); // ascii code - 126
    }

    @Test
    public void testNonAscii() {
        this.asciiValidator.initialize(getAnnotation(ValidAscii.class));

        assertThat(this.asciiValidator.isValid("adenoz~Ç", null), is(false)); // ascii code 127
        assertThat(this.asciiValidator.isValid("a~æ", null), is(false)); // ascii code 145
        assertThat(this.asciiValidator.isValid("¢©123}~þýüûúùø÷öõôóòñðïîíìëêéèçæåäãâáàßÞÝÜÛÚÙØ×ÖÕÔÓÑÐÏÎÍÌËÊÉÈÇ", null), is(false)); // extended ascii 255-199
    }

    @Test
    public void testExtendedAscii() {
        this.asciiValidator.initialize(getAnnotation(ValidExtendedAscii.class));

        assertThat(this.asciiValidator.isValid("¢©123}~þýüûúùø÷öõôóòñðïîíìëêéèçæåäãâáàßÞÝÜÛÚÙØ×ÖÕÔÓÑÐÏÎÍÌËÊÉÈÇ", null), is(true)); // extended ascii 255-199
        assertThat(this.asciiValidator.isValid("ÆÅÄÃÂÁÀ0À¿¾½¼»º¹¸·¶µ´³²±°¯®­¬«ª", null), is(true)); // 198-170
        assertThat(this.asciiValidator.isValid("¨§¦¥¤£¢¡ ", null), is(true)); // 169-160(159)
                                                                               // can't do from windows for 160-127
        assertThat(this.asciiValidator.isValid("~}|{zyx", null), is(true)); // 127-120 - some sample
        assertThat(this.asciiValidator.isValid("@?>=<;:9876/.,+!$", null), is(true)); // some regular ascii
    }

    @Test
    public void testExtendedAsciiAgain() throws UnsupportedEncodingException {
        this.asciiValidator.initialize(getAnnotation(ValidExtendedAscii.class));

        // 000 - 127 (regular)
        assertThat(this.asciiValidator.isValid("ABCDEFGHIJKLMNOPQRSTUVWXYZ[abcdefghijklmnopqrstuvwxyz{|}~]^_`!#$%&()*+,-./0123456789:;<=>?@", null), is(true));
        // assertThat(this.asciiValidator.isValid("\\\"", null), is(true));
        assertThat(this.asciiValidator.isValid("¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ", null), is(true));
        final char[] SLASH_QUOTE_CHARS = { '\\', '\'' }; // apparently '\u005C' (backslash) & '\u0027' (single-quote) are problems
        assertThat(this.asciiValidator.isValid(String.valueOf(SLASH_QUOTE_CHARS), null), is(true));
        // 160 - 255 (latter section of extended)
        // 128 - 160 (problem characters)
        final String troubleCharactersWantToHave = "ŽŠšžŸ’";
        // final String troubleCharactersComplete = "€‚ƒ„…†‡ˆ‰Š‹ŒŽ‘’“”•–—˜™š›œžŸ";
        assertThat(this.asciiValidator.isValid(troubleCharactersWantToHave, null), is(true));
    }

    private Ascii getAnnotation(final Class<?> clazz) {
        final Field field = ReflectionUtils.findField(clazz, "asciiText");
        return field.getAnnotation(Ascii.class);
    }
}
