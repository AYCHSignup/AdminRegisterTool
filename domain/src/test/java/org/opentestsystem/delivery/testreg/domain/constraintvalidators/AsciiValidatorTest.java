/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.domain.constraintvalidators;

import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;

import java.lang.reflect.Field;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.constraints.Ascii;
import org.springframework.util.ReflectionUtils;

public class AsciiValidatorTest {
    
    AsciiValidator asciiValidator;
    
    private class ValidAscii {
        @Ascii
        private String asciiText;
    }
    
    private class ValidExtendedAscii {
        @Ascii(isExtended=true)
        private String asciiText;
    }
    
    @Before
    public void setup() {
        asciiValidator = new AsciiValidator();
    }

    @Test
    public void testAscii() {
        asciiValidator.initialize(getAnnotation(ValidAscii.class));
        
        assertThat(asciiValidator.isValid("123", null), is(true));
        assertThat(asciiValidator.isValid("adenoz", null), is(true));
        assertThat(asciiValidator.isValid("a2deno2z90", null), is(true));
        assertThat(asciiValidator.isValid("adenoz~", null), is(true)); //ascii code - 126
    }
    
    @Test
    public void testNonAscii() {
        asciiValidator.initialize(getAnnotation(ValidAscii.class));
        
        assertThat(asciiValidator.isValid("adenoz~Ç", null), is(false)); //ascii code 127
        assertThat(asciiValidator.isValid("a~æ", null), is(false)); //ascii code 145
        assertThat(asciiValidator.isValid("¢©123}~þýüûúùø÷öõôóòñðïîíìëêéèçæåäãâáàßÞÝÜÛÚÙØ×ÖÕÔÓÑÐÏÎÍÌËÊÉÈÇ", null), is(false)); //extended ascii 255-199
    }
    
    @Test
    public void testExtendedAscii() {
        asciiValidator.initialize(getAnnotation(ValidExtendedAscii.class));
        
        assertThat(asciiValidator.isValid("¢©123}~þýüûúùø÷öõôóòñðïîíìëêéèçæåäãâáàßÞÝÜÛÚÙØ×ÖÕÔÓÑÐÏÎÍÌËÊÉÈÇ", null), is(true)); //extended ascii 255-199
        assertThat(asciiValidator.isValid("ÆÅÄÃÂÁÀ0À¿¾½¼»º¹¸·¶µ´³²±°¯®­¬«ª", null), is(true)); //198-170
        assertThat(asciiValidator.isValid("¨§¦¥¤£¢¡ ", null), is(true)); //169-160(159)
                                                                                 //can't do from windows for 160-127
        assertThat(asciiValidator.isValid("~}|{zyx", null), is(true)); //127-120 - some sample
        assertThat(asciiValidator.isValid("@?>=<;:9876/.,+!$", null), is(true)); //some regular ascii
    }
    
    private Ascii getAnnotation(Class<?> clazz) {
        Field field = ReflectionUtils.findField(clazz, "asciiText");
        return field.getAnnotation(Ascii.class);
    }  
}
