/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.domain.constraintvalidators;

import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;

import java.lang.reflect.Field;

import javax.validation.ConstraintValidatorContext;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.constraints.Alphanumeric;
import org.springframework.util.ReflectionUtils;

public class AlphanumericValidatorTest {
    
    AlphanumericValidator alphaNumericValidator;
    ConstraintValidatorContext contextStub;
    
    @Before
    public void setup() {
        alphaNumericValidator = new AlphanumericValidator() ;
        contextStub = null;
    }
    
    @Test
    public void validAlphanumeric() {
        alphaNumericValidator.initialize(getAlphanumericAnnotation(ValidAlphanumeric.class));
        
        assertThat(alphaNumericValidator.isValid("", contextStub), is(true));
        assertThat(alphaNumericValidator.isValid("1332", contextStub), is(true));
        assertThat(alphaNumericValidator.isValid("123ASD", contextStub), is(true));
        assertThat(alphaNumericValidator.isValid("ayuyu122", contextStub), is(true));
        assertThat(alphaNumericValidator.isValid("aopo", contextStub), is(true));
        assertThat(alphaNumericValidator.isValid("sw89BNBas", contextStub), is(true));
    }
    
    @Test
    public void invalidAphanumeric() {
        alphaNumericValidator.initialize(getAlphanumericAnnotation(ValidAlphanumeric.class));
        
        assertThat(alphaNumericValidator.isValid(" 123 ASD ", contextStub), is(false));
        assertThat(alphaNumericValidator.isValid("ayuy u122", contextStub), is(false));
        assertThat(alphaNumericValidator.isValid("a op o", contextStub), is(false));
        assertThat(alphaNumericValidator.isValid("sw8 9B NBas", contextStub), is(false));
        assertThat(alphaNumericValidator.isValid("12-YU", contextStub), is(false));
        assertThat(alphaNumericValidator.isValid("-12YU", contextStub), is(false));
        assertThat(alphaNumericValidator.isValid("12YU-", contextStub), is(false));
        assertThat(alphaNumericValidator.isValid("4185.00", contextStub), is(false));
        assertThat(alphaNumericValidator.isValid("$$", contextStub), is(false)); //symbols
    }
    
    @Test
    public void validAlphanumericWithSpaces() {
        alphaNumericValidator.initialize(getAlphanumericAnnotation(ValidAlphanumericWithSpaces.class));
        
        assertThat(alphaNumericValidator.isValid(" ", contextStub), is(true)); //Blanks are not handled by this constraint. So always passes
        assertThat(alphaNumericValidator.isValid("13 32", contextStub), is(true));
        assertThat(alphaNumericValidator.isValid(" 123ASD ", contextStub), is(true)); //Leading & Trailing values are trimmed. So nothing new here
        assertThat(alphaNumericValidator.isValid(" ay uyu122 ", contextStub), is(true));
        assertThat(alphaNumericValidator.isValid(" ao p o ", contextStub), is(true));
        assertThat(alphaNumericValidator.isValid(" sw 89B NB as ", contextStub), is(true));
    }

    @Test
    public void validAlphanumericWithDashes() {
        alphaNumericValidator.initialize(getAlphanumericAnnotation(ValidAlphanumericWithDashes.class));
        
        assertThat(alphaNumericValidator.isValid("- ", contextStub), is(true)); //Trailing Space is trimmed.
        assertThat(alphaNumericValidator.isValid("-", contextStub), is(true)); 
        assertThat(alphaNumericValidator.isValid("13-32", contextStub), is(true));
        assertThat(alphaNumericValidator.isValid("-123ASD", contextStub), is(true)); 
        assertThat(alphaNumericValidator.isValid("ayuyu122-", contextStub), is(true));
    }
    @Test
    public void validAlphanumericWithDecimals() {
        alphaNumericValidator.initialize(getAlphanumericAnnotation(ValidAlphanumericWithDecimals.class));
        

        assertThat(alphaNumericValidator.isValid(".1332", contextStub), is(true));
        assertThat(alphaNumericValidator.isValid("1222aaa.", contextStub), is(true)); 
        assertThat(alphaNumericValidator.isValid("abdd.123.09", contextStub), is(true));
    }    
    @Test
    public void validAlphanumericWithDashesButNoSpaces() {
        alphaNumericValidator.initialize(getAlphanumericAnnotation(ValidAlphanumericWithSpaces.class));

        assertThat(alphaNumericValidator.isValid("-", contextStub), is(false)); 
        assertThat(alphaNumericValidator.isValid("13-3 2", contextStub), is(false));
        assertThat(alphaNumericValidator.isValid("-123 ASD", contextStub), is(false));
        assertThat(alphaNumericValidator.isValid("ayuyu122 -", contextStub), is(false));
    }
    
    @Test
    public void validAlphanumericWithSpacesNoDashes() {
        alphaNumericValidator.initialize(getAlphanumericAnnotation(ValidAlphanumericWithDashes.class));

        assertThat(alphaNumericValidator.isValid("13 -32", contextStub), is(false));
        assertThat(alphaNumericValidator.isValid(" ay -uyu122 ", contextStub), is(false));
        assertThat(alphaNumericValidator.isValid(" ao p- o ", contextStub), is(false));
        assertThat(alphaNumericValidator.isValid(" sw 89B -NB as ", contextStub), is(false));
    }
    
    @Test
    public void validAlphanumericWithSpacesAndDashesAndDecimals() { //Shoud handle all the above
        alphaNumericValidator.initialize(getAlphanumericAnnotation(ValidAlphanumericWithSpacesDashesDecimals.class));
        
        assertThat(alphaNumericValidator.isValid("", contextStub), is(true));
        assertThat(alphaNumericValidator.isValid("1332", contextStub), is(true));
        assertThat(alphaNumericValidator.isValid("123ASD", contextStub), is(true));
        assertThat(alphaNumericValidator.isValid("ayuyu122", contextStub), is(true));
        assertThat(alphaNumericValidator.isValid("aopo", contextStub), is(true));
        assertThat(alphaNumericValidator.isValid("sw89BNBas", contextStub), is(true));
        
        assertThat(alphaNumericValidator.isValid(" ", contextStub), is(true)); 
        assertThat(alphaNumericValidator.isValid("13 32", contextStub), is(true));
        assertThat(alphaNumericValidator.isValid(" 123ASD ", contextStub), is(true)); 
        assertThat(alphaNumericValidator.isValid(" ay uyu122 ", contextStub), is(true));
        assertThat(alphaNumericValidator.isValid(" ao p o ", contextStub), is(true));
        assertThat(alphaNumericValidator.isValid(" sw 89B NB as ", contextStub), is(true));
        
        assertThat(alphaNumericValidator.isValid("- ", contextStub), is(true)); 
        assertThat(alphaNumericValidator.isValid("-", contextStub), is(true)); 
        assertThat(alphaNumericValidator.isValid("13-32", contextStub), is(true));
        assertThat(alphaNumericValidator.isValid("-123ASD", contextStub), is(true)); 
        assertThat(alphaNumericValidator.isValid("ayuyu122-", contextStub), is(true));
        
        assertThat(alphaNumericValidator.isValid("-", contextStub), is(true)); 
        assertThat(alphaNumericValidator.isValid("13-3 2", contextStub), is(true));
        assertThat(alphaNumericValidator.isValid("-123 ASD", contextStub), is(true));
        assertThat(alphaNumericValidator.isValid("ayuyu122 -", contextStub), is(true));
        assertThat(alphaNumericValidator.isValid("ayuyu122 - .123.10", contextStub), is(true));
        
        assertThat(alphaNumericValidator.isValid("13 -32", contextStub), is(true));
        assertThat(alphaNumericValidator.isValid(" ay -uyu122 ", contextStub), is(true));
        assertThat(alphaNumericValidator.isValid(" ao p- o ", contextStub), is(true));
        assertThat(alphaNumericValidator.isValid(" sw 89B -NB as ", contextStub), is(true));
        assertThat(alphaNumericValidator.isValid(" sw 89B -NB as . 10", contextStub), is(true));
        
        assertThat(alphaNumericValidator.isValid("13$32", contextStub), is(false));
    }
    
    private Alphanumeric getAlphanumericAnnotation(Class<?> clazz) {
        Field field = ReflectionUtils.findField(clazz, "name");
        return field.getAnnotation(Alphanumeric.class);
    }
    
    private class ValidAlphanumeric {
        @Alphanumeric
        private String name;
    }
    
    private class ValidAlphanumericWithDashes {
        @Alphanumeric(dashesAllowed=true)
        private String name;
    }
    
    private class ValidAlphanumericWithSpaces {
        @Alphanumeric(spacesAllowed=true)
        private String name;
    }
 
    private class ValidAlphanumericWithDecimals {
        @Alphanumeric(decimalAllowed=true)
        private String name;
    }
    private class ValidAlphanumericWithSpacesDashesDecimals {
        @Alphanumeric(spacesAllowed=true, dashesAllowed=true,decimalAllowed=true)
        private String name;
    }
}
