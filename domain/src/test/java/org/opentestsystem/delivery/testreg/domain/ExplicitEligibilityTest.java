/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.domain;

import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;

import java.util.Set;

import javax.validation.ConstraintViolation;
import javax.validation.Validator;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "classpath:spring/domain-context.xml", "classpath:test-domain-context.xml" })
public class ExplicitEligibilityTest {

    @Autowired
    protected Validator validator;

    private ExplicitEligibility explicitEligibility;

    @Before
    public void setup() {
        explicitEligibility = new ExplicitEligibility();
    }

    @After
    public void tearDown() {
        explicitEligibility = null;
    }

    @Test
    public void testBlankOrNullInstitutionIdentifier() {

        String messege = "Student ID is required";
        explicitEligibility.setStudentId(null);
        assertBlankOrNullCheck("studentId", messege);

        explicitEligibility.setStudentId("");
        assertBlankOrNullCheck("studentId", messege);

        explicitEligibility.setStudentId("   ");
        assertBlankOrNullCheck("studentId", messege);
    }

    @Test
    public void testSizeForInstitutionIdentifier() {
        explicitEligibility.setStudentId("126627626726GGHGH77277367882378WEEYUYYTRRR77389956456456456456456");
        Set<ConstraintViolation<ExplicitEligibility>> constraintViolations = validator.validateProperty(
                explicitEligibility, "studentId");
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("Student ID must be between 1 and 40"));

        explicitEligibility.setStudentId("12662762");
        constraintViolations = validator.validateProperty(explicitEligibility, "studentId");
        assertThat(constraintViolations.size(), is(0));
    }

    @Test
    public void testInvalidInstitutionIdentifier() {
        explicitEligibility.setStudentId("aaaa-233~");
        Set<ConstraintViolation<ExplicitEligibility>> constraintViolations = validator.validateProperty(
                explicitEligibility, "studentId");
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("Student ID should be alphanumeric"));
    }

    @Test
    public void testBlankOrNullAdministrationName() {

        String messege = "Assessment Administration Assessment Family is required ";
        explicitEligibility.setAdministrationName(null);
        assertBlankOrNullCheck("administrationName", messege);

        explicitEligibility.setAdministrationName("");
        assertBlankOrNullCheck("administrationName", messege);

        explicitEligibility.setAdministrationName("   ");
        assertBlankOrNullCheck("administrationName", messege);
    }

    @Test
    public void testSizeForAdministrationName() {
        explicitEligibility
        .setAdministrationName("126627626726GGHGH77277367882378WEEYUYYTRRR773899126627626726GGHGH77277367882378WEEYUYYTRRR773899");
        Set<ConstraintViolation<ExplicitEligibility>> constraintViolations = validator.validateProperty(
                explicitEligibility, "administrationName");
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(),
                is("Assessment Administration Assessment Family must be between 1 and 60"));

        explicitEligibility.setAdministrationName("12662762");
        constraintViolations = validator.validateProperty(explicitEligibility, "administrationName");
        assertThat(constraintViolations.size(), is(0));
    }

    @Test
    public void testInvalidAdministrationName() {
        explicitEligibility.setAdministrationName("aaaa-233~");
        Set<ConstraintViolation<ExplicitEligibility>> constraintViolations = validator.validateProperty(
                explicitEligibility, "administrationName");
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(),
                is("Assessment Administration Assessment Family should be alphanumeric"));
    }

    @Test
    public void testSizeForResponsibleDistrictId() {
        explicitEligibility.setResponsibleDistrictId("126627626726GGHGH77277367882378WEEYUYYTRRR7738993453453453453453453");
        Set<ConstraintViolation<ExplicitEligibility>> constraintViolations = validator.validateProperty(
                explicitEligibility, "responsibleDistrictId");
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(),
                is("Responsible District Identifier must be between 1 and 40"));

        explicitEligibility.setResponsibleDistrictId("12662762");
        constraintViolations = validator.validateProperty(explicitEligibility, "responsibleDistrictId");
        assertThat(constraintViolations.size(), is(0));
    }

    @Test
    public void testInvalidResponsibleDistrictId() {
        explicitEligibility.setResponsibleDistrictId("aaaa-233~");
        Set<ConstraintViolation<ExplicitEligibility>> constraintViolations = validator.validateProperty(
                explicitEligibility, "responsibleDistrictId");
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(),
                is("Responsible District Identifier should be alphanumeric"));
    }

    @Test
    public void testBlankOrNullSubject() {

        String messege = "Subject is required";
        explicitEligibility.setSubject(null);
        assertBlankOrNullCheck("subject", messege);

        explicitEligibility.setSubject("");
        assertBlankOrNullCheck("subject", messege);

        explicitEligibility.setSubject("   ");
        assertBlankOrNullCheck("subject", messege);
    }

    @Test
    public void testSizeForSubject() {
        explicitEligibility.setSubject("126627626726GGHGH77277367882378WEEYUYYTRRR773899");
        Set<ConstraintViolation<ExplicitEligibility>> constraintViolations = validator.validateProperty(
                explicitEligibility, "subject");
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("Subject must be between 1 and 20"));

        explicitEligibility.setSubject("12662762");
        constraintViolations = validator.validateProperty(explicitEligibility, "subject");
        assertThat(constraintViolations.size(), is(0));
    }

    @Test
    public void testInvalidSubject() {
        explicitEligibility.setSubject("aaaa-233~");
        Set<ConstraintViolation<ExplicitEligibility>> constraintViolations = validator.validateProperty(
                explicitEligibility, "subject");
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("Subject should be alphanumeric"));
    }

    @Test
    public void testValidTestNameSize() {
        explicitEligibility
        .setTestName("This-is-aVery-Long-testnamethathas-exactly200-charactersinorderToTestThemax-size-ofa-testname-blahh-This-is-aVery-Long-testnamethathas-exactly200-charactersinorderToTestThemax-size-ofa-testname-blahh-");
        Set<ConstraintViolation<ExplicitEligibility>> constraintViolations = validator.validateProperty(
                explicitEligibility, "testName");
        assertThat(constraintViolations.size(), is(0));
    }

    @Test
    public void testInvalidTestNameSize() {
        explicitEligibility
        .setTestName("This-is-aVery-Long-testnamethathas-exactly200-charactersinorderToTestThemax-size-ofa-testname-blahh-This-is-aVery-Long-testnamethathas-exactly200-charactersinorderToTestThemax-size-ofa-testname-blahh-X");
        Set<ConstraintViolation<ExplicitEligibility>> constraintViolations = validator.validateProperty(
                explicitEligibility, "testName");
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(),
                is("Test Name length must be between 1 and 200"));
    }

    @Test
    public void testInvalidAlphaNumericTestName() {
        explicitEligibility.setTestName("$Test.~&^");
        Set<ConstraintViolation<ExplicitEligibility>> constraintViolations = validator.validateProperty(
                explicitEligibility, "testName");
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(),
                is("Test Name should be alphanumeric and can include dashes and spaces"));
    }

    @Test
    public void testInvalidAlphaNumericTestNameWithSpaces() {
        explicitEligibility.setTestName("Invalid Name");
        Set<ConstraintViolation<ExplicitEligibility>> constraintViolations = validator.validateProperty(
                explicitEligibility, "testName");
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(),
                is("Test Name should be alphanumeric and can include dashes and spaces"));
    }

    @Test
    public void testValidAlphaNumericTestNameWithDash() {
        explicitEligibility.setTestName("Valid-Name");
        Set<ConstraintViolation<ExplicitEligibility>> constraintViolations = validator.validateProperty(
                explicitEligibility, "testName");
        assertThat(constraintViolations.size(), is(0));
    }

    @Test
    public void testBlankOrNullTestName() {

        String messege = "Test Name is required";
        explicitEligibility.setTestName(null);
        assertBlankOrNullCheck("testName", messege);

        explicitEligibility.setTestName("");
        assertBlankOrNullCheck("testName", messege);

        explicitEligibility.setTestName("   ");
        assertBlankOrNullCheck("testName", messege);
    }

    @Test
    public void testInvalidTestVersionSize() {
        explicitEligibility.setTestVersion("version1234234323242342343223324320.023423423.0000b");
        Set<ConstraintViolation<ExplicitEligibility>> constraintViolations = validator.validateProperty(
                explicitEligibility, "testVersion");
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(),
                is("Test Version length must be between 1 and 50"));
    }

    @Test
    public void testValidTestVersionSize() {
        explicitEligibility.setTestVersion("version1234234323242342343223324320.023423423.000b");
        Set<ConstraintViolation<ExplicitEligibility>> constraintViolations = validator.validateProperty(
                explicitEligibility, "testVersion");
        assertThat(constraintViolations.size(), is(0));
    }

    @Test
    public void testInvalidTestVersionWithDashes() {
        explicitEligibility.setTestVersion("v1-00");
        Set<ConstraintViolation<ExplicitEligibility>> constraintViolations = validator.validateProperty(
                explicitEligibility, "testVersion");
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(),
                is("Test Version should be alphanumeric and can include periods"));
    }

    @Test
    public void testInvalidTestVersionWithSpaces() {
        explicitEligibility.setTestVersion("v 100");
        Set<ConstraintViolation<ExplicitEligibility>> constraintViolations = validator.validateProperty(
                explicitEligibility, "testVersion");
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(),
                is("Test Version should be alphanumeric and can include periods"));
    }

    @Test
    public void testValidTestVersionWithPeriod() {
        explicitEligibility.setTestVersion("v1.0.0");
        Set<ConstraintViolation<ExplicitEligibility>> constraintViolations = validator.validateProperty(
                explicitEligibility, "testVersion");
        assertThat(constraintViolations.size(), is(0));
    }

    @Test
    public void testBlankOrNullTestVersion() {

        String messege = "Test Version is required";
        explicitEligibility.setTestVersion(null);
        assertBlankOrNullCheck("testVersion", messege);

        explicitEligibility.setTestVersion("");
        assertBlankOrNullCheck("testVersion", messege);

        explicitEligibility.setTestVersion("   ");
        assertBlankOrNullCheck("testVersion", messege);
    }

    @Test
    public void testSizeForTestForm() {
        explicitEligibility.setTestForm("126627626726GGHGH77277367882378WEEYUYYTRRR773899ASSSSASSSSSS");
        Set<ConstraintViolation<ExplicitEligibility>> constraintViolations = validator.validateProperty(
                explicitEligibility, "testForm");
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("Test Form must be between 1 and 50"));

        explicitEligibility.setTestForm("12662762");
        constraintViolations = validator.validateProperty(explicitEligibility, "testForm");
        assertThat(constraintViolations.size(), is(0));
    }

    @Test
    public void testInvalidTestForm() {
        explicitEligibility.setTestForm("aaaa-233~");
        Set<ConstraintViolation<ExplicitEligibility>> constraintViolations = validator.validateProperty(
                explicitEligibility, "testForm");
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(),
                is("Test Form should be alphanumeric and can include dashes and spaces"));
    }

    @Test
    public void testInvalidStateAbbreviation() {
        explicitEligibility.setStateAbbreviation("BC");
        assertInvalidStateAbbreviation("stateAbbreviation");

        explicitEligibility.setStateAbbreviation("nmn");
        assertInvalidStateAbbreviation("stateAbbreviation");

        explicitEligibility.setStateAbbreviation("--");
        assertInvalidStateAbbreviation("stateAbbreviation");

        explicitEligibility.setStateAbbreviation("$$"); // special characters
        assertInvalidStateAbbreviation("stateAbbreviation");

        explicitEligibility.setStateAbbreviation("æ♪"); // non-ascii
        assertInvalidStateAbbreviation("stateAbbreviation");
    }

    @Test
    public void testDeleteBlank() {
        Set<ConstraintViolation<ExplicitEligibility>> constraintViolations = validator.validateProperty(
                explicitEligibility, "delete");
        assertThat(constraintViolations.size(), is(0));
    }

    @Test
    public void testDeleteTooLong() {
        explicitEligibility.setDelete("longvalue");
        Set<ConstraintViolation<ExplicitEligibility>> constraintViolations = validator.validateProperty(
                explicitEligibility, "delete");
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("Delete size must be between 1 and 6"));
    }

    @Test
    public void testDeleteAlpha() {
        explicitEligibility.setDelete("1ok");
        Set<ConstraintViolation<ExplicitEligibility>> constraintViolations = validator.validateProperty(
                explicitEligibility, "delete");
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("Delete can only contain letters"));
    }

    @Test
    public void testDeleteValid() {
        explicitEligibility.setDelete("DELETE");
        Set<ConstraintViolation<ExplicitEligibility>> constraintViolations = validator.validateProperty(
                explicitEligibility, "delete");
        assertThat(constraintViolations.size(), is(0));
    }

    @Test
    public void testValidExplicitEligibility() {
        explicitEligibility.setStudentId("7162817624");
        explicitEligibility.setAdministrationName("FCAT");
        explicitEligibility.setStateAbbreviation("WI");
        explicitEligibility.setResponsibleDistrictId("21312125");
        explicitEligibility.setSubject("MATH");
        explicitEligibility.setTestName("MATH-TEST-1");
        explicitEligibility.setTestVersion("MATHTEST1.1.1.1");
        explicitEligibility.setTestName("MATH-TEST-1");
        explicitEligibility.setDelete("");

        Set<ConstraintViolation<ExplicitEligibility>> violations = validator.validate(explicitEligibility);
        assertThat(violations.size(), is(0));
    }

    private void assertBlankOrNullCheck(final String propName, final String message) {
        Set<ConstraintViolation<ExplicitEligibility>> constraintViolations = validator.validateProperty(
                explicitEligibility, propName);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is(message));
    }

    protected void assertInvalidStateAbbreviation(final String property) {
        Set<ConstraintViolation<ExplicitEligibility>> constraintViolations = validator.validateProperty(
                explicitEligibility, property, ImportFileValidationGroup.class);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("State Abbreviation is not valid"));
    }

}
