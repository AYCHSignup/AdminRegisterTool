/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.domain;

import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;

import java.util.Set;

import javax.validation.ConstraintViolation;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.integration.AbstractDomainTest;

public class DistrictEntityTest extends AbstractDomainTest {

    private DistrictEntity district;

    @Before
    public void setup() {
        district = new DistrictEntity();
        setSb11Entity(district);
    }

    @After
    public void tearDown() {
        setSb11Entity(null);
    }

    // LOCAL EDUCATION AGENCY IDENTIFIER
    @Test
    public void testSizeForLocalEducationAgencyIdentifier() {
        district.setEntityId("12662762672688000007727736788237877389984352345234523452345234523");
        Set<ConstraintViolation<DistrictEntity>> constraintViolations = validator.validateProperty(district,
                "entityId", ImportFileValidationGroup.class);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("Local Education Agency Identifier size must be between 1 and 40"));

    }

    @Test
    public void testBlankOrNullLocalEducationAgencyId() {
        district.setEntityId(null);
        assertBlankOrNullLocalEducationAgencyId(district);

        district.setEntityId("");
        assertBlankOrNullLocalEducationAgencyId(district);

        district.setEntityId("   ");
        assertBlankOrNullLocalEducationAgencyId(district);
    }

    @Test
    public void testValidParentEntityTypes() {
        district.setParentEntityType("CLIENT");
        assertThat(validator.validateProperty(district, "parentEntityType").size(), is(0));

        district.setParentEntityType("STATE");
        assertThat(validator.validateProperty(district, "parentEntityType").size(), is(0));

        district.setParentEntityType("GROUPOFSTATES ");
        assertThat(validator.validateProperty(district, "parentEntityType").size(), is(0));

        district.setParentEntityType(" GROUPOFDISTRICTS");
        assertThat(validator.validateProperty(district, "parentEntityType").size(), is(0));
    }

    @Test
    public void testInvalidParentEntityTypes() {
        district.setParentEntityType("INSTITUTION");
        assertInvalidParentEntityType();

        district.setParentEntityType("GROUPOFINSTITUTIONS");
        assertInvalidParentEntityType();

        district.setParentEntityType("DISTRICT");
        assertInvalidParentEntityType();
    }

    @Test
    public void testInvalidStateAbbreviation() {
        district.setStateAbbreviation("BC");
        assertInvalidStateAbbreviation("stateAbbreviation");

        district.setStateAbbreviation("nmn");
        assertInvalidStateAbbreviation("stateAbbreviation");

        district.setStateAbbreviation("--");
        assertInvalidStateAbbreviation("stateAbbreviation");

        district.setStateAbbreviation("$$"); // special characters
        assertInvalidStateAbbreviation("stateAbbreviation");

        district.setStateAbbreviation("æ♪"); // non-ascii
        assertInvalidStateAbbreviation("stateAbbreviation");
    }

    @Test
    public void testValidLocalEducationAgencyIdentifier() {
        district.setEntityId("123123");
        assertValid("entityId");

        district.setEntityId("AB1234"); // uppercase
        assertValid("entityId");

        district.setEntityId("0001");
        assertValid("entityId");

        district.setEntityId("00000001");
        assertValid("entityId");

        district.setEntityId("126627626726345577");
        assertValid("entityId");

        district.setEntityId("ac123453drEdfeed"); // mixedcase
        assertValid("entityId");

        district.setEntityId("abc"); // lowercase
        assertValid("entityId");
    }

    @Test
    public void testInvalidLocalEducationAgencyIdentifier() {
        // test for invalid id - should be alphanumeric
        district.setEntityId("12662-7GDKDKD");
        Set<ConstraintViolation<DistrictEntity>> constraintViolations = validator.validateProperty(district, "entityId", ImportFileValidationGroup.class);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("Local Education Agency Identifier should contain alphanumeric"));
    }

    // ORGANIZATION NAME
    @Test
    public void testSizeForOrganizationName() {
        district.setEntityName("126627626726GGHGHg77277367882378ywsjkbjwe773899elkjwe8832oklklsdlhf87239023907327kbaskjbaskjk");
        Set<ConstraintViolation<DistrictEntity>> constraintViolations = validator.validateProperty(district,
                "entityName", ImportFileValidationGroup.class);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("Organization Name size must be between 1 and 60"));

        district.setEntityName("126627626726GGHGHg7727");
        constraintViolations = validator.validateProperty(district, "entityName", ImportFileValidationGroup.class);
        assertThat(constraintViolations.size(), is(0));
    }

    // PARENT ENTITY ID TESTS
    @Test
    public void testBlankOrNullParentEntityId() {
        district.setParentEntityId((String) null);
        assertBlankOrNullParentEntityId();

        district.setParentEntityId("");
        assertBlankOrNullParentEntityId();

        district.setParentEntityId("  ");
        assertBlankOrNullParentEntityId();

        district.setParentEntityId("");
        assertBlankOrNullParentEntityId();
    }

    @Test
    public void testInvalidSizeParentEntityId() {
        district.setParentEntityId("90877166236560938847848737846783562456345634534534543453454345345346345634563456434352345"); // >40
        assertInvalidSizeParentEntityId();
    }

    @Test
    public void testValidParentEntityId() {
        district.setParentEntityId("908771662"); // <20
        assertThat(validator.validateProperty(district, "parentEntityId").size(), is(0));

        district.setParentEntityId("CA"); // <20
        assertThat(validator.validateProperty(district, "parentEntityId").size(), is(0));

        district.setParentEntityId("8771662234567123549"); // =20
        assertThat(validator.validateProperty(district, "parentEntityId").size(), is(0));
    }

    @Test
    public void testSizeForNationwideIdentifier() {
        district.setNationwideIdentifier("123456789012345678901234"); // >20
        assertThat(validator.validateProperty(district, "nationwideIdentifier").size(), is(1));

        district.setNationwideIdentifier("12345678901234567890"); // =20
        assertThat(validator.validateProperty(district, "nationwideIdentifier").size(), is(0));

        district.setNationwideIdentifier("1234567890123456"); // <20
        assertThat(validator.validateProperty(district, "nationwideIdentifier").size(), is(0));
    }

    @Test
    public void testValidDistricEntityWithStateType() {
        district.setEntityId("12345");
        district.setEntityName("Oakland school District");
        district.setParentEntityType("STATE");
        district.setParentEntityId("CA");
        district.setStateAbbreviation("CA");
        district.setNationwideIdentifier("1122");
        district.setDelete("");

        Set<ConstraintViolation<DistrictEntity>> violations = validator.validate(district);
        assertThat(violations.size(), is(0));
    }

    @Test
    public void testValidDistricEntityWithInvalidEntityId() {
        district.setEntityId("12345");
        district.setEntityName("Oakland school District");
        district.setParentEntityType("GROUPOFDISTRICTS");
        district.setParentEntityId("CA-090");
        district.setStateAbbreviation("CA");
        district.setNationwideIdentifier("2344");
        district.setDelete("");

        Set<ConstraintViolation<DistrictEntity>> violations = validator.validate(district);
        assertThat(violations.iterator().next().getMessage(), is("Parent External Id should contain alphanumeric"));
        assertThat(violations.size(), is(1));
    }

    @Test
    public void testValidDistricEntity() {
        district.setEntityId("12345");
        district.setEntityName("Oakland school District");
        district.setParentEntityType("GROUPOFDISTRICTS");
        district.setParentEntityId("10000");
        district.setStateAbbreviation("CA");
        district.setNationwideIdentifier("1111");
        district.setDelete("");

        Set<ConstraintViolation<DistrictEntity>> violations = validator.validate(district);
        assertThat(violations.size(), is(0));
    }

    @Test
    public void testToStringArray() {
        district.setEntityId("CA123");
        district.setEntityName("Oakland school District");
        district.setParentEntityType("STATE");
        district.setParentEntityId("00000");
        district.setStateAbbreviation("CA");
        district.setNationwideIdentifier("1234");
        String[] columns = district.toStringArray();
        assertThat(columns, notNullValue());
        assertThat(columns.length, is(6));
    }

    private void assertBlankOrNullLocalEducationAgencyId(Sb11Entity sb11Entity) {
        Set<ConstraintViolation<DistrictEntity>> constraintViolations = validator.validateProperty(district, "entityId");
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("Local Education Agency Identifier is required"));
    }

}
