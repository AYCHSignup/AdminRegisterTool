/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.domain;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.not;
import static org.hamcrest.Matchers.containsString;
import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;

import java.util.Set;

import javax.validation.ConstraintViolation;
import javax.validation.Validator;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "classpath:spring/domain-context.xml", "classpath:test-domain-context.xml", "classpath:test-language-codes-context.xml" })
public class StudentTest {

    @Autowired
    protected Validator validator;

    private Student student;

    @Before
    public void setup() {

        this.student = new Student();
    }

    @After
    public void tearDown() {
        this.student = null;
    }

    @Test
    public void testBlankOrNullStudentIdentifier() {
        final String message = "Student Identifier is required";
        this.student.setEntityId(null);
        assertBlankOrNullCheck(this.student, "entityId", message);
        this.student.setEntityId("");
        assertBlankOrNullCheck(this.student, "entityId", message);
        this.student.setEntityId("   ");
        assertBlankOrNullCheck(this.student, "entityId", message);
    }

    @Test
    public void testSizeForStudentIdentifier() {
        this.student.setEntityId("126627626726GGHGHg77277367882378ywsjkbjwe77389546456456443534534534534534564564564564569");
        Set<ConstraintViolation<Student>> constraintViolations = this.validator.validateProperty(this.student, "entityId");
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(),
                is("Student Identifier size must be between 1 and 40"));
        this.student.setEntityId("12662762");
        constraintViolations = this.validator.validateProperty(this.student, "entityId");
        assertThat(constraintViolations.size(), is(0));
    }

    @Test
    public void testInvalidStateAbbreviation() {
        this.student.setStateAbbreviation("BC");
        assertInvalidStateAbbreviation("stateAbbreviation");
        this.student.setStateAbbreviation("nmn");
        assertInvalidStateAbbreviation("stateAbbreviation");
        this.student.setStateAbbreviation("--");
        assertInvalidStateAbbreviation("stateAbbreviation");
        this.student.setStateAbbreviation("$$"); // special characters
        assertInvalidStateAbbreviation("stateAbbreviation");
        this.student.setStateAbbreviation("æ♪"); // non-ascii
        assertInvalidStateAbbreviation("stateAbbreviation");
    }

    @Test
    public void testInvalidLanguageCodes() {

        final String message = "Language Codes are invalid";
        this.student.setLanguageCode("BCA");
        assertInvalidPropertCheck(this.student, "languageCode", message);
        this.student.setLanguageCode("ABC");
        assertInvalidPropertCheck(this.student, "languageCode", message);

    }

    @Test
    public void testValidLanguageCodes() {

        this.student.setLanguageCode("tel");
        final Set<ConstraintViolation<Student>> constraintViolations = this.validator.validateProperty(this.student, "languageCode");
        assertThat(constraintViolations.size(), is(0));
    }

    @Test
    public void testBlankOrNullInstitutionIdentifier() {
        final String message = "Valid Resp. Institution Identifier is required";
        this.student.setInstitutionIdentifier(null);
        assertBlankOrNullCheck(this.student, "institutionIdentifier", message);
        this.student.setInstitutionIdentifier("");
        assertBlankOrNullCheck(this.student, "institutionIdentifier", message);
        this.student.setInstitutionIdentifier("   ");
        assertBlankOrNullCheck(this.student, "institutionIdentifier", message);
    }

    @Test
    public void testSizeForInstitutionIdentifier() {
        this.student.setInstitutionIdentifier("126627626726GGHGHg77277367882378ywsjkbjwe77343523452345234523452345899");
        Set<ConstraintViolation<Student>> constraintViolations = this.validator.validateProperty(this.student,
                "institutionIdentifier");
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(),
                is("Resp. Institution Identifier size must be between 1 and 40"));
        this.student.setInstitutionIdentifier("12662762");
        constraintViolations = this.validator.validateProperty(this.student, "institutionIdentifier");
        assertThat(constraintViolations.size(), is(0));
    }

    @Test
    public void testNullDistrictIdentifier() {
        this.student.setDistrictIdentifier(null);
        final Set<ConstraintViolation<Student>> constraintViolations = this.validator.validateProperty(this.student, "districtIdentifier");
        assertThat(constraintViolations.size(), is(0));
    }

    @Test
    public void testSizeForDistrictIdentifier() {
        this.student.setDistrictIdentifier("126627626726GGHGHg77277367882378ywsjkbjwe7738945635634563456345634563459");
        Set<ConstraintViolation<Student>> constraintViolations = this.validator.validateProperty(this.student,
                "districtIdentifier");
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(),
                is("Resp. District Identifier size must be between 1 and 40"));
        this.student.setDistrictIdentifier("12662762");
        constraintViolations = this.validator.validateProperty(this.student, "districtIdentifier");
        assertThat(constraintViolations.size(), is(0));
    }

    @Test
    public void testSizeForFirstName() {
        this.student.setFirstName("126627626726GGHGHg7727736¢₧Ñ▓882378ywsjkbjwe773899");
        Set<ConstraintViolation<Student>> constraintViolations = this.validator.validateProperty(this.student, "firstName");
        assertThat(constraintViolations.size(), is(2));
        this.student.setFirstName("AAA12662762");
        constraintViolations = this.validator.validateProperty(this.student, "firstName");
        assertThat(constraintViolations.size(), is(0));
    }

    @Test
    public void testSizeForLastName() {
        this.student.setLastName("126627626726GGHGHg7727736¢₧Ñ▓882378ywsjkbjwe773899");
        Set<ConstraintViolation<Student>> constraintViolations = this.validator.validateProperty(this.student, "lastName");
        assertThat(constraintViolations.size(), is(2));
        this.student.setLastName("AAA12662762");
        constraintViolations = this.validator.validateProperty(this.student, "lastName");
        assertThat(constraintViolations.size(), is(0));
    }

    @Test
    public void testForMiddleName() {
        this.student.setMiddleName("126627626726GGHGHg7727736¢₧Ñ▓882378ywsjkbjwe773899");
        Set<ConstraintViolation<Student>> constraintViolations = this.validator.validateProperty(this.student, "middleName");
        assertThat(constraintViolations.size(), is(2));
        this.student.setMiddleName("AAA12662762");
        constraintViolations = this.validator.validateProperty(this.student, "middleName");
        assertThat(constraintViolations.size(), is(0));
    }

    @Test
    public void testNonMandatoryCheckForBirthDate() {
        final String strDate = null;
        this.student.setBirthDate(strDate);
        assertNonMandatoryCheck(this.student, "birthDate");
        this.student.setDistrictIdentifier("");
        assertNonMandatoryCheck(this.student, "birthDate");
        this.student.setDistrictIdentifier("   ");
        assertNonMandatoryCheck(this.student, "birthDate");
    }

    @Test
    public void testForInvalidBirthDateFormat() {
        final String message = "The Birthdate is invalid: the valid format is YYYY-MM-DD, and the range should be between \"1900 <= YYYY <=9999\"";
        this.student.setBirthDate("2012/20/10");
        assertDateCheck(this.student, "birthDate", message);
        this.student.setBirthDate("1890-10-30");
        assertDateCheck(this.student, "birthDate", message);
        this.student.setBirthDate("2013-11-31");
        assertDateCheck(this.student, "birthDate", message);
        this.student.setBirthDate("2013-02-29");
        assertDateCheck(this.student, "birthDate", message);
    }

    @Test
    public void testForValidBirthDateFormat() {
        this.student.setBirthDate("2013-11-10");
        final Set<ConstraintViolation<Student>> constraintViolations = this.validator.validateProperty(this.student, "birthDate");
        assertThat(constraintViolations.size(), is(0));
    }

    @Test
    public void testBlankOrNullExternalSsid() {
        final String message = "External SSID is required";
        this.student.setExternalSsid(null);
        assertBlankOrNullCheck(this.student, "externalSsid", message);
        this.student.setDistrictIdentifier("");
        assertBlankOrNullCheck(this.student, "externalSsid", message);
        this.student.setDistrictIdentifier("   ");
        assertBlankOrNullCheck(this.student, "externalSsid", message);
    }

    @Test
    public void testExternalSsid() {
        this.student.setExternalSsid("bjwe7738996¢₧Ñ▓");
        assertInvalidPropertCheck(this.student, "externalSsid", "External SSID Code should be alphanumeric");
        this.student.setExternalSsid("126627626726GGHGHg77277367882378ywsjkbjwe773899aaaaaaaaaab");
        assertInvalidPropertCheck(this.student, "externalSsid", "External SSID Code size must be between 1 and 50");
        this.student.setExternalSsid("126627626726GGHGHg77277367882378yws¢₧Ñ▓jkbjwe773899aaaaaaaaaab");

        Set<ConstraintViolation<Student>> constraintViolations = this.validator.validateProperty(this.student, "externalSsid");
        assertThat(constraintViolations.size(), is(2));
        this.student.setExternalSsid("AAA12662762");
        constraintViolations = this.validator.validateProperty(this.student, "externalSsid");
        assertThat(constraintViolations.size(), is(0));
    }

    @Test
    public void testBlankOrNullGradeLevelWhenAssessed() {
        final String message = "Grade level when assessed is required";
        final String s = null;
        this.student.setGradeLevelWhenAssessed(s);
        assertBlankOrNullCheck(this.student, "gradeLevelWhenAssessed", message);
        this.student.setDistrictIdentifier("");
        assertBlankOrNullCheck(this.student, "gradeLevelWhenAssessed", message);
        this.student.setDistrictIdentifier("   ");
        assertBlankOrNullCheck(this.student, "gradeLevelWhenAssessed", message);
    }

    @Test
    public void testValidGradeLevels() {
        final String[] validGrdes = { "THIRDGRADE", "FOURTHGRADE", "FIFTHGRADE", "SIXTHGRADE", "SEVENTHGRADE", "EIGHTHGRADE",
                "NINTHGRADE", "TENTHGRADE", "ELEVENTHGRADE", "TWELFTHGRADE", "GRADE13", "POSTSECONDARY" };
        for (final String validGrde : validGrdes) {
            this.student.setGradeLevelWhenAssessed(validGrde);
            assertThat(this.validator.validateProperty(this.student, "gradeLevelWhenAssessed").size(), is(0));
        }
    }

    @Test
    public void testInValidGradeLevel_TwoCharacterGrade() {
        final String message = "Grade level when assessed should be in IT, PR, PK, TK, KG, 01, 02, 03, 04, 05, 06, 07, 08, 09, 10, 11, 12, 13, PS, UG";
        final String[] inValidGrades = { "AAA", "CS", "14", "33" };
        for (final String inValidGrade : inValidGrades) {
            this.student.setGradeLevelWhenAssessed(inValidGrade);
            assertInvalidPropertCheck(this.student, "gradeLevelWhenAssessed", message);
        }
    }

    @Test
    public void testInValidGradeLevel_gradeName() {
        final String message = "Grade level when assessed should be in IT, PR, PK, TK, KG, 01, 02, 03, 04, 05, 06, 07, 08, 09, 10, 11, 12, 13, PS, UG";
        final String[] inValidGradeNames = { "FOURTH_GRADE", "TWENTETH_GRADE", "1234", "33333" };
        for (final String inValidGradeName : inValidGradeNames) {
            try {
                this.student.setGradeLevelWhenAssessed(inValidGradeName);
                assertInvalidPropertCheck(this.student, "gradeLevelWhenAssessed", message);
            } catch (final IllegalArgumentException iiae) {
            }
        }
    }

    @Test
    public void testBlankOrNullGender() {
        final String message = "Grade level when assessed is required";
        final String s = null;
        this.student.setGender(s);
        assertBlankOrNullCheck(this.student, "gradeLevelWhenAssessed", message);
        this.student.setGender("");
        assertBlankOrNullCheck(this.student, "gradeLevelWhenAssessed", message);
        this.student.setGender("   ");
        assertBlankOrNullCheck(this.student, "gradeLevelWhenAssessed", message);
    }

    @Test
    public void testValidGender() {
        this.student.setGender("MALE");
        assertThat(this.validator.validateProperty(this.student, "gender").size(), is(0));
        this.student.setGender("FEMALE");
        assertThat(this.validator.validateProperty(this.student, "gender").size(), is(0));

    }

    @Test
    public void testValidGenderLowercase() {
        this.student.setGender("male");
        assertThat(this.validator.validateProperty(this.student, "gender").size(), is(0));
    }

    @Test
    public void testValidGenderMixedCase() {
        this.student.setGender("fEmaLe");
        assertThat(this.validator.validateProperty(this.student, "gender").size(), is(0));
    }

    @Test
    public void testInValidGender() {
        final String message = "Sex valid options are Male or Female";
        this.student.setGender("M");
        assertInvalidPropertCheck(this.student, "gender", message);
        this.student.setGender("F");
        assertInvalidPropertCheck(this.student, "gender", message);

    }

    @Test
    public void testValidHispanicOrLatino() {
        this.student.setHispanicOrLatino("YES");
        assertThat(this.validator.validateProperty(this.student, "hispanicOrLatino").size(), is(0));
        this.student.setHispanicOrLatino("NO");
        assertThat(this.validator.validateProperty(this.student, "hispanicOrLatino").size(), is(0));
    }

    @Test
    public void testInValidHispanicOrLatino() {
        final String message = "HispanicOrLatino Ethnicity valid options are Yes or No";
        this.student.setHispanicOrLatino("y");
        assertInvalidPropertCheck(this.student, "hispanicOrLatino", message);
        this.student.setHispanicOrLatino("n");
        assertInvalidPropertCheck(this.student, "hispanicOrLatino", message);

    }

    @Test
    public void testBlankOrNullHispanicOrLatino() {
        final String message = "HispanicOrLatino Ethnicity Field is required";
        this.student.setHispanicOrLatino("");
        assertBlankOrNullCheck(this.student, "hispanicOrLatino", message);

        this.student.setHispanicOrLatino(null);
        assertBlankOrNullCheck(this.student, "hispanicOrLatino", message);
    }

    @Test
    public void testValidAmericanIndianOrAlaskaNative() {
        this.student.setAmericanIndianOrAlaskaNative("YES");
        assertThat(this.validator.validateProperty(this.student, "americanIndianOrAlaskaNative").size(), is(0));
        this.student.setAmericanIndianOrAlaskaNative("NO");
        assertThat(this.validator.validateProperty(this.student, "americanIndianOrAlaskaNative").size(), is(0));
    }

    @Test
    public void testInValidAmericanIndianOrAlaskaNative() {
        final String message = "AmericanIndianOrAlaska Native valid options are Yes or No";
        this.student.setAmericanIndianOrAlaskaNative("y");
        assertInvalidPropertCheck(this.student, "americanIndianOrAlaskaNative", message);
        this.student.setAmericanIndianOrAlaskaNative("n");
        assertInvalidPropertCheck(this.student, "americanIndianOrAlaskaNative", message);

    }

    @Test
    public void testBlankOrNullAmericanIndianOrAlaskaNative() {
        final String message = "AmericanIndianOrAlaska Native Field is required";
        this.student.setAmericanIndianOrAlaskaNative("");
        assertBlankOrNullCheck(this.student, "americanIndianOrAlaskaNative", message);

        this.student.setAmericanIndianOrAlaskaNative(null);
        assertBlankOrNullCheck(this.student, "americanIndianOrAlaskaNative", message);
    }

    @Test
    public void testValidAsian() {
        this.student.setAsian("YES");
        assertThat(this.validator.validateProperty(this.student, "asian").size(), is(0));
        this.student.setAsian("NO");
        assertThat(this.validator.validateProperty(this.student, "asian").size(), is(0));
    }

    @Test
    public void testInValidAsian() {
        final String message = "Asian valid options are Yes or No";
        this.student.setAsian("b");
        assertInvalidPropertCheck(this.student, "asian", message);
        this.student.setAsian("n");
        assertInvalidPropertCheck(this.student, "asian", message);

    }

    @Test
    public void testBlankOrNullAsian() {
        final String message = "Asian Field is required";
        this.student.setAsian("");
        assertBlankOrNullCheck(this.student, "asian", message);

        this.student.setAsian(null);
        assertBlankOrNullCheck(this.student, "asian", message);
    }

    @Test
    public void testValidBlackOrAfricanAmerican() {
        this.student.setBlackOrAfricanAmerican("YES");
        assertThat(this.validator.validateProperty(this.student, "blackOrAfricanAmerican").size(), is(0));
        this.student.setBlackOrAfricanAmerican("NO");
        assertThat(this.validator.validateProperty(this.student, "blackOrAfricanAmerican").size(), is(0));
    }

    @Test
    public void testInValidBlackOrAfricanAmerican() {
        final String message = "BlackOrAfricanAmerican valid options are Yes or No";
        this.student.setBlackOrAfricanAmerican("a");
        assertInvalidPropertCheck(this.student, "blackOrAfricanAmerican", message);
        this.student.setBlackOrAfricanAmerican("n");
        assertInvalidPropertCheck(this.student, "blackOrAfricanAmerican", message);

    }

    @Test
    public void testBlankOrNullBlackOrAfricanAmerican() {
        final String message = "BlackOrAfricanAmerican Field is required";
        this.student.setBlackOrAfricanAmerican("");
        assertBlankOrNullCheck(this.student, "blackOrAfricanAmerican", message);

        this.student.setBlackOrAfricanAmerican(null);
        assertBlankOrNullCheck(this.student, "blackOrAfricanAmerican", message);
    }

    @Test
    public void testValidWhite() {
        this.student.setWhite("YES");
        assertThat(this.validator.validateProperty(this.student, "white").size(), is(0));
        this.student.setWhite("NO");
        assertThat(this.validator.validateProperty(this.student, "white").size(), is(0));
    }

    @Test
    public void testInValidWhite() {
        final String message = "White valid options are Yes or No";
        this.student.setWhite("a");
        assertInvalidPropertCheck(this.student, "white", message);
        this.student.setWhite("n");
        assertInvalidPropertCheck(this.student, "white", message);

    }

    @Test
    public void testBlankOrNullWhite() {
        final String message = "White Field is required";
        this.student.setWhite("");
        assertBlankOrNullCheck(this.student, "white", message);

        this.student.setWhite(null);
        assertBlankOrNullCheck(this.student, "white", message);
    }

    @Test
    public void testStudentEntryDate() {
        final String message = "First Entry Date Into US School should always be after the year of birth date";
        setStudentObject();

        this.student.setBirthDate("2013-10-10");
        this.student.setFirstEntryDateIntoUsSchool("2010-09-01");

        // Validate Student Object
        final Set<ConstraintViolation<Student>> constraintViolations = this.validator.validate(this.student);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is(message));

    }

    @Test
    public void testNullStudentEntryDate() {
        setStudentObject();

        this.student.setBirthDate("2013-10-10");
        this.student.setFirstEntryDateIntoUsSchool("");

        // Validate Student Object
        final Set<ConstraintViolation<Student>> constraintViolations = this.validator.validate(this.student);
        assertThat(constraintViolations.size(), is(0));

    }

    @Test
    public void testAtleastOneStudentOrigin() {
        final String message = "At least one type of Student Origin is required";
        setStudentObject();

        // Make all Student Origin related fields to blank
        this.student.setAmericanIndianOrAlaskaNative("NO");
        this.student.setAsian("NO");
        this.student.setHispanicOrLatino("no");
        this.student.setWhite("no");
        this.student.setBlackOrAfricanAmerican("NO");
        this.student.setTwoOrMoreRaces("nO");
        this.student.setNativeHawaiianOrPacificIsland("NO");

        // Validate Student Object
        Set<ConstraintViolation<Student>> constraintViolations = this.validator.validate(this.student);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is(message));

        // Make all Student Origin related fields to null
        this.student.setAmericanIndianOrAlaskaNative("no");
        this.student.setAsian("NO");
        this.student.setHispanicOrLatino("no");
        this.student.setWhite("no");
        this.student.setBlackOrAfricanAmerican("No");
        this.student.setTwoOrMoreRaces("NO");
        this.student.setNativeHawaiianOrPacificIsland("no");

        constraintViolations = this.validator.validate(this.student);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is(message));
    }

    @Test
    public void testValidNativeHawaiianOrPacificIsland() {
        this.student.setNativeHawaiianOrPacificIsland("YES");
        assertThat(this.validator.validateProperty(this.student, "nativeHawaiianOrPacificIsland").size(), is(0));
        this.student.setNativeHawaiianOrPacificIsland("NO");
        assertThat(this.validator.validateProperty(this.student, "nativeHawaiianOrPacificIsland").size(), is(0));
    }

    @Test
    public void testInValidNativeHawaiianOrPacificIsland() {
        final String message = "NativeHawaiianOrOther PacificIslander valid options are Yes or No";
        this.student.setNativeHawaiianOrPacificIsland("a");
        assertInvalidPropertCheck(this.student, "nativeHawaiianOrPacificIsland", message);
        this.student.setNativeHawaiianOrPacificIsland("n");
        assertInvalidPropertCheck(this.student, "nativeHawaiianOrPacificIsland", message);

    }

    @Test
    public void testBlankOrNullNativeHawaiianOrPacificIsland() {
        final String message = "NativeHawaiianOrOther PacificIslander Field is required";
        this.student.setNativeHawaiianOrPacificIsland("");
        assertBlankOrNullCheck(this.student, "nativeHawaiianOrPacificIsland", message);

        this.student.setNativeHawaiianOrPacificIsland(null);
        assertBlankOrNullCheck(this.student, "nativeHawaiianOrPacificIsland", message);
    }

    @Test
    public void testValidTwoOrMoreRaces() {
        this.student.setTwoOrMoreRaces("YES");
        assertThat(this.validator.validateProperty(this.student, "twoOrMoreRaces").size(), is(0));
        this.student.setTwoOrMoreRaces("NO");
        assertThat(this.validator.validateProperty(this.student, "twoOrMoreRaces").size(), is(0));
    }

    @Test
    public void testInValidNTwoOrMoreRaces() {
        final String message = "DemographicRace TwoOrMoreRaces valid options are Yes or No";
        this.student.setTwoOrMoreRaces("a");
        assertInvalidPropertCheck(this.student, "twoOrMoreRaces", message);
        this.student.setTwoOrMoreRaces("n");
        assertInvalidPropertCheck(this.student, "twoOrMoreRaces", message);

    }

    @Test
    public void testBlankOrNullTwoOrMoreRaces() {
        final String message = "DemographicRace TwoOrMoreRaces Field is required";
        this.student.setTwoOrMoreRaces("");
        assertBlankOrNullCheck(this.student, "twoOrMoreRaces", message);

        this.student.setTwoOrMoreRaces(null);
        assertBlankOrNullCheck(this.student, "twoOrMoreRaces", message);
    }

    @Test
    public void testBlankOrNullIDEAIndicator() {
        final String message = "IDEA Indicator is required";
        final String s = null;
        this.student.setiDEAIndicator(s);
        assertBlankOrNullCheck(this.student, "iDEAIndicator", message);
        this.student.setiDEAIndicator("");
        assertBlankOrNullCheck(this.student, "iDEAIndicator", message);
        this.student.setiDEAIndicator("   ");
        assertBlankOrNullCheck(this.student, "iDEAIndicator", message);
    }

    @Test
    public void testValidIDEAIndicator() {
        this.student.setiDEAIndicator("YES");
        assertThat(this.validator.validateProperty(this.student, "iDEAIndicator").size(), is(0));
        this.student.setiDEAIndicator("NO");
        assertThat(this.validator.validateProperty(this.student, "iDEAIndicator").size(), is(0));
    }

    @Test
    public void testInValidIDEAIndicator() {
        final String message = "IDEA Indicator valid options are Yes or No";
        this.student.setiDEAIndicator("a");
        assertInvalidPropertCheck(this.student, "iDEAIndicator", message);
        this.student.setiDEAIndicator("n");
        assertInvalidPropertCheck(this.student, "iDEAIndicator", message);
    }

    @Test
    public void testBlankOrNullLepStatus() {
        final String message = "LEPStatus is required";
        final String s = null;
        this.student.setLepStatus(s);
        assertBlankOrNullCheck(this.student, "lepStatus", message);
        this.student.setLepStatus("");
        assertBlankOrNullCheck(this.student, "lepStatus", message);
        this.student.setLepStatus("   ");
        assertBlankOrNullCheck(this.student, "lepStatus", message);
    }

    @Test
    public void testValidLepStatus() {
        this.student.setLepStatus("YES");
        assertThat(this.validator.validateProperty(this.student, "lepStatus").size(), is(0));
        this.student.setLepStatus("NO");
        assertThat(this.validator.validateProperty(this.student, "lepStatus").size(), is(0));
    }

    @Test
    public void testInValidLepStatus() {
        final String message = "LEPStatus valid options are Yes or No";
        this.student.setLepStatus("a");
        assertInvalidPropertCheck(this.student, "lepStatus", message);
        this.student.setLepStatus("n");
        assertInvalidPropertCheck(this.student, "lepStatus", message);
    }

    @Test
    public void testBlankOrNullSection504Status() {
        final String message = "Section504 Status is required";
        final String s = null;
        this.student.setSection504Status(s);
        assertBlankOrNullCheck(this.student, "section504Status", message);
        this.student.setSection504Status("");
        assertBlankOrNullCheck(this.student, "section504Status", message);
        this.student.setSection504Status("   ");
        assertBlankOrNullCheck(this.student, "section504Status", message);
    }

    @Test
    public void testValidSection504Status() {
        this.student.setSection504Status("YES");
        assertThat(this.validator.validateProperty(this.student, "section504Status").size(), is(0));
        this.student.setSection504Status("NO");
        assertThat(this.validator.validateProperty(this.student, "section504Status").size(), is(0));
    }

    @Test
    public void testInValidSection504Status() {
        final String message = "Section504 Status valid options are Yes, No, Unknown/Cannot Provide";
        this.student.setSection504Status("a");
        assertInvalidPropertCheck(this.student, "section504Status", message);
        this.student.setSection504Status("n");
        assertInvalidPropertCheck(this.student, "section504Status", message);
    }

    @Test
    public void testBlankOrNullDisadvantageStatus() {
        final String message = "Economic DisadvantageStatus is required";
        final String s = null;
        this.student.setDisadvantageStatus(s);
        assertBlankOrNullCheck(this.student, "disadvantageStatus", message);
        this.student.setDisadvantageStatus("");
        assertBlankOrNullCheck(this.student, "disadvantageStatus", message);
        this.student.setDisadvantageStatus("   ");
        assertBlankOrNullCheck(this.student, "disadvantageStatus", message);
    }

    @Test
    public void testValidDisadvantageStatuss() {
        this.student.setDisadvantageStatus("YES");
        assertThat(this.validator.validateProperty(this.student, "disadvantageStatus").size(), is(0));
        this.student.setDisadvantageStatus("NO");
        assertThat(this.validator.validateProperty(this.student, "disadvantageStatus").size(), is(0));
    }

    @Test
    public void testInValidDisadvantageStatus() {
        final String message = "Economic DisadvantageStatus valid options are Yes or No";
        this.student.setDisadvantageStatus("a");
        assertInvalidPropertCheck(this.student, "disadvantageStatus", message);
        this.student.setDisadvantageStatus("n");
        assertInvalidPropertCheck(this.student, "disadvantageStatus", message);
    }

    @Test
    public void testBlankOrNullMigrantStatus() {
        final String s = null;
        this.student.setMigrantStatus(s);
        assertNonMandatoryCheck(this.student, "migrantStatus");
        this.student.setMigrantStatus("");
        assertNonMandatoryCheck(this.student, "migrantStatus");
        this.student.setMigrantStatus("   ");
        assertNonMandatoryCheck(this.student, "migrantStatus");
    }

    @Test
    public void testValidMigrantStatus() {
        this.student.setMigrantStatus("YES");
        assertThat(this.validator.validateProperty(this.student, "migrantStatus").size(), is(0));
        this.student.setMigrantStatus("NO");
        assertThat(this.validator.validateProperty(this.student, "migrantStatus").size(), is(0));
    }

    @Test
    public void testInValidMigrantStatus() {
        final String message = "MigrantStatus valid options are Yes or No";
        this.student.setMigrantStatus("a");
        assertInvalidPropertCheck(this.student, "migrantStatus", message);
        this.student.setMigrantStatus("n");
        assertInvalidPropertCheck(this.student, "migrantStatus", message);
    }

    @Test
    public void testBlankOrNullTitle3ProgressStatus() {
        final String s = null;
        this.student.setTitle3ProgressStatus(s);
        assertNonMandatoryCheck(this.student, "title3ProgressStatus");
        this.student.setTitle3ProgressStatus("");
        assertNonMandatoryCheck(this.student, "title3ProgressStatus");
        this.student.setTitle3ProgressStatus("   ");
        assertNonMandatoryCheck(this.student, "title3ProgressStatus");
    }

    @Test
    public void testValidTitle3ProgressStatus() {
        this.student.setTitle3ProgressStatus("PROGRESS");
        assertThat(this.validator.validateProperty(this.student, "title3ProgressStatus").size(), is(0));
        this.student.setTitle3ProgressStatus("NOPROGRESS");
        assertThat(this.validator.validateProperty(this.student, "title3ProgressStatus").size(), is(0));
        this.student.setTitle3ProgressStatus("PROFICIENT");
        assertThat(this.validator.validateProperty(this.student, "title3ProgressStatus").size(), is(0));
    }

    @Test
    public void testInValidTitle3ProgressStatus() {
        final String message = "TitleIIIAccountability ProgressStatus should be alphanumeric/special";
        this.student.setTitle3ProgressStatus("superhЩΏ");
        assertInvalidPropertCheck(this.student, "title3ProgressStatus", message);

    }

    @Test
    public void testForInvalidFirstEntryDateIntoUsSchool() {
        final String message = "Invalid date or invalid date format for First Entry Date Into US School. Valid format is YYYY-MM-DD";
        this.student.setFirstEntryDateIntoUsSchool("2012/20/10");
        assertDateCheck(this.student, "firstEntryDateIntoUsSchool", message);
        this.student.setFirstEntryDateIntoUsSchool("2012-20-10");
        assertDateCheck(this.student, "firstEntryDateIntoUsSchool", message);
        this.student.setFirstEntryDateIntoUsSchool("2013-11-31");
        assertDateCheck(this.student, "firstEntryDateIntoUsSchool", message);
        this.student.setFirstEntryDateIntoUsSchool("2013-02-29");
        assertDateCheck(this.student, "firstEntryDateIntoUsSchool", message);
    }

    @Test
    public void testForValidFirstEntryDateIntoUsSchool() {
        this.student.setBirthDate("2013-11-10");
        final Set<ConstraintViolation<Student>> constraintViolations = this.validator.validateProperty(this.student,
                "firstEntryDateIntoUsSchool");
        assertThat(constraintViolations.size(), is(0));
    }

    @Test
    public void testForInvalidLepEntryDate() {
        final String message = "Invalid date or invalid date format for Limited English Proficiency Entry Date. Valid format is YYYY-MM-DD";
        this.student.setLepEntryDate("2012/20/10");
        assertDateCheck(this.student, "lepEntryDate", message);
        this.student.setLepEntryDate("2012-20-10");
        assertDateCheck(this.student, "lepEntryDate", message);
        this.student.setLepEntryDate("2013-11-31");
        assertDateCheck(this.student, "lepEntryDate", message);
        this.student.setLepEntryDate("2013-02-29");
        assertDateCheck(this.student, "lepEntryDate", message);
    }

    @Test
    public void testForValidLepEntryDate() {
        this.student.setLepEntryDate("2013-11-10");
        final Set<ConstraintViolation<Student>> constraintViolations = this.validator.validateProperty(this.student, "lepEntryDate");
        assertThat(constraintViolations.size(), is(0));
    }

    @Test
    public void testForInvalidLepExitDate() {
        final String message = "Invalid date or invalid date format for LEP Exit Date. Valid format is YYYY-MM-DD";
        this.student.setLepExitDate("2012/20/10");
        assertDateCheck(this.student, "lepExitDate", message);
        this.student.setLepExitDate("2012-20-10");
        assertDateCheck(this.student, "lepExitDate", message);
        this.student.setLepExitDate("2013-11-31");
        assertDateCheck(this.student, "lepExitDate", message);
        this.student.setLepExitDate("2013-02-29");
        assertDateCheck(this.student, "lepExitDate", message);
    }

    @Test
    public void testForValidLepExitDate() {
        this.student.setLepExitDate("2013-11-10");
        final Set<ConstraintViolation<Student>> constraintViolations = this.validator.validateProperty(this.student, "lepExitDate");
        assertThat(constraintViolations.size(), is(0));
    }

    @Test
    public void testValidTitle3ProgramType() {
        final String[] title3ProgramType = { "DualLanguage", "TwoWayImmersion", "TransitionalBilingual",
                "DevelopmentalBilingual", "HeritageLanguage", "ShelteredEnglishInstruction",
                "StructuredEnglishImmersion", "SDAIE", "ContentBasedESL", "PullOutESL", "Other" };
        for (final String element : title3ProgramType) {
            this.student.setTitle3ProgramType(element);
            assertThat(this.validator.validateProperty(this.student, "title3ProgramType").size(), is(0));
        }
    }

    @Test
    public void testInValidTitle3ProgramType() {
        final String message = "TitleIIILanguage Instruction ProgramType in invalid Types";
        final String[] title3ProgramType = { "01", "AA", "CS", "1234", "33333" };
        for (final String element : title3ProgramType) {
            this.student.setTitle3ProgramType(element);
            assertInvalidPropertCheck(this.student, "title3ProgramType", message);
        }
    }

    @Test
    public void testForValidPrimaryDisabilityType() {
        final String[] title3ProgramType = { "AUT", "DB", "DD", "EMN", "HI", "ID", "MD", "OI", "OHI", "SLD", "SLI", "TBI",
                "VI" };
        for (final String element : title3ProgramType) {
            this.student.setPrimaryDisabilityType(element);
            assertThat(this.validator.validateProperty(this.student, "primaryDisabilityType").size(), is(0));
        }
    }

    @Test
    public void testForInValidPrimaryDisabilityType() {
        final String message = "PrimaryDisabilityType is invalid Types";
        final String[] title3ProgramType = { "AB", "TEST" };
        for (final String element : title3ProgramType) {
            this.student.setPrimaryDisabilityType(element);
            assertInvalidPropertCheck(this.student, "primaryDisabilityType", message);
        }
    }

    private void assertInvalidPropertCheck(final Student student, final String property, final String message) {
        final Set<ConstraintViolation<Student>> constraintViolations = this.validator.validateProperty(student, property);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is(message));
    }

    private void assertBlankOrNullCheck(final Student student, final String property, final String message) {
        final Set<ConstraintViolation<Student>> constraintViolations = this.validator.validateProperty(student, property);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is(message));
    }

    private void assertNonMandatoryCheck(final Student student, final String property) {

        final Set<ConstraintViolation<Student>> constraintViolations = this.validator.validateProperty(student, property);
        assertThat(constraintViolations.size(), is(0));

    }

    @Test
    public void testValidStudent() {

        setStudentObject();

        final Set<ConstraintViolation<Student>> violations = this.validator.validate(this.student);
        assertThat(violations.size(), is(0));
    }

    private void setStudentObject() {
        this.student.setEntityId("123456");
        this.student.setStateAbbreviation("WI");
        this.student.setDistrictIdentifier("101");
        this.student.setInstitutionIdentifier("10001");
        this.student.setLastName("LastNameTest");
        this.student.setFirstName("FNTest");
        this.student.setMiddleName("MS");
        this.student.setLanguageCode("tel");
        this.student.setBirthDate("2013-10-10");
        this.student.setExternalSsid("WI12345");
        this.student.setGradeLevelWhenAssessed("THIRDGRADE");
        this.student.setGender("MALE");
        this.student.setHispanicOrLatino("Yes");
        this.student.setAmericanIndianOrAlaskaNative("NO");
        this.student.setAsian("NO");
        this.student.setBlackOrAfricanAmerican("NO");
        this.student.setWhite("Yes");
        this.student.setNativeHawaiianOrPacificIsland("NO");
        this.student.setTwoOrMoreRaces("NO");
        this.student.setiDEAIndicator("NO");
        this.student.setLepStatus("NO");
        this.student.setSection504Status("NO");
        this.student.setDisadvantageStatus("YES");
        this.student.setLanguageCode("tel");
        this.student.setTitle3ProgressStatus("PROGRESS");
        this.student.setMigrantStatus("YES");
        this.student.setFirstEntryDateIntoUsSchool("2015-09-01");
        this.student.setLepEntryDate("2010-10-10");
        this.student.setLepExitDate("2010-10-20");
        this.student.setTitle3ProgramType("DualLanguage");
        this.student.setPrimaryDisabilityType("AUT");
        this.student.setDelete("N");
    }

    // State Abbreviation Validations
    protected void assertInvalidStateAbbreviation(final String property) {
        final Set<ConstraintViolation<Student>> constraintViolations = this.validator.validateProperty(this.student, property);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("State Abbreviation is not valid"));
    }

    // State Abbreviation Validations
    protected void assertDateCheck(final Student student, final String property, final String message) {
        final Set<ConstraintViolation<Student>> constraintViolations = this.validator.validateProperty(student, property);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), containsString(message));
    }

    @Test
    public void testValidStateAbbreviation() {
        this.student.setStateAbbreviation("WI");
        final Set<ConstraintViolation<Student>> constraintViolations = this.validator.validateProperty(this.student,
                "stateAbbreviation");
        assertThat(constraintViolations.size(), is(0));
    }

    @Test
    public void testSection504Status() {
        this.student.setStateAbbreviation("WI");
        this.student.setSection504Status("UNKNOWN/CANNOT PROVIDE");
        final Set<ConstraintViolation<Student>> constraintViolations = this.validator.validateProperty(this.student,
                "stateAbbreviation");
        assertThat(constraintViolations.size(), is(0));
        assertThat(this.student.getSection504Status(), equalTo("UNKNOWN/CANNOT PROVIDE"));

    }

    @Test
    public void testDeleteTooLong() {
        this.student.setDelete("TooLongOfAValue");
        final Set<ConstraintViolation<Student>> constraintViolations = this.validator.validateProperty(this.student, "delete");
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(),
                containsString("Delete size must be between 1 and 6"));
    }

    @Test
    public void testDeleteAlpha() {
        this.student.setDelete("remov5");
        final Set<ConstraintViolation<Student>> constraintViolations = this.validator.validateProperty(this.student, "delete");
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(),
                containsString("Delete can only contain letters"));
    }

    @Test
    public void testDeleteWrongAction() {
        this.student.setDelete("Yes");
        assertThat(this.student.getAction(), not(Action.DEL));
    }

    @Test
    public void testDeleteCorrectAction() {
        this.student.setDelete("DELETE");
        assertThat(this.student.getAction(), is(Action.DEL));
    }
}
