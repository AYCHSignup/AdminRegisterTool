/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.domain;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.not;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.junit.Assert.assertThat;
import static org.junit.Assert.assertTrue;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import javax.validation.ConstraintViolation;
import javax.validation.Validator;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.delivery.testreg.domain.User.RoleAssociation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "classpath:spring/domain-context.xml", "classpath:test-domain-context.xml" })
public class UserTest {

    @Autowired
    protected Validator validator;

    public RoleAssociation getValidRoleAssociation() {
        RoleAssociation roleAssociation = new RoleAssociation();
        roleAssociation.setRole("Admin");
        roleAssociation.setLevel(HierarchyLevel.STATE);
        roleAssociation.setAssociatedEntityId("YYY");
        return roleAssociation;
    }

    @Test
    public void testFirstNameBlank() {
        User user = new User();
        Set<ConstraintViolation<User>> constraintViolations = validator.validateProperty(user, "firstName");
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("User First Name is required"));
    }

    @Test
    public void testFirstNameTooLong() {

        User user = new User();
        user.setFirstName("Thisisaveryveryveryverylongfirstname");

        Set<ConstraintViolation<User>> constraintViolations = validator.validateProperty(user, "firstName");

        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(),
                is("User First Name size must be between 1 and 35"));

    }

    @Test
    public void testFirstNameNoErrors() {

        User user = new User();
        user.setFirstName("GreatFirstName");

        Set<ConstraintViolation<User>> constraintViolations = validator.validateProperty(user, "firstName");

        assertThat(constraintViolations.size(), is(0));

        user.setFirstName("Great$%94'name");
        constraintViolations = validator.validateProperty(user, "firstName");

        assertThat(constraintViolations.size(), is(0));

    }

    @Test
    public void testLastNameBlank() {

        User user = new User();

        Set<ConstraintViolation<User>> constraintViolations = validator.validateProperty(user, "lastName");

        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("User Last Name is required"));

    }

    @Test
    public void testLastNameUnicodeInvalid() {

        User user = new User();
        user.setLastName("Specialcharsẘ✹⚅☈");

        Set<ConstraintViolation<User>> constraintViolations = validator.validateProperty(user, "lastName");

        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(),
                is("User Last Name can only contain letters and numbers"));

    }

    @Test
    public void testLastNameExtendedAsciiOk() {

        User user = new User();
        user.setLastName("Specialchars%äé©");

        Set<ConstraintViolation<User>> constraintViolations = validator.validateProperty(user, "lastName");

        assertThat(constraintViolations.size(), is(0));

    }

    @Test
    public void testLastNameTooLong() {

        User user = new User();
        user.setLastName("Thislastnameisveryveryveryveryveryverylong");

        Set<ConstraintViolation<User>> constraintViolations = validator.validateProperty(user, "lastName");

        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(),
                is("User Last Name size must be between 1 and 35"));

    }

    @Test
    public void testLastNameSpecialCharsOk() {

        User user = new User();
        user.setLastName("Special-/?chars");

        Set<ConstraintViolation<User>> constraintViolations = validator.validateProperty(user, "lastName");

        assertThat(constraintViolations.size(), is(0));

    }

    @Test
    public void testLastNamePlainOk() {

        User user = new User();
        user.setLastName("Regularlastname");

        Set<ConstraintViolation<User>> constraintViolations = validator.validateProperty(user, "lastName");

        assertThat(constraintViolations.size(), is(0));

    }

    @Test
    public void testEmailBlank() {

        User user = new User();

        Set<ConstraintViolation<User>> constraintViolations = validator.validateProperty(user, "email");

        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("User Email Address is required"));

    }

    @Test
    public void testEmailTooLong2() {
        String longEmail = "@gmail.com";
        while (longEmail.length() < 128) {
            longEmail = "a" + longEmail;
            User user = new User();
            user.setEmail(longEmail);
            Set<ConstraintViolation<User>> constraintViolations = validator.validateProperty(user, "email");
            if (constraintViolations.size() > 0) {
                assertTrue("we should never get here, the email is only " + longEmail.length() + " characters long!", false);
            }
        }
    }

    @Test
    public void testEmailTooLong() {
        // email address that exceeds 128 chars
        String longEmail = "thisisthelongestemailaddressevercreatedblahblahblahblahblahtesting123testing456@thisisthelongestemailaddressevercreatedmoreblahblahblahyep.com";
        assertTrue("our test email isn't long enough", longEmail.length() > 128);
        User user = new User();
        user.setEmail(longEmail);
        Set<ConstraintViolation<User>> constraintViolations = validator.validateProperty(user, "email");
        assertThat("we aren't getting exactly 1 violation for this email:\n" + longEmail, constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("User Email Address size must be between 1 and 128"));
    }

    @Test
    public void testEmailInvalid() {
        List<String> invalidEmails = new ArrayList<>();
        invalidEmails.add("invalid.@email.com.org");
        invalidEmails.add("invalid");
        invalidEmails.add("a@a@com");
        invalidEmails.add("ben@.gmail.com");
        invalidEmails.add("ben(@gmail.com");
        invalidEmails.add("ben)@gmail.com");
        invalidEmails.add("ben[@gmail.com");
        invalidEmails.add("ben]@gmail.com");
        invalidEmails.add("ben,@gmail.com");
        invalidEmails.add("ben;@gmail.com");
        invalidEmails.add("ben\"[@gmail.com");
        invalidEmails.add("ben“@gmail.com");
        for (String invalidEmail : invalidEmails) {
            User user = new User();
            user.setEmail(invalidEmail);
            Set<ConstraintViolation<User>> constraintViolations = validator.validateProperty(user, "email");
            assertThat("we didn't get invalid email violation for " + invalidEmail, constraintViolations.size(), is(1));
            assertThat(constraintViolations.iterator().next().getMessage(), is("User Email Address must be a valid email address"));
        }
    }

    @Test
    public void testEmailValid() {

        User user = new User();
        user.setEmail("test@test.com");

        Set<ConstraintViolation<User>> constraintViolations = validator.validateProperty(user, "email");

        assertThat(constraintViolations.size(), is(0));

    }

    @Test
    public void testEmailValidTwo() {

        User user = new User();
        user.setEmail("a@a.co.uk");

        Set<ConstraintViolation<User>> constraintViolations = validator.validateProperty(user, "email");

        assertThat(constraintViolations.size(), is(0));

    }

    @Test
    public void testPhoneBlank() {

        User user = new User();

        Set<ConstraintViolation<User>> constraintViolations = validator.validateProperty(user, "phone");

        assertThat(constraintViolations.size(), is(0));

    }

    @Test
    public void testPhoneTooLong() {

        User user = new User();
        user.setPhone("555-555-5555 x12345678901");

        Set<ConstraintViolation<User>> constraintViolations = validator.validateProperty(user, "phone");

        assertThat(constraintViolations.size(), is(2));
        // the regex is setup so that you can only have 24 characters anyway. so a too long error will
        // always come along with an invalid format error

    }

    @Test
    public void testPhoneInvalid() {

        User user = new User();
        user.setPhone("555-555-55555 x123456");

        Set<ConstraintViolation<User>> constraintViolations = validator.validateProperty(user, "phone");

        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(),
                is("User Telephone Number must be in the format \"555-555-5555\" with optional \" x5555555555\""));

    }

    @Test
    public void testPhoneInvalidTwo() {

        User user = new User();
        user.setPhone("55555555555");

        Set<ConstraintViolation<User>> constraintViolations = validator.validateProperty(user, "phone");

        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(),
                is("User Telephone Number must be in the format \"555-555-5555\" with optional \" x5555555555\""));

    }

    @Test
    public void testPhoneValid() {

        User user = new User();
        user.setPhone("555-555-5555 x123456");

        Set<ConstraintViolation<User>> constraintViolations = validator.validateProperty(user, "phone");

        assertThat(constraintViolations.size(), is(0));

    }

    @Test
    public void testPhoneValidTwo() {

        User user = new User();
        user.setPhone("555-555-5555");

        Set<ConstraintViolation<User>> constraintViolations = validator.validateProperty(user, "phone");

        assertThat(constraintViolations.size(), is(0));

    }

    @Test
    public void testRoleBlank() {
        RoleAssociation userRole = new RoleAssociation();
        Set<ConstraintViolation<RoleAssociation>> constraintViolations = validator.validateProperty(userRole, "role");
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("User Role is required"));
    }

    @Test
    public void testRoleAlpha() {
        RoleAssociation roleAssociation = getValidRoleAssociation();
        roleAssociation.setRole("role1only2alpha");

        Set<ConstraintViolation<RoleAssociation>> constraintViolations = validator.validateProperty(roleAssociation, "role");
        //no longer validating length, source system (permissions) maintains rules
        assertThat(constraintViolations.size(), is(0));

    }

    @Test
    public void testRoleAlphaWithSpace() {
        // spaces are allowed in the role string

        RoleAssociation user = new RoleAssociation();
        user.setRole("role with space");

        Set<ConstraintViolation<RoleAssociation>> constraintViolations = validator.validateProperty(user, "role");

        assertThat(constraintViolations.size(), is(0));

    }

    @Test
    public void testRoleTooLong() {

        RoleAssociation user = new RoleAssociation();
        user.setRole("thisrolenameiswaaaaaaaaaytoolongserioulytoolong");

        Set<ConstraintViolation<RoleAssociation>> constraintViolations = validator.validateProperty(user, "role");

        //no longer validating length, source system (permissions) maintains rules
        assertThat(constraintViolations.size(), is(0));

    }

    @Test
    public void testRoleValid() {

        RoleAssociation user = new RoleAssociation();
        user.setRole("validrolename");

        Set<ConstraintViolation<RoleAssociation>> constraintViolations = validator.validateProperty(user, "role");

        assertThat(constraintViolations.size(), is(0));

    }

    @Test
    public void testAssociatedIdBlank() {

        RoleAssociation userRole = new RoleAssociation();

        Set<ConstraintViolation<RoleAssociation>> constraintViolations = validator.validateProperty(userRole,
                "associatedEntityId");

        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("User Associated Entity Id is required"));

    }

    @Test
    public void testAssociatedIdTooLong() {

        RoleAssociation user = new RoleAssociation();
        user.setAssociatedEntityId("1234567890123456789015464564564564564564564564564564564564545645");

        Set<ConstraintViolation<RoleAssociation>> constraintViolations = validator.validateProperty(user,
                "associatedEntityId");

        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(),
                is("User Associated Entity Id size must be between 1 and 40"));

    }

    @Test
    public void testAssociatedIdValid() {

        RoleAssociation user = new RoleAssociation();
        user.setAssociatedEntityId("12345678901234567890");
        user.setLevel("INSTITUTION");

        Set<ConstraintViolation<RoleAssociation>> constraintViolations = validator.validateProperty(user,
                "associatedEntityId");

        assertThat(constraintViolations.size(), is(0));

    }

    @Test
    public void testAssociatedIdValidState() {

        RoleAssociation user = new RoleAssociation();
        user.setAssociatedEntityId("WI");
        user.setLevel("STATE");

        Set<ConstraintViolation<RoleAssociation>> constraintViolations = validator.validateProperty(user,
                "associatedEntityId");

        assertThat(constraintViolations.size(), is(0));

    }

    // This is valid because we're just running a 2 char regex, not really validating state, that happens elsewhere
    @Test
    public void testAssociatedIdValidStateTwo() {

        RoleAssociation user = new RoleAssociation();
        user.setAssociatedEntityId("YY");
        user.setLevel("STATE");

        Set<ConstraintViolation<RoleAssociation>> constraintViolations = validator.validateProperty(user,
                "associatedEntityId");

        assertThat(constraintViolations.size(), is(0));

    }

    @Test
    public void testDuplicateRoleAssociation() {

        User user = buildConstantUserFields();

        RoleAssociation association1 = new RoleAssociation();
        association1.setRole("Admin");
        association1.setLevel(HierarchyLevel.STATE);
        association1.setAssociatedEntityId("YYY");
        association1.setStateAbbreviation("WI");
        user.addRoleAssociation(association1);

        Set<ConstraintViolation<RoleAssociation>> constraintViolations = validator.validateProperty(association1,
                "role");
        assertThat(constraintViolations.size(), is(0));

        // add a duplicate role association to the user...

        RoleAssociation association2 = new RoleAssociation();
        association2.setRole("Admin");
        association2.setLevel(HierarchyLevel.STATE);
        association2.setAssociatedEntityId("YYY");
        association2.setStateAbbreviation("WI");
        user.addRoleAssociation(association2);

        constraintViolations = validator.validateProperty(association2, "role");
        assertThat(constraintViolations.size(), is(0));

        // make sure the user only has 1 role association...

        assertThat(user.getRoleAssociations().size(), is(1));
    }

    @Test
    public void testAssociatedIdInvalidState() {

        User user = buildConstantUserFields();
        RoleAssociation association = new RoleAssociation();
        association.setRole("Admin");
        association.setLevel(HierarchyLevel.STATE);
        association.setAssociatedEntityId("YYY");
        association.setStateAbbreviation("WI");
        user.addRoleAssociation(association);
        Set<ConstraintViolation<RoleAssociation>> constraintViolations = validator.validate(association);

        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(),
                is("User Associated Entity Id is an invalid state"));

    }

    @Test
    public void testAssociatedIdInvalidOtherId() {

        User user = buildConstantUserFields();
        RoleAssociation association = new RoleAssociation();
        association.setAssociatedEntityId("YY-90");
        association.setLevel("CLIENT");
        association.setRole("Admin");
        user.addRoleAssociation(association);

        Set<ConstraintViolation<RoleAssociation>> constraintViolations = validator.validate(association);

        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(),
                is("User Associated Entity Id should contain alphanumeric"));

    }

    @Test
    public void testDeleteBlank() {

        User user = new User();

        Set<ConstraintViolation<User>> constraintViolations = validator.validateProperty(user, "delete");

        assertThat(constraintViolations.size(), is(0));

    }

    @Test
    public void testDeleteTooLong() {

        User user = new User();
        user.setDelete("longvalue");

        Set<ConstraintViolation<User>> constraintViolations = validator.validateProperty(user, "delete");

        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("Delete size must be between 1 and 6"));

    }

    @Test
    public void testDeleteAlpha() {

        User user = new User();
        user.setDelete("1ok");

        Set<ConstraintViolation<User>> constraintViolations = validator.validateProperty(user, "delete");

        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("Delete can only contain letters"));

    }

    @Test
    public void testDeleteValid() {

        User user = new User();
        user.setDelete("DELETE");

        Set<ConstraintViolation<User>> constraintViolations = validator.validateProperty(user, "delete");

        assertThat(constraintViolations.size(), is(0));

    }

    @Test
    public void testIncorrectAction() {
        User user = new User();
        user.setDelete("Yes");

        assertThat(user.getAction(), not(Action.DEL));
    }

    @Test
    public void testCorrectAction() {
        User user = new User();
        user.setDelete("DELETE");

        assertThat(user.getAction(), is(Action.DEL));
    }

    @Test
    public void testLevelBlank() {

        RoleAssociation association = new RoleAssociation();

        Set<ConstraintViolation<RoleAssociation>> constraintViolations = validator.validateProperty(association,
                "level");

        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("User Responsible Entity Type is required"));

    }

    @Test
    public void testLevelInvalid() {
        RoleAssociation association = new RoleAssociation();
        association.setLevel("BLAH"); // won't persist, since it's invalid...
        assertThat("should be null", association.getLevel(), is(nullValue()));
        Set<ConstraintViolation<RoleAssociation>> constraintViolations = validator.validateProperty(association, "level");
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("User Responsible Entity Type is required"));
    }

    // this is actually invalid and will fail once the proper validation is in place
    @Test
    public void testLevelValid() {

        RoleAssociation association = new RoleAssociation();
        association.setLevel("STATE");

        Set<ConstraintViolation<RoleAssociation>> constraintViolations = validator.validateProperty(association,
                "level");

        assertThat(constraintViolations.size(), is(0));

    }

    @Test
    public void testStateAbbrInvalidCode() {

        RoleAssociation association = new RoleAssociation();
        association.setStateAbbreviation("YY");

        Set<ConstraintViolation<RoleAssociation>> constraintViolations = validator.validateProperty(association,
                "stateAbbreviation");

        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(),
                is("User State Abbreviation should be a valid state code"));

    }

    @Test
    public void testStateAbbrInvalidCodeTwo() {

        RoleAssociation association = new RoleAssociation();
        association.setStateAbbreviation("WIS");

        Set<ConstraintViolation<RoleAssociation>> constraintViolations = validator.validateProperty(association,
                "stateAbbreviation");

        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(),
                is("User State Abbreviation should be a valid state code"));

    }

    @Test
    public void testStateAbbrValid() {

        RoleAssociation association = new RoleAssociation();
        association.setStateAbbreviation("RI");

        Set<ConstraintViolation<RoleAssociation>> constraintViolations = validator.validateProperty(association,
                "stateAbbreviation");

        assertThat(constraintViolations.size(), is(0));

    }

    @Test
    public void testBlankStateAbbreviationOnLevel() {

        User user = new User();
        RoleAssociation association = new RoleAssociation();

        user.setFirstName("fName");
        user.setLastName("lName");
        association.setRole("Admin");
        association.setAssociatedEntityId("1234");
        user.setEmail("test@yahoo.com");
        association.setLevel("INSTITUTION");
        stateValidation(association);
        association.setLevel("GROUPOFINSTITUTIONS");
        stateValidation(association);

        association.setLevel("DISTRICT");
        stateValidation(association);
        association.setLevel("GROUPOFDISTRICTS");
        stateValidation(association);

        user.addRoleAssociation(association);

    }

    private void stateValidation(final RoleAssociation userRole) {
        Set<ConstraintViolation<RoleAssociation>> constraintViolations = validator.validate(userRole);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("User State Abbreviation is required"));
    }

    @Test
    public void testValidBlankStateAbbreviationOnLevel() {

        User user = new User();
        RoleAssociation association = new RoleAssociation();
        user.setFirstName("fName");
        user.setLastName("lName");
        association.setRole("Admin");
        association.setAssociatedEntityId("1234");
        user.setEmail("test@yahoo.com");
        association.setLevel(HierarchyLevel.CLIENT);
        user.addRoleAssociation(association);
        Set<ConstraintViolation<RoleAssociation>> constraintViolations = validator.validate(association);
        assertThat(constraintViolations.size(), is(0));

        association.setLevel(HierarchyLevel.STATE);
        association.setAssociatedEntityId("WI");
        constraintViolations = validator.validate(association);
        assertThat(constraintViolations.size(), is(0));

        association.setLevel(HierarchyLevel.GROUPOFSTATES);
        association.setAssociatedEntityId("WI");
        constraintViolations = validator.validate(association);
        assertThat(constraintViolations.size(), is(0));

    }

    private User buildConstantUserFields() {
        User user = new User();
        user.setFirstName("Bob");
        user.setLastName("Smith");
        user.setEmail("bob@smith.com");
        // RoleAssociation association = new RoleAssociation();
        // association.setRole("Admin");
        // association.setLevel(HierarchyLevel.CLIENT);
        // association.setAssociatedEntityId("1234");
        // association.setStateAbbreviation("WI");
        // user.addRoleAssociation(association);

        return user;
    }

}
