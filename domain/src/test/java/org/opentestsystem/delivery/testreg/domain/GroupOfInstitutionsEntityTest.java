/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.domain;

import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsNull.notNullValue;
import static org.hamcrest.core.IsNull.nullValue;
import static org.junit.Assert.assertThat;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

import javax.validation.ConstraintViolation;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.integration.AbstractDomainTest;

public class GroupOfInstitutionsEntityTest extends AbstractDomainTest {

    private GroupOfInstitutionsEntity groupOfInstitutions;

    public GroupOfInstitutionsEntityTest() {
    }

    @Before
    public void setup() {
        groupOfInstitutions = new GroupOfInstitutionsEntity();
        setSb11Entity(groupOfInstitutions);
    }

    @After
    public void tearDown() {
        setSb11Entity(null);
    }

    // GroupOfInstitutes Identifier Tests
    @Test
    public void testInvalidGroupOfInstitutionsIdentifier() {

        groupOfInstitutions.setEntityId("$$"); // special characters
        assertInvalidGroupOfInstitutionsIdentifier("entityId");

        groupOfInstitutions.setEntityId("æ♪"); // non-ascii
        assertInvalidGroupOfInstitutionsIdentifier("entityId");

        groupOfInstitutions.setEntityId("AD-123");
        assertInvalidGroupOfInstitutionsIdentifier("entityId");
    }

    @Test
    public void testBlankOrNullGroupOfInstitutionsIdentifier() {
        groupOfInstitutions.setEntityId(null);
        assertBlankOrNullGroupOfInstitutionsIdentifier("entityId");

        groupOfInstitutions.setEntityId("");
        assertBlankOrNullGroupOfInstitutionsIdentifier("entityId");

        groupOfInstitutions.setEntityId("   ");
        assertBlankOrNullGroupOfInstitutionsIdentifier("entityId");
    }

    @Test
    public void testValidGroupOfInstitutionsIdentifier() {
        groupOfInstitutions.setEntityId("1234"); // Numeric
        assertThat(validator.validateProperty(groupOfInstitutions, "entityId").size(), is(0));

        groupOfInstitutions.setEntityId("00011"); // Numeric with leading zeros
        assertThat(validator.validateProperty(groupOfInstitutions, "entityId").size(), is(0));

        groupOfInstitutions.setEntityId("00056WI"); // Alphanumeric
        assertThat(validator.validateProperty(groupOfInstitutions, "entityId").size(), is(0));

        groupOfInstitutions.setEntityId("kl34sd123"); // Lowercase
        assertThat(validator.validateProperty(groupOfInstitutions, "entityId").size(), is(0));

        groupOfInstitutions.setEntityId("JUIl45sd123"); // Mixedcase
        assertThat(validator.validateProperty(groupOfInstitutions, "entityId").size(), is(0));
    }

    @Test
    public void testInvalidGroupOfInstitutionsIdentifierSize() {
        groupOfInstitutions.setEntityId("2341241243123412341234123412412343234534543533452345234523452344534534534534");
        Set<ConstraintViolation<GroupOfInstitutionsEntity>> constraintViolations = validator.validateProperty(groupOfInstitutions, "entityId", ImportFileValidationGroup.class);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("Group Of Institutions Identifier size must be between 1 and 40"));
    }

    // GroupOfInstitutions Name Tests
    @Test
    public void testInvalidSizeGroupOfInstitutionsNames() {
        groupOfInstitutions.setEntityName("Minnesotalumbiammnbmnbmnbmnbmnbmnbmnbmnbmnbmnbmmnmnmnaaaaaaaaavbbbbb"); // >50
        Set<ConstraintViolation<GroupOfInstitutionsEntity>> constraintViolations = validator.validateProperty(groupOfInstitutions, "entityName", ImportFileValidationGroup.class);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("Group Of Institutions Name size must be between 1 and 60"));
    }

    @Test
    public void testInvalidGroupOfInstitutionsNames() {

        groupOfInstitutions.setEntityName("NorthЩΏ¶&&CarolinaGROUP");
        assertInvalidGroupOfInstitutionsName();
    }

    @Test
    public void testValidSizeGroupOfInstitutionsName() {
        groupOfInstitutions.setEntityName("knowldgeGroupOfinstitutes11111111111111ASSAAAAAAAA"); // =50
        assertThat(validator.validateProperty(groupOfInstitutions, "entityName").size(), is(0));

        groupOfInstitutions.setEntityName("knowldgeGroupOfinstitutes1111111111111"); // <50
        assertThat(validator.validateProperty(groupOfInstitutions, "entityName").size(), is(0));
    }

    @Test
    public void testBlankOrNullGroupOfInstitutionsNames() {
        groupOfInstitutions.setEntityName(null);
        assertBlankOrNullGroupOfInstitutionsName();

        groupOfInstitutions.setEntityName("");
        assertBlankOrNullGroupOfInstitutionsName();

        groupOfInstitutions.setEntityName("   ");
        assertBlankOrNullGroupOfInstitutionsName();
    }

    @Test
    public void testValidGroupOfInstitutionsNames() {
        groupOfInstitutions.setEntityName("North Group Of Institutions112");
        assertValid("entityName");
    }

    // Parent Entity Type Tests
    @Test
    public void testValidParentEntityTypes() {
        groupOfInstitutions.setParentEntityType("CLIENT");
        assertValid("parentEntityType");

        groupOfInstitutions.setParentEntityType("STATE");
        assertValid("parentEntityType");

        groupOfInstitutions.setParentEntityType("GROUPOFSTATES");
        assertValid("parentEntityType");

        groupOfInstitutions.setParentEntityType("DISTRICT");
        assertValid("parentEntityType");

        groupOfInstitutions.setParentEntityType("GROUPOFDISTRICTS");
        assertValid("parentEntityType");

    }

    @Test
    public void testInvalidParentEntityTypes() {

        groupOfInstitutions.setParentEntityType("GROUPOFINSTITUTIONS");
        assertInvalidParentEntityType();
    }

    // Parent Entity Id Tests
    @Test
    public void testBlankOrNullParentEntityId() {
        groupOfInstitutions.setParentEntityId((String) null);
        assertBlankOrNullParentEntityId();

        groupOfInstitutions.setParentEntityId("");
        assertBlankOrNullParentEntityId();

        groupOfInstitutions.setParentEntityId("  ");
        assertBlankOrNullParentEntityId();

        groupOfInstitutions.setParentEntityId("");
        assertBlankOrNullParentEntityId();
    }

    @Test
    public void testInvalidSizeParentEntityId() {
        groupOfInstitutions.setParentEntityId("908771662365608898837738897378834534435345345345345345345562462456456345634"); // >40
        assertInvalidSizeParentEntityId();
    }

    @Test
    public void testValidParentEntityId() {
        groupOfInstitutions.setParentEntityId("908771662"); // <40
        assertThat(validator.validateProperty(groupOfInstitutions, "parentEntityId").size(), is(0));

        groupOfInstitutions.setParentEntityId("9087716628833442344"); // =20
        assertThat(validator.validateProperty(groupOfInstitutions, "parentEntityId").size(), is(0));
    }

    @Test
    public void testGroupOfInstitutionsEntityForMultipleViolations() {
        groupOfInstitutions.setEntityId("");
        groupOfInstitutions.setEntityName("CoreInstitute");
        groupOfInstitutions.setParentEntityType("DISTRICT");
        groupOfInstitutions.setParentEntityId("I&^&^^^POPPP_++_+");
        groupOfInstitutions.setStateAbbreviation("AT");
        groupOfInstitutions.setDelete((String) null);

        Set<ConstraintViolation<GroupOfInstitutionsEntity>> constraintViolations = validator.validate(groupOfInstitutions, ImportFileValidationGroup.class);

        assertThat(constraintViolations.size(), is(3));
        Map<String, ConstraintViolation<GroupOfInstitutionsEntity>> constraintViolationMap = new HashMap<String, ConstraintViolation<GroupOfInstitutionsEntity>>();
        Iterator<ConstraintViolation<GroupOfInstitutionsEntity>> iterator = constraintViolations.iterator();
        while (iterator.hasNext()) {
            ConstraintViolation<GroupOfInstitutionsEntity> violation = iterator.next();
            constraintViolationMap.put(violation.getPropertyPath().toString(), violation);
        }
        assertThat(constraintViolationMap.get("entityId"), notNullValue());
        assertThat(constraintViolationMap.get("entityName"), nullValue());
        assertThat(constraintViolationMap.get("parentEntityType"), nullValue());
        assertThat(constraintViolationMap.get("parentEntityId"), notNullValue()); // ExternalIdValidation now attaches field name for errors. So this field has errors
        assertThat(constraintViolationMap.get("stateAbbreviation"), notNullValue());
    }

    @Test
    public void testGroupOfInstitutionsEntityWithUIValidationGroup() {
        groupOfInstitutions.setEntityId("23");
        groupOfInstitutions.setEntityName("MIDWESTGROUP");
        groupOfInstitutions.setParentEntityType("DISTRICT");
        groupOfInstitutions.setParentEntityId("345345");
        groupOfInstitutions.setStateAbbreviation("WI");
        groupOfInstitutions.setDelete((String) null);
        Set<ConstraintViolation<GroupOfInstitutionsEntity>> constraintViolations = validator.validate(groupOfInstitutions, UIValidationGroup.class);
        assertThat(constraintViolations.size(), is(0));
    }

    @Test
    public void testGroupOfInstitutionsEntityWithStateType() {
        groupOfInstitutions.setEntityId("23");
        groupOfInstitutions.setEntityName("MIDWESTGROUP");
        groupOfInstitutions.setParentEntityType("STATE");
        groupOfInstitutions.setParentEntityId("WI");
        groupOfInstitutions.setStateAbbreviation("WI");
        groupOfInstitutions.setDelete("");
        Set<ConstraintViolation<GroupOfInstitutionsEntity>> constraintViolations = validator.validate(groupOfInstitutions);
        assertThat(constraintViolations.size(), is(0));
    }

    @Test
    public void testGroupOfInstitutionsEntityWithInvalidParentEntityId() {
        groupOfInstitutions.setEntityId("23");
        groupOfInstitutions.setEntityName("MIDWESTGROUP");
        groupOfInstitutions.setParentEntityType("GROUPOFSTATES");
        groupOfInstitutions.setParentEntityId("WI-90");
        groupOfInstitutions.setStateAbbreviation("WI");
        groupOfInstitutions.setDelete("");
        Set<ConstraintViolation<GroupOfInstitutionsEntity>> constraintViolations = validator.validate(groupOfInstitutions);
        assertThat(constraintViolations.iterator().next().getMessage(), is("Parent External Id should contain alphanumeric"));
        assertThat(constraintViolations.size(), is(1));
    }

    private void assertBlankOrNullGroupOfInstitutionsName() {
        Set<ConstraintViolation<GroupOfInstitutionsEntity>> constraintViolations = validator.validateProperty(groupOfInstitutions, "entityName", ImportFileValidationGroup.class);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("Group Of Institutions Name is required"));
    }

    private void assertInvalidGroupOfInstitutionsName() {
        Set<ConstraintViolation<GroupOfInstitutionsEntity>> constraintViolations = validator.validateProperty(groupOfInstitutions, "entityName", ImportFileValidationGroup.class);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("Group Of Institutions Name should contain alphanumeric/special"));
    }

    // GroupOfInstitutions Identifier Validations
    protected void assertInvalidGroupOfInstitutionsIdentifier(String property) {
        Set<ConstraintViolation<GroupOfInstitutionsEntity>> constraintViolations = validator.validateProperty(groupOfInstitutions, property, ImportFileValidationGroup.class);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("Group Of Institutions Identifier should contain alphanumeric"));
    }

    protected void assertBlankOrNullGroupOfInstitutionsIdentifier(String property) {
        Set<ConstraintViolation<GroupOfInstitutionsEntity>> constraintViolations = validator.validateProperty(groupOfInstitutions, property, ImportFileValidationGroup.class);
        assertThat(constraintViolations.size(), is(1));
        assertThat(constraintViolations.iterator().next().getMessage(), is("Group Of Institutions Identifier is required"));
    }
}
