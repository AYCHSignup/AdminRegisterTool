/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.domain.constraintvalidators;

import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;

import java.lang.reflect.Field;

import javax.validation.ConstraintValidatorContext;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.constraints.Numeric;
import org.springframework.util.ReflectionUtils;


public class NumericValidatorTest {
    
    private NumericValidator numericValidator;
    ConstraintValidatorContext contextStub;
    
    private class ValidNumeric {
        @Numeric
        private String number;
    }
    
    private class ValidNumericDash {
        @Numeric(isDashAllowed=true)
        private String number;
    }

    @Before
    public void setup() {
        numericValidator = new NumericValidator();
        contextStub = null;
    }
    
    @Test
    public void testValidNumeric() {
        numericValidator.initialize(getAnnotation(ValidNumeric.class));
        
        assertThat(numericValidator.isValid("12345", contextStub), is(true));
        assertThat(numericValidator.isValid("00012345", contextStub), is(true));
        assertThat(numericValidator.isValid("120000345", contextStub), is(true));
        assertThat(numericValidator.isValid(" 00012345", contextStub), is(true));
        assertThat(numericValidator.isValid("120000345 ", contextStub), is(true));
        assertThat(numericValidator.isValid(" 67890345 ", contextStub), is(true));
    }
    
    @Test
    public void testInValidNumeric() {
        numericValidator.initialize(getAnnotation(ValidNumeric.class));
        
        assertThat(numericValidator.isValid("12345A", contextStub), is(false));
        assertThat(numericValidator.isValid("D12345", contextStub), is(false));
        assertThat(numericValidator.isValid("12345add", contextStub), is(false));
        assertThat(numericValidator.isValid("aaa12345", contextStub), is(false));
        assertThat(numericValidator.isValid("12345)", contextStub), is(false));
        assertThat(numericValidator.isValid("12345-UI", contextStub), is(false));
    }
    
    @Test
    public void testValidNumericDash() {
        numericValidator.initialize(getAnnotation(ValidNumericDash.class));
        
        assertThat(numericValidator.isValid("12345-", contextStub), is(true));
        assertThat(numericValidator.isValid("00012345-", contextStub), is(true));
        assertThat(numericValidator.isValid("12-0000345-", contextStub), is(true));
        assertThat(numericValidator.isValid(" 00-012345-", contextStub), is(true));
        assertThat(numericValidator.isValid("12000-0345 ", contextStub), is(true));
        assertThat(numericValidator.isValid(" 678-90345 ", contextStub), is(true));
        assertThat(numericValidator.isValid("-", contextStub), is(true)); //Is this condition valid. Should fail may be??
        assertThat(numericValidator.isValid("2-", contextStub), is(true)); //Is this condition valid. Should fail may be??
        assertThat(numericValidator.isValid("------", contextStub), is(true)); //Is this condition valid. Should fail may be??
    }
    
    @Test
    public void testInValidNumericDash() {
        numericValidator.initialize(getAnnotation(ValidNumeric.class));
        
        assertThat(numericValidator.isValid("12345-A(", contextStub), is(false));
        assertThat(numericValidator.isValid("D1234-5)", contextStub), is(false));
        assertThat(numericValidator.isValid("12345-add&", contextStub), is(false));
        assertThat(numericValidator.isValid("aaa12345%", contextStub), is(false));
        assertThat(numericValidator.isValid("12345@ty", contextStub), is(false));
        assertThat(numericValidator.isValid("12345-UI*", contextStub), is(false));
    }
    
    
    private Numeric getAnnotation(Class<?> clazz) {
        Field field = ReflectionUtils.findField(clazz, "number");
        return field.getAnnotation(Numeric.class);
    }  
}
