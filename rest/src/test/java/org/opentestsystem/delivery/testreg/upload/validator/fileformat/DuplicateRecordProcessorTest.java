/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.upload.validator.fileformat;

import static org.apache.commons.collections.CollectionUtils.get;
import static org.hamcrest.collection.IsCollectionWithSize.hasSize;
import static org.hamcrest.collection.IsEmptyCollection.empty;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsEqual.equalTo;
import static org.hamcrest.core.IsNot.not;
import static org.junit.Assert.assertThat;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.upload.DataRecord;
import org.opentestsystem.delivery.testreg.upload.FileDataRecord;
import org.opentestsystem.delivery.testreg.upload.FileHeaderRecord;

public class DuplicateRecordProcessorTest {

    private DuplicateRecordProcessor duplicateRecordProcessor;
    
    @Before
    public void setup() {
        duplicateRecordProcessor = new DuplicateRecordProcessor();
    }
    
    @Test
    public void testDuplicates() {
        
        List<DataRecord> duplicateRecordList = new ArrayList<DataRecord>();
        duplicateRecordList.add(new FileHeaderRecord(new String[]{"COL1", "COL2", "COL3"}));
        duplicateRecordList.add(new FileDataRecord(2, new String[]{"Frank", "Sr.", "Gore"}));
        duplicateRecordList.add(new FileDataRecord(3, new String[]{"Micheal", "J", "Fox"}));
        duplicateRecordList.add(new FileDataRecord(4, new String[]{"William", "A", "Jefferson"}));
        duplicateRecordList.add(new FileDataRecord(5, new String[]{"Frank", "Sr.", "Gore"}));
        duplicateRecordList.add(new FileDataRecord(6, new String[]{"William", "J", "Herschel"}));
        duplicateRecordList.add(new FileDataRecord(7, new String[]{"Micheal", "J", "Fox"}));
        duplicateRecordList.add(new FileDataRecord(8, new String[]{"Catherine", "T", "McArthur"}));
        duplicateRecordList.add(new FileDataRecord(9, new String[]{"Frank", "Sr.", "Gore"}));
        
        DuplicateUniquePair duplicateUniquePair = duplicateRecordProcessor.processDuplicates(duplicateRecordList);
        Set<DataRecord> uniqueRecordSet = duplicateUniquePair.getUniqueRecordSet();
        
        //Assert Unique Record Set
        assertThat(uniqueRecordSet, is(not(empty()))); 
        assertThat(uniqueRecordSet, hasSize(6));
               
        //Header
        FileHeaderRecord header = (FileHeaderRecord)get(uniqueRecordSet, 0);
        assertThat(header, is(equalTo(new FileHeaderRecord(new String[]{"COL1", "COL2", "COL3"}))));
        
        //Record 1
        FileDataRecord record1 = (FileDataRecord)get(uniqueRecordSet, 1);
        FileDataRecord expectedRecord1 = new FileDataRecord(2, new String[]{"Frank", "Sr.", "Gore"});
        assertThat(record1, is(equalTo(expectedRecord1)));
        assertThat(record1.getRowMetadata().getRowNum(), is(equalTo(expectedRecord1.getRowMetadata().getRowNum())));
        
        
        //Record 2
        FileDataRecord record2 = (FileDataRecord)get(uniqueRecordSet, 2);
        FileDataRecord expectedRecord2 = new FileDataRecord(3, new String[]{"Micheal", "J", "Fox"});
        assertThat(record2, is(equalTo(expectedRecord2)));
        assertThat(record2.getRowMetadata().getRowNum(), is(equalTo(expectedRecord2.getRowMetadata().getRowNum())));
        
        //Record 3
        FileDataRecord record3 = (FileDataRecord)get(uniqueRecordSet, 3);
        FileDataRecord expectedRecord3 = new FileDataRecord(4, new String[]{"William", "A", "Jefferson"});
        assertThat(record3, is(equalTo(expectedRecord3)));
        assertThat(record3.getRowMetadata().getRowNum(), is(equalTo(expectedRecord3.getRowMetadata().getRowNum())));
        
        //Record 4
        FileDataRecord record4 = (FileDataRecord)get(uniqueRecordSet, 4);
        FileDataRecord expectedRecord4 = new FileDataRecord(6, new String[]{"William", "J", "Herschel"});
        assertThat(record4, is(equalTo(expectedRecord4)));
        assertThat(record4.getRowMetadata().getRowNum(), is(equalTo(expectedRecord4.getRowMetadata().getRowNum())));
        
        //Record 5
        FileDataRecord record5 = (FileDataRecord)get(uniqueRecordSet, 5);
        FileDataRecord expectedRecord5 = new FileDataRecord(8, new String[]{"Catherine", "T", "McArthur"});
        assertThat(record5, is(equalTo(expectedRecord5)));
        assertThat(record5.getRowMetadata().getRowNum(), is(equalTo(expectedRecord5.getRowMetadata().getRowNum())));
        
        //Assert Duplicates
        List<Integer[]> duplicateRowNumbers = duplicateRecordProcessor.getDuplicateRowNumbers(duplicateUniquePair);
        assertThat(duplicateRowNumbers.get(0), is(equalTo(new Integer[]{2, 5, 9})));
        assertThat(duplicateRowNumbers.get(1), is(equalTo(new Integer[]{3, 7})));
        
    }
    
    
    @Test
    public void testUniqueRecords() {
        List<DataRecord> duplicateRecordList = new ArrayList<DataRecord>();
        duplicateRecordList.add(new FileHeaderRecord(new String[]{"COL1", "COL2", "COL3"}));
        duplicateRecordList.add(new FileDataRecord(2, new String[]{"Frank", "Sr.", "Gore"}));
        duplicateRecordList.add(new FileDataRecord(3, new String[]{"Micheal", "J", "Fox"}));
        duplicateRecordList.add(new FileDataRecord(4, new String[]{"William", "A", "Jefferson"}));
        
        DuplicateUniquePair duplicateUniquePair = duplicateRecordProcessor.processDuplicates(duplicateRecordList);
        Set<DataRecord> uniqueRecords = duplicateUniquePair.getUniqueRecordSet();
        assertThat(uniqueRecords, is(not(empty()))); 
        assertThat(uniqueRecords, hasSize(4));
        assertThat(duplicateUniquePair.getDuplicates(), is(empty()));
 
        //Header
        FileHeaderRecord header = (FileHeaderRecord)get(uniqueRecords, 0);
        assertThat(header, is(equalTo(new FileHeaderRecord(new String[]{"COL1", "COL2", "COL3"}))));
        
        //Record 1
        FileDataRecord record1 = (FileDataRecord)get(uniqueRecords, 1);
        FileDataRecord expectedRecord1 = new FileDataRecord(2, new String[]{"Frank", "Sr.", "Gore"});
        assertThat(record1, is(equalTo(expectedRecord1)));
        assertThat(record1.getRowMetadata().getRowNum(), is(equalTo(expectedRecord1.getRowMetadata().getRowNum())));
        
        //Record 2
        FileDataRecord record2 = (FileDataRecord)get(uniqueRecords, 2);
        FileDataRecord expectedRecord2 = new FileDataRecord(3, new String[]{"Micheal", "J", "Fox"});
        assertThat(record2, is(equalTo(expectedRecord2)));
        assertThat(record2.getRowMetadata().getRowNum(), is(equalTo(expectedRecord2.getRowMetadata().getRowNum())));
        
        //Record 3
        FileDataRecord record3 = (FileDataRecord)get(uniqueRecords, 3);
        FileDataRecord expectedRecord3 = new FileDataRecord(4, new String[]{"William", "A", "Jefferson"});
        assertThat(record3, is(equalTo(expectedRecord3)));
        assertThat(record3.getRowMetadata().getRowNum(), is(equalTo(expectedRecord3.getRowMetadata().getRowNum())));
    }
    
}
