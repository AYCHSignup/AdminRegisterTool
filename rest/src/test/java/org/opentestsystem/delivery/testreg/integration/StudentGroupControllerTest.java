/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.integration;

import com.google.common.collect.Maps;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.DistrictEntity;
import org.opentestsystem.delivery.testreg.domain.InstitutionEntity;
import org.opentestsystem.delivery.testreg.domain.StateEntity;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.domain.Student.Gender;
import org.opentestsystem.delivery.testreg.domain.Student.GradeLevel;
import org.opentestsystem.delivery.testreg.domain.Student.PrimaryDisabilityType;
import org.opentestsystem.delivery.testreg.domain.Student.Title3ProgramType;
import org.opentestsystem.delivery.testreg.domain.StudentGroup;
import org.opentestsystem.delivery.testreg.domain.User;
import org.opentestsystem.delivery.testreg.domain.search.StudentGroupSearchRequest;
import org.opentestsystem.shared.search.domain.SearchResponse;

import java.util.Arrays;
import java.util.Map;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.Matchers.*;
import static org.junit.Assert.*;
import static org.opentestsystem.delivery.testreg.domain.TestRegPermission.*;

@SuppressWarnings("unchecked")
public class StudentGroupControllerTest extends AbstractSecuredRestEmbeddedMongoTest {
    private static final String POST_URL = "/studentGroup";
    private static final String PUT_URL = "/studentGroup/";
    private Map<String, Object> params;
    private Map<String, String> searchParams;

    @Before
    public void buildParams() throws Exception {
        // Insert Dependent Entities
        mongoTemplate.insert(new StateEntity.Builder("WI", "Wisconsin", "CLIENT", "00001", "ADD").build());
        mongoTemplate.insert(new DistrictEntity.Builder("101", "MDW", "99190", "CLIENT", "00001", "WI", "ADD").build());
        mongoTemplate.insert(new InstitutionEntity.Builder("10001", "MDS SCHOOL", "DISTRICT", "991919", "101", "WI",
                "ADD").build());

        User user = new User();
        user.setEmail("asf@gmail.com");
        user.setFirstName("Tony");
        user.setLastName("Romo");
        user.setPhone("123-456-9111");
        mongoTemplate.insert(user);

        Student student = new Student();
        student.setEntityId("123456");
        student.setStateAbbreviation("WI");
        student.setDistrictIdentifier("101");
        student.setInstitutionIdentifier("10001");
        student.setMiddleName("MS");
        student.setFirstName("Joe");
        student.setLastName("Smith");
        student.setBirthDate("2013-10-10");
        student.setExternalSsid("WI12345");
        student.setGradeLevelWhenAssessed(GradeLevel.EIGHTHGRADE);
        student.setGender(Gender.Male);
        student.setHispanicOrLatino("NO");
        student.setAmericanIndianOrAlaskaNative("NO");
        student.setAsian("NO");
        student.setLanguageCode("eng");
        student.setBlackOrAfricanAmerican("NO");
        student.setWhite("Yes");
        student.setNativeHawaiianOrPacificIsland("NO");
        student.setTwoOrMoreRaces("NO");
        student.setiDEAIndicator("NO");
        student.setLepStatus("NO");
        student.setSection504Status("NO");
        student.setDisadvantageStatus("YES");
        student.setTitle3ProgressStatus("PROFICIENT");
        student.setMigrantStatus("YES");
        student.setFirstEntryDateIntoUsSchool("2014-09-01");
        student.setLepEntryDate("2010-10-10");
        student.setLepExitDate("2010-10-20");
        student.setTitle3ProgramType(Title3ProgramType.DUALLANGUAGE);
        student.setPrimaryDisabilityType(PrimaryDisabilityType.AUT);
        mongoTemplate.insert(student);

        params = Maps.newHashMap();
        params.put("institutionIdentifier", "10001");
        params.put("ownerEmail", "asf@gmail.com");
        params.put("stateAbbreviation", "WI");
        params.put("studentGroupName", "group1");
        params.put("districtIdentifier", "101");
        params.put("studentIds", Arrays.asList(new String[] { "123456" }));

        searchParams = Maps.newHashMap();
        searchParams.put("studentGroupName", "group1");
        searchParams.put("stateAbbreviation", "WI");
    }

    @Test
    public void saveStudentGroup() throws InterruptedException {
        StudentGroup savedStudentGroup = callPOSTRestService(POST_URL, params, StudentGroup.class, STUDENTGROUP_MODIFY);
        assertThat("saved studentGroup", savedStudentGroup, notNullValue());
        assertThat("saved studentGroup id", savedStudentGroup.getId(), notNullValue());
    }

    @Test
    public void updateStudentGroup() throws InterruptedException {
        StudentGroup savedStudentGroup = callPOSTRestService(POST_URL, params, StudentGroup.class, STUDENTGROUP_MODIFY);
        assertThat("saved studentGroup", savedStudentGroup, notNullValue());
        params.put("id", savedStudentGroup.getId());
        params.put("firstName", "Scott");
        StudentGroup updatedStudentGroup = callPUTRestService(PUT_URL + savedStudentGroup.getId(), params, StudentGroup.class, STUDENTGROUP_MODIFY);
        assertThat("saved studentGroup", updatedStudentGroup, notNullValue());
        assertThat("StudentGroup should be updated", updatedStudentGroup.getStudentGroupName(), equalTo("group1"));
    }

    @Test
    public void findStudentGroup() throws InterruptedException {
        StudentGroup savedStudentGroup = callPOSTRestService(POST_URL, params, StudentGroup.class, STUDENTGROUP_MODIFY);
        assertThat("saved studentGroup", savedStudentGroup, notNullValue());
        StudentGroup fetchedStudentGroup = callGETRestService(PUT_URL + savedStudentGroup.getId(), StudentGroup.class, STUDENTGROUP_READ);
        assertThat("fetched studentGroup", fetchedStudentGroup, notNullValue());
        assertThat("StudentGroup id should be updated", savedStudentGroup.getId(), equalTo(fetchedStudentGroup.getId()));
    }

    @Test
    public void removeStudentGroup() throws InterruptedException {
        StudentGroup savedStudentGroup = callPOSTRestService(POST_URL, params, StudentGroup.class, STUDENTGROUP_MODIFY);
        assertThat("saved studentGroup", savedStudentGroup, notNullValue());

        callDeleteRestService("/studentGroup/" + savedStudentGroup.getId());
        StudentGroup fetchedStudentGroup = callGETRestService("/studentGroup/" + savedStudentGroup.getId(), StudentGroup.class, STUDENTGROUP_READ);
        assertThat("fetched studentGroup", fetchedStudentGroup, nullValue());
    }

    @Test
    public void searchStudentGroups() throws InterruptedException {
        StudentGroup savedStudentGroup = callPOSTRestService("/studentGroup", params, StudentGroup.class, STUDENTGROUP_MODIFY);
        assertThat("saved studentGroup", savedStudentGroup, notNullValue());
        assertThat("saved studentGroup", savedStudentGroup.getId(), notNullValue());

        // search by entityId exact
        Map<String, String> searchParams = Maps.newHashMap();
        searchParams.put(StudentGroupSearchRequest.SEARCH_KEY_STATE_ABBR, "WI");
        SearchResponse<StudentGroup> response = callGETRestService("/studentGroups" + buildQueryString(searchParams),
                SearchResponse.class, STUDENTGROUP_READ);
        assertThat("studentGroups", response.getSearchResults(), notNullValue());
        assertThat("studentGroups", response.getSearchResults(), hasSize(1));
    }

}
