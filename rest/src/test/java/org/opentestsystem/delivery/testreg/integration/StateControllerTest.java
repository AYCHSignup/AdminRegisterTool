/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.integration;

import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertThat;
import static org.junit.Assert.fail;
import static org.opentestsystem.delivery.testreg.domain.TestRegPermission.ENTITY_MODIFY;
import static org.opentestsystem.delivery.testreg.domain.TestRegPermission.ENTITY_READ;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.InputStreamReader;
import java.util.List;
import java.util.Map;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.GroupOfStatesEntity;
import org.opentestsystem.delivery.testreg.domain.HierarchyLevel;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.domain.StateEntity;
import org.opentestsystem.shared.docs.annotation.ApiDocExample;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.mock.web.MockHttpServletResponse;

import au.com.bytecode.opencsv.CSVReader;

import com.google.common.collect.Maps;

@SuppressWarnings("unchecked")
public class StateControllerTest extends AbstractSecuredRestEmbeddedMongoTest {

    private Map<String, Object> params;

    private Map<String, String> uploadParams;

    @Before
    public void buildParams() {
        // Insert parent entity
        mongoTemplate.insert(new GroupOfStatesEntity.Builder("12345", "MIDWEST STATES", "CLIENT", "1000", "ADD").build());

        params = Maps.newHashMap();
        params.put("entityId", "WI");
        params.put("entityName", "Wisconsin");
        params.put("parentEntityType", HierarchyLevel.GROUPOFSTATES);
        params.put("parentEntityId", "12345");

        // build upload params
        uploadParams = Maps.newHashMap();
        uploadParams.put("entityId", "WI");
        uploadParams.put("entityName", "Wisconsin");
        uploadParams.put("parentEntityType", HierarchyLevel.GROUPOFSTATES.toString());
        uploadParams.put("parentEntityId", "12345");
        uploadParams.put("currentPage", "0");
    }

    @Test
    public void saveStateEntity() throws InterruptedException {
        StateEntity savedStateEntity = callPOSTRestService("/state", params, StateEntity.class, ENTITY_MODIFY);
        assertEquals("StateEntity should be created", 1, mongoTemplate.findAll(StateEntity.class).size());
        assertNotNull(savedStateEntity);
    }

    @Test
    public void updateStateEntity() throws InterruptedException {
        StateEntity savedStateEntity = callPOSTRestService("/state", params, StateEntity.class, ENTITY_MODIFY);
        assertNotNull(savedStateEntity);
        params.put("id", savedStateEntity.getId());
        params.put("entityId", "IL");
        params.put("entityName", "Illinois");
        StateEntity updatedStateEntity = callPUTRestService("/state/" + savedStateEntity.getId(), params, StateEntity.class, ENTITY_MODIFY);
        assertNotNull(updatedStateEntity);
        assertEquals("StateEntity should be updated", updatedStateEntity.getEntityId(), "IL");
    }

    @Test
    public void findStateEntity() throws InterruptedException {
        StateEntity savedStateEntity = callPOSTRestService("/state", params, StateEntity.class, ENTITY_MODIFY);
        assertEquals("StateEntity should be created", 1, mongoTemplate.findAll(StateEntity.class).size());
        assertNotNull(savedStateEntity);
        StateEntity fetchedStateEntity = callGETRestService("/state/" + savedStateEntity.getId(), StateEntity.class, ENTITY_READ);
        assertNotNull("StateEntity was null!", fetchedStateEntity);
    }

    @Test
    public void deleteStateEntity() throws InterruptedException {
        StateEntity savedStateEntity = callPOSTRestService("/state", params, StateEntity.class, ENTITY_MODIFY);
        assertEquals("StateEntity should be created", 1, mongoTemplate.findAll(StateEntity.class).size());
        assertNotNull(savedStateEntity);
        try {
            callDeleteRestService("/state/" + savedStateEntity.getId(), ENTITY_MODIFY);
        } catch (Exception e) {
            fail("Cannot delete configuration");
        }
        StateEntity fetchedStateEntity = callGETRestService("/state/" + savedStateEntity.getId(), StateEntity.class, ENTITY_READ);
        assertNull("StateEntity was null!", fetchedStateEntity);
    }

    @Test
    public void searchStateEntity() throws InterruptedException {
        StateEntity savedStateEntity = callPOSTRestService("/state", params, StateEntity.class, ENTITY_MODIFY);
        assertEquals("StateEntity should be created", 1, mongoTemplate.findAll(StateEntity.class).size());
        assertNotNull(savedStateEntity);

        Map<String, String> params = Maps.newHashMap();
        params.put("entityId", savedStateEntity.getEntityId());
        SearchResponse<Sb11Entity> resp = callGETRestService("/state" + buildQueryString(params), SearchResponse.class, ENTITY_READ);
        assertNotNull(resp);
        assertEquals("only one should be found", 1, resp.getReturnCount());
    }

    @Test
    public void findAllStates() throws InterruptedException {
        List<StateEntity> fetchedStates = callGETRestService("/states", List.class, ENTITY_READ);
        assertNotNull("fetchedStates null", fetchedStates);
        assertEquals("0 states should be found", fetchedStates.size(), 0);

        callPOSTRestService("/state", params, StateEntity.class, ENTITY_MODIFY);
        params.put("entityId", "MN");
        params.put("entityName", "Minnesota");
        callPOSTRestService("/state", params, StateEntity.class, ENTITY_MODIFY);

        List<StateEntity> fetchedStateEntities = callGETRestService("/states", List.class, ENTITY_READ);
        assertNotNull("StateEntities null", fetchedStateEntities);
        assertEquals("2 states should be found", fetchedStateEntities.size(), 2);
    }

    @Test
    @ApiDocExample(rank = -1)
    public void exportToExcelWithExtension() throws Exception {
        StateEntity entity = callPOSTRestService("/state", params, StateEntity.class, ENTITY_MODIFY);
        assertEquals("StateEntity should be created", 1, mongoTemplate.findAll(StateEntity.class).size());
        assertNotNull(entity);

        MockHttpServletResponse response = callGETRestService1("/states.xls", ENTITY_READ);
        assertNotNull(response);
        assertEquals("Content-Type is not equal application/vnd.ms-excel", "application/vnd.ms-excel", response.getContentType());
        assertNotNull("State ExportExcel Data is null", response.getContentAsByteArray());
        byte[] resData = response.getContentAsByteArray();
        ByteArrayInputStream st = new ByteArrayInputStream(resData);
        HSSFWorkbook workbook = new HSSFWorkbook(st);
        Sheet sheet = workbook.getSheetAt(0);
        Row dataRow = sheet.getRow(1);
        assertThat(dataRow.getCell(0).getStringCellValue(), is(entity.getEntityId()));
        assertThat(dataRow.getCell(1).getStringCellValue(), is(entity.getEntityName()));
        assertThat(dataRow.getCell(2).getStringCellValue(), is(entity.getParentEntityType().toString()));
        assertThat(dataRow.getCell(3).getStringCellValue(), is("MIDWEST STATES"));
    }

    @Test
    @ApiDocExample(rank = -1)
    public void exportToExcelWithPageParams() throws Exception {
        StateEntity entity = callPOSTRestService("/state", params, StateEntity.class, ENTITY_MODIFY);
        assertEquals("StateEntity should be created", 1, mongoTemplate.findAll(StateEntity.class).size());
        assertNotNull(entity);

        MockHttpServletResponse response = callGETRestService1("/states.xls" + buildQueryString(uploadParams), ENTITY_READ);
        assertNotNull(response);
        assertEquals("Content-Type is not equal application/vnd.ms-excel", "application/vnd.ms-excel", response.getContentType());
        assertNotNull("State ExportExcel Data is null", response.getContentAsByteArray());
        byte[] resData = response.getContentAsByteArray();
        ByteArrayInputStream st = new ByteArrayInputStream(resData);
        HSSFWorkbook workbook = new HSSFWorkbook(st);
        Sheet sheet = workbook.getSheetAt(0);
        Row dataRow = sheet.getRow(1);
        assertThat(dataRow.getCell(0).getStringCellValue(), is(entity.getEntityId()));
        assertThat(dataRow.getCell(1).getStringCellValue(), is(entity.getEntityName()));
        assertThat(dataRow.getCell(2).getStringCellValue(), is(entity.getParentEntityType().toString()));
        assertThat(dataRow.getCell(3).getStringCellValue(), is("MIDWEST STATES"));
    }

    @Test
    @ApiDocExample(rank = -1)
    public void exportToCSVWithExtension() throws Exception {
        StateEntity entity = callPOSTRestService("/state", params, StateEntity.class, ENTITY_MODIFY);
        assertEquals("StateEntity should be created", 1, mongoTemplate.findAll(StateEntity.class).size());
        assertNotNull(entity);
        MockHttpServletResponse response = callGETRestService1("/states.csv", ENTITY_READ);
        assertNotNull(response);
        assertEquals("Content-Type is not equal application/csv", com.google.common.net.MediaType.CSV_UTF_8.toString(), response.getContentType());
        assertNotNull("State Export CSV Data is null", response.getContentAsByteArray());
        byte[] resData = response.getContentAsByteArray();

        ByteArrayInputStream st = new ByteArrayInputStream(resData);
        BufferedReader reader = new BufferedReader(new InputStreamReader(st));
        CSVReader cvsReader = new CSVReader(reader);
        cvsReader.readNext();
        String[] dataRow = cvsReader.readNext();
        assertThat(dataRow[0], is(entity.getEntityId()));
        assertThat(dataRow[1], is(entity.getEntityName()));
        assertThat(dataRow[2], is(entity.getParentEntityType().toString()));
        assertThat(dataRow[3], is("MIDWEST STATES")); // Parent Entity Name
        cvsReader.close();
    }

    @Test
    @ApiDocExample(rank = -1)
    public void exportToCSVWithPageParams() throws Exception {
        StateEntity entity = callPOSTRestService("/state", params, StateEntity.class, ENTITY_MODIFY);
        assertEquals("StateEntity should be created", 1, mongoTemplate.findAll(StateEntity.class).size());
        assertNotNull(entity);
        MockHttpServletResponse response = callGETRestService1("/states.csv" + buildQueryString(uploadParams), ENTITY_READ);
        assertNotNull(response);
        assertEquals("Content-Type is not equal application/csv", com.google.common.net.MediaType.CSV_UTF_8.toString(), response.getContentType());
        assertNotNull("State Export CSV Data is null", response.getContentAsByteArray());
        byte[] resData = response.getContentAsByteArray();

        ByteArrayInputStream st = new ByteArrayInputStream(resData);
        BufferedReader reader = new BufferedReader(new InputStreamReader(st));
        CSVReader cvsReader = new CSVReader(reader);
        cvsReader.readNext();
        String[] dataRow = cvsReader.readNext();
        assertThat(dataRow[0], is(entity.getEntityId()));
        assertThat(dataRow[1], is(entity.getEntityName()));
        assertThat(dataRow[2], is(entity.getParentEntityType().toString()));
        assertThat(dataRow[3], is("MIDWEST STATES")); // Parent Entity Name
        cvsReader.close();
    }
}
