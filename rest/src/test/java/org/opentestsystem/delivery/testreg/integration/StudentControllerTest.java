/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.integration;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.Matchers.hasSize;
import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertThat;
import static org.opentestsystem.delivery.testreg.domain.TestRegPermission.STUDENT_MODIFY;
import static org.opentestsystem.delivery.testreg.domain.TestRegPermission.STUDENT_READ;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.InputStreamReader;
import java.util.Map;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.DistrictEntity;
import org.opentestsystem.delivery.testreg.domain.InstitutionEntity;
import org.opentestsystem.delivery.testreg.domain.StateEntity;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.domain.Student.Gender;
import org.opentestsystem.delivery.testreg.domain.Student.GradeLevel;
import org.opentestsystem.delivery.testreg.domain.Student.PrimaryDisabilityType;
import org.opentestsystem.delivery.testreg.domain.Student.Title3ProgramType;
import org.opentestsystem.delivery.testreg.domain.search.StudentSearchRequest;
import org.opentestsystem.shared.docs.annotation.ApiDocExample;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.mock.web.MockHttpServletResponse;

import au.com.bytecode.opencsv.CSVReader;

import com.google.common.collect.Maps;

@SuppressWarnings("unchecked")
public class StudentControllerTest extends AbstractSecuredRestEmbeddedMongoTest {
    private static final String POST_URL = "/student";
    private static final String PUT_URL = "/student/";
    private Map<String, Object> params;
    private Map<String, String> searchParams;

    @Before
    public void buildParams() throws Exception {
        // Insert Dependent Entities
        mongoTemplate.insert(new StateEntity.Builder("WI", "Wisconsin", "CLIENT", "00001", "ADD").build());
        mongoTemplate.insert(new DistrictEntity.Builder("101", "MDW", "99190", "CLIENT", "00001", "WI", "ADD").build());
        mongoTemplate.insert(new InstitutionEntity.Builder("10001", "MDS SCHOOL", "DISTRICT", "991919", "101", "WI",
                "ADD").build());

        params = Maps.newHashMap();
        params.put("firstName", "Joe");
        params.put("lastName", "Smith");
        params.put("stateAbbreviation", "WI");
        params.put("entityId", "123456");
        params.put("districtIdentifier", "101");
        params.put("institutionIdentifier", "10001");
        params.put("middleName", "MS");
        params.put("birthDate", "2010-10-10");
        params.put("externalSsid", "WI12345");
        params.put("gradeLevelWhenAssessed", GradeLevel.FOURTHGRADE);
        params.put("gender", Gender.Male.toString());
        params.put("hispanicOrLatino", "NO");
        params.put("americanIndianOrAlaskaNative", "NO");
        params.put("asian", "NO");
        params.put("blackOrAfricanAmerican", "NO");
        params.put("white", "Yes");
        params.put("nativeHawaiianOrPacificIsland", "NO");
        params.put("twoOrMoreRaces", "NO");
        params.put("iDEAIndicator", "NO");
        params.put("lepStatus", "NO");
        params.put("section504Status", "NO");
        params.put("disadvantageStatus", "YES");
        params.put("languageCode", "tel");
        params.put("title3ProgressStatus", "PROGRESS");
        params.put("migrantStatus", "YES");
        params.put("firstEntryDateIntoUsSchool", "2014-10-10");
        params.put("lepEntryDate", "2010-10-10");
        params.put("lepExitDate", "2010-10-10");
        params.put("title3ProgramType", Title3ProgramType.DUALLANGUAGE.toString());
        params.put("primaryDisabilityType", PrimaryDisabilityType.AUT.toString());

        searchParams = Maps.newHashMap();
        searchParams.put("entityId", "123456");
        searchParams.put("stateAbbreviation", "WI");
    }

    @Test
    public void saveStudent() throws InterruptedException {
        Student savedStudent = callPOSTRestService(POST_URL, params, Student.class, STUDENT_MODIFY);
        assertThat("saved student", savedStudent, notNullValue());
        assertThat("saved student id", savedStudent.getId(), notNullValue());
    }

    @Test
    public void updateStudent() throws InterruptedException {
        Student savedStudent = callPOSTRestService(POST_URL, params, Student.class, STUDENT_MODIFY);
        assertThat("saved student", savedStudent, notNullValue());
        params.put("id", savedStudent.getId());
        params.put("firstName", "Scott");
        Student updatedStudent = callPUTRestService(PUT_URL + savedStudent.getId(), params, Student.class,
                STUDENT_MODIFY);
        assertThat("saved student", updatedStudent, notNullValue());
        assertThat("Student should be updated", updatedStudent.getFirstName(), equalTo("Scott"));
    }

    @Test
    public void findStudent() throws InterruptedException {
        Student savedStudent = callPOSTRestService(POST_URL, params, Student.class, STUDENT_MODIFY);
        assertThat("saved student", savedStudent, notNullValue());
        Student fetchedStudent = callGETRestService(PUT_URL + savedStudent.getId(), Student.class, STUDENT_READ);
        assertThat("fetched student", fetchedStudent, notNullValue());
        assertThat("Student id should be updated", savedStudent.getId(), equalTo(fetchedStudent.getId()));
    }

    @Test
    public void getLanguageCodes() throws InterruptedException {

        Map<String, String> fetchedLanguages = callGETRestService(PUT_URL + "/languages", Map.class, STUDENT_READ);
        assertThat("fetched Laguage Codes", fetchedLanguages, notNullValue());
    }

    @Test
    public void getGradeLevel() throws InterruptedException {

        Map<String, String> gradeLevel = callGETRestService(PUT_URL + "/gradeLevel", Map.class, STUDENT_READ);
        assertThat("Grade Level", gradeLevel, notNullValue());
    }

    @Test
    public void removeStudent() throws InterruptedException {
        Student savedStudent = callPOSTRestService(POST_URL, params, Student.class, STUDENT_MODIFY);
        assertThat("saved student", savedStudent, notNullValue());

        callDeleteRestService("/student/" + savedStudent.getId(), STUDENT_MODIFY);
        Student fetchedStudent = callGETRestService("/student/" + savedStudent.getId(), Student.class, STUDENT_READ);
        assertThat("fetched student", fetchedStudent, nullValue());
    }

    @Test
    public void searchStudents() throws InterruptedException {
        Student savedStudent = callPOSTRestService("/student", params, Student.class, STUDENT_MODIFY);
        assertThat("saved student", savedStudent, notNullValue());
        assertThat("saved student", savedStudent.getId(), notNullValue());

        // search by entityId exact
        Map<String, String> searchParams = Maps.newHashMap();
        searchParams.put(StudentSearchRequest.SEARCH_KEY_FIRST_NAME, "Joe");

        SearchResponse<Student> response = callGETRestService("/student" + buildQueryString(searchParams),SearchResponse.class, STUDENT_READ);

        assertThat("students", response.getSearchResults(), notNullValue());
        assertThat("students", response.getSearchResults(), hasSize(1));
    }

    @Test
    @ApiDocExample(rank = -1)
    // TODO: Expected and Actual values are misplaced in asserts. Needed to be fixed.
    public void exportToExcelWithPageParams() throws Exception {
        Student entity = callPOSTRestService("/student", params, Student.class, STUDENT_MODIFY);
        assertEquals("Student should be created", 1, mongoTemplate.findAll(Student.class).size());
        assertNotNull(entity);

        MockHttpServletResponse response = callGETRestService1("/students.xls" + buildQueryString(searchParams),
                STUDENT_READ);
        assertNotNull(response);
        assertEquals("Content-Type is not equal application/vnd.ms-excel", "application/vnd.ms-excel",
                response.getContentType());
        assertNotNull("Student ExportExcel Data is null", response.getContentAsByteArray());
        byte[] resData = response.getContentAsByteArray();
        ByteArrayInputStream st = new ByteArrayInputStream(resData);
        HSSFWorkbook workbook = new HSSFWorkbook(st);
        Sheet sheet = workbook.getSheetAt(0);
        Row dataRow = sheet.getRow(1);
        assertThat(entity.getStateAbbreviation(), is(dataRow.getCell(0).getStringCellValue()));
        assertThat(entity.getDistrictIdentifier(), is(dataRow.getCell(1).getStringCellValue()));
        assertThat(entity.getInstitutionIdentifier(), is(dataRow.getCell(2).getStringCellValue()));
        assertThat(entity.getLastName(), is(dataRow.getCell(3).getStringCellValue()));
        assertThat(entity.getFirstName(), is(dataRow.getCell(4).getStringCellValue()));
        assertThat(entity.getMiddleName(), is(dataRow.getCell(5).getStringCellValue()));
        assertThat(entity.getEntityId(), is(dataRow.getCell(7).getStringCellValue()));
        assertThat(entity.getExternalSsid(), is(dataRow.getCell(8).getStringCellValue()));
        assertThat(entity.getGradeLevelWhenAssessed(),
                is(GradeLevel.fromGrade(dataRow.getCell(9).getStringCellValue())));
        assertThat(entity.getGender().toString(), is(dataRow.getCell(10).getStringCellValue()));
        assertThat(entity.getHispanicOrLatino(), is(dataRow.getCell(11).getStringCellValue()));
        assertThat(entity.getAmericanIndianOrAlaskaNative(), is(dataRow.getCell(12).getStringCellValue()));
        assertThat(entity.getAsian(), is(dataRow.getCell(13).getStringCellValue()));
        assertThat(entity.getBlackOrAfricanAmerican(), is(dataRow.getCell(14).getStringCellValue()));
        assertThat(entity.getWhite(), is(dataRow.getCell(15).getStringCellValue()));
        assertThat(entity.getNativeHawaiianOrPacificIsland(), is(dataRow.getCell(16).getStringCellValue()));
        assertThat(entity.getTwoOrMoreRaces(), is(dataRow.getCell(17).getStringCellValue()));
        assertThat(entity.getiDEAIndicator(), is(dataRow.getCell(18).getStringCellValue()));
        assertThat(entity.getLepStatus(), is(dataRow.getCell(19).getStringCellValue()));
        assertThat(dataRow.getCell(20).getStringCellValue(), is(entity.getSection504Status()));
        assertThat(entity.getDisadvantageStatus(), is(dataRow.getCell(21).getStringCellValue()));
        assertThat(entity.getLanguageCode(), is(dataRow.getCell(22).getStringCellValue()));
        assertThat(Title3ProgramType.valueOf(dataRow.getCell(28).getStringCellValue()),
                is(entity.getTitle3ProgramType()));
        assertThat(entity.getMigrantStatus(), is(dataRow.getCell(24).getStringCellValue()));
        assertThat(entity.getTitle3ProgressStatus().toString(), is(dataRow.getCell(23).getStringCellValue()));
        assertThat(entity.getPrimaryDisabilityType().toString(), is(dataRow.getCell(29).getStringCellValue()));
    }

    @Test
    @ApiDocExample(rank = -1)
    // TODO: Expected and Actual values are misplaced in asserts. Needed to be fixed.
    public void exportToExcelWithExtension() throws Exception {
        Student entity = callPOSTRestService("/student", params, Student.class, STUDENT_MODIFY);
        assertEquals("Student should be created", 1, mongoTemplate.findAll(Student.class).size());
        assertNotNull(entity);

        MockHttpServletResponse response = callGETRestService1("/students.xls", STUDENT_READ);
        assertNotNull(response);
        assertEquals("Content-Type is not equal application/vnd.ms-excel", "application/vnd.ms-excel",
                response.getContentType());
        assertNotNull("Student ExportExcel Data is null", response.getContentAsByteArray());
        byte[] resData = response.getContentAsByteArray();
        ByteArrayInputStream st = new ByteArrayInputStream(resData);
        HSSFWorkbook workbook = new HSSFWorkbook(st);
        Sheet sheet = workbook.getSheetAt(0);
        Row dataRow = sheet.getRow(1);
        assertThat(entity.getStateAbbreviation(), is(dataRow.getCell(0).getStringCellValue()));
        assertThat(entity.getDistrictIdentifier(), is(dataRow.getCell(1).getStringCellValue()));
        assertThat(entity.getInstitutionIdentifier(), is(dataRow.getCell(2).getStringCellValue()));
        assertThat(entity.getLastName(), is(dataRow.getCell(3).getStringCellValue()));
        assertThat(entity.getFirstName(), is(dataRow.getCell(4).getStringCellValue()));
        assertThat(entity.getMiddleName(), is(dataRow.getCell(5).getStringCellValue()));
        assertThat(entity.getEntityId(), is(dataRow.getCell(7).getStringCellValue()));
        assertThat(entity.getExternalSsid(), is(dataRow.getCell(8).getStringCellValue()));
        assertThat(entity.getGradeLevelWhenAssessed(),
                is(GradeLevel.fromGrade(dataRow.getCell(9).getStringCellValue())));
        assertThat(entity.getGender().toString(), is(dataRow.getCell(10).getStringCellValue()));
        assertThat(entity.getHispanicOrLatino(), is(dataRow.getCell(11).getStringCellValue()));
        assertThat(entity.getAmericanIndianOrAlaskaNative(), is(dataRow.getCell(12).getStringCellValue()));
        assertThat(entity.getAsian(), is(dataRow.getCell(13).getStringCellValue()));
        assertThat(entity.getBlackOrAfricanAmerican(), is(dataRow.getCell(14).getStringCellValue()));
        assertThat(entity.getWhite(), is(dataRow.getCell(15).getStringCellValue()));
        assertThat(entity.getNativeHawaiianOrPacificIsland(), is(dataRow.getCell(16).getStringCellValue()));
        assertThat(entity.getTwoOrMoreRaces(), is(dataRow.getCell(17).getStringCellValue()));
        assertThat(entity.getiDEAIndicator(), is(dataRow.getCell(18).getStringCellValue()));
        assertThat(entity.getLepStatus().toString(), is(dataRow.getCell(19).getStringCellValue()));
        assertThat(dataRow.getCell(20).getStringCellValue(), is(entity.getSection504Status()));
        assertThat(entity.getDisadvantageStatus(), is(dataRow.getCell(21).getStringCellValue()));
        assertThat(entity.getLanguageCode(), is(dataRow.getCell(22).getStringCellValue()));
        assertThat(entity.getTitle3ProgressStatus().toString(), is(dataRow.getCell(23).getStringCellValue()));
        assertThat(entity.getMigrantStatus(), is(dataRow.getCell(24).getStringCellValue()));
        assertThat(Title3ProgramType.valueOf(dataRow.getCell(28).getStringCellValue()),
                is(entity.getTitle3ProgramType()));
        assertThat(entity.getPrimaryDisabilityType().toString(), is(dataRow.getCell(29).getStringCellValue()));
    }

    @Test
    @ApiDocExample(rank = -1)
    // TODO: Expected and Actual values are misplaced in asserts. Needed to be fixed.
    public void exportToCsvWithExtension() throws Exception {
        Student entity = callPOSTRestService("/student", params, Student.class, STUDENT_MODIFY);
        assertEquals("Student should be created", 1, mongoTemplate.findAll(Student.class).size());
        assertNotNull(entity);

        MockHttpServletResponse response = callGETRestService1("/students.csv", STUDENT_READ);
        assertNotNull(response);
        assertEquals("Content-Type is not equal application/csv", com.google.common.net.MediaType.CSV_UTF_8.toString(),
                response.getContentType());
        assertNotNull("Student Export CSV Data is null", response.getContentAsByteArray());
        byte[] resData = response.getContentAsByteArray();

        ByteArrayInputStream st = new ByteArrayInputStream(resData);
        BufferedReader reader = new BufferedReader(new InputStreamReader(st));
        CSVReader cvsReader = new CSVReader(reader);
        cvsReader.readNext();
        String[] dataRow = cvsReader.readNext();
        assertThat(entity.getStateAbbreviation(), is(dataRow[0]));
        assertThat(entity.getDistrictIdentifier(), is(dataRow[1]));
        assertThat(entity.getInstitutionIdentifier(), is(dataRow[2]));
        assertThat(entity.getLastName(), is(dataRow[3]));
        assertThat(entity.getFirstName(), is(dataRow[4]));
        assertThat(entity.getMiddleName(), is(dataRow[5]));
        assertThat(entity.getEntityId(), is(dataRow[7]));
        assertThat(entity.getExternalSsid(), is(dataRow[8]));
        assertThat(entity.getGradeLevelWhenAssessed(), is(GradeLevel.fromGrade(dataRow[9])));
        assertThat(entity.getGender().toString(), is(dataRow[10]));
        assertThat(entity.getHispanicOrLatino(), is(dataRow[11]));
        assertThat(entity.getAmericanIndianOrAlaskaNative(), is(dataRow[12]));
        assertThat(entity.getAsian(), is(dataRow[13]));
        assertThat(entity.getBlackOrAfricanAmerican(), is(dataRow[14]));
        assertThat(entity.getWhite(), is(dataRow[15]));
        assertThat(entity.getNativeHawaiianOrPacificIsland(), is(dataRow[16]));
        assertThat(entity.getTwoOrMoreRaces(), is(dataRow[17]));
        assertThat(entity.getiDEAIndicator(), is(dataRow[18]));
        assertThat(entity.getLepStatus(), is(dataRow[19]));
        assertThat(dataRow[20], is(entity.getSection504Status()));
        assertThat(entity.getDisadvantageStatus(), is(dataRow[21]));
        assertThat(entity.getLanguageCode(), is(dataRow[22]));
        assertThat(entity.getTitle3ProgressStatus().toString(), is(dataRow[23]));
        assertThat(entity.getMigrantStatus(), is(dataRow[24]));
        assertThat(Title3ProgramType.valueOf(dataRow[28]), is(entity.getTitle3ProgramType()));
        assertThat(entity.getPrimaryDisabilityType().toString(), is(dataRow[29]));
        cvsReader.close();
    }
}
