/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.integration;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.Matchers.hasSize;
import static org.junit.Assert.assertThat;
import static org.opentestsystem.delivery.testreg.domain.TestRegPermission.ENTITY_MODIFY;

import java.util.List;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.Subject;
import org.opentestsystem.shared.search.domain.SearchResponse;

import com.google.common.collect.Maps;

/**
 * Test class for Subject controller.
 */
@SuppressWarnings("unchecked")
public class SubjectControllerTest extends AbstractSecuredRestEmbeddedMongoTest {

    private Map<String, Object> params;
    
    @Before
    public void buildParams() {       
        params = Maps.newHashMap();
        params.put("code", "MATH");
    }

    
    @Test
    public void saveSubject() throws InterruptedException {
        Subject savedSubject = callPOSTRestService("/subject", params, Subject.class);
        assertThat("saved Subject", savedSubject, notNullValue());
        assertThat("saved Subject", savedSubject.getId(), notNullValue());

        List<Subject> subjects = mongoTemplate.findAll(Subject.class);
        assertThat("subjects", subjects, notNullValue());
        assertThat("subjects", subjects, hasSize(1));
    }

    @Test
    public void updateSubject() throws InterruptedException {
        Subject savedSubject = callPOSTRestService("/subject", params, Subject.class);
        assertThat("saved Subject", savedSubject, notNullValue());
        assertThat("saved Subject", savedSubject.getId(), notNullValue());

        params.put("id", savedSubject.getId());
        params.put("code", "MATHEMATICS");
        Subject updatedSubject = callPUTRestService("/subject/" + savedSubject.getId(), params, Subject.class);
        assertThat("updated subject", updatedSubject, notNullValue());
        assertThat("updated subject", updatedSubject.getCode(), equalTo("MATHEMATICS"));
    }

    @Test
    public void removeSubject() throws InterruptedException {
        Subject savedSubject = callPOSTRestService("/subject", params, Subject.class);
        assertThat("saved Subject", savedSubject, notNullValue());
        assertThat("saved Subject", savedSubject.getId(), notNullValue());
        
        callDeleteRestService("/subject/" + savedSubject.getId());
        Subject fetchedSubject = callGETRestService("/subject/" + savedSubject.getId(), Subject.class);
        assertThat("fetched subject", fetchedSubject, nullValue());
    }

    @Test
    public void findSubject() throws InterruptedException {
        Subject savedSubject = callPOSTRestService("/subject", params, Subject.class);
        assertThat("saved Subject", savedSubject, notNullValue());
        assertThat("saved Subject", savedSubject.getId(), notNullValue());

        Subject fetchedSubject = callGETRestService("/subject/" + savedSubject.getId(), Subject.class);
        assertThat("fetched Subject", fetchedSubject, notNullValue());
        assertThat("fetched Subject", fetchedSubject.getId(), notNullValue());
        assertThat("fetched Subject", fetchedSubject.getId(), equalTo(savedSubject.getId()));
    }
    
    @Test
    public void searchSubjects() throws InterruptedException {
        Subject savedSubject = callPOSTRestService("/subject", params, Subject.class);
        assertThat("saved Subject", savedSubject, notNullValue());
        assertThat("saved Subject", savedSubject.getId(), notNullValue());

        // search by entityId exact
        Map<String, String> searchParams = Maps.newHashMap();
        searchParams.put("code", "MATH");
        SearchResponse<Subject> response = callGETRestService("/subject" + buildQueryString(searchParams), SearchResponse.class);
        assertThat("Subjects", response.getSearchResults(), notNullValue());
        assertThat("Subjects", response.getSearchResults(), hasSize(1));
    }
    
    @Test
    public void findAllSubjects() throws InterruptedException {
        Subject savedSubject = callPOSTRestService("/subject", params, Subject.class);
        assertThat("saved Subject", savedSubject, notNullValue());
        assertThat("saved Subject", savedSubject.getId(), notNullValue());

        List<Subject> subjects = callGETRestService("/subjects", List.class);
        assertThat("Subjects", subjects, notNullValue());
        assertThat("Subjects", subjects, hasSize(1));
    }
    

  }