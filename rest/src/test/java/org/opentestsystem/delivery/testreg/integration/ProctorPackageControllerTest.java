/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.integration;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.core.StringContains.containsString;
import static org.hamcrest.core.StringEndsWith.endsWith;
import static org.junit.Assert.assertThat;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.joda.time.DateTime;
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.opentestsystem.delivery.testreg.domain.Assessment;
import org.opentestsystem.delivery.testreg.domain.Assessment.EligibilityType;
import org.opentestsystem.delivery.testreg.domain.Assessment.TestWindow;
import org.opentestsystem.delivery.testreg.domain.EligibleStudent;
import org.opentestsystem.delivery.testreg.domain.StateEntity;
import org.opentestsystem.delivery.testreg.service.ProctorPackageService;
import org.opentestsystem.delivery.testreg.service.Sb11EntityRepositoryService;
import org.opentestsystem.shared.progman.client.domain.Tenant;
import org.opentestsystem.shared.progman.client.domain.TenantType;
import org.opentestsystem.shared.security.domain.SbacEntity;
import org.opentestsystem.shared.security.service.TenancyService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;

import com.google.common.collect.Lists;
import com.google.common.collect.Sets;

public class ProctorPackageControllerTest extends AbstractSecuredRestEmbeddedMongoTest {

    MockHttpServletRequestBuilder request;

    @InjectMocks
    @Autowired
    private ProctorPackageService proctorPackageService;

    @Mock
    private TenancyService tenancyService;

    @Mock
    private Sb11EntityRepositoryService sb11EntityService;

    @Before
    public void setup() {

        MockitoAnnotations.initMocks(this);

        Mockito.when(sb11EntityService.findAllByEntityId("AK", StateEntity.class)).thenReturn(
                Lists.newArrayList(new StateEntity("AK", "Alaska")));

        Tenant stateOfAkTenant = new Tenant();
        stateOfAkTenant.setId("Tenant-01");
        stateOfAkTenant.setName("AK");
        stateOfAkTenant.setType(TenantType.STATE);

        Mockito.when(
                tenancyService.getApplicableTenants(Sets.newHashSet(new SbacEntity(TenantType.STATE, "AK", "nothing"))))
                .thenReturn(Lists.newArrayList(stateOfAkTenant));

        request = get("/proctorassessments").param("entityLevel", "STATE").param("entityName", "AK")
                .accept(MediaType.APPLICATION_XML);
    }

    public void preloadEligibleAssessment() throws Exception {
        Assessment assessment = new Assessment();
        assessment.setEligibilityType(EligibilityType.EXPLICIT);
        assessment.setDelayRule(3);
        assessment.setEntityId("10001");
        assessment.setNumGlobalOpportunities(4);
        assessment.setSubjectCode("ELA 01");
        assessment.setTestName("English Language Arts PK");
        assessment.setVersion("1.0");
        assessment.setTenantId("Tenant-01");
        assessment.setTestWindow(new TestWindow[] {
                new TestWindow(DateTime.now().minusDays(2), DateTime.now().plusDays(2), 1),
                new TestWindow(DateTime.now().plusDays(4), DateTime.now().plusDays(6), 3) });
        assessment.setId("537cd61ee4b06186abde6dbd");
        mongoTemplate.insert(assessment);

        EligibleStudent eligStudent = new EligibleStudent();
        eligStudent.addAssessment(assessment);
        mongoTemplate.insert(eligStudent);
    }

    @Test
    public void exportProctorPackage() throws Exception {
        preloadEligibleAssessment();
        MvcResult result = mockMvc.perform(request).andExpect(status().isOk()).andReturn();
        String responseGet = result.getResponse().getContentAsString();
        assertThat(responseGet, is(notNullValue()));
        assertThat(responseGet, containsString("<Tests><Test>"));
        assertThat(responseGet, endsWith("</Proctor></ProctorPackage>"));
    }

    @Test
    public void exportProctorPackageWithDate() throws Exception {
        preloadEligibleAssessment();
        MvcResult result = mockMvc.perform(request.param("date", DateTime.now().toString("YYYY-MM-dd")))
                .andExpect(status().isOk()).andReturn();
        String responseGet = result.getResponse().getContentAsString();
        assertThat(responseGet, is(notNullValue()));
        assertThat(responseGet, containsString("<Tests><Test>"));
        assertThat(responseGet, endsWith("</Proctor></ProctorPackage>"));
    }

    @Test
    public void exportProctorPackageNoEligibleAssessment() throws Exception {
        /*
         * Do not pre-load any assessments
         */
        MvcResult result = mockMvc.perform(request).andExpect(status().isOk()).andReturn();
        String responseGet = result.getResponse().getContentAsString();
        assertThat(responseGet, is(notNullValue()));
        assertThat(responseGet, containsString("<Tests></Tests>"));
    }

}
