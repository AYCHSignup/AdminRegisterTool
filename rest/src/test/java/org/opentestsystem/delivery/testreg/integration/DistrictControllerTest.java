/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.integration;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.Matchers.hasSize;
import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertThat;
import static org.opentestsystem.delivery.testreg.domain.TestRegPermission.ENTITY_MODIFY;
import static org.opentestsystem.delivery.testreg.domain.TestRegPermission.ENTITY_READ;
import static org.opentestsystem.delivery.testreg.domain.TestRegPermission.STUDENTGROUP_READ;
import static org.opentestsystem.delivery.testreg.domain.TestRegPermission.STUDENT_READ;
import static org.opentestsystem.delivery.testreg.domain.TestRegPermission.USER_READ;
import static org.springframework.test.util.ReflectionTestUtils.setField;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.InputStreamReader;
import java.util.List;
import java.util.Map;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.opentestsystem.delivery.CachedClientEntity;
import org.opentestsystem.delivery.testreg.domain.ClientEntity;
import org.opentestsystem.delivery.testreg.domain.DistrictEntity;
import org.opentestsystem.delivery.testreg.domain.GroupOfStatesEntity;
import org.opentestsystem.delivery.testreg.domain.HierarchyLevel;
import org.opentestsystem.delivery.testreg.domain.InstitutionEntity;
import org.opentestsystem.delivery.testreg.domain.StateEntity;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.domain.Student.Gender;
import org.opentestsystem.delivery.testreg.domain.Student.GradeLevel;
import org.opentestsystem.delivery.testreg.domain.Student.PrimaryDisabilityType;
import org.opentestsystem.delivery.testreg.domain.Student.Title3ProgramType;
import org.opentestsystem.delivery.testreg.domain.StudentGroup;
import org.opentestsystem.delivery.testreg.domain.User;
import org.opentestsystem.delivery.testreg.domain.User.RoleAssociation;
import org.opentestsystem.delivery.testreg.persistence.criteria.ParentEntityTypeValidator;
import org.opentestsystem.shared.docs.annotation.ApiDocExample;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mock.web.MockHttpServletResponse;

import au.com.bytecode.opencsv.CSVReader;

import com.google.common.collect.Maps;

/**
 * Test class for District controller.
 */
@SuppressWarnings("unchecked")
public class DistrictControllerTest extends AbstractSecuredRestEmbeddedMongoTest {

    @Autowired
    private ParentEntityTypeValidator parentEntityTypeValidator;

    private Map<String, Object> params;
    private Map<String, String> uploadParams;

    @Before
    public void buildParams() {
        // Insert parent entity
        final ClientEntity client = new ClientEntity.Builder("00000", "Test Client",
                "aasdfa-asdfasdf-asdfasdf-asdfasd", "treu").build();
        mongoTemplate.insert(client);
        mongoTemplate.insert(new GroupOfStatesEntity.Builder("12345", "MIDWEST STATES", "CLIENT", "00000", "ADD")
        .build());
        mongoTemplate.insert(new StateEntity.Builder("CA", "California", "CLIENT", "00000", "ADD").build());

        CachedClientEntity clientx = new CachedClientEntity() {
            @Override
            public ClientEntity getClient() {
                return client;
            }
        };

        setField(parentEntityTypeValidator, "cachedClientEntity", clientx);

        params = Maps.newHashMap();
        params.put("entityId", "2344");
        params.put("entityName", "Oakland school District");
        params.put("parentEntityType", HierarchyLevel.GROUPOFSTATES.toString());
        params.put("parentEntityId", "12345");
        params.put("stateAbbreviation", "CA");
        params.put("nationwideIdentifier", "12345678901");
    }

    @Before
    public void buildUploadParams() {
        uploadParams = Maps.newHashMap();
        uploadParams.put("entityId", "2344");
        uploadParams.put("entityName", "Oakland school District");
        uploadParams.put("parentEntityType", HierarchyLevel.CLIENT.toString());
        uploadParams.put("parentEntityId", "101909");
        uploadParams.put("stateAbbreviation", "CA");
        uploadParams.put("nationwideIdentifier", "12345678901");
        uploadParams.put("currentPage", "0");
    }

    @Test
    public void saveDistrict() throws InterruptedException {
        DistrictEntity savedDistrict = callPOSTRestService("/district", params, DistrictEntity.class, ENTITY_MODIFY);
        assertThat("saved district", savedDistrict, notNullValue());
        assertThat("saved district", savedDistrict.getId(), notNullValue());
        assertThat(savedDistrict.getNationwideIdentifier(), is("12345678901"));

        List<DistrictEntity> districts = mongoTemplate.findAll(DistrictEntity.class);
        assertThat("districts", districts, notNullValue());
        assertThat("districts", districts, hasSize(1));
    }

    @Test
    public void updateDistrict() throws InterruptedException {
        DistrictEntity savedDistrict = callPOSTRestService("/district", params, DistrictEntity.class, ENTITY_MODIFY);
        assertThat("saved district", savedDistrict, notNullValue());
        assertThat("saved district", savedDistrict.getId(), notNullValue());

        params.put("id", savedDistrict.getId());
        params.put("parentEntityType", "GROUPOFSTATES");
        DistrictEntity updatedDistrict = callPUTRestService("/district/" + savedDistrict.getId(), params,
                DistrictEntity.class, ENTITY_MODIFY);
        assertThat("updated district", updatedDistrict, notNullValue());
        assertThat("updated district", updatedDistrict.getParentEntityType(), equalTo(HierarchyLevel.GROUPOFSTATES));
    }

    @Test
    public void removeDistrict() throws InterruptedException {
        DistrictEntity savedDistrict = callPOSTRestService("/district", params, DistrictEntity.class, ENTITY_MODIFY);
        assertThat("saved district", savedDistrict, notNullValue());
        assertThat("saved district", savedDistrict.getId(), notNullValue());

        callDeleteRestService("/district/" + savedDistrict.getId(), ENTITY_MODIFY);
        DistrictEntity fetchedDistrict = callGETRestService("/district/" + savedDistrict.getId(), DistrictEntity.class,
                ENTITY_READ);
        assertThat("fetched district", fetchedDistrict, nullValue());
    }

    @Test
    public void findDistrict() throws InterruptedException {
        DistrictEntity savedDistrict = callPOSTRestService("/district", params, DistrictEntity.class, ENTITY_MODIFY);
        assertThat("saved district", savedDistrict, notNullValue());
        assertThat("saved district", savedDistrict.getId(), notNullValue());

        DistrictEntity fetchedDistrict = callGETRestService("/district/" + savedDistrict.getId(), DistrictEntity.class,
                ENTITY_READ);
        assertThat("fetched district", fetchedDistrict, notNullValue());
        assertThat("fetched district", fetchedDistrict.getId(), notNullValue());
        assertThat("fetched district", fetchedDistrict.getId(), equalTo(savedDistrict.getId()));
    }

    @Test
    public void findDistrictByStateId() throws InterruptedException {
        params.put("parentEntityType", HierarchyLevel.STATE.toString());
        params.put("parentEntityId", "CA");
        DistrictEntity savedDistrict = callPOSTRestService("/district", params, DistrictEntity.class, ENTITY_MODIFY);
        assertThat("saved district", savedDistrict, notNullValue());
        assertThat("saved district", savedDistrict.getId(), notNullValue());

        final List<DistrictEntity> fetchedDistricts = callGETRestService("/district?stateId=CA", List.class,
                ENTITY_READ);
        assertThat("fetched districts", fetchedDistricts, notNullValue());
        assertThat("fetched districts", fetchedDistricts, hasSize(1));
    }

    @Test
    public void searchDistricts() throws InterruptedException {
        DistrictEntity savedDistrict = callPOSTRestService("/district", params, DistrictEntity.class, ENTITY_MODIFY);
        assertThat("saved district", savedDistrict, notNullValue());
        assertThat("saved district", savedDistrict.getId(), notNullValue());

        // search by entityId exact
        Map<String, String> searchParams = Maps.newHashMap();
        searchParams.put("entityId", "2344");
        SearchResponse<DistrictEntity> response = callGETRestService("/district" + buildQueryString(searchParams),
                SearchResponse.class, ENTITY_READ);
        assertThat("districts", response.getSearchResults(), notNullValue());
        assertThat("districts", response.getSearchResults(), hasSize(1));
    }

    @Test
    @ApiDocExample(rank = -1)
    public void exportToExcelWithExtension() throws Exception {
        DistrictEntity entity = callPOSTRestService("/district", params, DistrictEntity.class, ENTITY_MODIFY);
        assertEquals("DistrictEntity should be created", 1, mongoTemplate.findAll(DistrictEntity.class).size());
        assertNotNull(entity);

        MockHttpServletResponse response = callGETRestService1("/districts.xls", ENTITY_READ);
        assertNotNull(response);
        assertEquals("Content-Type is not equal application/vnd.ms-excel", "application/vnd.ms-excel",
                response.getContentType());
        assertNotNull("District ExportExcel Data is null", response.getContentAsByteArray());
        byte[] resData = response.getContentAsByteArray();
        ByteArrayInputStream st = new ByteArrayInputStream(resData);
        HSSFWorkbook workbook = new HSSFWorkbook(st);
        Sheet sheet = workbook.getSheetAt(0);

        Row dataRow = sheet.getRow(1);
        assertThat(dataRow.getCell(0).getStringCellValue(), is(entity.getEntityId()));
        assertThat(dataRow.getCell(1).getStringCellValue(), is(entity.getEntityName()));
        assertThat(dataRow.getCell(2).getStringCellValue(), is(entity.getNationwideIdentifier()));
        assertThat(dataRow.getCell(3).getStringCellValue(), is(entity.getParentEntityType().toString()));
        assertThat(dataRow.getCell(4).getStringCellValue(), is("MIDWEST STATES"));// Parent Entity Name
        assertThat(dataRow.getCell(5).getStringCellValue(), is(entity.getStateAbbreviation()));

    }

    @Test
    @ApiDocExample(rank = -1)
    @Ignore
    public void exportToExcelWithPageParams() throws Exception {
        DistrictEntity entity = callPOSTRestService("/district", params, DistrictEntity.class, ENTITY_MODIFY);
        assertEquals("DistrictEntity should be created", 1, mongoTemplate.findAll(DistrictEntity.class).size());
        assertNotNull(entity);

        MockHttpServletResponse response = callGETRestService1("/districts.xls" + buildQueryString(uploadParams),
                ENTITY_READ);
        assertNotNull(response);
        assertEquals("Content-Type is not equal application/vnd.ms-excel", "application/vnd.ms-excel",
                response.getContentType());
        assertNotNull("District ExportExcel Data is null", response.getContentAsByteArray());
        byte[] resData = response.getContentAsByteArray();
        ByteArrayInputStream st = new ByteArrayInputStream(resData);
        HSSFWorkbook workbook = new HSSFWorkbook(st);
        Sheet sheet = workbook.getSheetAt(0);

        Row dataRow = sheet.getRow(1);
        assertThat(entity.getEntityId(), is(dataRow.getCell(0).getStringCellValue()));
        assertThat(entity.getEntityName(), is(dataRow.getCell(1).getStringCellValue()));
        assertThat(entity.getNationwideIdentifier(), is(dataRow.getCell(2).getStringCellValue()));
        assertThat(entity.getParentEntityType().toString(), is(dataRow.getCell(3).getStringCellValue()));
        assertThat(entity.getParentEntityId(), is(dataRow.getCell(4).getStringCellValue()));
        assertThat(entity.getStateAbbreviation(), is(dataRow.getCell(5).getStringCellValue()));

    }

    @Test
    @ApiDocExample(rank = -1)
    public void exportToCSVWithExtension() throws Exception {
        DistrictEntity entity = callPOSTRestService("/district", params, DistrictEntity.class, ENTITY_MODIFY);
        assertEquals("DistrictEntity should be created", 1, mongoTemplate.findAll(DistrictEntity.class).size());
        assertNotNull(entity);

        MockHttpServletResponse response = callGETRestService1("/districts.csv", ENTITY_READ);
        assertNotNull(response);
        assertEquals("Content-Type is not equal application/csv", com.google.common.net.MediaType.CSV_UTF_8.toString(),
                response.getContentType());
        assertNotNull("District Export CSV Data is null", response.getContentAsByteArray());
        byte[] resData = response.getContentAsByteArray();

        ByteArrayInputStream st = new ByteArrayInputStream(resData);
        BufferedReader reader = new BufferedReader(new InputStreamReader(st));
        CSVReader cvsReader = new CSVReader(reader);

        cvsReader.readNext();
        String[] dataRow = cvsReader.readNext();
        assertThat(dataRow[0], is(entity.getEntityId()));
        assertThat(dataRow[1], is(entity.getEntityName()));
        assertThat(dataRow[2], is(entity.getNationwideIdentifier()));
        assertThat(dataRow[3], is(entity.getParentEntityType().toString()));
        assertThat(dataRow[4], is("MIDWEST STATES"));// Parent Entity Name
        assertThat(dataRow[5], is(entity.getStateAbbreviation()));
        cvsReader.close();
    }

    @Test
    public void updateEntityIdTest() {
        DistrictEntity savedDistrict = callPOSTRestService("/district", params, DistrictEntity.class, ENTITY_MODIFY);
        assertThat("saved district", savedDistrict, notNullValue());
        assertThat("saved district", savedDistrict.getEntityId(), equalTo("2344"));
        // associate institution to district
        mongoTemplate.insert(new InstitutionEntity.Builder("10001", "MDS SCHOOL", "DISTRICT", "991919", "2344", "CA",
                "ADD").build());
        // associate user to district
        User user = createUser();
        mongoTemplate.insert(user);
        // associate student to district
        Student student = createStudent(savedDistrict.getId());
        mongoTemplate.insert(student);
        // associate student group to district
        StudentGroup studentGroup = createStudentGroup(savedDistrict.getId());
        mongoTemplate.insert(studentGroup);

        final List<InstitutionEntity> fetchedInstitutions = callGETRestService("/institution?districtId=2344",
                List.class, ENTITY_READ);
        assertThat("fetched institution", fetchedInstitutions, notNullValue());
        assertThat("fetched institution", fetchedInstitutions, hasSize(1));

        // now update the district entity Id
        params.put("id", savedDistrict.getId());
        params.put("entityId", "2300");
        DistrictEntity updatedDistrict = callPUTRestService("/district/" + savedDistrict.getId(), params,
                DistrictEntity.class, ENTITY_MODIFY);
        assertThat("updated district", updatedDistrict, notNullValue());
        assertThat("updated district", updatedDistrict.getEntityId(), equalTo("2300"));

        // institution entity id must be updated to new id
        final List<InstitutionEntity> fetchedInstitutions1 = callGETRestService("/institution?districtId=2344",
                List.class, ENTITY_READ);
        assertThat("fetched institution", fetchedInstitutions1, notNullValue());
        assertThat("fetched institution", fetchedInstitutions1, hasSize(0));

        // find user
        final User fetchedUser = callGETRestService("/user/" + user.getId(), User.class, USER_READ);
        assertThat("fetched user", fetchedUser, notNullValue());
        assertThat("fetched user", fetchedUser.getRoleAssociations().get(0).getAssociatedEntityId(), equalTo("2300"));

        // find Student
        final Student fetchedStudent = callGETRestService("/student/" + student.getId(), Student.class, STUDENT_READ);
        assertThat("fetched student", fetchedStudent, notNullValue());
        assertThat("fetched student", fetchedStudent.getDistrictIdentifier(), equalTo("2300"));

        // find Student group
        final StudentGroup fetchedStudentGroup = callGETRestService("/studentGroup/" + studentGroup.getId(),
                StudentGroup.class, STUDENTGROUP_READ);
        assertThat("fetched student group", fetchedStudentGroup, notNullValue());
        assertThat("fetched student group", fetchedStudentGroup.getDistrictIdentifier(), equalTo("2300"));
    }

    private User createUser() {
        User user = new User();
        user.setFirstName("Bob");
        user.setLastName("Smith");
        user.setEmail("bob@smith.com");
        RoleAssociation roles = new RoleAssociation();
        roles.setRole("Admin");
        roles.setStateAbbreviation("CA");
        roles.setLevel(HierarchyLevel.DISTRICT);
        roles.setAssociatedEntityId("2344");
        user.addRoleAssociation(roles);
        return user;
    }

    private Student createStudent(final String districtId) {
        Student student = new Student();
        student.setEntityId("123456");
        student.setStateAbbreviation("CA");
        student.setDistrictIdentifier("2344");
        student.setDistrictEntityMongoId(districtId);
        student.setInstitutionIdentifier("10001");
        student.setMiddleName("MS");
        student.setFirstName("Joe");
        student.setLastName("Smith");
        student.setBirthDate("2013-10-10");
        student.setExternalSsid("WI12345");
        student.setGradeLevelWhenAssessed(GradeLevel.EIGHTHGRADE);
        student.setGender(Gender.Male);
        student.setHispanicOrLatino("NO");
        student.setAmericanIndianOrAlaskaNative("NO");
        student.setAsian("NO");
        student.setLanguageCode("eng");
        student.setBlackOrAfricanAmerican("NO");
        student.setWhite("Yes");
        student.setNativeHawaiianOrPacificIsland("NO");
        student.setTwoOrMoreRaces("NO");
        student.setiDEAIndicator("NO");
        student.setLepStatus("NO");
        student.setSection504Status("NO");
        student.setDisadvantageStatus("YES");
        student.setTitle3ProgressStatus("PROFICIENT");
        student.setMigrantStatus("YES");
        student.setFirstEntryDateIntoUsSchool("2014-09-01");
        student.setLepEntryDate("2010-10-10");
        student.setLepExitDate("2010-10-20");
        student.setTitle3ProgramType(Title3ProgramType.DUALLANGUAGE);
        student.setPrimaryDisabilityType(PrimaryDisabilityType.AUT);
        return student;
    }

    private StudentGroup createStudentGroup(final String districtId) {
        StudentGroup studentGroup = new StudentGroup();
        studentGroup.setStudentId("STU1");
        studentGroup.setStudentGroupName("student group 1");
        studentGroup.setInstitutionIdentifier("10001");
        studentGroup.setDistrictIdentifier("2344");
        studentGroup.setDistrictEntityMongoId(districtId);
        studentGroup.setOwnerEmail("asf@gmail.com");
        studentGroup.setStateAbbreviation("CA");
        return studentGroup;

    }
}
