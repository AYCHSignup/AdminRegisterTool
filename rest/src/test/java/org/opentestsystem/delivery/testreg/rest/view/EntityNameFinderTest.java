/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.rest.view;

import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;

import java.util.HashMap;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.GroupOfDistrictsEntity;
import org.opentestsystem.delivery.testreg.domain.HierarchyLevel;
import org.opentestsystem.delivery.testreg.domain.TestRegistrationBase;
import org.opentestsystem.delivery.testreg.persistence.HierarchyLevelToFormatTypeConverter;
import org.opentestsystem.delivery.testreg.rest.view.EntityNameFinder;
import org.springframework.core.convert.support.GenericConversionService;
import org.springframework.test.util.ReflectionTestUtils;

public class EntityNameFinderTest {
    
    private EntityNameFinder entityNameFinder;
    
    @SuppressWarnings("serial")
    @Before
    public void setup() {
        entityNameFinder = new EntityNameFinder();
        GenericConversionService conversionService = new GenericConversionService();
        conversionService.addConverter(new HierarchyLevelToFormatTypeConverter(conversionService));
        ReflectionTestUtils.setField(entityNameFinder, "conversionService", conversionService);
        ReflectionTestUtils.setField(entityNameFinder, "entityService", new MockTestRegPerisister(){
            @SuppressWarnings("unchecked")
            public <T extends TestRegistrationBase> T findById(final String pkId, final FormatType formatType) {
                GroupOfDistrictsEntity de = new GroupOfDistrictsEntity();
                de.setEntityName("testParentEntity");
                return (T)de;
            }
        });
        ReflectionTestUtils.setField(entityNameFinder, "headersMap", new HashMap<String, String[]>(){{
            put("DISTRICT", new String[]{"Local Education Agency Identifier", "Organization Name", "NCESLEAID", "Parent Entity Type", "Parent Entity Name", "State Abbreviation"});
        }});
    }
    
    @Test
    public void testFindEntityNameIndex() {
       assertThat(entityNameFinder.findEntityNameIndex(FormatType.DISTRICT, "NCESLEAID"), is(2));
       assertThat(entityNameFinder.findEntityNameIndex(FormatType.DISTRICT, "Parent Entity Name"), is(4));
    }
    
    @Test
    public void testGetEntityName()  {
        assertThat(entityNameFinder.getEntityName("6677", HierarchyLevel.DISTRICT), is("testParentEntity"));
    }

}
