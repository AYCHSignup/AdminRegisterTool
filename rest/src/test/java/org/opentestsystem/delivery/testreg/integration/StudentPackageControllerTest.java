/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.integration;

import static java.lang.String.format;
import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;
import static org.junit.Assert.fail;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.io.ByteArrayInputStream;
import java.io.IOException;

import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.opentestsystem.delivery.CachedClientEntity;
import org.opentestsystem.delivery.testreg.domain.Accommodation;
import org.opentestsystem.delivery.testreg.domain.ClientEntity;
import org.opentestsystem.delivery.testreg.domain.DistrictEntity;
import org.opentestsystem.delivery.testreg.domain.InstitutionEntity;
import org.opentestsystem.delivery.testreg.domain.StateEntity;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MvcResult;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.XMLReaderFactory;

import com.google.common.collect.Lists;

public class StudentPackageControllerTest extends AbstractRestEmbeddedMongoTest {

    private static final String GET_SSID_URL = "/studentpackage?ssid=%s&stateabbreviation=%s";

    private static final String GET_EXTERNALID_URL = "/studentpackage?externalId=%s&stateabbreviation=%s";

    String stateAbbreviation = "WI";
    String studentId = "12345";
    String externalId = "WI12345";

    @Autowired
    private CachedClientEntity cachedClientEntity;

    @Before
    public void setup() {
        // Insert Dependent Entities
        this.mongoTemplate.insert(new StateEntity.Builder(this.stateAbbreviation, "Wisconsin", "CLIENT", "00001", "ADD").build());
        this.mongoTemplate.insert(new DistrictEntity.Builder("101", "MDW", "99190", "CLIENT", "00001", this.stateAbbreviation, "ADD").build());
        this.mongoTemplate.insert(new InstitutionEntity.Builder("10001", "MDS SCHOOL", "DISTRICT", "991919", "101", this.stateAbbreviation, "ADD").build());

        final Student student = new Student.Builder(this.stateAbbreviation, "101", "10001", "LastNameTest", "FNTest",
                "MS", "1913-10-10", this.studentId, this.externalId, "THIRDGRADE", "MALE", "Yes", "NO",
                "NO", "NO", "NO", "NO", "NO", "NO",
                "NO", "NO", "YES", "tel", "PROGRESS", "YES", "2010-09-01", "2010-10-10", "2010-10-20", "DualLanguage", "AUT", "N").build();
        final Accommodation accommodation = new Accommodation.Builder(this.studentId, this.stateAbbreviation, "ELA", "TDS_ASL0", "TDS_CCYellowB",
                "TDS_ClosedCap1", "ENU-Braille", "TDS_Masking1", "TDS_PM1", "TDS_PoD_Stim", "TDS_PS_L3",
                "TDS_TS_Accessibility", "TDS_TTS_Stim&TDS_TTS_Item", "TDS_WL_VietnameseGloss&TDS_WL_Glossary", "NEDS_TKorean",
                "NEA_STT", "Hello").build();
        //student.setAccommodations(Lists.newArrayList(accommodation));

        this.mongoTemplate.insert(student);
    }

    private String isShareIdentity() {
        final ClientEntity client = this.cachedClientEntity.getClient();
        return client.isShareStudentIdentity() ? "Yes" : "No";
    }

    private ClientEntity getClient() {
        return this.cachedClientEntity.getClient();
    }

    private MvcResult getResult(final String url, final String id) throws Exception {
        return this.mockMvc.perform(get(format(url, id, this.stateAbbreviation)).accept(MediaType.APPLICATION_XML)).andExpect(status().isOk())
                .andReturn();
    }

    @Ignore
    @Test
    public void extractStudentPackageUsingSSID() throws Exception {
        verifytStudentPackage(getResult(GET_SSID_URL, this.studentId));
    }

    @Ignore
    @Test
    public void extractStudentPackageUsingExternalId() throws Exception {
        verifytStudentPackage(getResult(GET_EXTERNALID_URL, this.externalId));
    }

    private void verifytStudentPackage(final MvcResult result) throws Exception {
        final String responseGet = result.getResponse().getContentAsString();
        final String xml = "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>"
                + "<StudentPackage version=\"1.0\">"
                + "<Student>"
                + "<StateAbbreviation>WI</StateAbbreviation>"
                + "<StateName>WISCONSIN</StateName>"
                + "<GroupOfDistrictsIdentifier></GroupOfDistrictsIdentifier>"
                + "<GroupofDistrictsName></GroupofDistrictsName>"
                + "<ResponsibleDistrictIdentifier>101</ResponsibleDistrictIdentifier>"
                + "<OrganizationName>MDW</OrganizationName>"
                + "<GroupOfInstitutionsIdentifier></GroupOfInstitutionsIdentifier>"
                + "<GroupOfInstitutionsName></GroupOfInstitutionsName>"
                + "<ResponsibleInstitutionIdentifier>10001</ResponsibleInstitutionIdentifier>"
                + "<NameOfInstitution>MDS SCHOOL</NameOfInstitution>"
                + "<LastOrSurname>LastNameTest</LastOrSurname>"
                + "<FirstName>FNTest</FirstName>"
                + "<MiddleName>MS</MiddleName>"
                + "<Birthdate>1913-10-10</Birthdate>"
                + "<StudentIdentifier>12345</StudentIdentifier>"
                + "<AlternateSSID>WI12345</AlternateSSID>"
                + "<GradeLevelWhenAssessed>03</GradeLevelWhenAssessed>"
                + "<Sex>Male</Sex>"
                + "<HispanicOrLatinoEthnicity>Yes</HispanicOrLatinoEthnicity>"
                + "<AmericanIndianOrAlaskaNative>No</AmericanIndianOrAlaskaNative>"
                + "<Asian>No</Asian>"
                + "<BlackOrAfricanAmerican>No</BlackOrAfricanAmerican>"
                + "<White>No</White>"
                + "<NativeHawaiianOrOtherPacificIslander>No</NativeHawaiianOrOtherPacificIslander>"
                + "<DemographicRaceTwoOrMoreRaces>No</DemographicRaceTwoOrMoreRaces>"
                + "<IDEAIndicator>No</IDEAIndicator>"
                + "<LEPStatus>No</LEPStatus>"
                + "<Section504Status>No</Section504Status>"
                + "<EconomicDisadvantageStatus>Yes</EconomicDisadvantageStatus>"
                + "<LanguageCode>tel</LanguageCode>"
                + "<EnglishLanguageProficiencyLevel>PROGRESS</EnglishLanguageProficiencyLevel>"
                + "<MigrantStatus>Yes</MigrantStatus>"
                + "<FirstEntryDateIntoUSSchool>2010-09-01</FirstEntryDateIntoUSSchool>"
                + "<LimitedEnglishProficiencyEntryDate>2010-10-10</LimitedEnglishProficiencyEntryDate>"
                + "<LEPExitDate>2010-10-20</LEPExitDate>"
                + "<TitleIIILanguageInstructionProgramType>DualLanguage</TitleIIILanguageInstructionProgramType>"
                + "<PrimaryDisabilityType>AUT</PrimaryDisabilityType>"
                + "<ClientId>" + getClient().getEntityId() + "</ClientId>"
                + "<ClientName>" + getClient().getEntityName() + "</ClientName>"
                + "<ShareIdentityData>" + isShareIdentity() + "</ShareIdentityData>"
                + "<Tests></Tests>"
                + "<Accommodations>"
                + "<Accommodation>"
                + "<SubjectCode>ELA</SubjectCode>"
                + "<AmericanSignLanguage>TDS_ASL0</AmericanSignLanguage>"
                + "<ColorChoice>TDS_CCYellowB</ColorChoice>"
                + "<ClosedCaptioning>TDS_ClosedCap1</ClosedCaptioning>"
                + "<Language>ENU-Braille</Language>"
                + "<Masking>TDS_Masking1</Masking>"
                + "<PermissiveMode>TDS_PM1</PermissiveMode>"
                + "<PrintOnDemand>TDS_PoD_Stim</PrintOnDemand>"
                + "<PrintSize>TDS_PS_L3</PrintSize>"
                + "<StreamlinedInterface>TDS_TS_Accessibility</StreamlinedInterface>"
                + "<TexttoSpeech>TDS_TTS_Stim&amp;TDS_TTS_Item</TexttoSpeech>"
                + "<Translation>TDS_WL_VietnameseGloss&amp;TDS_WL_Glossary</Translation>"
                + "<NonEmbeddedDesignatedSupports>NEDS_TKorean</NonEmbeddedDesignatedSupports>"
                + "<NonEmbeddedAccommodations>NEA_STT</NonEmbeddedAccommodations>"
                + "<Other>Hello</Other>"
                + "</Accommodation>"
                + "</Accommodations>"
                + "<Groups></Groups>"
                + "</Student>"
                + "</StudentPackage>";
        assertThat(responseGet, is(xml));
        checkXMlSyntax(xml);
    }

    private void checkXMlSyntax(final String xml) {
        try {
            XMLReaderFactory.createXMLReader().parse(new InputSource(new ByteArrayInputStream(xml.getBytes())));
        } catch (IOException | SAXException e) {
            fail();
        }
    }
}
