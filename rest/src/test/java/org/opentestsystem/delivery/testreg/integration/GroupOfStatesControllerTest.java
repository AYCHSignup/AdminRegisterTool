/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.integration;

import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertThat;
import static org.junit.Assert.fail;
import static org.opentestsystem.delivery.testreg.domain.TestRegPermission.ENTITY_MODIFY;
import static org.opentestsystem.delivery.testreg.domain.TestRegPermission.ENTITY_READ;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.InputStreamReader;
import java.util.Map;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.ClientEntity;
import org.opentestsystem.delivery.testreg.domain.GroupOfStatesEntity;
import org.opentestsystem.delivery.testreg.domain.HierarchyLevel;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.domain.StateEntity;
import org.opentestsystem.shared.docs.annotation.ApiDocExample;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.mock.web.MockHttpServletResponse;

import au.com.bytecode.opencsv.CSVReader;

import com.google.common.collect.Maps;

@SuppressWarnings("unchecked")
public class GroupOfStatesControllerTest extends AbstractSecuredRestEmbeddedMongoTest {

    private Map<String, Object> params;
    private Map<String, String> uploadParams;

    @Before
    public void buildParams() {
        // Insert parent entity
        mongoTemplate.insert(new ClientEntity.Builder("testclient", "test client", "asfas-asdf-asdf-asdf", "true").build());

        params = Maps.newHashMap();
        params.put("entityId", "1234");
        params.put("entityName", "MIDWEST GROUP");
        params.put("parentEntityType", HierarchyLevel.CLIENT);
        params.put("parentEntityId", "testclient");

        uploadParams = Maps.newHashMap();
        uploadParams.put("entityId", "1234");
    }

    @Test
    public void saveGroupOfStatesEntity() throws InterruptedException {
        GroupOfStatesEntity savedGroupOfStatesEntity = callPOSTRestService("/groupofstates", params,
                GroupOfStatesEntity.class, ENTITY_MODIFY);
        assertEquals("GroupOfStatesEntity should be created", 1, mongoTemplate.findAll(GroupOfStatesEntity.class)
                .size());
        assertNotNull(savedGroupOfStatesEntity);
    }

    @Test
    public void updateGroupOfStatesEntity() throws InterruptedException {
        GroupOfStatesEntity savedGroupOfStatesEntity = callPOSTRestService("/groupofstates", params,
                GroupOfStatesEntity.class, ENTITY_MODIFY);
        assertNotNull(savedGroupOfStatesEntity);
        params.put("id", savedGroupOfStatesEntity.getId());
        params.put("entityId", "890");
        GroupOfStatesEntity updatedGroupOfStatesEntity = callPUTRestService("/groupofstates/"
                + savedGroupOfStatesEntity.getId(), params, GroupOfStatesEntity.class, ENTITY_MODIFY);
        assertNotNull(updatedGroupOfStatesEntity);
        assertEquals("GroupOfStatesEntity should be updated", updatedGroupOfStatesEntity.getEntityId(), "890");
    }

    @Test
    public void findGroupOfStatesEntity() throws InterruptedException {
        GroupOfStatesEntity savedGroupOfStatesEntity = callPOSTRestService("/groupofstates", params,
                GroupOfStatesEntity.class, ENTITY_MODIFY);
        assertEquals("GroupOfStatesEntity should be created", 1, mongoTemplate.findAll(GroupOfStatesEntity.class)
                .size());
        assertNotNull(savedGroupOfStatesEntity);
        GroupOfStatesEntity fetchedGroupOfStatesEntity = callGETRestService("/groupofstates/"
                + savedGroupOfStatesEntity.getId(), GroupOfStatesEntity.class, ENTITY_READ);
        assertNotNull("GroupOfStatesEntity was null!", fetchedGroupOfStatesEntity);
    }

    @Test
    public void deleteGroupOfStatesEntity() throws InterruptedException {
        GroupOfStatesEntity savedGroupOfStatesEntity = callPOSTRestService("/groupofstates", params,
                GroupOfStatesEntity.class, ENTITY_MODIFY);
        assertEquals("GroupOfStatesEntity should be created", 1, mongoTemplate.findAll(GroupOfStatesEntity.class)
                .size());
        assertNotNull(savedGroupOfStatesEntity);
        try {
            callDeleteRestService("/groupofstates/" + savedGroupOfStatesEntity.getId(), ENTITY_MODIFY);
        } catch (Exception e) {
            fail("Cannot delete configuration");
        }
        GroupOfStatesEntity fetchedGroupOfStatesEntity = callGETRestService("/groupofstates/"
                + savedGroupOfStatesEntity.getId(), GroupOfStatesEntity.class, ENTITY_READ);
        assertNull("GroupOfStatesEntity was null!", fetchedGroupOfStatesEntity);
    }

    @Test
    @ApiDocExample(rank = -1)
    public void deleteFailureWhenChildExists() throws InterruptedException {
        GroupOfStatesEntity savedGroupOfStatesEntity = callPOSTRestService("/groupofstates", params, GroupOfStatesEntity.class, ENTITY_MODIFY);
        assertEquals("GroupOfStatesEntity should be created", 1, mongoTemplate.findAll(GroupOfStatesEntity.class).size());
        assertNotNull(savedGroupOfStatesEntity);
        // Insert child entity with just used group of states as parent
        StateEntity stateEntity = new StateEntity.Builder("WI", "WISCONSIN", "GROUPOFSTATES", savedGroupOfStatesEntity.getEntityId(), "ADD").build();
        stateEntity.setParentId(savedGroupOfStatesEntity.getId());
        mongoTemplate.insert(stateEntity);
        assertEquals("StateEntity should be created", 1, mongoTemplate.findAll(StateEntity.class).size());
        callDeleteRestServiceForBadRequest("/groupofstates/" + savedGroupOfStatesEntity.getId(), ENTITY_MODIFY);
        // Group of states should not be deleted
        GroupOfStatesEntity fetchedGroupOfStatesEntity = callGETRestService("/groupofstates/" + savedGroupOfStatesEntity.getId(), GroupOfStatesEntity.class, ENTITY_READ);
        assertNotNull("GroupOfStatesEntity was null!", fetchedGroupOfStatesEntity);
    }

    @Test
    public void searchGroupOfStatesEntity() throws InterruptedException {
        GroupOfStatesEntity savedGroupOfStatesEntity = callPOSTRestService("/groupofstates", params,
                GroupOfStatesEntity.class, ENTITY_MODIFY);
        assertEquals("GroupOfStatesEntity should be created", 1, mongoTemplate.findAll(GroupOfStatesEntity.class)
                .size());
        assertNotNull(savedGroupOfStatesEntity);

        Map<String, String> params = Maps.newHashMap();
        params.put("entityId", savedGroupOfStatesEntity.getEntityId());
        SearchResponse<Sb11Entity> resp = callGETRestService("/groupofstate" + buildQueryString(params),
                SearchResponse.class, ENTITY_READ);
        assertNotNull(resp);
        assertEquals("only one should be found", 1, resp.getReturnCount());
    }

    @Test
    @ApiDocExample(rank = -1)
    public void exportToExcelWithExtension() throws Exception {
        GroupOfStatesEntity entity = callPOSTRestService("/groupofstates", params, GroupOfStatesEntity.class, ENTITY_MODIFY);
        assertEquals("GroupOfStatesEntity should be created", 1, mongoTemplate.findAll(GroupOfStatesEntity.class)
                .size());
        assertNotNull(entity);

        MockHttpServletResponse response = callGETRestService1("/groupofstates.xls", ENTITY_READ);
        assertNotNull(response);
        assertEquals("Content-Type is not equal application/vnd.ms-excel", "application/vnd.ms-excel",
                response.getContentType());
        assertNotNull("State ExportExcel Data is null", response.getContentAsByteArray());
        byte[] resData = response.getContentAsByteArray();
        ByteArrayInputStream st = new ByteArrayInputStream(resData);
        HSSFWorkbook workbook = new HSSFWorkbook(st);
        Sheet sheet = workbook.getSheetAt(0);
        Row dataRow = sheet.getRow(1);
        assertThat(dataRow.getCell(0).getStringCellValue(), is(entity.getEntityId()));
        assertThat(dataRow.getCell(1).getStringCellValue(), is(entity.getEntityName()));
        assertThat(dataRow.getCell(2).getStringCellValue(), is(entity.getParentEntityType().toString()));
        assertThat(dataRow.getCell(3).getStringCellValue(), is("test client"));// Parent Entity Name
    }

    @Test
    @ApiDocExample(rank = -1)
    public void exportToExcelWithPageParams() throws Exception {
        GroupOfStatesEntity entity = callPOSTRestService("/groupofstates", params, GroupOfStatesEntity.class, ENTITY_MODIFY);
        assertEquals("GroupOfStatesEntity should be created", 1, mongoTemplate.findAll(GroupOfStatesEntity.class)
                .size());
        assertNotNull(entity);

        MockHttpServletResponse response = callGETRestService1("/groupofstates.xls" + buildQueryString(uploadParams), ENTITY_READ);
        assertNotNull(response);
        assertEquals("Content-Type is not equal application/vnd.ms-excel", "application/vnd.ms-excel",
                response.getContentType());
        assertNotNull("State ExportExcel Data is null", response.getContentAsByteArray());
        byte[] resData = response.getContentAsByteArray();
        ByteArrayInputStream st = new ByteArrayInputStream(resData);
        HSSFWorkbook workbook = new HSSFWorkbook(st);
        Sheet sheet = workbook.getSheetAt(0);
        Row dataRow = sheet.getRow(1);
        assertThat(dataRow.getCell(0).getStringCellValue(), is(entity.getEntityId()));
        assertThat(dataRow.getCell(1).getStringCellValue(), is(entity.getEntityName()));
        assertThat(dataRow.getCell(2).getStringCellValue(), is(entity.getParentEntityType().toString()));
        assertThat(dataRow.getCell(3).getStringCellValue(), is("test client"));// Parent Entity Name
    }

    @Test
    @ApiDocExample(rank = -1)
    public void exportToCSVWithExtension() throws Exception {
        GroupOfStatesEntity entity = callPOSTRestService("/groupofstates", params, GroupOfStatesEntity.class, ENTITY_MODIFY);
        assertEquals("GroupOfStatesEntity should be created", 1, mongoTemplate.findAll(GroupOfStatesEntity.class)
                .size());
        assertNotNull(entity);
        MockHttpServletResponse response = callGETRestService1("/groupofstates.csv", ENTITY_READ);
        assertNotNull(response);
        assertEquals("Content-Type is not equal application/csv", com.google.common.net.MediaType.CSV_UTF_8.toString(),
                response.getContentType());
        assertNotNull("State Export CSV Data is null", response.getContentAsByteArray());
        byte[] resData = response.getContentAsByteArray();

        ByteArrayInputStream st = new ByteArrayInputStream(resData);
        BufferedReader reader = new BufferedReader(new InputStreamReader(st));
        CSVReader cvsReader = new CSVReader(reader);
        cvsReader.readNext();
        String[] dataRow = cvsReader.readNext();
        assertThat(dataRow[0], is(entity.getEntityId()));
        assertThat(dataRow[1], is(entity.getEntityName()));
        assertThat(dataRow[2], is(entity.getParentEntityType().toString()));
        assertThat(dataRow[3], is("test client"));// Parent Entity Name
        cvsReader.close();
    }

    @Test
    @ApiDocExample(rank = -1)
    public void exportToCSVWithPageParams() throws Exception {
        GroupOfStatesEntity entity = callPOSTRestService("/groupofstates", params, GroupOfStatesEntity.class, ENTITY_MODIFY);
        assertEquals("GroupOfStatesEntity should be created", 1, mongoTemplate.findAll(GroupOfStatesEntity.class)
                .size());
        assertNotNull(entity);
        MockHttpServletResponse response = callGETRestService1("/groupofstates.csv" + buildQueryString(uploadParams), ENTITY_READ);
        assertNotNull(response);
        assertEquals("Content-Type is not equal application/csv", com.google.common.net.MediaType.CSV_UTF_8.toString(),
                response.getContentType());
        assertNotNull("State Export CSV Data is null", response.getContentAsByteArray());
        byte[] resData = response.getContentAsByteArray();

        ByteArrayInputStream st = new ByteArrayInputStream(resData);
        BufferedReader reader = new BufferedReader(new InputStreamReader(st));
        CSVReader cvsReader = new CSVReader(reader);
        cvsReader.readNext();
        String[] dataRow = cvsReader.readNext();
        assertThat(dataRow[0], is(entity.getEntityId()));
        assertThat(dataRow[1], is(entity.getEntityName()));
        assertThat(dataRow[2], is(entity.getParentEntityType().toString()));
        assertThat(dataRow[3], is("test client"));// Parent Entity Name
        cvsReader.close();
    }

}
