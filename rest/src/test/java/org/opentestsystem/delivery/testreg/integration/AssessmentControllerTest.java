/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.integration;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.Matchers.containsInAnyOrder;
import static org.hamcrest.Matchers.hasSize;
import static org.junit.Assert.assertThat;
import static org.opentestsystem.delivery.testreg.domain.TestRegPermission.ASSESSMENT_IMPORT;
import static org.opentestsystem.delivery.testreg.domain.TestRegPermission.ASSESSMENT_MODIFY;
import static org.opentestsystem.delivery.testreg.domain.TestRegPermission.ASSESSMENT_READ;

import java.util.Map;
import java.util.Set;

import org.joda.time.DateTime;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.opentestsystem.delivery.testreg.domain.Assessment;
import org.opentestsystem.delivery.testreg.domain.Assessment.EligibilityType;
import org.opentestsystem.delivery.testreg.domain.Assessment.TestWindow;
import org.opentestsystem.delivery.testreg.domain.search.AssessmentSearchRequest;
import org.opentestsystem.shared.search.domain.SearchResponse;

import com.google.common.collect.Maps;

@SuppressWarnings("unchecked")
public class AssessmentControllerTest extends AbstractSecuredRestEmbeddedMongoTest {

    private static final String POST_URL = "/assessment";
    private static final String PUT_URL = "/assessment/";

    public Map<String, Object> params;

    @Rule
    public ExpectedException exception = ExpectedException.none();

    @Before
    public void buildParams() throws Exception {
        params = Maps.newHashMap();
        TestWindow tstWindow = new TestWindow();
        tstWindow.setBeginWindow(new DateTime(2014, 1, 1, 10, 30));
        tstWindow.setEndWindow(new DateTime(2014, 1, 1, 10, 50));
        TestWindow[] tstArray = { tstWindow };
        params.put("numGlobalOpportunities", "1");
        params.put("testWindow", tstArray);
        params.put("testWindow", tstArray);
        params.put("eligibilityType", EligibilityType.EXPLICIT);
        params.put("testName", "test1");
        params.put("version", "1");
        params.put("academicYear", "2014");
    }

    @Test
    public void saveAssessment() throws InterruptedException {
        Assessment savedAssessment = callPOSTRestService(POST_URL, params, Assessment.class, ASSESSMENT_MODIFY);
        assertThat("saved assessment", savedAssessment, notNullValue());
        assertThat("saved assessment id", savedAssessment.getId(), notNullValue());
    }

    @Test
    public void updateAssessment() throws InterruptedException {
        Assessment savedAssessment = callPOSTRestService(POST_URL, params, Assessment.class, ASSESSMENT_MODIFY);
        assertThat("saved assessment", savedAssessment, notNullValue());
        params.put("id", savedAssessment.getId());
        Assessment updatedAssessment = callPUTRestService(PUT_URL + savedAssessment.getId(), params, Assessment.class,
                ASSESSMENT_MODIFY);
        assertThat("saved assessment", updatedAssessment, notNullValue());
    }

    @Test
    public void findAssessment() throws InterruptedException {
        Assessment savedAssessment = callPOSTRestService(POST_URL, params, Assessment.class, ASSESSMENT_MODIFY);
        assertThat("saved assessment", savedAssessment, notNullValue());

        Assessment fetchedAssessment = callGETRestService(PUT_URL + savedAssessment.getId(), Assessment.class,
                ASSESSMENT_READ);
        assertThat("fetched assessment", fetchedAssessment, notNullValue());
        assertThat("Assessment id should be updated", savedAssessment.getId(), equalTo(fetchedAssessment.getId()));
    }

    @Test
    public void removeAssessment() throws InterruptedException {
        Assessment savedAssessment = callPOSTRestService(POST_URL, params, Assessment.class, ASSESSMENT_MODIFY);
        assertThat("saved assessment", savedAssessment, notNullValue());

        callDeleteRestService("/assessment/" + savedAssessment.getId(), ASSESSMENT_IMPORT);

        Assessment fetchedAssessment = callGETRestService("/assessment/" + savedAssessment.getId(), Assessment.class,
                ASSESSMENT_READ);
        assertThat("fetched assessment", fetchedAssessment, nullValue());
    }

    @Test
    public void searchAssessments() throws InterruptedException {
        Assessment savedAssessment = callPOSTRestService("/assessment", params, Assessment.class, ASSESSMENT_MODIFY);
        assertThat("saved assessment", savedAssessment, notNullValue());
        assertThat("saved assessment", savedAssessment.getId(), notNullValue());

        Map<String, String> searchParams = Maps.newHashMap();
        searchParams.put(AssessmentSearchRequest.SEARCH_RAW_XML, "xxxfooxxx");
        SearchResponse<Assessment> response = callGETRestService("/assessment" + buildQueryString(searchParams),
                SearchResponse.class, ASSESSMENT_READ);
        assertThat("assessments", response.getSearchResults(), notNullValue());
        assertThat("assessments", response.getSearchResults(), hasSize(1));
    }

    @Test
    public void getAssessmentTypes() throws InterruptedException {

        Set<String> types = callGETRestService("/assessment/types", Set.class);
        assertThat(types, notNullValue());
        assertThat(
                types,
                containsInAnyOrder(Assessment.AssessmentType.INTERIM.name(),
                        Assessment.AssessmentType.FORMATIVE.name(), Assessment.AssessmentType.SUMMATIVE.name()));
    }

    @Test
    public void findMaxOpportunities() throws InterruptedException {
        Assessment savedAssessment = callPOSTRestService(POST_URL, params, Assessment.class, ASSESSMENT_MODIFY);
        assertThat("saved assessment", savedAssessment, notNullValue());
        params.put("numGlobalOpportunities", "3");
        params.put("delayRule", "1");
        params.put("testName", "test2");
        params.put("version", "1.1");
        Assessment savedAssessment1 = callPOSTRestService(POST_URL, params, Assessment.class, ASSESSMENT_MODIFY);
        assertThat("saved assessment", savedAssessment1, notNullValue());
        Integer fetchedAssessment = callGETRestService("/assessment/maxOpportunities", Integer.class);
        assertThat("sdfsdfsdf", fetchedAssessment, equalTo(3));

    }

}
