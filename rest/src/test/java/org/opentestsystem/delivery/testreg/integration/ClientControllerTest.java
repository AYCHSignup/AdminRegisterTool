/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.integration;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.Matchers.hasSize;
import static org.junit.Assert.assertThat;
import static org.opentestsystem.delivery.testreg.domain.TestRegPermission.CLIENT_ADMINISTRATOR;
import static org.opentestsystem.delivery.testreg.domain.TestRegPermission.ENTITY_READ;

import java.util.List;
import java.util.Map;

import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.ClientEntity;
import org.opentestsystem.delivery.testreg.transformer.domain.DwConfigs;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.collect.Maps;

public class ClientControllerTest extends AbstractSecuredRestEmbeddedMongoTest {

    private Map<String, Object> params;
    @SuppressWarnings("unused")
    private String idOne;
    private String idTwo;

    @Autowired
    private DwConfigs dwConfigs;

    @Before
    public void buildParams() {

        dwConfigs.addSbacDwConfig("test", "test.com", 22, "test", "/test", true, "interim,formative,summative");

        wipeOutUserRoles();

        ClientEntity entity1 = new ClientEntity.Builder("1000", "test client", "asdf-asdf-asfd-asdf", "true").build();
        ClientEntity entity2 = new ClientEntity.Builder("1002", "test client1", "asdf-asdf-asfd-asdf", "true").build();

        mongoTemplate.insert(entity1);
        mongoTemplate.insert(entity2);

        idOne = entity1.getId();
        idTwo = entity2.getId();

        params = Maps.newHashMap();
        params.put("entityId", "1001");
        params.put("entityName", "1001");
        params.put("systemId", "1111");

    }

    @SuppressWarnings("unchecked")
    @Test
    public void testFindAllClients() throws Exception {
        List<ClientEntity> entities = callGETRestService("/clients", List.class, ENTITY_READ);

        assertThat(entities, hasSize(2));
    }

    @Test
    public void testFindClientEntityById() throws Exception {
        ClientEntity entity = callGETRestService("/clients/" + idTwo, ClientEntity.class, ENTITY_READ);

        assertThat(entity, notNullValue());
        assertThat(entity.getEntityId(), is("1002"));
    }

    @Test
    @Ignore
    public void testGetClientEntity() throws Exception {
        ClientEntity entity = callGETRestService("/client", ClientEntity.class, ENTITY_READ);

        assertThat(entity, notNullValue());
        assertThat(entity.getEntityId(), is("1001"));
    }

    @Test
    public void testUpdateClientEntity() throws Exception {

        ClientEntity clientEntity = callGETRestService("/client", ClientEntity.class, ENTITY_READ);
        ClientEntity updatedClientEntity = callPUTRestService("/client/" + clientEntity.getId(), params,
                ClientEntity.class, CLIENT_ADMINISTRATOR);
        assertThat(updatedClientEntity, notNullValue());
        assertThat(updatedClientEntity.getSystemId(), is("1111"));

    }

    @Test
    public void testExportConfigLimit() throws Exception {

        String clientEntity = callGETRestService("/client/exportConfig", String.class, ENTITY_READ);

        assertThat(clientEntity, is("9999"));

    }
}