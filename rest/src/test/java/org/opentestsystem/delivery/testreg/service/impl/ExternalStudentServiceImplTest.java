/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2017 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.service.impl;

import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.rest.external.mapers.StudentMapperTests;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

public class ExternalStudentServiceImplTest {

    @Test
    public void studentsEqualShouldReturnTrue() {
        Student student = StudentMapperTests.createBasicStudent();
        Student student2 = StudentMapperTests.createBasicStudent();
        assertTrue(ExternalStudentServiceImpl.studentsEqual(student, student2));
    }

    @Test
    public void studentsEqualNullArgs() {
        Student student = null;
        Student student2 = null;
        assertTrue(ExternalStudentServiceImpl.studentsEqual(student, student2)); // Both null

        student = StudentMapperTests.createBasicStudent();
        assertFalse(ExternalStudentServiceImpl.studentsEqual(student, student2)); // 2nd null

        student = null;
        student2 = StudentMapperTests.createBasicStudent();
        assertFalse(ExternalStudentServiceImpl.studentsEqual(student, student2)); // 1st null
    }

    @Test
    public void studentsEqualShouldReturnFalseBadStudents() {
        Student student = new Student();
        student.setGender("NONEOFTHEABOVE");
        Student student2 = StudentMapperTests.createBasicStudent();
        assertFalse(ExternalStudentServiceImpl.studentsEqual(student, student2)); // first bad

        student2 = new Student();
        student2.setGender("NONEOFTHEABOVE");
        assertFalse(ExternalStudentServiceImpl.studentsEqual(student, student2)); // both bad

        student = StudentMapperTests.createBasicStudent();
        assertFalse(ExternalStudentServiceImpl.studentsEqual(student, student2)); // second bad
    }

    @Test
    public void studentsEqualShouldReturnFalseOnGrade() {
        Student student = StudentMapperTests.createBasicStudent();
        Student student2 = StudentMapperTests.createBasicStudent("MALE", "06");
        assertFalse(ExternalStudentServiceImpl.studentsEqual(student, student2));
    }

    @Test
    public void studentsEqualShouldReturnFalseOnGender() {
        Student student = StudentMapperTests.createBasicStudent();
        Student student2 = StudentMapperTests.createBasicStudent("FEMALE", "05");
        assertFalse(ExternalStudentServiceImpl.studentsEqual(student, student2));
    }

    @Test
    public void studentsEqualShouldReturnTrueWithNullsInStudent() {
        Student student = new Student();
        // these 2 values must be set or else there is a validation error that happens
        student.setGender("MALE");
        student.setGradeLevelWhenAssessed("03");

        Student student2 = new Student();
        // these 2 values must be set or else there is a validation error that happens
        student2.setGender("MALE");
        student2.setGradeLevelWhenAssessed("03");

        assertTrue(ExternalStudentServiceImpl.studentsEqual(student, student2));
    }

    @Test
    public void studentsEqualShouldReturnFalseWithNullsInStudent() {
        Student student = new Student();
        // these 2 values must be set or else there is a validation error that happens
        student.setGender("MALE");
        student.setGradeLevelWhenAssessed("03");

        Student student2 = new Student();
        // these 2 values must be set or else there is a validation error that happens
        student2.setGender("MALE");
        student2.setGradeLevelWhenAssessed("04");

        assertFalse(ExternalStudentServiceImpl.studentsEqual(student, student2));
    }
}
