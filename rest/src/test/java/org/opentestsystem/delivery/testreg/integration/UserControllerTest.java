/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.integration;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.Matchers.hasSize;
import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertThat;
import static org.opentestsystem.delivery.testreg.domain.TestRegPermission.USER_MODIFY;
import static org.opentestsystem.delivery.testreg.domain.TestRegPermission.USER_READ;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import org.opentestsystem.delivery.testreg.domain.HierarchyLevel;
import org.opentestsystem.delivery.testreg.domain.StateEntity;
import org.opentestsystem.delivery.testreg.domain.User;
import org.opentestsystem.delivery.testreg.domain.User.RoleAssociation;
import org.opentestsystem.delivery.testreg.domain.search.UserSearchRequest;
import org.opentestsystem.shared.docs.annotation.ApiDocExample;
import org.opentestsystem.shared.progman.client.domain.TenantType;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.opentestsystem.shared.security.domain.permission.SbacPermissionEntity;
import org.opentestsystem.shared.security.domain.permission.UserRole;
import org.opentestsystem.shared.security.integration.PermissionClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mock.web.MockHttpServletResponse;

import au.com.bytecode.opencsv.CSVReader;

import com.google.common.collect.Maps;

@SuppressWarnings("unchecked")
public class UserControllerTest extends AbstractSecuredRestEmbeddedMongoTest {

    private static final String POST_URL = "/user";
    private static final String PUT_URL = "/user/";

    public Map<String, Object> params;
    public Map<String, String> uploadParams;

    private final static String TEST_AUTH_ROLE_NAME = "Test Author";

    @Autowired
    PermissionClient permissionClient;

    @Before
    public void buildParams() throws Exception {
        UserRole testAuthRole = new UserRole();
        testAuthRole.setRole(TEST_AUTH_ROLE_NAME);
        SbacPermissionEntity state = new SbacPermissionEntity();
        state.setEntity(TenantType.STATE.name());
        testAuthRole.setAllowableEntities(Arrays.asList(new SbacPermissionEntity[] { state }));
        Mockito.when(permissionClient.getRole(TEST_AUTH_ROLE_NAME)).thenReturn(testAuthRole);
        Mockito.when(permissionClient.hasRole(TEST_AUTH_ROLE_NAME)).thenReturn(true);
        Mockito.when(permissionClient.hasRoleAndLevel(TEST_AUTH_ROLE_NAME, TenantType.STATE.name())).thenReturn(true);

        // Setup Dependent entities
        mongoTemplate.insert(new StateEntity.Builder("CA", "California", "CLIENT", "000000", "ADD").build());

        params = Maps.newHashMap();
        params.put("firstName", "Joe");
        params.put("lastName", "Smith");
        params.put("email", "bob@smith.com");
        params.put("phone", "222-345-1111");

        Set<RoleAssociation> rolesSet = new HashSet<RoleAssociation>();
        RoleAssociation userRoles = new RoleAssociation();
        userRoles.setRole("Test Author");
        userRoles.setLevel(HierarchyLevel.STATE.toString());
        userRoles.setAssociatedEntityId("CA");
        userRoles.setStateAbbreviation("CA");
        rolesSet.add(userRoles);
        params.put("roleAssociations", rolesSet);

        uploadParams = Maps.newHashMap();
        uploadParams.put("firstName", "Joe");
        uploadParams.put("lastName", "Smith");
        uploadParams.put("email", "bob@smith.com");
        uploadParams.put("currentPage", "0");
        uploadParams.put("role", "Test Author");
        uploadParams.put("phone", "222-345-1111");
        uploadParams.put("level", HierarchyLevel.STATE.toString());
        uploadParams.put("associatedEntityId", "CA");
    }

    @Test
    public void saveUser() throws InterruptedException {
        User savedUser = callPOSTRestService(POST_URL, params, User.class, USER_MODIFY);
        assertThat("saved user", savedUser, notNullValue());
        assertThat("saved user id", savedUser.getId(), notNullValue());
    }

    @Test
    public void updateUser() throws InterruptedException {
        User savedUser = callPOSTRestService(POST_URL, params, User.class, USER_MODIFY);
        assertThat("saved user", savedUser, notNullValue());
        params.put("id", savedUser.getId());
        params.put("firstName", "Scott");
        User updatedUser = callPUTRestService(PUT_URL + savedUser.getId(), params, User.class, USER_MODIFY);
        assertThat("saved user", updatedUser, notNullValue());
        assertThat("User should be updated", updatedUser.getFirstName(), equalTo("Scott"));
    }

    @Test
    public void findUser() throws InterruptedException {
        User savedUser = callPOSTRestService(POST_URL, params, User.class, USER_MODIFY);
        assertThat("saved user", savedUser, notNullValue());
        User fetchedUser = callGETRestService(PUT_URL + savedUser.getId(), User.class, USER_READ);
        assertThat("fetched user", fetchedUser, notNullValue());
        assertThat("User id should be updated", savedUser.getId(), equalTo(fetchedUser.getId()));
    }

    @Test
    public void removeUser() throws InterruptedException {
        User savedUser = callPOSTRestService(POST_URL, params, User.class, USER_MODIFY);
        assertThat("saved user", savedUser, notNullValue());

        callDeleteRestService("/user/" + savedUser.getId(), USER_MODIFY);
        User fetchedUser = callGETRestService("/user/" + savedUser.getId(), User.class, USER_READ);
        assertThat("fetched user", fetchedUser, nullValue());
    }

    @Test
    public void searchUsers() throws InterruptedException {
        User savedUser = callPOSTRestService("/user", params, User.class, USER_MODIFY);
        assertThat("saved user", savedUser, notNullValue());
        assertThat("saved user", savedUser.getId(), notNullValue());

        // search by entityId exact
        Map<String, String> searchParams = Maps.newHashMap();
        searchParams.put(UserSearchRequest.SEARCH_KEY_FIRST_NAME, "Joe");
        SearchResponse<User> response = callGETRestService("/user" + buildQueryString(searchParams),
                SearchResponse.class, USER_READ);
        assertThat("users", response.getSearchResults(), notNullValue());
        assertThat("users", response.getSearchResults(), hasSize(1));
    }

    @Test
    @ApiDocExample(rank = -1)
    public void exportToExcelWithPageParams() throws Exception {
        User entity = callPOSTRestService("/user", params, User.class, USER_MODIFY);
        assertEquals("User should be created", 1, mongoTemplate.findAll(User.class).size());
        assertNotNull(entity);

        MockHttpServletResponse response = callGETRestService1("/users.xls" + buildQueryString(uploadParams), USER_READ);
        assertNotNull(response);
        assertEquals("Content-Type is not equal application/vnd.ms-excel", "application/vnd.ms-excel",
                response.getContentType());
        assertNotNull("User ExportExcel Data is null", response.getContentAsByteArray());
        byte[] resData = response.getContentAsByteArray();
        ByteArrayInputStream st = new ByteArrayInputStream(resData);
        HSSFWorkbook workbook = new HSSFWorkbook(st);
        Sheet sheet = workbook.getSheetAt(0);

        Row dataRow = sheet.getRow(1);
        assertThat(entity.getFirstName(), is(dataRow.getCell(0).getStringCellValue()));
        assertThat(entity.getLastName(), is(dataRow.getCell(1).getStringCellValue()));
        assertThat(entity.getEmail().toString(), is(dataRow.getCell(2).getStringCellValue()));
        assertThat(entity.getPhone(), is(dataRow.getCell(3).getStringCellValue()));
        Iterator<RoleAssociation> roleIterator = entity.getRoleAssociations().iterator();
        RoleAssociation userRole = roleIterator.next();
        assertThat(dataRow.getCell(4).getStringCellValue(), is(userRole.getRole()));
        assertThat(dataRow.getCell(5).getStringCellValue(), is("CALIFORNIA"));
        assertThat(dataRow.getCell(6).getStringCellValue(), is(userRole.getLevel().toString()));
        assertThat(dataRow.getCell(7).getStringCellValue(), is(""));
    }

    @Test
    @ApiDocExample(rank = -1)
    public void exportToExcelWithExtension() throws Exception {
        User entity = callPOSTRestService("/user", params, User.class, USER_MODIFY);
        assertEquals("User should be created", 1, mongoTemplate.findAll(User.class).size());
        assertNotNull(entity);

        MockHttpServletResponse response = callGETRestService1("/users.xls", USER_READ);
        assertNotNull(response);
        assertEquals("Content-Type is not equal application/vnd.ms-excel", "application/vnd.ms-excel",
                response.getContentType());
        assertNotNull("User ExportExcel Data is null", response.getContentAsByteArray());
        byte[] resData = response.getContentAsByteArray();
        ByteArrayInputStream st = new ByteArrayInputStream(resData);
        HSSFWorkbook workbook = new HSSFWorkbook(st);
        Sheet sheet = workbook.getSheetAt(0);
        Row dataRow = sheet.getRow(1);
        assertThat(entity.getFirstName(), is(dataRow.getCell(0).getStringCellValue()));
        assertThat(entity.getLastName(), is(dataRow.getCell(1).getStringCellValue()));
        assertThat(entity.getEmail().toString(), is(dataRow.getCell(2).getStringCellValue()));
        assertThat(entity.getPhone(), is(dataRow.getCell(3).getStringCellValue()));
        Iterator<RoleAssociation> roleIterator = entity.getRoleAssociations().iterator();
        RoleAssociation userRole = roleIterator.next();
        assertThat(dataRow.getCell(4).getStringCellValue(), is(userRole.getRole()));
        assertThat(dataRow.getCell(5).getStringCellValue(), is("CALIFORNIA"));
        assertThat(dataRow.getCell(6).getStringCellValue(), is(userRole.getLevel().toString()));
        assertThat(dataRow.getCell(7).getStringCellValue(), is("")); // no state abbrev for STATE entity
    }

    @Test
    @ApiDocExample(rank = -1)
    public void exportToCsvWithExtension() throws Exception {
        User entity = callPOSTRestService("/user", params, User.class, USER_MODIFY);
        assertEquals("User should be created", 1, mongoTemplate.findAll(User.class).size());
        assertNotNull(entity);

        MockHttpServletResponse response = callGETRestService1("/users.csv", USER_READ);
        assertNotNull(response);
        assertEquals("Content-Type is not equal application/csv", com.google.common.net.MediaType.CSV_UTF_8.toString(),
                response.getContentType());
        assertNotNull("User Export CSV Data is null", response.getContentAsByteArray());
        byte[] resData = response.getContentAsByteArray();

        ByteArrayInputStream st = new ByteArrayInputStream(resData);
        BufferedReader reader = new BufferedReader(new InputStreamReader(st));
        CSVReader cvsReader = new CSVReader(reader);

        cvsReader.readNext();
        String[] dataRow = cvsReader.readNext();
        Iterator<RoleAssociation> roleIterator = entity.getRoleAssociations().iterator();
        RoleAssociation userRole = roleIterator.next();
        assertThat(dataRow[0], is(entity.getFirstName()));
        assertThat(dataRow[1], is(entity.getLastName()));
        assertThat(dataRow[2], is(entity.getEmail().toString()));
        assertThat(dataRow[3], is(entity.getPhone()));
        assertThat(dataRow[4], is(userRole.getRole()));
        assertThat(dataRow[5], is("CALIFORNIA"));
        assertThat(dataRow[6], is(userRole.getLevel().toString()));
        assertThat(dataRow[7], is("")); // no state abbrev for STATE entity
        cvsReader.close();
    }
}
