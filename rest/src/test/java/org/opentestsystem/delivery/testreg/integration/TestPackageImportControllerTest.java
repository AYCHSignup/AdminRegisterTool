/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.integration;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.junit.Assert.assertThat;
import static org.opentestsystem.delivery.testreg.domain.TestRegPermission.ASSESSMENT_IMPORT;
import static org.opentestsystem.delivery.testreg.domain.TestRegPermission.ASSESSMENT_MODIFY;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.joda.time.DateTime;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.Assessment;
import org.opentestsystem.delivery.testreg.domain.Assessment.EligibilityType;
import org.opentestsystem.delivery.testreg.domain.Assessment.TestWindow;
import org.opentestsystem.delivery.testreg.domain.ExplicitEligibility;
import org.opentestsystem.delivery.testreg.persistence.ExplicitEligibilityRepository;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.collect.Maps;

public class TestPackageImportControllerTest extends AbstractSecuredRestEmbeddedMongoTest {
    private static final String POST_URL = "/assessment";
    private static final String PUT_URL = "/tsbassessment";

    public Map<String, Object> params;
    public Map<String, Object> params1;

    @Autowired
    ExplicitEligibilityRepository eligibilityRepository;

    @Before
    public void buildParams() throws Exception {
        wipeOutUserRoles();

        params = Maps.newHashMap();
        TestWindow tstWindow = new TestWindow();

        tstWindow.setBeginWindow(new DateTime(2014, 1, 1, 10, 30));
        tstWindow.setEndWindow(new DateTime(2014, 1, 1, 10, 50));
        TestWindow[] tstArray = { tstWindow };
        List<String> testFroms = new ArrayList<String>();
        testFroms.add("MATH01");
        testFroms.add("MATH05");
        params.put("rawXml", "xxxfooxxx");
        params.put("numGlobalOpportunities", "1");
        params.put("testWindow", tstArray);
        params.put("eligibilityType", EligibilityType.EXPLICIT);
        params.put("testName", "test1");
        params.put("version", "1");
        params.put("testForm", testFroms);
        params.put("academicYear", "2014");
        params.put("testLabel", "label");
        params.put("testUniqueId", "aaaaaa000000");
        params.put("tenantId", "WI");
    }

    @Before
    public void buildParams1() throws Exception {
        wipeOutUserRoles();

        params1 = Maps.newHashMap();
        TestWindow tstWindow = new TestWindow();

        tstWindow.setBeginWindow(new DateTime(2014, 1, 1, 10, 30));
        tstWindow.setEndWindow(new DateTime(2014, 1, 1, 10, 50));
        TestWindow[] tstArray = { tstWindow };
        List<String> testFroms = new ArrayList<String>();
        testFroms.add("MATH05");
        params1.put("rawXml", "xxxfooxxx");
        params1.put("numGlobalOpportunities", "1");
        params1.put("testWindow", tstArray);
        params1.put("eligibilityType", EligibilityType.EXPLICIT);
        params1.put("testName", "test1");
        params1.put("version", "1");
        params1.put("testForm", testFroms);
        params1.put("academicYear", "2014");
        params1.put("testLabel", "label");
        params1.put("testUniqueId", "aaaaaa000000");
        params1.put("tenantId", "WI");
    }

    @Test
    public void saveAssessment() throws InterruptedException {
        Assessment savedAssessment = callPOSTRestService(POST_URL, params, Assessment.class, ASSESSMENT_MODIFY);
        assertThat("saved assessment", savedAssessment, notNullValue());
        assertThat("saved assessment id", savedAssessment.getId(), notNullValue());
    }

    @Test
    public void updateAssessmentVersion() throws InterruptedException {
        @SuppressWarnings("unused")
        ExplicitEligibility eligibilityObj = eligibilityRepository.save(createEligibility());
        Assessment savedAssessment = callPOSTRestService(POST_URL, params, Assessment.class, ASSESSMENT_MODIFY);
        assertThat("saved assessment", savedAssessment, notNullValue());
        List<String> testFroms = new ArrayList<String>();
        testFroms.add("MATH05");
        params1.put("version", "1.5");
        params1.put("testForm", testFroms);
        Assessment updatedAssessment = callPUTRestService(PUT_URL, params1, Assessment.class, ASSESSMENT_IMPORT);
        assertThat("saved assessment", updatedAssessment, notNullValue());
        assertThat("Assessment should be updated", updatedAssessment.getVersion(), equalTo("1.5"));
    }

    private ExplicitEligibility createEligibility() {
        ExplicitEligibility explicitEligibility = new ExplicitEligibility();
        explicitEligibility.setStudentId("7162817624");
        explicitEligibility.setAdministrationName("FCAT");
        explicitEligibility.setStateAbbreviation("WI");
        explicitEligibility.setResponsibleDistrictId("21312125");
        explicitEligibility.setSubject("MATH");
        explicitEligibility.setTestName("test1");
        explicitEligibility.setTestVersion("1");
        explicitEligibility.setTestForm("MATH05");
        return explicitEligibility;
    }
}
