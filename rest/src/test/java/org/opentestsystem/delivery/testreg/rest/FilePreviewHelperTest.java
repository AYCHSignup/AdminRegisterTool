/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.rest;

import static org.hamcrest.collection.IsCollectionWithSize.hasSize;
import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.junit.Test;

public class FilePreviewHelperTest {
    
    private InputStream makeNormalExcelFile() throws IOException {
        final Workbook excelWorkbook = new HSSFWorkbook();
        
        Sheet testSheet = excelWorkbook.createSheet("Test");
        Row formatRow = testSheet.createRow(0);
        Cell format = formatRow.createCell(0);
        format.setCellValue("GROUPOFSTATES"); //need to be a valid FormatType
        
        
        Row headerRow = testSheet.createRow(1);
        Cell cell0 = headerRow.createCell(0);
        cell0.setCellValue("countries");
        
        Cell continent =headerRow.createCell(1);
        continent.setCellValue("continent");
        
        Cell population =headerRow.createCell(2);
        population.setCellType(Cell.CELL_TYPE_NUMERIC);
        population.setCellValue("population");

        Cell onePercent =headerRow.createCell(3);
        onePercent.setCellType(Cell.CELL_TYPE_STRING);
        onePercent.setCellValue("1percent");

        Cell economy =headerRow.createCell(4);
        economy.setCellType(Cell.CELL_TYPE_STRING);
        economy.setCellValue("economy");
        
        Cell headOfState =headerRow.createCell(5);
        headOfState.setCellValue("HeadOfState");
        
        Cell yearsInOffice =headerRow.createCell(6);
        yearsInOffice.setCellValue("YearsInOffice");
        
        Row dataRow1 = testSheet.createRow(2);
        dataRow1.createCell(0).setCellValue("Cananda");
        dataRow1.createCell(1).setCellValue("North America");
        dataRow1.createCell(2).setCellValue("39M");
        dataRow1.createCell(3).setCellValue("246000");
        dataRow1.createCell(4).setCellValue("free market");
        dataRow1.createCell(5).setCellValue("Queen Elizabeth II");
        
        Row dataRow2 = testSheet.createRow(3);
        dataRow2.createCell(0).setCellValue("America");
        dataRow2.createCell(1).setCellValue("North America");
        dataRow2.createCell(2).setCellValue("250M");
        dataRow2.createCell(3).setCellValue("6200000");
        dataRow2.createCell(4).setCellValue("laissez faire");
        
        ByteArrayOutputStream os = new ByteArrayOutputStream();
        excelWorkbook.write(os);
        return new ByteArrayInputStream(os.toByteArray());
    }
    
    @Test
    public void testPreviewMissingLastColumndata() throws IOException { //Bug Fix related to missing columns for records when the columns happens to be at the end
        List<FilePreview> previewData = FilePreviewHelper.extractDataForPreview(makeNormalExcelFile(), "somename.xlsx", 4);
        assertThat(previewData.get(0).getRowData().get(1), hasSize(7)); //Added One additional empty column
        assertThat(previewData.get(0).getRowData().get(1).get(6), is(""));
        assertThat(previewData.get(0).getRowData().get(2), hasSize(7)); //Added Two additional empty columns
        assertThat(previewData.get(0).getRowData().get(2).get(5), is(""));
        assertThat(previewData.get(0).getRowData().get(2).get(6), is(""));
    }
}
