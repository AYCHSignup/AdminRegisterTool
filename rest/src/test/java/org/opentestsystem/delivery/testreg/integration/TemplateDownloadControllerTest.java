/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.integration;

import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsNull.notNullValue;
import static org.junit.Assert.assertThat;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;

import org.junit.Test;
import org.springframework.http.MediaType;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.test.web.servlet.MvcResult;

public class TemplateDownloadControllerTest extends AbstractRestEmbeddedMongoTest {

    private static final com.google.common.net.MediaType MICROSOFT_EXCEL_TYPE = com.google.common.net.MediaType.MICROSOFT_EXCEL;
    private static final com.google.common.net.MediaType CSV_TYPE = com.google.common.net.MediaType.CSV_UTF_8;
    private static final com.google.common.net.MediaType TSV_TYPE = com.google.common.net.MediaType.TSV_UTF_8;

    @Test
    public void downloadXLSXTemplate() throws Exception {
        MvcResult result = mockMvc.perform(get("/template/State.xlsx").accept(getExcelMediaType())).andReturn();
        MockHttpServletResponse response = result.getResponse();
        assertThat(response.getHeader("Content-Disposition"), is("attachment; filename=State_template.xlsx"));
        assertThat(response.getOutputStream(), is(notNullValue()));
    }

    @Test
    public void downloadXLSTemplate() throws Exception {
        MvcResult result = mockMvc.perform(get("/template/District.xls").accept(getExcelMediaType())).andReturn();
        MockHttpServletResponse response = result.getResponse();
        assertThat(response.getHeader("Content-Disposition"), is("attachment; filename=District_template.xls"));
        assertThat(response.getOutputStream(), is(notNullValue()));
    }

    @Test
    public void downloadCSVTemplate() throws Exception {
        MvcResult result = mockMvc.perform(get("/template/Student.xls").accept(getCSVMediaType())).andReturn();
        MockHttpServletResponse response = result.getResponse();
        assertThat(response.getHeader("Content-Disposition"), is("attachment; filename=Student_template.xls"));
        assertThat(response.getOutputStream(), is(notNullValue()));
    }

    @Test
    public void downloadTSVTemplate() throws Exception {
        MvcResult result = mockMvc.perform(get("/template/DesignatedSupportsAndAccommodations.xls").accept(getTSVMediaType())).andReturn();
        MockHttpServletResponse response = result.getResponse();
        assertThat(response.getHeader("Content-Disposition"), is("attachment; filename=DesignatedSupportsAndAccommodations_template.xls"));
        assertThat(response.getOutputStream(), is(notNullValue()));
    }

    private MediaType getExcelMediaType() {
        return new MediaType(MICROSOFT_EXCEL_TYPE.type(), MICROSOFT_EXCEL_TYPE.subtype());
    }

    private MediaType getCSVMediaType() {
        return new MediaType(CSV_TYPE.type(), CSV_TYPE.subtype());
    }

    private MediaType getTSVMediaType() {
        return new MediaType(TSV_TYPE.type(), TSV_TYPE.subtype());
    }
}
