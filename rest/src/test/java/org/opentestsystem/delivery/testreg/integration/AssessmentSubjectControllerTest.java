/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.integration;

import static org.hamcrest.collection.IsCollectionWithSize.hasSize;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsCollectionContaining.hasItems;
import static org.hamcrest.core.IsNull.notNullValue;
import static org.junit.Assert.assertThat;
import static org.opentestsystem.delivery.testreg.domain.TestRegPermission.ASSESSMENT_READ;

import java.util.Map;
import java.util.Set;

import org.joda.time.DateTime;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.Assessment;
import org.opentestsystem.delivery.testreg.domain.Assessment.EligibilityType;
import org.opentestsystem.delivery.testreg.domain.EligibleStudent;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.domain.Student.Gender;
import org.opentestsystem.delivery.testreg.domain.Student.GradeLevel;

import com.google.common.collect.Maps;

public class AssessmentSubjectControllerTest extends AbstractSecuredRestEmbeddedMongoTest {

    private Map<String, String> params;

    @Before
    public void buildParams() {
        // Build Query Parameters
        params = Maps.newHashMap();
        params.put("stateAbbreviation", "AK");
        params.put("studentId", "S16676254");

        // Setup Test Data
        EligibleStudent eligibleStudent = new EligibleStudent();
        eligibleStudent.addAssessment(getAssessment1());
        eligibleStudent.addAssessment(getAssessment2());
        eligibleStudent.setStudent(getStudent());

        // Insert data
        mongoTemplate.insert(eligibleStudent);
    }

    @Test
    public void getEligibleSubjects() throws InterruptedException {
        @SuppressWarnings("unchecked")
        Set<String> eligibleSubjects = callGETRestServiceWithParams("/assessmentSubject", Set.class, params, ASSESSMENT_READ);
        assertThat(eligibleSubjects, is(notNullValue()));
        assertThat(eligibleSubjects, hasSize(2));
        assertThat(eligibleSubjects, hasItems("ELA", "MATH"));
    }

    private Assessment getAssessment1() {
        Assessment assessment = new Assessment("Spring Test English", "1.0", "STATE");
        assessment.setAcademicYear("2014");
        assessment.setDelayRule(2);
        assessment.setEligibilityType(EligibilityType.IMPLICIT);
        assessment.setEntityId("A1000");
        assessment.setNumGlobalOpportunities(2);
        assessment.setSubjectCode("ELA");
        return assessment;
    }

    private Assessment getAssessment2() {
        Assessment assessment = new Assessment("Spring Test Math", "2.0", "CLIENT");
        assessment.setAcademicYear("2014");
        assessment.setDelayRule(2);
        assessment.setEligibilityType(EligibilityType.IMPLICIT);
        assessment.setEntityId("A1001");
        assessment.setNumGlobalOpportunities(2);
        assessment.setSubjectCode("MATH");
        return assessment;
    }

    private Student getStudent() {
        Student student = new Student();
        student.setBirthDate(new DateTime(1980, 1, 1, 0, 0));
        student.setDistrictIdentifier("1");
        student.setStateAbbreviation("AK");
        student.setEntityId("S16676254");
        student.setExternalSsid("111111111");
        student.setFirstName("Bob");
        student.setGender(Gender.Male);
        student.setGradeLevelWhenAssessed(GradeLevel.FOURTHGRADE);
        student.setLanguageCode("eng");
        student.setLastName("Test");
        student.setWhite("Yes");
        student.setDisadvantageStatus("No");
        student.setLepStatus("No");
        student.setInstitutionIdentifier("1");
        student.setSection504Status("No");
        student.setiDEAIndicator("No");
        return student;
    }
}
