/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.upload;

import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.Matchers.hasSize;
import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.StateEntity;
import org.opentestsystem.delivery.testreg.rest.FileValidationResult;
import org.opentestsystem.delivery.testreg.rest.ValidationHelper;
import org.opentestsystem.delivery.testreg.rest.ValidationMessage;
import org.opentestsystem.delivery.testreg.upload.RowMetadataImpl.RowErrorType;
import org.springframework.validation.BeanPropertyBindingResult;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.validation.ObjectError;

/**
 * Test for Validation Helper class.
 */
public class ValidationHelperTest {
    private BindingResult result;
    private static final String ENTITY_STATE = "STATE";
    private static final String ENTITY_DISTRICT = "DISTRICT";
    private static final String GLOBAL_OBJECT = "GLOBAL";
    private static final int DEFAULT_ERROR_COUNT_THRESHOLD = 500;

    @Before
    public void setup() {
        this.result = new BeanPropertyBindingResult(new StateEntity(), ENTITY_STATE);
        final ObjectError globalError = new ObjectError(GLOBAL_OBJECT, "Invalid File Format");
        final FieldError fieldErrorState = new FieldError(ENTITY_STATE, "entityId", "MM", true, null, new RowMetadataImpl[] { new RowMetadataImpl(2, null, RowErrorType.RECORD_ERROR) },
                "Invalid State ID");
        final FieldError fieldErrorDistrict = new FieldError(ENTITY_DISTRICT, "parentEntityType", ENTITY_DISTRICT, true, null,
                new RowMetadataImpl[] { new RowMetadataImpl(4, null, RowErrorType.RECORD_ERROR) }, "Invalid Parent type");
        this.result.addError(globalError);
        this.result.addError(fieldErrorState);
        this.result.addError(fieldErrorDistrict);

    }

    @Test
    public void testTransformGlobalErrors() throws Exception {
        final List<FileValidationResult> validationResults = ValidationHelper.transform(this.result, DEFAULT_ERROR_COUNT_THRESHOLD);
        assertThat("validation result", validationResults, notNullValue());
        assertThat("results count", validationResults, hasSize(3));
    }

    @Test
    public void testMultipleErrorsForFormatType() throws Exception {
        this.result.addError(new FieldError(ENTITY_DISTRICT, "stateAbbreviation", ENTITY_DISTRICT, true, null, new RowMetadataImpl[] { new RowMetadataImpl(4, null, RowErrorType.RECORD_ERROR) },
                "Invalid State abbreviation"));
        final List<FileValidationResult> validationResults = ValidationHelper.transform(this.result, DEFAULT_ERROR_COUNT_THRESHOLD);
        assertThat("validation result", validationResults, notNullValue());
        // we still have only 3 different formats, DISTRICT should have 2 validation messages
        assertThat("results count", validationResults, hasSize(3));
        // TODO: assert if district has 2 validaiton messages
    }

    /**
     * This test fixes bug due to Global errors only sorting.
     */
    @Test
    public void testMultipleGlobalErrorsOnlyTest() {

        final String[] messages = new String[] { "Duplicate Rows of same type found in rows: {1,3}",
                "Duplicate Rows of same type found in rows: {2,6,9,12}",
                "Duplicate Rows of same type found in rows: {5,7,8,14,19,21}" };

        final ObjectError globalError1 = new ObjectError(GLOBAL_OBJECT, messages[2]);
        final ObjectError globalError2 = new ObjectError(GLOBAL_OBJECT, messages[0]);
        final ObjectError globalError3 = new ObjectError(GLOBAL_OBJECT, messages[1]);

        this.result = new BeanPropertyBindingResult(null, ENTITY_STATE); // Re-define result again
        this.result.addError(globalError1);
        this.result.addError(globalError2);
        this.result.addError(globalError3);

        final List<FileValidationResult> validationResults = ValidationHelper.transform(this.result, DEFAULT_ERROR_COUNT_THRESHOLD);
        assertThat("validation result", validationResults, notNullValue());
        assertThat("results count", validationResults, hasSize(1));

        final List<ValidationMessage> globalVms = validationResults.get(0).getFatalErrors();

        assertThat(globalVms, hasSize(3));

        final List<String> vms = new ArrayList<String>();
        for (final ValidationMessage vm : globalVms) {
            vms.add(vm.getMessage());
        }

        assertThat(vms, is(Arrays.asList(messages)));
    }
}
