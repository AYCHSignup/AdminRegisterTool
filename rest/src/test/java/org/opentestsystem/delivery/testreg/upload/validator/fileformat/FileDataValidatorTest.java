/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.upload.validator.fileformat;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.Action;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.domain.StateEntity;
import org.opentestsystem.delivery.testreg.domain.TestRegistrationBase;
import org.opentestsystem.delivery.testreg.persistence.ParentEntityClassFinder;
import org.opentestsystem.delivery.testreg.persistence.criteria.BusinessValidator;
import org.opentestsystem.delivery.testreg.persistence.criteria.Sb11BusinessValidatorFactory;
import org.opentestsystem.delivery.testreg.upload.FileDataRecord;
import org.opentestsystem.delivery.testreg.upload.FileHeaderRecord;
import org.opentestsystem.delivery.testreg.upload.FileUploadUtils;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.validation.BeanPropertyBindingResult;
import org.springframework.validation.Errors;
import org.springframework.validation.FieldError;
import org.springframework.validation.ObjectError;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import static org.hamcrest.core.Is.*;
import static org.junit.Assert.*;

public class FileDataValidatorTest {

    private FileDataValidator dataValidator;

    private boolean businessValidatorCalled;

    private final Errors result = new BeanPropertyBindingResult("", "");

    private final String[] TEST_DATA = new String[] { "MN", "Minnesota", "CLIENT", "10289-901", "ADD" };

    @Before
    public void setup() throws ClassNotFoundException {
        dataValidator = new FileDataValidator("STATE") {
            FileDataValidator setFactoryAndReturnThis() {
                setHeaders(new String[] { "SSID", "GRADE", "GENDER", "IEP", "LEP" });
                this.businessValidatorFactory = new Sb11BusinessValidatorFactory() {
                    @SuppressWarnings("unchecked")
                    @Override
                    public <T extends BusinessValidator<TestRegistrationBase>> T getBusinessValidator(
                            TestRegistrationBase sb11Entity) {
                        return (T) new StateBasedAddBusinessValidator();
                    }

                    @Override
                    public <T extends BusinessValidator<TestRegistrationBase>> T getBusinessValidator(
                            TestRegistrationBase sb11Entity, Action action) {
                        return null;
                    }
                };
                return this;
            }

            @Override
            protected boolean isValidHeader(FileHeaderRecord record, Errors errors) {
                return true;
            }

            protected boolean isValidFormat(FileDataRecord record, Errors error) {
                return true;
            }

        }.setFactoryAndReturnThis();
        FileUploadUtils fileUploadUtils = new FileUploadUtils();
        ReflectionTestUtils.setField(fileUploadUtils, "parentEntityClassFinder", new ParentEntityClassFinder("org.opentestsystem.delivery.testreg.domain"));
        ReflectionTestUtils.setField(dataValidator, "fileUploadUtils", fileUploadUtils);
        ReflectionTestUtils.setField(dataValidator, "fileUploadSecurityValidator", new FakeFileUploadSecurityValidator());
    }

    @Test
    public void testValidData() {
        FileDataRecord record = new FileDataRecord(2, TEST_DATA);
        assertThat(dataValidator.isValidData(record, result), is(true));
        assertThat(businessValidatorCalled, is(true));
        assertThat(result.getAllErrors().isEmpty(), is(true));
    }

    @Test
    public void testInValidData() {
        FileDataRecord record = new FileDataRecord(2, new String[] { "SD", "South Dakota", "CLIENT", "5790-7", "ADD" });
        assertThat(dataValidator.isValidData(record, result), is(false));
        assertThat(businessValidatorCalled, is(true));
        assertThat(result.getAllErrors().isEmpty(), is(false));
        assertThat(result.getAllErrors().size(), is(1));
    }

    private class StateBasedAddBusinessValidator implements BusinessValidator<TestRegistrationBase> {

        @Override
        public Action getAction() {
            return Action.ADD;
        }

        @Override
        public boolean supports(Class<? extends TestRegistrationBase> clazz) {
            return Sb11Entity.class.isAssignableFrom(clazz);
        }

        @Override
        public List<? extends ObjectError> validate(TestRegistrationBase entity) {
            businessValidatorCalled = true;

            if (entity instanceof Sb11Entity) {
                Sb11Entity sbEntity = (Sb11Entity) entity;

                StateEntity state = new StateEntity.Builder((Object[]) TEST_DATA).build();
                if (sbEntity.getAction().equals(state.getAction())
                        && sbEntity.getFormatType().equals(state.getFormatType())
                        && sbEntity.getParentEntityId().equals(state.getParentEntityId())) {
                    return Collections.emptyList();
                } else {
                    List<ObjectError> errors = new ArrayList<ObjectError>();
                    errors.add(new FieldError("state", "id", "State Values mismatch"));
                    return errors;
                }
            } else {
                List<ObjectError> errors = new ArrayList<ObjectError>();
                errors.add(new ObjectError("entity", "Invalid object type for validator"));
                return errors;
            }
        }
    }

    private class FakeFileUploadSecurityValidator implements BusinessValidator<TestRegistrationBase> {

        @Override
        public boolean supports(Class<? extends TestRegistrationBase> clazz) {
            return true;
        }

        @Override
        public List<FieldError> validate(TestRegistrationBase entity) {
            return Collections.emptyList();
        }

        @Override
        public Action getAction() {
            return null;
        }
    }
}
