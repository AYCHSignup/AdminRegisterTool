/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.upload;

import static org.hamcrest.CoreMatchers.instanceOf;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.junit.Assert.assertThat;
import static org.junit.Assert.fail;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.FileUploadSummary;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.GroupOfStatesEntity;
import org.opentestsystem.delivery.testreg.domain.StateEntity;
import org.opentestsystem.delivery.testreg.domain.TestRegistrationBase;
import org.opentestsystem.delivery.testreg.integration.AbstractRestEmbeddedMongoTest;
import org.opentestsystem.delivery.testreg.rest.FileType;
import org.opentestsystem.delivery.testreg.service.TestRegPersister;
import org.opentestsystem.shared.search.domain.AbstractSearchRequest;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;

public class FileUploadUtilsTest extends AbstractRestEmbeddedMongoTest {

    @Autowired
    private FileUploadUtils testFileUploadUtils;

    @Test
    public void testProcessCsvFile() {

        final String lines = "STATEABBREVIATION,STATENAME,PARENTENTITYTYPE,PARENTEXTERNALID,ACTION\n"
                + "GU,Guam,CLIENT,123,ADD\n" + "TN,Tennessee,CLIENT,456,ADD\n" + "CA,California,CLIENT,789,ADD";
        final ByteArrayInputStream inputStream = new ByteArrayInputStream(lines.getBytes());

        Map<FormatType, List<TestRegistrationBase>> map = null;
        try {
            map = this.testFileUploadUtils.extractFile("testfile.csv", inputStream, "STATE").getParsedObject();
        } catch (final Exception e) {
            fail("Exception should not have been thrown extracting test file");
        }

        assertThat(map, notNullValue());
        assertThat(map.get(FormatType.STATE), notNullValue());
        assertThat(map.get(FormatType.STATE).size(), is(3));
    }

    @Test
    public void testParseUploadExcelFile() {

        final Resource resource = this.webApplicationContext.getResource("classpath:UploadState1_UPD_DEL1_valid.xlsx");
        InputStream inputStream = null;
        try {
            inputStream = resource.getInputStream();
        } catch (final IOException e1) {
            fail("failure to get input stream for test file");
        }

        Map<FormatType, List<TestRegistrationBase>> map = null;

        try {
            map = this.testFileUploadUtils.parseExcelFile(FileType.XLSX, "STATE", inputStream).getParsedObject();
        } catch (final Exception e) {
            fail("Threw exception parsing test excel file");
        }

        assertThat(map, notNullValue());
        assertThat(map.get(FormatType.STATE), notNullValue());
        assertThat(map.get(FormatType.STATE).size(), is(5));

    }

    @Test
    public void testProcessGroupEntities() {

        final List<TestRegistrationBase> entityList = new ArrayList<TestRegistrationBase>();

        entityList.add(createStateEntity("WI", "ADD"));
        entityList.add(createStateEntity("IL", "DELETE"));
        entityList.add(createStateEntity("MO", "UPD"));
        entityList.add(createStateEntity("FL", "DELETE"));
        entityList.add(createStateEntity("TX", "DELETE"));

        final MockEntityService mockEntityService = new MockEntityService();

        final FileUploadSummary summary = this.testFileUploadUtils.processGroupEntities(entityList, mockEntityService);

        assertThat(summary, notNullValue());

        assertThat(summary.getAddedRecords(), is(0));
        assertThat(mockEntityService.getSaveCount(), is(0));

        assertThat(summary.getUpdatedRecords(), is(2)); // Add + Update
        assertThat(mockEntityService.getUpdateCount(), is(2));

        assertThat(summary.getDeletedRecords(), is(3));
        assertThat(mockEntityService.getDeleteCount(), is(3));

    }

    @Test
    public void testGetSb11Entity() {
        String[] data = new String[] { "123", "TEST", "1235", "CLIENT", "DEL" };
        assertThat(this.testFileUploadUtils.getDomainObject(FormatType.STATE, data), instanceOf(StateEntity.class));

        data = new String[] { "1290", "GOS_12", "555", "CLIENT", "ADD" };
        assertThat(this.testFileUploadUtils.getDomainObject(FormatType.GROUPOFSTATES, data),
                instanceOf(GroupOfStatesEntity.class));

    }

    private StateEntity createStateEntity(final String stateAbbr, final String action) {
        final StateEntity entity = new StateEntity();
        entity.setDelete(action);
        entity.setEntityId(stateAbbr);
        entity.setEntityName("blah");
        entity.setParentEntityType("CLIENT");
        entity.setParentEntityId("0");

        return entity;
    }

    private class MockEntityService implements TestRegPersister {

        private int saveCount = 0;
        private int updateCount = 0;
        private int deleteCount = 0;

        public int getSaveCount() {
            return this.saveCount;
        }

        public int getUpdateCount() {
            return this.updateCount;
        }

        public int getDeleteCount() {
            return this.deleteCount;
        }

        @SuppressWarnings("unused")
        public void resetCounts() {
            this.saveCount = 0;
            this.updateCount = 0;
            this.deleteCount = 0;
        }

        @Override
        public <T extends TestRegistrationBase> T findById(final String pkId, final FormatType formatType) {
            return null;
        }

        @Override
        public <T extends TestRegistrationBase> List<T> findAll(final FormatType formatType) {
            return null;
        }

        @Override
        public <T extends TestRegistrationBase> T saveDomainObject(final T domainObj) {
            return null;
        }

        @Override
        public <T extends TestRegistrationBase> T updateDomainObject(final T domainObj) {
            return null;
        }

        @Override
        public <T extends TestRegistrationBase> void deleteDomainObject(final T domainObj) {

        }

        @Override
        public <T extends TestRegistrationBase> void deleteDomainObject(final String pkId, final FormatType formatType) {

        }

        @Override
        public <T extends TestRegistrationBase> List<T> saveDomainObjects(final List<T> domainObjList) {
            this.saveCount += domainObjList.size();

            return domainObjList;
        }

        @Override
        public <T extends TestRegistrationBase> List<T> updateDomainObjects(final List<T> domainObjList) {
            this.updateCount += domainObjList.size();

            return domainObjList;
        }

        @Override
        public <T extends TestRegistrationBase> void deleteDomainObjects(final List<T> domainObjList) {
            this.deleteCount += domainObjList.size();

        }

        @Override
        public <T extends TestRegistrationBase> SearchResponse<T> searchDomainObjects(
                final AbstractSearchRequest searchRequest, final FormatType formatType) {
            return null;
        }

        @Override
        public <T extends TestRegistrationBase> boolean hasAssociatedEntity(final T domainObj) {
            return false;
        }

    }

}
