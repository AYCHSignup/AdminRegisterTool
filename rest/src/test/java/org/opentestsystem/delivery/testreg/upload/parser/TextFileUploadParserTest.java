/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.upload.parser;

import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;
import static org.junit.Assert.fail;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.List;
import java.util.Map;

import org.junit.Test;
import org.opentestsystem.delivery.testreg.upload.DataRecord;
import org.opentestsystem.delivery.testreg.upload.FileDataRecord;
import org.opentestsystem.delivery.testreg.upload.FileHeaderRecord;

public class TextFileUploadParserTest {

    TextFileUploadParser textFileParser;


    @Test
    public void testCSV() {
        this.textFileParser = new TextFileUploadParser(",", "\t");
        try {
            assertRecords(this.textFileParser.parse(getCSV(), "STATE").getParsedObject());
        } catch (final Exception e) {
            fail();
        }
    }

    // TODO: Add other edge cases

    @Test
    public void testTAB() {
        this.textFileParser = new TextFileUploadParser("\t", ",");
        try {
            assertRecords(this.textFileParser.parse(getTAB(), "STATE").getParsedObject());
        } catch (final Exception e) {
            fail();
        }
    }

    @Test
    public void testBlankRowsAreIgnored() throws Exception {
        this.textFileParser = new TextFileUploadParser(",", "\t");

        final Map<String, List<DataRecord>> recordMap = this.textFileParser.parse(getCsvWithBlankRowsAtEnd(), "STATE").getParsedObject();

        assertThat(recordMap.get("STATE").size(), is(4));

    }

    private void assertRecords(final Map<String, List<DataRecord>> recordMap) {
        assertThat(recordMap.size(), is(1));
        assertThat(recordMap.containsKey("STATE"), is(true));

        final List<DataRecord> records = recordMap.get("STATE");
        assertThat(records.size(), is(4));

        final FileHeaderRecord header = (FileHeaderRecord) records.get(0);
        assertThat(header.getColumns(), is(new String[] { "COL1", "COL2", "COL3", "COL4", "COL5" }));

        final FileDataRecord dataRecord1 = (FileDataRecord) records.get(1);
        assertThat(dataRecord1.getColumns(), is(new String[] { "row11", "row12", "row13", "row14", "row15" }));

        final FileDataRecord dataRecord2 = (FileDataRecord) records.get(2);
        assertThat(dataRecord2.getColumns(), is(new String[] { "row21", "row22", "row23", "row24", "row25" }));

        final FileDataRecord dataRecord3 = (FileDataRecord) records.get(3);
        assertThat(dataRecord3.getColumns(), is(new String[] { "row31", "row32", "row33", "row34", "row35" }));
    }

    private InputStream getCSV() {
        final String lines = "COL1,COL2,COL3,COL4,COL5\nrow11,row12,row13,row14,row15\nrow21,row22,row23,row24,row25\n"
                + "row31,row32,row33,row34,row35";
        return new ByteArrayInputStream(lines.getBytes());
    }

    private InputStream getCsvWithBlankRowsAtEnd() {
        final String lines = "COL1,COL2,COL3,COL4,COL5\nrow11,row12,row13,row14,row15\nrow21,row22,row23,row24,row25\n"
                + "row31,row32,row33,row34,row35\n,,,,\n,,,,";
        return new ByteArrayInputStream(lines.getBytes());
    }

    private InputStream getTAB() {
        final String lines = "COL1\tCOL2\tCOL3\tCOL4\tCOL5\nrow11\trow12\trow13\trow14\trow15\nrow21\trow22\trow23\trow24\trow25\n"
                + "row31\trow32\trow33\trow34\trow35";
        return new ByteArrayInputStream(lines.getBytes());
    }
}
