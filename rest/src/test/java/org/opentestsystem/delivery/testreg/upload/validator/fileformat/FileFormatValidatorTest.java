/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.upload.validator.fileformat;

import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;

import java.util.ArrayList;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.integration.AbstractRestEmbeddedMongoTest;
import org.opentestsystem.delivery.testreg.persistence.ParentEntityClassFinder;
import org.opentestsystem.delivery.testreg.upload.DataRecord;
import org.opentestsystem.delivery.testreg.upload.FileDataRecord;
import org.opentestsystem.delivery.testreg.upload.FileHeaderRecord;
import org.opentestsystem.delivery.testreg.upload.FileUploadUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.validation.BeanPropertyBindingResult;
import org.springframework.validation.Errors;
import org.springframework.validation.ValidationUtils;
import org.springframework.validation.Validator;


public class FileFormatValidatorTest extends AbstractRestEmbeddedMongoTest {
    
    @Autowired
    private javax.validation.Validator validator; //jsr303
    
    private Validator fileFormatValidator;
    
    private Errors result;
    
    private List<DataRecord> records;
    
    private boolean dataValidationInvoked;
    
    @Before
    public void setup() throws ClassNotFoundException {
        result = new BeanPropertyBindingResult("", "");
        fileFormatValidator = new FileFormatValidator(FormatType.STATE) {
            @Override
            protected boolean isValidData(FileDataRecord record, Errors errors) {
                dataValidationInvoked = true;
                return true;
            }
            
            public Validator setHeaderAndReturnValidator() {
                this.headers=new String[]{"SSID", "GRADE", "GENDER", "IEP", "LEP"};
                return this;
            }
        }.setHeaderAndReturnValidator();
        
        ReflectionTestUtils.setField(fileFormatValidator, "validator", validator, javax.validation.Validator.class);
        ReflectionTestUtils.setField(fileFormatValidator, "duplicateRecordProcessor", new DuplicateRecordProcessor());

        FileUploadUtils fileUploadUtils = new FileUploadUtils();
        ReflectionTestUtils.setField(fileUploadUtils, "parentEntityClassFinder", new ParentEntityClassFinder("org.opentestsystem.delivery.testreg.domain"));
        ReflectionTestUtils.setField(fileFormatValidator, "fileUploadUtils", fileUploadUtils);
        
        records = new ArrayList<DataRecord>();
        records.add(new FileHeaderRecord(new String[]{ "SSID", "GRADE", "GENDER", "IEP", "LEP" }));
    }
    
    
    @Test
    public void testValidFormat() {
        records.add(new FileDataRecord(2, new String[]{"MN", "Minnesota", "CLIENT", "0289901", "ADD"}));
        ValidationUtils.invokeValidator(fileFormatValidator, records, result);
        assertThat(result.hasErrors(), is(false));
        assertThat(dataValidationInvoked, is(true));
    }
    
    @Test
    public void testInvalidFormat() {
        records.add(new FileDataRecord(2, new String[]{"MN", "Minnesota", "CLIENT", "1A02-89901", "ADD"}));
        ValidationUtils.invokeValidator(fileFormatValidator, records, result);
        assertThat(result.hasErrors(), is(true));
        assertThat(result.getAllErrors().size(), is(1));
        assertThat(dataValidationInvoked, is(false));
    }   
}
