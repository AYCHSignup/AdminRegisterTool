/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.upload.validator.fileformat;

import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.upload.FileDataRecord;
import org.opentestsystem.delivery.testreg.upload.FileHeaderRecord;
import org.springframework.validation.BeanPropertyBindingResult;
import org.springframework.validation.Errors;

public class AbstractFileHeaderValidatorTest {
    
    AbstractFileHeaderValidator fileHeaderValidator;
    private final String[] configuredColumns = { "SSID", "GRADE", "GENDER", "IEP", "LEP" };
    private Errors result;
    
    @Before
    public void setup() {
        result = new BeanPropertyBindingResult("", "");
        fileHeaderValidator = new AbstractFileHeaderValidator("STATE") {
            @Override
            protected boolean isValidFormat(FileDataRecord record, Errors error) {
                return false;
            }
            
            @Override
            protected boolean isValidData(FileDataRecord record, Errors errors) {
                return false;
            }
            
            private AbstractFileHeaderValidator setColumnsAndReturnThis() {
                setHeaders(configuredColumns);
                return this;
            }
        }.setColumnsAndReturnThis();
    }
    
    @Test
    public void testValidColumns() {
        FileHeaderRecord headerRecord = new FileHeaderRecord(new String[]{"SSID", "GRADE", "GENDER", "IEP", "LEP"});
        assertThat(fileHeaderValidator.isValidHeader(headerRecord, result), is(true));
    }
    
    @Test
    public void testInvalidColumns() {
        FileHeaderRecord headerRecord = new FileHeaderRecord(new String[]{"SSID", "SCORE", "GENDER", "TEP", "LEP"});
        assertThat(fileHeaderValidator.isValidHeader(headerRecord, result), is(false));
        assertThat(result.getFieldErrors().size(), is(2));
        assertThat(result.getFieldErrors().get(0).getField(), is("Header [2]"));
        assertThat(result.getFieldErrors().get(0).getCodes()[2], is("header.invalid"));
        assertThat(result.getFieldErrors().get(1).getField(), is("Header [4]"));
        assertThat(result.getFieldErrors().get(1).getCodes()[2], is("header.invalid"));
    }
    
    @Test
    public void testExtraColumns() {
        FileHeaderRecord headerRecord = new FileHeaderRecord(new String[]{"SSID", "GRADE", "GENDER", "IEP", "LEP", "ETHNICITY", "INSTITUTION"});
        assertThat(fileHeaderValidator.isValidHeader(headerRecord, result), is(false));
        assertThat(result.getFieldErrors().size(), is(2));
        assertThat(result.getFieldErrors().get(0).getField(), is("Header [6]"));
        assertThat(result.getFieldErrors().get(0).getCodes()[2], is("header.notapplicable"));
        assertThat(result.getFieldErrors().get(1).getField(), is("Header [7]"));
        assertThat(result.getFieldErrors().get(1).getCodes()[2], is("header.notapplicable"));
    }
    
    @Test
    public void testMissingColumns() {
        FileHeaderRecord headerRecord = new FileHeaderRecord(new String[]{"SSID", "CASE", "STATUS", "IEP"});
        assertThat(fileHeaderValidator.isValidHeader(headerRecord, result), is(false));
        assertThat(result.getFieldErrors().get(0).getField(), is("Header [2]"));
        assertThat(result.getFieldErrors().get(0).getCodes()[2], is("header.invalid"));
        
        assertThat(result.getFieldErrors().get(1).getField(), is("Header [3]"));
        assertThat(result.getFieldErrors().get(1).getCodes()[2], is("header.invalid"));
        
        assertThat(result.getFieldErrors().get(2).getField(), is("Header [5]"));
        assertThat(result.getFieldErrors().get(2).getCodes()[2], is("header.missing"));
    }
}
