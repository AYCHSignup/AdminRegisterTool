/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.rest.view;

import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;

import java.util.HashMap;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.DistrictEntity;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.InstitutionEntity;
import org.opentestsystem.delivery.testreg.domain.StudentGroup;
import org.opentestsystem.delivery.testreg.domain.TestRegistrationBase;
import org.opentestsystem.delivery.testreg.persistence.HierarchyLevelToFormatTypeConverter;
import org.springframework.core.convert.support.GenericConversionService;
import org.springframework.test.util.ReflectionTestUtils;

public class StudentGroupEntityExportTransformerTest {
    
    private StudentGroupEntityExportTransformer studentGroupEntityExportTransformer;
    
    @SuppressWarnings("serial")
    @Before
    public void setup() {
        studentGroupEntityExportTransformer = new StudentGroupEntityExportTransformer();
        EntityNameFinder entityNameFinder = new EntityNameFinder();
        GenericConversionService conversionService = new GenericConversionService();
        conversionService.addConverter(new HierarchyLevelToFormatTypeConverter(conversionService));
        ReflectionTestUtils.setField(entityNameFinder, "conversionService", conversionService);
        ReflectionTestUtils.setField(entityNameFinder, "entityService", new MockTestRegPerisister(){
            @SuppressWarnings("unchecked")
            public <T extends TestRegistrationBase> T findById(final String pkId, final FormatType formatType) {
                switch(formatType) {
                    case INSTITUTION:
                        InstitutionEntity ie = new InstitutionEntity();
                        ie.setEntityName("SONS_OF_ANARCHY");
                        return (T)ie;
                    case DISTRICT:
                        DistrictEntity de = new DistrictEntity();
                        de.setEntityName("HIGHLAND_DISTRICT");
                        return (T)de;
                    default:
                        return null;
                }
            }
        });
        ReflectionTestUtils.setField(entityNameFinder, "headersMap", new HashMap<String, String[]>(){{
            put("STUDENTGROUP", new String[]{"Student Group Name", "Organization Name", "Name of Institution", "Student Identifier", "State Abbreviation", "Email Address"});
        }});
        
        ReflectionTestUtils.setField(studentGroupEntityExportTransformer, "entityNameFinder", entityNameFinder);
    }
    
    @Test
    public void testNamePopulated() {
        StudentGroup stg = new StudentGroup();
        stg.setOwnerEmail("student@mit.edu");
        stg.setStudentGroupName("REBELS_OF_MATH&SCIENCE");
        stg.setStudentId("da45451we");
        stg.setStateAbbreviation("TX");
        stg.setInstitutionIdentifier("I909199");
        stg.setDistrictIdentifier("D12344");
        stg.setDistrictEntityMongoId("SOME RANDOM NUMBER.");
        assertThat(stg.toStringArray(), is(new String[]{"REBELS_OF_MATH&SCIENCE", "D12344", "I909199", "da45451we", "TX", "student@mit.edu"}));
        assertThat(studentGroupEntityExportTransformer.transform(stg), is(new String[]{"REBELS_OF_MATH&SCIENCE", "HIGHLAND_DISTRICT", "SONS_OF_ANARCHY", "da45451we", "TX", "student@mit.edu"}));
        
    }
}
