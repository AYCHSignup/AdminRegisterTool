/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.integration;

import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.Matchers.hasSize;
import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertThat;
import static org.junit.Assert.fail;
import static org.opentestsystem.delivery.testreg.domain.TestRegPermission.ENTITY_MODIFY;
import static org.opentestsystem.delivery.testreg.domain.TestRegPermission.ENTITY_READ;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.InputStreamReader;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.DistrictEntity;
import org.opentestsystem.delivery.testreg.domain.GroupOfStatesEntity;
import org.opentestsystem.delivery.testreg.domain.HierarchyLevel;
import org.opentestsystem.delivery.testreg.domain.InstitutionEntity;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.domain.Student.Gender;
import org.opentestsystem.delivery.testreg.domain.Student.GradeLevel;
import org.opentestsystem.delivery.testreg.domain.Student.PrimaryDisabilityType;
import org.opentestsystem.delivery.testreg.domain.Student.Title3ProgramType;
import org.opentestsystem.shared.docs.annotation.ApiDocExample;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.mock.web.MockHttpServletResponse;

import au.com.bytecode.opencsv.CSVReader;

import com.google.common.collect.Maps;

public class InstitutionControllerTest extends AbstractSecuredRestEmbeddedMongoTest {

    private Map<String, Object> params;
    private Map<String, String> uploadParams;

    @Before
    public void buildParams() {
        // Insert parent entity
        mongoTemplate.insert(new GroupOfStatesEntity.Builder("12345", "MIDWEST STATES", "CLIENT", "00000", "ADD")
        .build());
        mongoTemplate.insert(new DistrictEntity.Builder("43534", "WI Group Of Districts", "34534", "CLIENT", "00000",
                "WI", "ADD").build());

        params = Maps.newHashMap();
        params.put("entityId", "12344");
        params.put("entityName", "TestSchool");
        params.put("parentEntityType", "GROUPOFSTATES");
        params.put("nationwideIdentifier", "1233");
        params.put("parentEntityId", "12345");
        params.put("stateAbbreviation", "WI");

        uploadParams = Maps.newHashMap();
        uploadParams.put("entityId", "12344");
        uploadParams.put("entityName", "TestSchool");
        uploadParams.put("parentEntityType", "GROUPOFSTATES");
        uploadParams.put("nationwideIdentifier", "1233");
        uploadParams.put("parentEntityId", "12345");
        uploadParams.put("stateAbbreviation", "WI");
        uploadParams.put("currentPage", "0");
    }

    @Test
    public void saveInstitutionEntity() throws InterruptedException {
        InstitutionEntity savedInstitutionEntity = callPOSTRestService("/institution", params, InstitutionEntity.class,
                ENTITY_MODIFY);
        assertEquals("InstitutionEntity should be created", 1, mongoTemplate.findAll(InstitutionEntity.class).size());
        assertNotNull(savedInstitutionEntity);
    }

    @Test
    public void updateInstitutionEntity() throws InterruptedException {
        InstitutionEntity savedInstitutionEntity = callPOSTRestService("/institution", params, InstitutionEntity.class, ENTITY_MODIFY);
        assertNotNull(savedInstitutionEntity);
        params.put("id", savedInstitutionEntity.getId());
        params.put("entityName", "Test Institution");
        InstitutionEntity updatedInstitutionEntity = callPUTRestService(
                "/institution/" + savedInstitutionEntity.getId(), params, InstitutionEntity.class, ENTITY_MODIFY);
        assertNotNull(updatedInstitutionEntity);
        assertEquals("InstitutionEntity should be updated", updatedInstitutionEntity.getEntityName(),
                "Test Institution");
    }

    @Test
    public void findInstitutionEntity() throws InterruptedException {
        InstitutionEntity savedInstitutionEntity = callPOSTRestService("/institution", params, InstitutionEntity.class,
                ENTITY_MODIFY);
        assertEquals("InstitutionEntity should be created", 1, mongoTemplate.findAll(InstitutionEntity.class).size());
        assertNotNull(savedInstitutionEntity);
        InstitutionEntity fetchedInstitutionEntity = callGETRestService(
                "/institution/" + savedInstitutionEntity.getId(), InstitutionEntity.class, ENTITY_READ);
        assertNotNull("InstitutionEntity was null!", fetchedInstitutionEntity);
    }

    @SuppressWarnings("unchecked")
    @Test
    public void findInstitutionGrades() throws InterruptedException {
        saveStudents();
        final Set<String> grades = callGETRestService("/institution/12345/state/WI/grades", Set.class, ENTITY_READ);
        assertThat("grades", grades, notNullValue());
        assertThat("grades", grades, hasSize(2));
    }

    @SuppressWarnings("unchecked")
    @Test
    public void findInstitutionByDistrictId() throws InterruptedException {
        params.put("parentEntityType", HierarchyLevel.DISTRICT.toString());
        params.put("parentEntityId", "43534");
        InstitutionEntity savedInstitution = callPOSTRestService("/institution", params, InstitutionEntity.class,
                ENTITY_MODIFY);
        assertThat("saved institution", savedInstitution, notNullValue());
        assertThat("saved institution", savedInstitution.getId(), notNullValue());

        final List<InstitutionEntity> fetchedInstitutions = callGETRestService("/institution?districtId=43534",
                List.class, ENTITY_READ);
        assertThat("fetched institution", fetchedInstitutions, notNullValue());
        assertThat("fetched institution", fetchedInstitutions, hasSize(1));
    }

    @Test
    public void deleteInstitutionEntity() throws InterruptedException {
        InstitutionEntity savedInstitutionEntity = callPOSTRestService("/institution", params, InstitutionEntity.class,
                ENTITY_MODIFY);
        assertEquals("InstitutionEntity should be created", 1, mongoTemplate.findAll(InstitutionEntity.class).size());
        assertNotNull(savedInstitutionEntity);
        try {
            callDeleteRestService("/institution/" + savedInstitutionEntity.getId(), ENTITY_MODIFY);
        } catch (Exception e) {
            fail("Cannot delete configuration");
        }
        InstitutionEntity fetchedInstitutionEntity = callGETRestService(
                "/institution/" + savedInstitutionEntity.getId(), InstitutionEntity.class, ENTITY_READ);
        assertNull("InstitutionEntity was null!", fetchedInstitutionEntity);
    }

    @SuppressWarnings("unchecked")
    @Test
    public void searchInstitutionEntity() throws InterruptedException {
        InstitutionEntity savedInstitutionEntity = callPOSTRestService("/institution", params, InstitutionEntity.class,
                ENTITY_MODIFY);
        assertEquals("InstitutionEntity should be created", 1, mongoTemplate.findAll(InstitutionEntity.class).size());
        assertNotNull(savedInstitutionEntity);

        Map<String, String> params = Maps.newHashMap();
        params.put("entityId", savedInstitutionEntity.getEntityId());
        SearchResponse<Sb11Entity> resp = callGETRestService("/institution" + buildQueryString(params),
                SearchResponse.class, ENTITY_READ);
        assertNotNull(resp);
        assertEquals("only one should be found", 1, resp.getReturnCount());
    }

    @Test
    @ApiDocExample(rank = -1)
    public void exportToExcelWithPageParams() throws Exception {
        InstitutionEntity entity = callPOSTRestService("/institution", params, InstitutionEntity.class, ENTITY_MODIFY);
        assertEquals("InstitutionEntity should be created", 1, mongoTemplate.findAll(InstitutionEntity.class).size());
        assertNotNull(entity);

        MockHttpServletResponse response = callGETRestService1("/institutions.xls" + buildQueryString(uploadParams), ENTITY_READ);
        assertNotNull(response);
        assertEquals("Content-Type is not equal application/vnd.ms-excel", "application/vnd.ms-excel",
                response.getContentType());
        assertNotNull("Institution ExportExcel Data is null", response.getContentAsByteArray());
        byte[] resData = response.getContentAsByteArray();
        ByteArrayInputStream st = new ByteArrayInputStream(resData);
        HSSFWorkbook workbook = new HSSFWorkbook(st);
        Sheet sheet = workbook.getSheetAt(0);
        Row dataRow = sheet.getRow(1);
        assertThat(dataRow.getCell(0).getStringCellValue(), is(entity.getEntityId()));
        assertThat(dataRow.getCell(1).getStringCellValue(), is(entity.getEntityName()));
        assertThat(dataRow.getCell(2).getStringCellValue(), is(entity.getParentEntityType().toString()));
        assertThat(dataRow.getCell(3).getStringCellValue(), is(entity.getNationwideIdentifier()));
        assertThat(dataRow.getCell(4).getStringCellValue(), is("MIDWEST STATES")); // Parent Entity Name
        assertThat(dataRow.getCell(5).getStringCellValue(), is(entity.getStateAbbreviation()));

    }

    @Test
    @ApiDocExample(rank = -1)
    public void exportToExcelWithExtension() throws Exception {
        InstitutionEntity entity = callPOSTRestService("/institution", params, InstitutionEntity.class, ENTITY_MODIFY);
        assertEquals("InstitutionEntity should be created", 1, mongoTemplate.findAll(InstitutionEntity.class).size());
        assertNotNull(entity);

        MockHttpServletResponse response = callGETRestService1("/institutions.xls", ENTITY_READ);
        assertNotNull(response);
        assertEquals("Content-Type is not equal application/vnd.ms-excel", "application/vnd.ms-excel",
                response.getContentType());
        assertNotNull("Institution ExportExcel Data is null", response.getContentAsByteArray());
        byte[] resData = response.getContentAsByteArray();
        ByteArrayInputStream st = new ByteArrayInputStream(resData);
        HSSFWorkbook workbook = new HSSFWorkbook(st);
        Sheet sheet = workbook.getSheetAt(0);

        Row dataRow = sheet.getRow(1);
        assertThat(dataRow.getCell(0).getStringCellValue(), is(entity.getEntityId()));
        assertThat(dataRow.getCell(1).getStringCellValue(), is(entity.getEntityName()));
        assertThat(dataRow.getCell(2).getStringCellValue(), is(entity.getParentEntityType().toString()));
        assertThat(dataRow.getCell(3).getStringCellValue(), is(entity.getNationwideIdentifier()));
        assertThat(dataRow.getCell(4).getStringCellValue(), is("MIDWEST STATES")); // Parent Entity Name
        assertThat(dataRow.getCell(5).getStringCellValue(), is(entity.getStateAbbreviation()));
    }

    @Test
    @ApiDocExample(rank = -1)
    public void exportToCsvWithExtension() throws Exception {
        InstitutionEntity entity = callPOSTRestService("/institution", params, InstitutionEntity.class, ENTITY_MODIFY);
        assertEquals("InstitutionEntity should be created", 1, mongoTemplate.findAll(InstitutionEntity.class).size());
        assertNotNull(entity);

        MockHttpServletResponse response = callGETRestService1("/institutions.csv", ENTITY_READ);
        assertNotNull(response);
        assertEquals("Content-Type is not equal application/csv", com.google.common.net.MediaType.CSV_UTF_8.toString(),
                response.getContentType());
        assertNotNull("Institution Export CSV Data is null", response.getContentAsByteArray());
        byte[] resData = response.getContentAsByteArray();

        ByteArrayInputStream st = new ByteArrayInputStream(resData);
        BufferedReader reader = new BufferedReader(new InputStreamReader(st));
        CSVReader cvsReader = new CSVReader(reader);
        cvsReader.readNext();
        String[] dataRow = cvsReader.readNext();
        assertThat(dataRow[0], is(entity.getEntityId()));
        assertThat(dataRow[1], is(entity.getEntityName()));
        assertThat(dataRow[2], is(entity.getParentEntityType().toString()));
        assertThat(dataRow[3], is(entity.getNationwideIdentifier()));
        assertThat(dataRow[4], is("MIDWEST STATES")); // Parent Entity Name
        assertThat(dataRow[5], is(entity.getStateAbbreviation()));
        cvsReader.close();
    }

    private void saveStudents() {
        mongoTemplate.insert(new InstitutionEntity.Builder("12345", "Middleton School", "CLIENT", "12223", "00000",
                "WI", "ADD").build());

        Student student = new Student();
        student.setEntityId("123456");
        student.setStateAbbreviation("WI");
        student.setDistrictIdentifier("101");
        student.setInstitutionIdentifier("12345");
        student.setMiddleName("MS");
        student.setFirstName("Joe");
        student.setLastName("Smith");
        student.setBirthDate("2013-10-10");
        student.setExternalSsid("WI12345");
        student.setGradeLevelWhenAssessed(GradeLevel.EIGHTHGRADE);
        student.setGender(Gender.Male);
        student.setHispanicOrLatino("NO");
        student.setAmericanIndianOrAlaskaNative("NO");
        student.setAsian("NO");
        student.setLanguageCode("eng");
        student.setBlackOrAfricanAmerican("NO");
        student.setWhite("Yes");
        student.setNativeHawaiianOrPacificIsland("NO");
        student.setTwoOrMoreRaces("NO");
        student.setiDEAIndicator("NO");
        student.setLepStatus("NO");
        student.setSection504Status("NO");
        student.setDisadvantageStatus("YES");
        student.setTitle3ProgressStatus("PROFICIENT");
        student.setMigrantStatus("YES");
        student.setFirstEntryDateIntoUsSchool("2014-09-01");
        student.setLepEntryDate("2010-10-10");
        student.setLepExitDate("2010-10-20");
        student.setTitle3ProgramType(Title3ProgramType.DUALLANGUAGE);
        student.setPrimaryDisabilityType(PrimaryDisabilityType.AUT);

        Student student1 = new Student();
        student1.setEntityId("45345");
        student1.setStateAbbreviation("WI");
        student1.setDistrictIdentifier("101");
        student1.setInstitutionIdentifier("12345");
        student1.setMiddleName("MS");
        student1.setFirstName("Joe");
        student1.setLastName("Smith");
        student1.setBirthDate("2013-10-10");
        student1.setExternalSsid("WI123456");
        student1.setGradeLevelWhenAssessed(GradeLevel.NINTHGRADE);
        student1.setGender(Gender.Male);
        student1.setHispanicOrLatino("NO");
        student1.setAmericanIndianOrAlaskaNative("NO");
        student1.setAsian("NO");
        student1.setLanguageCode("eng");
        student1.setBlackOrAfricanAmerican("NO");
        student1.setWhite("Yes");
        student1.setNativeHawaiianOrPacificIsland("NO");
        student1.setTwoOrMoreRaces("NO");
        student1.setiDEAIndicator("NO");
        student1.setLepStatus("NO");
        student1.setSection504Status("NO");
        student1.setDisadvantageStatus("YES");
        student1.setTitle3ProgressStatus("PROFICIENT");
        student1.setMigrantStatus("YES");
        student1.setFirstEntryDateIntoUsSchool("2014-09-01");
        student1.setLepEntryDate("2010-10-10");
        student1.setLepExitDate("2010-10-20");
        student1.setTitle3ProgramType(Title3ProgramType.DUALLANGUAGE);
        student1.setPrimaryDisabilityType(PrimaryDisabilityType.AUT);

        mongoTemplate.insert(student);
        mongoTemplate.insert(student1);
    }
}
