/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.integration;

import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.EntityCrosswalk;
import org.opentestsystem.delivery.testreg.domain.FormatType;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import static org.hamcrest.CoreMatchers.*;
import static org.hamcrest.collection.IsEmptyCollection.*;
import static org.junit.Assert.*;
import static org.opentestsystem.delivery.testreg.domain.FormatType.*;

public class EntityCrosswalkControllerTest extends AbstractRestEmbeddedMongoTest {

    //Nothing in DB
    @Test
    public void defaultCrosswalkMapping() {
        @SuppressWarnings("unchecked")
        Map<String, Map<String, String>> result = callGETRestService("/crosswalkMap", Map.class);
        assertThat(result, is(notNullValue()));

        for (FormatType formatType : FormatType.values()) {
            Map<String, String> displayMap = result.get(formatType.toString());
            if (emptyFormats().contains(formatType.toString())) {
                assertThat(displayMap, is(nullValue()));
            } else {
                assertThat(displayMap, is(notNullValue()));
            }
            for (Entry<String, String> entry : displayMap.entrySet()) {
                assertThat(entry.getKey(), is(entry.getValue()));
            }
        }
    }

    private List<FormatType> emptyFormats() {
        return Arrays.asList(FormatType.EXPLICITELIGIBILITY, FormatType.STUDENTGROUP, FormatType.CLIENT, FormatType.NULL);
    }

    @SuppressWarnings({ "serial", "unchecked" })
    @Test
    public void modifiedDefaultCrosswalkMapping() {
        //Verify default exists 
        Map<String, Map<String, String>> result = callGETRestService("/crosswalkMap", Map.class);
        assertThat(result.get(DISTRICT.getFormatName()).get("State Abbreviation"), is("State Abbreviation"));
        assertThat(result.get(ASSESSMENT.getFormatName()).get("Total Global Opportunities"), is("Total Global Opportunities"));

        //Modify Crosswalks for some display fields
        mongoTemplate.insertAll(new ArrayList<EntityCrosswalk>() {{
            add(new EntityCrosswalk(FormatType.DISTRICT, "State Abbreviation", "SA"));
            add(new EntityCrosswalk(FormatType.ASSESSMENT, "Total Global Opportunities", "Sum Glbl Opps"));
        }});

        //Check Crosswalks again
        result = callGETRestService("/crosswalkMap", Map.class);
        assertThat(result.get(DISTRICT.getFormatName()).get("State Abbreviation"), is("SA"));
        assertThat(result.get(ASSESSMENT.getFormatName()).get("Total Global Opportunities"), is("Sum Glbl Opps"));
    }

    @Test
    public void loadCrosswalks() { //Loads Default mapping to DB
        //verify no Crosswalks exists in DB
        assertThat(mongoTemplate.findAll(EntityCrosswalk.class), is(empty()));

        //Load Crosswalks
        @SuppressWarnings("unchecked")
        Map<String, Integer> result = callGETRestService("/loadCrosswalks", Map.class);
        assertThat(result.get("Success") > 1, is(true));

        //Check DB
        List<EntityCrosswalk> list = mongoTemplate.findAll(EntityCrosswalk.class);
        assertThat(list, is(notNullValue()));
    }
}
