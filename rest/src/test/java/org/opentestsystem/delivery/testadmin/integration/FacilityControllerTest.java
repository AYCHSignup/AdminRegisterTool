/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testadmin.integration;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.fail;
import static org.opentestsystem.delivery.testreg.domain.TestRegPermission.FACILITY_READ;
import static org.opentestsystem.delivery.testreg.domain.TestRegPermission.FACILITY_MODIFY;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testadmin.domain.Facility;
import org.opentestsystem.delivery.testadmin.domain.Facility.SeatConfiguration;
import org.opentestsystem.delivery.testadmin.domain.search.FacilitySearchRequest;
import org.opentestsystem.delivery.testreg.domain.InstitutionEntity;
import org.opentestsystem.delivery.testreg.integration.AbstractSecuredRestEmbeddedMongoTest;
import org.opentestsystem.shared.search.domain.SearchResponse;

import com.google.common.collect.Maps;

public class FacilityControllerTest extends AbstractSecuredRestEmbeddedMongoTest {
    
    private Map<String, Object> params;
    
    private SeatConfiguration seatConfig;
    
    @Before
    public void setup() {
        mongoTemplate.insert(new InstitutionEntity.Builder("INS001", "Institution_1", "CLIENT", "34534", "00000", "WI", "ADD").build());

        params = Maps.newHashMap();
        params.put("facilityName", "Facility1");
        params.put("location", "North Wing");
        params.put("stateAbbreviation", "WI");
        params.put("institutionIdentifier", "INS001");
        params.put("institutionId", mongoTemplate.findAll(InstitutionEntity.class).get(0).getId());

        seatConfig = new SeatConfiguration();
        seatConfig.setAccessibilityEquipments(Arrays.asList(new String[] {"projector", "headphones"}));
        seatConfig.setTestPlatform("MACOSX");
        seatConfig.setNumberOfSeats(20);
        
        params.put("seatConfigurations", Arrays.asList(new SeatConfiguration[]{seatConfig}));
    }

    @Test
    public void saveFacility() throws InterruptedException {
        Facility savedFacility = callPOSTRestService("/facility", params, Facility.class, FACILITY_MODIFY);
        assertEquals("Facility should be created", 1, mongoTemplate.findAll(Facility.class).size());
        assertNotNull(savedFacility);
        assertNotNull(savedFacility.getSeats());
        assertEquals(savedFacility.getSeatConfigurations().size(), 1);
    }

    @Test
    public void updateFacility() throws InterruptedException {
        Facility savedFacility = callPOSTRestService("/facility", params, Facility.class, FACILITY_MODIFY);
        assertNotNull(savedFacility);
        params.put("id", savedFacility.getId());
        params.put("facilityName", "Facility2");
        Facility updatedFacility = callPUTRestService("/facility/" + savedFacility.getId(), params, Facility.class);
        assertNotNull(updatedFacility);
        assertEquals("Facility should be updated", updatedFacility.getFacilityName(), "Facility2");
    }


    @Test
    public void findFacility() throws InterruptedException {
        Facility savedFacility = callPOSTRestService("/facility", params, Facility.class, FACILITY_MODIFY);
        assertEquals("Facility should be created", 1, mongoTemplate.findAll(Facility.class).size());
        assertNotNull(savedFacility);
        Facility fetchedFacility = callGETRestService("/facility/" + savedFacility.getId(), Facility.class, FACILITY_READ);
        assertNotNull("Facility was null!", fetchedFacility);
    }

    @Test
    public void testRemoveFacility() throws InterruptedException {
        Facility savedFacility = callPOSTRestService("/facility", params, Facility.class, FACILITY_MODIFY);

        assertEquals("Facility should be created", 1, mongoTemplate.findAll(Facility.class).size());
        assertNotNull(savedFacility);
        try {
            callDeleteRestService("/facility/" + savedFacility.getId());
        } catch (Exception e) {
            fail("Cannot delete configuration");
        }

        Facility fetchedFacility = callGETRestService("/facility/" + savedFacility.getId(), Facility.class, FACILITY_READ);
        assertNull("Facility must be null!", fetchedFacility);
    }

    @SuppressWarnings("unchecked")
    @Test
    public void searchFacilityTest() {
        Map<String, Object> facilityParams1 = new HashMap<String, Object>();
        facilityParams1.put("facilityName", "facility1");
        facilityParams1.put("institutionIdentifier", "INS001");
        facilityParams1.put("stateAbbreviation", "WI");
        facilityParams1.put("institutionId", mongoTemplate.findAll(InstitutionEntity.class).get(0).getId());
        facilityParams1.put("seatConfigurations", Arrays.asList(new SeatConfiguration[]{seatConfig}));
        
        callPOSTRestService("/facility", facilityParams1, Facility.class, FACILITY_MODIFY);

        Map<String, Object> facilityParams2 = new HashMap<String, Object>();
        facilityParams2.put("facilityName", "facility2");
        facilityParams2.put("institutionIdentifier", "INS001");
        facilityParams2.put("stateAbbreviation", "WI");
        facilityParams2.put("institutionId", mongoTemplate.findAll(InstitutionEntity.class).get(0).getId());
        facilityParams2.put("seatConfigurations", Arrays.asList(new SeatConfiguration[]{seatConfig}));
        
        callPOSTRestService("/facility", facilityParams2, Facility.class, FACILITY_MODIFY);
        assertEquals("2 facilitys should be created", 2, mongoTemplate.findAll(Facility.class).size());

        Map<String, String> params = Maps.newHashMap();
        params.put(FacilitySearchRequest.SEARCH_KEY_FACILITY_NAME, "facility1");
        SearchResponse<Facility> resp = callGETRestService("/facility" + buildQueryString(params), SearchResponse.class, FACILITY_READ);
        assertNotNull(resp);
        assertEquals("one should be found", 1, resp.getReturnCount());

        params.clear();
        params.put(FacilitySearchRequest.SEARCH_KEY_FACILITY_NAME, "invalid");
        resp = callGETRestService("/facility" + buildQueryString(params), SearchResponse.class, FACILITY_READ);
        assertNotNull(resp);
        assertEquals("zero should be found", 0, resp.getReturnCount());

        params.clear();
        params.put(FacilitySearchRequest.SEARCH_KEY_FACILITY_NAME, "facility");
        resp = callGETRestService("/facility" + buildQueryString(params), SearchResponse.class, FACILITY_READ);
        assertNotNull(resp);
        assertEquals("two should be found", 2, resp.getReturnCount());
    }

}
