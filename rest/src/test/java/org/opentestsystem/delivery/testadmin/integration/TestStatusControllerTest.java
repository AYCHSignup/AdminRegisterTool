/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testadmin.integration;

import org.joda.time.DateTime;
import org.junit.After;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.opentestsystem.delivery.testadmin.domain.Status;
import org.opentestsystem.delivery.testadmin.domain.TestStatus;
import org.opentestsystem.delivery.testadmin.domain.TestStatusRequest;
import org.opentestsystem.delivery.testreg.domain.TestRegPermission;
import org.opentestsystem.delivery.testreg.integration.AbstractSecuredRestEmbeddedMongoTest;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import static org.junit.Assert.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

public class TestStatusControllerTest extends AbstractSecuredRestEmbeddedMongoTest {

    Map<String, Object> params;
    List<TestStatusRequest> list;
    MockHttpServletRequestBuilder request;

    @Before
    public void setup() {
        list = new ArrayList<>();
        TestStatus testStatus = createTestStatus();
        mongoTemplate.save(testStatus);
    }

    @After
    public void teardown() {
        mongoTemplate.dropCollection(TestStatus.class);
    }

    private static final String PUT_URL = "/testStatus";

    @Ignore
    @Test
    public void updateTestStatus() throws Exception {
        TestStatusRequest request = createTestStatusRequest();
        list.add(request);
        byte[] arrays = objectMapper.writeValueAsBytes(list);
        callPUTRestService(PUT_URL, arrays, TestStatus.class, TestRegPermission.TESTSTATUS_MODIFY);
    }

    @Test
    public void updateTestStatusValidationError() throws Exception {
        TestStatusRequest request = createInvalidTestStatusRequest();
        list.add(request);

        byte[] arrays = objectMapper.writeValueAsBytes(list);

        MvcResult result = mockMvc
                .perform(
                        put("/testStatus").accept(MediaType.ALL).contentType(MediaType.APPLICATION_JSON)
                                .content(arrays)).andExpect(status().isBadRequest()).andReturn();

        assertEquals(HttpStatus.BAD_REQUEST.value(), result.getResponse().getStatus());

    }

    private TestStatus createTestStatus() {
        TestStatus status = new TestStatus();
        status.setAssessmentId("101010101");
        status.setStudentId("10001");
        status.setStateAbbreviation("WI");
        status.setOpportunity(1);
        status.setStatus(Status.SCHEDULED.name());
        return status;

    }

    private TestStatusRequest createTestStatusRequest() {
        TestStatusRequest status = new TestStatusRequest();
        status.setTestId("101010101");
        status.setStudentId("10001");
        status.setStateAbbreviation("WI");
        status.setOpportunity(1);
        status.setStatus(Status.COMPLETED.name());
        status.setUpdatedTime(new DateTime(2014, 06, 03, 12, 00));
        return status;
    }

    private TestStatusRequest createInvalidTestStatusRequest() {
        TestStatusRequest status = new TestStatusRequest();
        status.setTestId("101010101");
        status.setStudentId(null);
        status.setStateAbbreviation("WI");
        status.setOpportunity(1);
        status.setStatus(Status.COMPLETED.name());
        status.setUpdatedTime(new DateTime(2014, 06, 03, 12, 00));
        return status;

    }

    class StatTestStatusRequestusReponse {

        public String getStudentId() {
            return studentId;
        }

        public void setStudentId(String studentId) {
            this.studentId = studentId;
        }

        public String getStateAbbreviation() {
            return stateAbbreviation;
        }

        public void setStateAbbreviation(String stateAbbreviation) {
            this.stateAbbreviation = stateAbbreviation;
        }

        public String getOpportunity() {
            return opportunity;
        }

        public void setOpportunity(String opportunity) {
            this.opportunity = opportunity;
        }

        public String getStatus() {
            return status;
        }

        public void setStatus(String status) {
            this.status = status;
        }

        private String testId;
        private String studentId;
        private String stateAbbreviation;
        private String opportunity;
        private String status;

        public String getTestId() {
            return testId;
        }

        public void setTestId(String testId) {
            this.testId = testId;
        }

        public String getUpdatedTime() {
            return updatedTime;
        }

        public void setUpdatedTime(String updatedTime) {
            this.updatedTime = updatedTime;
        }

        private String updatedTime;

    }
}
