/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testadmin.rest;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.Matchers.hasSize;
import static org.junit.Assert.assertThat;

import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testadmin.domain.TestPlatform;
import org.opentestsystem.delivery.testreg.integration.AbstractRestEmbeddedMongoTest;
import org.opentestsystem.shared.search.domain.SearchResponse;

import com.google.common.collect.Maps;

@SuppressWarnings("unchecked")
public class TestPlatformControllerTest extends AbstractRestEmbeddedMongoTest {

    private Map<String, Object> params;

    @Before
    public void buildParams() {

        params = Maps.newHashMap();
        params.put("name", "Computer");
        params.put("operatingSystem", "Windows");
        params.put("version", "1.1");
        params.put("browserName", "IE");
        params.put("browserVersion", "11");

    }

    @Test
    public void saveTestPlatForm() throws InterruptedException {
        TestPlatform savedTestPlatForm = callPOSTRestService("/testplatform", params, TestPlatform.class);
        assertThat("saved updatedEntity", savedTestPlatForm, notNullValue());

    }

    @Test
    public void updateTestPlatForm() throws InterruptedException {
        TestPlatform savedTestPlatForm = callPOSTRestService("/testplatform", params, TestPlatform.class);
        params.put("id", savedTestPlatForm.getId());
        params.put("name", "IPAD");
        TestPlatform updatedEntity = callPUTRestService("/testplatform/" + savedTestPlatForm.getId(), params, TestPlatform.class);
        assertThat("updated updatedEntity", updatedEntity, notNullValue());
        assertThat("updated updatedEntity", updatedEntity.getName(), equalTo("IPAD"));
    }

    @Test
    public void removeTestPlatForm() throws InterruptedException {
        TestPlatform savedTestPlatForm = callPOSTRestService("/testplatform", params, TestPlatform.class);
        callDeleteRestService("/testplatform/" + savedTestPlatForm.getId());
        TestPlatform fetchedTestPlatForm = callGETRestService("/testplatform/" + savedTestPlatForm.getId(), TestPlatform.class);
        assertThat("fetched TestPlatForm", fetchedTestPlatForm, nullValue());
    }

    @Test
    public void getTestPlatForm() throws InterruptedException {
        TestPlatform savedTestPlatForm = callPOSTRestService("/testplatform", params, TestPlatform.class);
        TestPlatform fetchedTestPlatForm = callGETRestService("/testplatform/" + savedTestPlatForm.getId(), TestPlatform.class);
        assertThat("fetched TestPlatForm", fetchedTestPlatForm, notNullValue());
        assertThat("fetched TestPlatForm", fetchedTestPlatForm.getId(), equalTo(savedTestPlatForm.getId()));
    }

    @Test
    public void searchTestPlatForms() throws InterruptedException {
        TestPlatform savedTestPlatForm = callPOSTRestService("/testplatform", params, TestPlatform.class);
        assertThat("saved updatedEntity", savedTestPlatForm, notNullValue());
        Map<String, String> searchParams = Maps.newHashMap();
        searchParams.put("name", "Computer");
        SearchResponse<TestPlatform> response = callGETRestService("/testplatform" + buildQueryString(searchParams), SearchResponse.class);
        assertThat("TestPlatForms", response.getSearchResults(), notNullValue());
        assertThat("TestPlatForms", response.getSearchResults(), hasSize(1));
    }
}
