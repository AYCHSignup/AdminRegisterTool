/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testadmin.integration;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.springframework.test.util.ReflectionTestUtils.setField;

import java.io.ByteArrayInputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

import javax.annotation.Resource;

import org.joda.time.DateTime;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testadmin.domain.Status;
import org.opentestsystem.delivery.testadmin.domain.TestStatus;
import org.opentestsystem.delivery.testadmin.domain.schedule.Schedule;
import org.opentestsystem.delivery.testadmin.domain.schedule.ScheduledDay;
import org.opentestsystem.delivery.testadmin.domain.schedule.ScheduledFacility;
import org.opentestsystem.delivery.testadmin.domain.schedule.ScheduledSeat;
import org.opentestsystem.delivery.testadmin.domain.schedule.ScheduledTimeSlot;
import org.opentestsystem.delivery.testadmin.persistence.TestStatusRepository;
import org.opentestsystem.delivery.testadmin.service.ScheduleReportService;
import org.opentestsystem.delivery.testreg.domain.Assessment;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.HierarchyLevel;
import org.opentestsystem.delivery.testreg.domain.InstitutionEntity;
import org.opentestsystem.delivery.testreg.domain.Sb11NonEntity;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.domain.TestRegPermission;
import org.opentestsystem.delivery.testreg.domain.TestRegistrationBase;
import org.opentestsystem.delivery.testreg.integration.AbstractSecuredRestEmbeddedMongoTest;
import org.opentestsystem.delivery.testreg.persistence.StudentRepository;
import org.opentestsystem.delivery.testreg.service.TestRegPersister;
import org.opentestsystem.shared.search.domain.AbstractSearchRequest;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.mock.web.MockHttpServletResponse;

import com.google.common.collect.Maps;
import com.lowagie.text.pdf.PdfReader;

public class StudentScheduleReportControllerTest extends AbstractSecuredRestEmbeddedMongoTest {

    private Map<String, String> uploadParams;
    @Resource(name = "studentScheduleReportService")
    private ScheduleReportService scheduleReportService;

    InstitutionEntity institutionEntity;

    @Before
    public void buildUploadParams() {
        this.uploadParams = Maps.newHashMap();
        this.uploadParams.put("scheduleName", "scheduleDemo");
        this.uploadParams.put("tenantId", "524af61ae4b0b02763aa0fe0");
        this.uploadParams.put("startDate", "2016-06-01");
        this.uploadParams.put("endDate", "2016-06-02");
    }

    @Before
    public void setup() {
        this.institutionEntity = new InstitutionEntity.Builder("10001", "MiddletonSchool", "CLIENT", "234", "000000", "CA",
                "ADD").build();
        this.mongoTemplate.save(this.institutionEntity);
        final Schedule schedule = createShedule();
        this.mongoTemplate.save(schedule);
    }

    @After
    public void teardown() {
        this.mongoTemplate.dropCollection(Schedule.class);
    }

    @Test
    public void createStudentScheduledReport() throws Exception {
        setField(this.scheduleReportService, "entityService", new MockEntityService());
        setField(this.scheduleReportService, "studentRepos", new MockStudentService());
        setField(this.scheduleReportService, "studentTestRepository", new MockTestStatusRepository());
        this.uploadParams.put("institutionId", this.institutionEntity.getId());
        final MockHttpServletResponse response = callGETRestService1("/studentScheduleReport.pdf"
                + buildQueryString(this.uploadParams), TestRegPermission.STUDENTSCHEDULEREPORT_READ);
        assertNotNull(response);
        assertEquals("Content-Type is not equal application/pdf", "application/pdf", response.getContentType());
        assertNotNull("Student Scheduled Report Data is null", response.getContentAsByteArray());
        final byte[] resData = response.getContentAsByteArray();
        final ByteArrayInputStream st = new ByteArrayInputStream(resData);
        final PdfReader reader = new PdfReader(st);
        final byte[] streamBytes = reader.getPageContent(1);
        assertNotNull("Student Scheduled Report Data is null", streamBytes);
    }

    private Schedule createShedule() {
        Schedule schedule = new Schedule();
        final ScheduledSeat seat1 = new ScheduledSeat();
        final ScheduledSeat seat2 = new ScheduledSeat();
        final ScheduledSeat seat3 = new ScheduledSeat();

        final Student student1 = new Student();
        student1.setEntityId("0001");
        student1.setFirstName("1FName");
        student1.setFirstName("1LName");
        student1.setMiddleName("A");
        student1.setStateAbbreviation("WI");
        student1.setExternalSsid("1FNameLName@edu.org");

        final Student student2 = new Student();
        student1.setEntityId("0002");
        student2.setFirstName("2FName");
        student2.setFirstName("2LName");
        student2.setMiddleName("A");
        student2.setStateAbbreviation("WI");
        student2.setExternalSsid("2FNameLName@edu.org");
        final Student student3 = new Student();
        student1.setEntityId("0003");
        student3.setFirstName("3FName");
        student3.setFirstName("3LName");
        student3.setMiddleName("A");
        student3.setExternalSsid("3FNameLName@edu.org");
        student3.setStateAbbreviation("WI");

        final Assessment assessment1 = new Assessment();
        assessment1.setTestName("TEST1");
        assessment1.setTestLabel("TEST1-WI");

        final Assessment assessment2 = new Assessment();
        assessment2.setTestName("TEST2");
        assessment2.setTestLabel("TEST2-WI");

        final Assessment assessment3 = new Assessment();
        assessment3.setTestName("TEST3");
        assessment3.setTestLabel("TEST3-WI");

        final Set<ScheduledSeat> sets = new HashSet<ScheduledSeat>();
        seat1.setStudent(student1);
        seat1.setAssessment(assessment1);

        seat2.setStudent(student2);
        seat2.setAssessment(assessment2);

        seat3.setStudent(student3);
        seat3.setAssessment(assessment3);
        sets.add(seat1);
        sets.add(seat2);
        sets.add(seat3);

        final ScheduledTimeSlot sts1 = new ScheduledTimeSlot();
        sts1.setStartTime(new DateTime(2024, 06, 01, 17, 0));
        sts1.setEndTime(new DateTime(2024, 06, 01, 18, 0));
        sts1.setSeats(sets);

        final TreeSet<ScheduledTimeSlot> sts = new TreeSet<ScheduledTimeSlot>();
        sts.add(sts1);

        final List<ScheduledDay> days = new ArrayList<ScheduledDay>();
        final ScheduledDay scheduledDay = new ScheduledDay();
        scheduledDay.setDay(new DateTime(2024, 6, 1, 0, 0));

        final ScheduledFacility scheduledFacility = new ScheduledFacility();
        scheduledFacility.setLocation("Madison West");
        scheduledFacility.setTimeSlots(sts);
        scheduledDay.setFacilities(Arrays.asList(new ScheduledFacility[] { scheduledFacility }));
        days.add(scheduledDay);

        // create schedule
        schedule = new Schedule();
        schedule.setScheduleName("scheduleDemo");
        schedule.setInstitutionId("53d667dded99f8b7b41e15fa");
        schedule.setStartDate(new DateTime(2024, 6, 1, 0, 0));
        schedule.setEndDate(new DateTime(2024, 6, 2, 0, 0));
        schedule.setStateAbbreviation("WI");
        schedule.setInstitutionIdentifier("INS1");
        schedule.setScheduledDays(days);
        return schedule;
    }
}

class MockEntityService implements TestRegPersister {

    @SuppressWarnings("unused")
    private int saveCount = 0;
    @SuppressWarnings("unused")
    private int updateCount = 0;
    @SuppressWarnings("unused")
    private int deleteCount = 0;

    public void resetCounts() {
        this.saveCount = 0;
        this.updateCount = 0;
        this.deleteCount = 0;
    }

    @SuppressWarnings("unchecked")
    @Override
    public <T extends TestRegistrationBase> T findById(final String pkId, final FormatType formatType) {
        final InstitutionEntity entity = new InstitutionEntity();
        entity.setId("53ff860fde0d39090ad54dc7");
        return (T) entity;
    }

    @Override
    public <T extends TestRegistrationBase> List<T> findAll(final FormatType formatType) {
        return null;
    }

    @Override
    public <T extends TestRegistrationBase> T saveDomainObject(final T domainObj) {
        return null;
    }

    @Override
    public <T extends TestRegistrationBase> T updateDomainObject(final T domainObj) {
        return null;
    }

    @Override
    public <T extends TestRegistrationBase> void deleteDomainObject(final T domainObj) {

    }

    @Override
    public <T extends TestRegistrationBase> void deleteDomainObject(final String pkId, final FormatType formatType) {

    }

    @Override
    public <T extends TestRegistrationBase> List<T> saveDomainObjects(final List<T> domainObjList) {
        this.saveCount += domainObjList.size();

        return domainObjList;
    }

    @Override
    public <T extends TestRegistrationBase> List<T> updateDomainObjects(final List<T> domainObjList) {
        this.updateCount += domainObjList.size();

        return domainObjList;
    }

    @Override
    public <T extends TestRegistrationBase> void deleteDomainObjects(final List<T> domainObjList) {
        this.deleteCount += domainObjList.size();

    }

    @Override
    public <T extends TestRegistrationBase> SearchResponse<T> searchDomainObjects(final AbstractSearchRequest searchRequest,
            final FormatType formatType) {
        return null;
    }

    @Override
    public <T extends TestRegistrationBase> boolean hasAssociatedEntity(final T domainObj) {
        return false;
    }

}

class MockStudentService implements StudentRepository {

    @Override
    public List<Student> findStudentsByInstitution(final String institutionId) {
        final List<Student> studentList = new ArrayList<Student>();
        final Student student1 = new Student();
        student1.setEntityId("0001");
        student1.setFirstName("1FName");
        student1.setFirstName("1LName");
        student1.setMiddleName("A");
        student1.setStateAbbreviation("WI");
        student1.setExternalSsid("1FNameLName@edu.org");

        final Student student2 = new Student();
        student2.setEntityId("0002");
        student2.setFirstName("2FName");
        student2.setFirstName("2LName");
        student2.setMiddleName("A");
        student2.setStateAbbreviation("WI");
        student2.setExternalSsid("2FNameLName@edu.org");
        final Student student3 = new Student();
        student3.setEntityId("0003");
        student3.setFirstName("3FName");
        student3.setFirstName("3LName");
        student3.setMiddleName("A");
        student3.setExternalSsid("3FNameLName@edu.org");
        student3.setStateAbbreviation("WI");
        studentList.add(student1);
        studentList.add(student2);
        studentList.add(student3);
        return studentList;
    }

    @Override
    public SearchResponse<Student> search(final AbstractSearchRequest arg0) {
        return null;
    }

    @Override
    public <S extends Student> List<S> save(final Iterable<S> entites) {
        return null;
    }

    @Override
    public List<Student> findAll() {
        return null;
    }

    @Override
    public List<Student> findAll(final Sort sort) {
        return null;
    }

    @Override
    public Page<Student> findAll(final Pageable pageable) {
        return null;
    }

    @Override
    public <S extends Student> S save(final S entity) {
        return null;
    }

    @Override
    public Student findOne(final String id) {
        return null;
    }

    @Override
    public boolean exists(final String id) {
        return false;
    }

    @Override
    public Iterable<Student> findAll(final Iterable<String> ids) {
        return null;
    }

    @Override
    public long count() {
        return 0;
    }

    @Override
    public void delete(final String id) {
    }

    @Override
    public void delete(final Student entity) {
    }

    @Override
    public void delete(final Iterable<? extends Student> entities) {
    }

    @Override
    public void deleteAll() {
    }

    @Override
    public <T extends Sb11NonEntity> T findByAlternateKey(final AbstractSearchRequest searchRequest, final Class<T> clazz) {
        return null;
    }

    @Override
    public long getStudentCount(final String institutionId) {
        return 0;
    }

    @Override
    public List<Student> findStudentsByInstitutions(final List<String> institutionMongoIdList) {
        return null;
    }

    @Override
    public List<Student> findStudentsByDistrict(final String districtMongoId) {
        return null;
    }

    @Override
    public List<Student> findStudentsByState(final String stateAbbreviation) {
        return null;
    }

    @Override
    public Student findByEntityIdAndStateAbbreviation(final String entityId, final String stateAbbreviation) {
        return null;
    }

    @Override
    public Student findByExternalSsidAndStateAbbreviation(final String externalSsid, final String stateAbbreviation) {
        return null;
    }

    @Override
    public List<Student> findByInstitutionIdentifierAndStateAbbreviation(final String institutionIdentifier, final String stateAbbreviation) {
        return null;
    }

    @Override
    public List<Student> findAllByRangeAndLimitWithInstitutionFilter(final String mongoId, final int pageSize, final List<String> institutionMongoIdList) {
        return null;
    }

    @Override
    public long countByInstitutionFilter(final List<String> institutionMongoIds) {
        return 0;
    }

    @Override
    public void updateEntityForStudentsByEntityFilter(final String oldEntityId, final String newEntityId, final HierarchyLevel hierarchyLevel) {
    }

}

class MockTestStatusRepository implements TestStatusRepository {

    @Override
    public SearchResponse<TestStatus> search(final AbstractSearchRequest arg0) {
        return null;
    }

    @Override
    public <S extends TestStatus> List<S> save(final Iterable<S> entites) {
        return null;
    }

    @Override
    public List<TestStatus> findAll() {
        return null;
    }

    @Override
    public List<TestStatus> findAll(final Sort sort) {
        return null;
    }

    @Override
    public Page<TestStatus> findAll(final Pageable pageable) {
        return null;
    }

    @Override
    public <S extends TestStatus> S save(final S entity) {
        return null;
    }

    @Override
    public TestStatus findOne(final String id) {
        return null;
    }

    @Override
    public boolean exists(final String id) {
        return false;
    }

    @Override
    public Iterable<TestStatus> findAll(final Iterable<String> ids) {
        return null;
    }

    @Override
    public long count() {
        return 0;
    }

    @Override
    public void delete(final String id) {
    }

    @Override
    public void delete(final TestStatus entity) {
    }

    @Override
    public void delete(final Iterable<? extends TestStatus> entities) {
    }
    
    @Override
    public void deleteAll() {
    }
    
    @Override
    public void deleteTestStatusByStudentEntityIdAndState(String studentEntityId, String stateAbbr) {
    }

    @Override
    public List<TestStatus> findStudentReport(final Collection<String> studentIdList, final String stateAbbreviation,
            final String assessmentId, final int opportunity, final String testStatus) {
        final TestStatus status = new TestStatus();
        status.setStudentId("0001");
        status.setAssessmentId("53ff860fde0d39090ad54dc8");
        status.setStatus(Status.COMPLETED);
        status.setActualComplete(DateTime.now());
        return Arrays.asList(status);

    }

    @Override
    public TestStatus findByReportAlternateId(final String studentId, final String stateAbbreviation, final String assessmentId,
            final int opportunity) {
        return null;
    }

    @Override
    public TestStatus findByStudentIdStateAbbrAssessment(final String studentId, final String stateAbbreviation, final String assessmentId) {
        return null;
    }
    
    @Override
    public List<TestStatus> findByStudentIds(final Collection<String> studentIds) {
        return null;
    }

}
