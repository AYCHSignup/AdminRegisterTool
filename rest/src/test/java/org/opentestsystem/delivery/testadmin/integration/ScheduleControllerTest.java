/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testadmin.integration;

import static org.hamcrest.collection.IsCollectionWithSize.hasSize;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertThat;
import static org.junit.Assert.fail;
import static org.opentestsystem.delivery.testadmin.domain.Affinity.AffinityRule.STRICT;

import java.util.HashMap;
import java.util.Map;

import org.bson.types.ObjectId;
import org.joda.time.DateTime;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testadmin.domain.schedule.Schedule;
import org.opentestsystem.delivery.testadmin.domain.schedule.ScheduledDay;
import org.opentestsystem.delivery.testadmin.domain.schedule.ScheduledFacility;
import org.opentestsystem.delivery.testadmin.domain.schedule.ScheduledSeat;
import org.opentestsystem.delivery.testadmin.domain.schedule.ScheduledTimeSlot;
import org.opentestsystem.delivery.testadmin.domain.search.ScheduleSearchRequest;
import org.opentestsystem.delivery.testreg.domain.InstitutionEntity;
import org.opentestsystem.delivery.testreg.integration.AbstractSecuredRestEmbeddedMongoTest;
import org.opentestsystem.shared.search.domain.SearchResponse;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;

public class ScheduleControllerTest extends AbstractSecuredRestEmbeddedMongoTest {

    private Map<String, Object> params;
    private InstitutionEntity institution;

    @Before
    public void setup() {

        institution = new InstitutionEntity.Builder("INS001", "Institution_1", "CLIENT", "34534", "00000", "WI", "ADD").build();
        mongoTemplate.insert(institution);
        
        params = Maps.newHashMap();
        params.put("scheduleName", "Schedule1");
        params.put("startDate", new DateTime(2016, 06, 02, 12, 00));
        params.put("endDate", new DateTime(2016, 06, 03, 12, 00));
        params.put("institutionIdentifier", "INS001");
        
   }

    @Test
    public void saveSchedule() throws InterruptedException {
        Schedule savedSchedule = callPOSTRestService("/schedule", params, Schedule.class);
        assertEquals("Schedule should be created", 1, mongoTemplate.findAll(Schedule.class).size());
        assertNotNull(savedSchedule);
    }

    @Test
    public void updateSchedule() throws InterruptedException {
        Schedule savedSchedule = callPOSTRestService("/schedule", params, Schedule.class);
        assertNotNull(savedSchedule);
        params.put("id", savedSchedule.getId());
        params.put("scheduleName", "Schedule2");
        Schedule updatedSchedule = callPUTRestService("/schedule/" + savedSchedule.getId(), params, Schedule.class);
        assertNotNull(updatedSchedule);
        assertEquals("Schedule should be updated", updatedSchedule.getScheduleName(), "Schedule2");
    }

    @Test
    public void findSchedule() throws InterruptedException {
        Schedule savedSchedule = callPOSTRestService("/schedule", params, Schedule.class);
        assertEquals("Schedule should be created", 1, mongoTemplate.findAll(Schedule.class).size());
        assertNotNull(savedSchedule);
        Schedule fetchedSchedule = callGETRestService("/schedule/" + savedSchedule.getId(), Schedule.class);
        assertNotNull("Schedule was null!", fetchedSchedule);
    }

    @Test
    public void testRemoveSchedule() throws InterruptedException {
        Schedule savedSchedule = callPOSTRestService("/schedule", params, Schedule.class);

        assertEquals("Schedule should be created", 1, mongoTemplate.findAll(Schedule.class).size());
        assertNotNull(savedSchedule);
        try {
            callDeleteRestService("/schedule/" + savedSchedule.getId());
        } catch (Exception e) {
            fail("Cannot delete configuration");
        }

        Schedule fetchedSchedule = callGETRestService("/schedule/" + savedSchedule.getId(), Schedule.class);
        assertNull("Schedule must be null!", fetchedSchedule);
    }

    @SuppressWarnings("unchecked")
    @Test
    public void searchScheduleTest() {

        Map<String, Object> scheduleParams1 = new HashMap<String, Object>();
        scheduleParams1.put("scheduleName", "schedule1");
        scheduleParams1.put("startDate", new DateTime(2016, 06, 02, 12, 00));
        scheduleParams1.put("endDate", new DateTime(2016, 06, 03, 12, 00));
        scheduleParams1.put("institutionIdentifier", "INS001");
        scheduleParams1.put("institutionId", institution.getId());
        callPOSTRestService("/schedule", scheduleParams1, Schedule.class);

        Map<String, Object> scheduleParams2 = new HashMap<String, Object>();
        scheduleParams2.put("scheduleName", "schedule2");
        scheduleParams2.put("affinity", STRICT);
        scheduleParams2.put("startDate", new DateTime(2016, 06, 04, 12, 00));
        scheduleParams2.put("endDate", new DateTime(2016, 06, 05, 12, 00));
        scheduleParams2.put("institutionIdentifier", "INS001");
        scheduleParams2.put("institutionId", institution.getId());
        callPOSTRestService("/schedule", scheduleParams2, Schedule.class);
        assertEquals("2 schedules should be created", 2, mongoTemplate.findAll(Schedule.class).size());

        Map<String, String> params = Maps.newHashMap();
        params.put(ScheduleSearchRequest.SEARCH_KEY_NAME, "schedule1");
        SearchResponse<Schedule> resp = callGETRestService("/schedule" + buildQueryString(params), SearchResponse.class);
        assertNotNull(resp);
        assertEquals("one should be found", 1, resp.getReturnCount());

        params.clear();
        params.put(ScheduleSearchRequest.SEARCH_KEY_NAME, "invalid");
        resp = callGETRestService("/schedule" + buildQueryString(params), SearchResponse.class);
        assertNotNull(resp);
        assertEquals("zero should be found", 0, resp.getReturnCount());

        params.clear();
        params.put(ScheduleSearchRequest.SEARCH_KEY_NAME, "schedule");
        resp = callGETRestService("/schedule" + buildQueryString(params), SearchResponse.class);
        assertNotNull(resp);
        assertEquals("two should be found", 2, resp.getReturnCount());
    }
    
    private ScheduledDay getScheduledDay() {
        ScheduledFacility facility = new ScheduledFacility();
        facility.setFacilityName("lab1");
        ScheduledDay day1 = new ScheduledDay();
        day1.setId(new ObjectId().toStringMongod());
        day1.setDay(new DateTime(2098, 9, 9, 0, 0));
        day1.setFacilities(Lists.newArrayList(facility));
        ScheduledTimeSlot st = new ScheduledTimeSlot();
        st.setStartTime(new DateTime());;
        day1.getFacilities().get(0).getTimeSlots().add(st);
        return day1;
    }
    
    private void inserSchdule() {
        Schedule schedule = new Schedule();
        schedule.setScheduleName("scheduleDemo");
        schedule.setInstitutionIdentifier("INS1");
        schedule.setInstitutionId("AX12232893873877");
        schedule.setStartDate(new DateTime(2059, 9, 9, 0, 0));
        schedule.setEndDate(new DateTime(2099, 9, 9, 0, 0));
        schedule.setScheduledDays(Lists.newArrayList(getScheduledDay()));
        mongoTemplate.insert(schedule);
    }
    
    @Test
    public void scheduleResultsTest() {
        inserSchdule();
        
        Schedule fetchedSchedule = callGETRestService("/schedule/"+"AX12232893873877"+"/lab1/2098-09-09", Schedule.class);
        assertNotNull("Schedule was null!", fetchedSchedule);               
    }
    
    @Test
    public void patchScheduleTest() {
        //Verify DB First
        inserSchdule();
        Schedule fetchedSchedule = callGETRestService("/schedule/"+"AX12232893873877"+"/lab1/2098-09-09", Schedule.class);
        assertThat(fetchedSchedule.getScheduledDays().get(0).getFacilities().get(0).getTimeSlots(), hasSize(1));
        
        //Update something
        ScheduledDay day1 = fetchedSchedule.getScheduledDays().get(0);
        ScheduledTimeSlot st = new ScheduledTimeSlot();
        st.setStartTime(new DateTime());
        day1.getFacilities().get(0).getTimeSlots().first().addSeat(new ScheduledSeat());;
        
        params = Maps.newHashMap();
        params.put("id", day1.getId());
        params.put("day", day1.getDay());
        params.put("facilities", day1.getFacilities());
        Schedule updatedSchedule = callPATCHRestService("/schedule/"+fetchedSchedule.getId(), params, Schedule.class);
        assertNotNull("Schedule was null!", updatedSchedule);
    }

}
