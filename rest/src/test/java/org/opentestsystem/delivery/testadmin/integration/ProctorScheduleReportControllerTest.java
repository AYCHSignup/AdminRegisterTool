/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testadmin.integration;

import com.google.common.collect.Maps;
import com.lowagie.text.pdf.PdfReader;
import org.joda.time.DateTime;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testadmin.domain.Proctor;
import org.opentestsystem.delivery.testadmin.domain.schedule.Schedule;
import org.opentestsystem.delivery.testadmin.domain.schedule.ScheduledDay;
import org.opentestsystem.delivery.testadmin.domain.schedule.ScheduledFacility;
import org.opentestsystem.delivery.testadmin.domain.schedule.ScheduledTimeSlot;
import org.opentestsystem.delivery.testreg.domain.InstitutionEntity;
import org.opentestsystem.delivery.testreg.domain.User;
import org.opentestsystem.delivery.testreg.integration.AbstractSecuredRestEmbeddedMongoTest;
import org.springframework.mock.web.MockHttpServletResponse;

import java.io.ByteArrayInputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.TreeSet;

import static org.junit.Assert.*;
import static org.opentestsystem.delivery.testreg.domain.TestRegPermission.*;

public class ProctorScheduleReportControllerTest extends AbstractSecuredRestEmbeddedMongoTest {

    private Map<String, String> uploadParams;
    InstitutionEntity institutionEntity;

    @Before
    public void buildUploadParams() {
        uploadParams = Maps.newHashMap();
        uploadParams.put("tenantId", "524af61ae4b0b02763aa0fe0");
        uploadParams.put("scheduleName", "scheduleDemo");
        uploadParams.put("startDate", "2016-06-01");
        uploadParams.put("endDate", "2016-06-02");
    }

    @Before
    public void setup() {
        institutionEntity = (new InstitutionEntity.Builder("10001", "MiddletonSchool", "CLIENT", "234", "000000", "CA","ADD").build());
        mongoTemplate.save(institutionEntity);
        Schedule schedule = createShedule();
        mongoTemplate.save(schedule);
    }

    @After
    public void teardown() {
        mongoTemplate.dropCollection(Schedule.class);
    }

    @Test
    public void createProctorScheduledReport() throws Exception {
        uploadParams.put("institutionId", institutionEntity.getId());
        MockHttpServletResponse response = callGETRestService1("/proctorScheduleReport.pdf" + buildQueryString(uploadParams), PROCTORSCHEDULEREPORT_READ);
        assertNotNull(response);
        assertEquals("Content-Type is not equal application/pdf", "application/pdf", response.getContentType());
        assertNotNull("Proctor Scheduled Report Data is null", response.getContentAsByteArray());
        byte[] resData = response.getContentAsByteArray();
        ByteArrayInputStream st = new ByteArrayInputStream(resData);
        PdfReader reader = new PdfReader(st);
        byte[] streamBytes = reader.getPageContent(1);
        assertNotNull("Proctor Scheduled Report Data is null", streamBytes);
    }

    private Schedule createShedule() {
        Schedule schedule = new Schedule();
        Proctor proctor1 = new Proctor();
        Proctor proctor2 = new Proctor();
        Proctor proctor3 = new Proctor();
        User user1 = new User();
        user1.setFirstName("1FName");
        user1.setFirstName("1LName");
        user1.setEmail("1FNameLName@edu.org");

        User user2 = new User();
        user2.setFirstName("2FName");
        user2.setFirstName("2LName");
        user2.setEmail("2FNameLName@edu.org");
        User user3 = new User();
        user3.setFirstName("3FName");
        user3.setFirstName("3LName");
        user3.setEmail("3FNameLName@edu.org");
        proctor1.setUser(user1);
        proctor2.setUser(user2);
        proctor3.setUser(user3);

        ScheduledTimeSlot sts1 = new ScheduledTimeSlot();
        sts1.setStartTime(new DateTime(2016, 06, 01, 17, 0));
        sts1.setEndTime(new DateTime(2016, 06, 01, 18, 0));
        sts1.setProctor(proctor1);

        ScheduledTimeSlot sts2 = new ScheduledTimeSlot();
        sts2.setStartTime(new DateTime(2016, 06, 01, 19, 0));
        sts2.setEndTime(new DateTime(2016, 06, 01, 20, 0));
        sts2.setProctor(proctor2);

        ScheduledTimeSlot sts3 = new ScheduledTimeSlot();
        sts3.setStartTime(new DateTime(2016, 06, 01, 21, 0));
        sts3.setEndTime(new DateTime(2016, 06, 01, 22, 0));
        sts3.setProctor(proctor3);

        TreeSet<ScheduledTimeSlot> sts = new TreeSet<ScheduledTimeSlot>();
        sts.add(sts1);
        sts.add(sts2);
        sts.add(sts3);
        List<ScheduledDay> days = new ArrayList<ScheduledDay>();
        ScheduledDay scheduledDay = new ScheduledDay();
        scheduledDay.setDay(new DateTime(2016, 6, 1, 0, 0));

        ScheduledFacility scheduledFacility = new ScheduledFacility();
        scheduledFacility.setLocation("Madison West");
        scheduledFacility.setTimeSlots(sts);
        scheduledFacility.setInstitutionIdentifier("INS1112");
        scheduledFacility.setInstitutionId("INS1");
        scheduledDay.setFacilities(Arrays.asList(new ScheduledFacility[] { scheduledFacility }));
        days.add(scheduledDay);

        // create schedule
        schedule = new Schedule();
        schedule.setScheduleName("scheduleDemo");
        schedule.setStartDate(new DateTime(2016, 6, 1, 0, 0));
        schedule.setEndDate(new DateTime(2016, 6, 1, 0, 0));
        schedule.setInstitutionIdentifier("INS1112");
        schedule.setInstitutionId("INS1");

        schedule.setScheduledDays(days);
        return schedule;
    }
}
