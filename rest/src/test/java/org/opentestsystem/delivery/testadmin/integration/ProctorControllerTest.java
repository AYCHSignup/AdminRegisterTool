/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testadmin.integration;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.opentestsystem.delivery.testadmin.domain.Affinity.AffinityType.GRADE;
import static org.opentestsystem.delivery.testadmin.domain.Affinity.AffinityType.SUBJECT;
import static org.opentestsystem.delivery.testadmin.domain.Availability.NOTAVAILABLE;

import java.util.Arrays;
import java.util.Map;

import org.joda.time.DateTime;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testadmin.domain.Affinity;
import org.opentestsystem.delivery.testadmin.domain.Affinity.AffinityRule;
import org.opentestsystem.delivery.testadmin.domain.Proctor;
import org.opentestsystem.delivery.testadmin.domain.Proctor.AvailabilityWindow;
import org.opentestsystem.delivery.testreg.integration.AbstractSecuredRestEmbeddedMongoTest;
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;

public class ProctorControllerTest extends AbstractSecuredRestEmbeddedMongoTest {

    Map<String, Object> params;

    MockHttpServletRequestBuilder request;

    @Before
    public void setup() {
        params = Maps.newHashMap();
        Affinity subject1 = new Affinity(AffinityRule.STRICT, "ELA", SUBJECT);
        Affinity subject2 = new Affinity(AffinityRule.STRICT, "MATH", SUBJECT);
        Affinity grade = new Affinity(AffinityRule.STRICT, "11", GRADE);

        params.put("affinities", Arrays.asList(new Affinity[] {subject1, subject2, grade}));
        params.put("grade", grade);
        params.put("availabilityWindow", Lists.newArrayList(new AvailabilityWindow(new DateTime(2014, 10, 22, 11, 15),
                new DateTime(2014, 10, 22, 12, 15), NOTAVAILABLE)));
    }

    @After
    public void teardown() {
        mongoTemplate.dropCollection(Proctor.class);
    }

    @Test
    public void saveProctor() throws InterruptedException {
        Proctor savedProctor = callPOSTRestService("/proctor", params, Proctor.class);
        assertEquals("Proctor should be created", 1, mongoTemplate.findAll(Proctor.class).size());
        assertNotNull(savedProctor);
    }

    @Test
    public void updateProctor() throws InterruptedException {
        Proctor savedProctor = callPOSTRestService("/proctor", params, Proctor.class);
        assertNotNull(savedProctor);
        params.put("id", savedProctor.getId());
        params.put("proctorName", "Proctor2");
        Proctor updatedProctor = callPUTRestService("/proctor/" + savedProctor.getId(), params, Proctor.class);
        assertNotNull(updatedProctor);
    }

}
