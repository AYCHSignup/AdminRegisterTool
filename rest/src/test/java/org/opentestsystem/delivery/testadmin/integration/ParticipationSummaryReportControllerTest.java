/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testadmin.integration;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.io.ByteArrayInputStream;
import java.util.Map;

import org.joda.time.DateTime;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.Assessment;
import org.opentestsystem.delivery.testreg.domain.Assessment.TestWindow;
import org.opentestsystem.delivery.testreg.domain.ClientEntity;
import org.opentestsystem.delivery.testreg.domain.DistrictEntity;
import org.opentestsystem.delivery.testreg.domain.InstitutionEntity;
import org.opentestsystem.delivery.testreg.domain.StateEntity;
import org.opentestsystem.delivery.testreg.integration.AbstractSecuredRestEmbeddedMongoTest;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.test.web.servlet.MvcResult;

import com.google.common.collect.Maps;
import com.lowagie.text.pdf.PdfReader;

public class ParticipationSummaryReportControllerTest extends AbstractSecuredRestEmbeddedMongoTest {

    private Map<String, Object> uploadParams;
    private Map<String, String> uploadQueryParams;
    Assessment assessment = new Assessment();
    StateEntity state = null;

    @Before
    public void buildUploadParams() {

        uploadParams = Maps.newHashMap();
        uploadParams.put("tenantId", "123333");
        uploadParams.put("tenantType", "STATE");
        uploadParams.put("entityType", "STATE");
        uploadParams.put("entityId", "WI");
        uploadParams.put("levelOfReport", "STATE");
        uploadParams.put("assessmentId", "");

    }

    @Before
    public void buildUploadQueryParams() {

        uploadQueryParams = Maps.newHashMap();
        uploadQueryParams.put("tenantId", "123333");
        uploadQueryParams.put("tenantType", "STATE");
        uploadQueryParams.put("entityType", "STATE");

        uploadQueryParams.put("levelOfReport", "STATE");

        uploadQueryParams.put("opportunity", "1");

    }

    @Before
    public void setup() {
        ClientEntity entity = new ClientEntity.Builder("00000", "00000", "asfas-asdf-asdf-asdf", "true").build();
        mongoTemplate.save(entity);
        state = new StateEntity.Builder("WI", "WISCONSIN", "CLIENT", "00000", "ADD").build();
        state.setParentId(entity.getId());
        mongoTemplate.save(state);

        DistrictEntity district = new DistrictEntity.Builder("1111", "WI Group Of Districts", "34534", "STATE", "WI", "WI", "ADD").build();
        district.setParentId(state.getId());
        mongoTemplate.save(district);
        InstitutionEntity institute = new InstitutionEntity.Builder("2222", "Core Knowdlge School", "DISTRICT", "34522", "1111", "WI", "ADD").build();
        institute.setParentId(district.getId());
        mongoTemplate.save(institute);
        TestWindow tstWindow = new TestWindow();
        tstWindow.setBeginWindow(new DateTime(2014, 1, 1, 10, 30));
        tstWindow.setEndWindow(new DateTime(2014, 1, 1, 10, 50));
        TestWindow[] tstArray = { tstWindow };

        assessment.setTenantId("123333");
        assessment.setNumGlobalOpportunities(1);
        assessment.setTestWindow(tstArray);
        assessment.setAcademicYear("2014");
        assessment.setTestName("MATH");
        assessment.setVersion("1.0");
        assessment.setTestLabel("Test Label");
        assessment.setSourceTsb("Local");
        mongoTemplate.save(assessment);
    }

    @After
    public void teardown() {
        mongoTemplate.dropCollection(Assessment.class);
        mongoTemplate.dropCollection(InstitutionEntity.class);
        mongoTemplate.dropCollection(DistrictEntity.class);
        mongoTemplate.dropCollection(StateEntity.class);
        mongoTemplate.dropCollection(ClientEntity.class);
    }

    @Test
    public void validateSummaryReport() throws Exception {
        uploadParams.put("opportunity", "2");
        byte[] arrays = objectMapper.writeValueAsBytes(uploadParams);
        MvcResult result = mockMvc
                .perform(
                        post("/participationSummaryReport").accept(MediaType.ALL).contentType(MediaType.APPLICATION_JSON)
                                .content(arrays)).andExpect(status().isOk()).andReturn();

        assertEquals(HttpStatus.OK.value(), result.getResponse().getStatus());

    }

    @Test
    public void inValidateSummaryReport() throws Exception {
        uploadParams.put("opportunity", null);
        byte[] arrays = objectMapper.writeValueAsBytes(uploadParams);
        MvcResult result = mockMvc
                .perform(
                        post("/participationSummaryReport").accept(MediaType.ALL).contentType(MediaType.APPLICATION_JSON)
                                .content(arrays)).andExpect(status().isBadRequest()).andReturn();

        assertEquals(HttpStatus.BAD_REQUEST.value(), result.getResponse().getStatus());

    }

    @Test
    public void createProctorScheduledReport2() throws Exception {
        uploadQueryParams.put("opportunity", "2");
        uploadQueryParams.put("entityId", state.getId());
        uploadQueryParams.put("assessmentId", assessment.getId());
        MockHttpServletResponse response = callGETRestService1("/participationSummaryReport.pdf" + buildQueryString(uploadQueryParams));
        assertEquals("Content-Type is not equal application/pdf", "application/pdf", response.getContentType());
        assertNotNull("Proctor Scheduled Report Data is null", response.getContentAsByteArray());
        byte[] resData = response.getContentAsByteArray();
        ByteArrayInputStream st = new ByteArrayInputStream(resData);
        PdfReader reader = new PdfReader(st);
        byte[] streamBytes = reader.getPageContent(1);
        assertNotNull("Participation Report is null", streamBytes);
    }

}
