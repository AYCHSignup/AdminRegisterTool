/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testadmin.rest;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.opentestsystem.delivery.testadmin.domain.TestPlatform;
import org.opentestsystem.delivery.testadmin.domain.search.TestPlatFormSearchRequest;
import org.opentestsystem.delivery.testadmin.service.TestPlatformService;
import org.opentestsystem.delivery.testreg.domain.UIValidationGroup;
import org.opentestsystem.shared.exception.LocalizedException;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

@Controller
public class TestPlatformController extends TestAdminBaseController {

    @Autowired
    TestPlatformService testPlatformService;

    @ResponseStatus(HttpStatus.CREATED)
    @RequestMapping(value = "testplatform", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public TestPlatform saveTestPlatForm(@RequestBody @Validated({ UIValidationGroup.class }) final TestPlatform testPlatForm, final HttpServletResponse response) {
        TestPlatform savedTestPlatForm = testPlatformService.saveTestPlatform(testPlatForm);
        response.setHeader("Location", savedTestPlatForm.getUrl());
        return savedTestPlatForm;
    }

    @RequestMapping(value = "testplatform", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public SearchResponse<TestPlatform> searchTestPlatForms(final HttpServletRequest request,
            final HttpServletResponse response) {

        TestPlatFormSearchRequest searchRequest = new TestPlatFormSearchRequest(request.getParameterMap());
        SearchResponse<TestPlatform> searchResponse = testPlatformService.searchTestPlatforms(searchRequest);
        return searchResponse;
    }

    @RequestMapping(value = "testplatforms", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public List<TestPlatform> getAllTestPlatforms(final HttpServletRequest request,
            final HttpServletResponse response) {
        return testPlatformService.findAllTestPlatforms();
    }

    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = "testplatform/{id}", method = RequestMethod.PUT, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public TestPlatform updateTestPlatForm(@PathVariable final String id, @RequestBody final TestPlatform testPlatForm,
            final HttpServletResponse response) {
        if (testPlatForm == null || StringUtils.isEmpty(testPlatForm.getId()) || !id.equals(testPlatForm.getId())) {
            throw new LocalizedException("nonentity.invalid.id", new String[] { "TestPlatForm" });
        } else {
            TestPlatform updatedTestPlatForm = testPlatformService.saveTestPlatform(testPlatForm);
            response.setHeader("Location", updatedTestPlatForm.getUrl());
            return updatedTestPlatForm;
        }

    }

    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = "testplatform/{id}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public TestPlatform getTestPlatForm(@PathVariable final String id) {
        return testPlatformService.findByTestPlatformId(id);

    }

    @ResponseStatus(HttpStatus.NO_CONTENT)
    @RequestMapping(value = "/testplatform/{testPlatFormId}", method = RequestMethod.DELETE)
    public void deleteTestPlatForm(@PathVariable final String testPlatFormId) {
        testPlatformService.deleteTestPlatform(testPlatFormId);
    }
}
