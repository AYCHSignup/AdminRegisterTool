/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testadmin.rest;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.apache.commons.lang.StringUtils;
import org.opentestsystem.delivery.testadmin.domain.AccessibilityEquipment;
import org.opentestsystem.delivery.testadmin.domain.search.AccessibilityEquipmentSearchRequest;
import org.opentestsystem.delivery.testadmin.service.AccessibilityEquipmentService;
import org.opentestsystem.shared.exception.LocalizedException;
import org.opentestsystem.shared.exception.RestException;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

@Controller
public class AccessibilityEquipmentController extends TestAdminBaseController {

    @Autowired
    AccessibilityEquipmentService equipmentService;

    private static final Logger LOGGER = LoggerFactory.getLogger(AccessibilityEquipmentController.class);
    
    /**
     * Gets AccessibilityEquipment by id.
     * @param AccessibilityEquipment id.
     * @return AccessibilityEquipment object.
     */
    @RequestMapping(value = "/accessibilityEquipment/{id}", method = RequestMethod.GET, produces = {MediaType.APPLICATION_JSON_VALUE })
    @ResponseBody
    public AccessibilityEquipment findAccessibilityEquipmentById(@PathVariable final String id) {
        LOGGER.debug("Finding AccessibilityEquipment for Id: " + id);
        return equipmentService.getAccessibilityEquipment(id);
    }
    
    @ResponseStatus(HttpStatus.CREATED)
    @RequestMapping(value = "/accessibilityEquipment", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public AccessibilityEquipment saveAccessibilityEquipment(@RequestBody @Valid final AccessibilityEquipment accessibilityEquipment, final HttpServletResponse response) {
        AccessibilityEquipment savedAccessibilityEquipment = equipmentService.saveAccessibilityEquipment(accessibilityEquipment);
        response.setHeader("Location", savedAccessibilityEquipment.getUrl());
        return savedAccessibilityEquipment;
    }

    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = "/accessibilityEquipment/{id}", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public AccessibilityEquipment updateAccessibilityForm(@PathVariable final String id, @RequestBody @Valid final AccessibilityEquipment accessibilityEquipment,
            final HttpServletResponse response) {
        if (accessibilityEquipment == null || StringUtils.isEmpty(accessibilityEquipment.getId()) || !id.equals(accessibilityEquipment.getId())) {
            throw new LocalizedException("accessibilityEquipment.invalid.id", new String[] { "AccessibilityEquipment" });
        } else {
            AccessibilityEquipment updatedEquipment = equipmentService.saveAccessibilityEquipment(accessibilityEquipment);
            response.setHeader("Location", updatedEquipment.getUrl());
            return updatedEquipment;
        }
    }

    /**
     * Removes AccessibilityEquipment.
     * @param id AccessibilityEquipment Id.
     */
    @ResponseStatus(HttpStatus.NO_CONTENT)
    @RequestMapping(value = "/accessibilityEquipment/{id}", method = RequestMethod.DELETE)
    public void removeAccessibilityEquipmentById(@PathVariable final String id) {
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("Removing AccessibilityEquipment with Id:" + id);
        }
        equipmentService.removeAccessibilityEquipment(id);
    }

    /**
     * Can query the /AccessibilityEquipment endpoint with query parameters in a querystring.
     * @param request HttpServletRequest
     * @param response HttpServletResponse
     * @return SearchResponse<AccessibilityEquipment>
     */
    @RequestMapping(value = "/accessibilityEquipment", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public SearchResponse<AccessibilityEquipment> searchAccessibilityEquipments(final HttpServletRequest request, final HttpServletResponse response) {

        AccessibilityEquipmentSearchRequest searchRequest = new AccessibilityEquipmentSearchRequest(request.getParameterMap());
        SearchResponse<AccessibilityEquipment> searchResponse;
        if (searchRequest.isValid()) {
            searchResponse = equipmentService.searchAccessibilityEquipments(searchRequest);
        } else {
            throw new RestException("accessibilityEquipment.search.invalidSearchCriteria");
        }
        return searchResponse;
    }
}
