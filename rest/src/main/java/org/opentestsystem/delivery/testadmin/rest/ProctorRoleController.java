/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testadmin.rest;

import static org.springframework.http.HttpStatus.NO_CONTENT;
import static org.springframework.http.HttpStatus.OK;
import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;
import static org.springframework.web.bind.annotation.RequestMethod.DELETE;
import static org.springframework.web.bind.annotation.RequestMethod.GET;
import static org.springframework.web.bind.annotation.RequestMethod.POST;
import static org.springframework.web.bind.annotation.RequestMethod.PUT;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.apache.commons.lang.StringUtils;
import org.opentestsystem.delivery.testadmin.domain.ProctorRole;
import org.opentestsystem.delivery.testadmin.domain.search.ProctorRoleSearchRequest;
import org.opentestsystem.delivery.testadmin.service.ProctorRoleService;
import org.opentestsystem.shared.exception.LocalizedException;
import org.opentestsystem.shared.exception.RestException;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

@Controller
public class ProctorRoleController extends TestAdminBaseController  {
    
    @Autowired
    private ProctorRoleService proctorRoleService;
    
    private static final Logger LOGGER = LoggerFactory.getLogger(ProctorRoleController.class);
    
    
    @RequestMapping(value = "/proctorRole/{id}", method = GET, produces = {APPLICATION_JSON_VALUE })
    @ResponseBody
    public ProctorRole find(@PathVariable final String id) {
        return proctorRoleService.getProctorRole(id);
    }
    
    @ResponseStatus(HttpStatus.CREATED)
    @RequestMapping(value = "/proctorRole", method = POST, consumes = APPLICATION_JSON_VALUE, produces = APPLICATION_JSON_VALUE)
    @ResponseBody
    public ProctorRole save(@RequestBody @Valid final ProctorRole proctorRole, final HttpServletResponse response) {
        ProctorRole proctorRoleSaved = proctorRoleService.saveProctorRole(proctorRole);
        response.setHeader("Location", proctorRoleSaved.getUrl());
        return proctorRoleSaved;
    }
    
    @ResponseStatus(OK)
    @RequestMapping(value = "/proctorRole/{id}", method = PUT, consumes = APPLICATION_JSON_VALUE, produces = APPLICATION_JSON_VALUE)
    @ResponseBody
    public ProctorRole update(@PathVariable final String id, @RequestBody @Valid final ProctorRole proctorRole,
            final HttpServletResponse response) {
        if (proctorRole == null || StringUtils.isEmpty(proctorRole.getId()) || !id.equals(proctorRole.getId())) {
            throw new LocalizedException("proctorRole.invalid.id", new String[] { "ProctorRole" });
        } else {
            ProctorRole updatedproctorRole = proctorRoleService.saveProctorRole(proctorRole);
            response.setHeader("Location", updatedproctorRole.getUrl());
            return updatedproctorRole;
        }
    }

    
    @ResponseStatus(NO_CONTENT)
    @RequestMapping(value = "/proctorRole/{id}", method = DELETE)
    public void remove(@PathVariable final String id) {
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("Removing ProctorRole with Id:" + id);
        }
        proctorRoleService.removeProctorRole(id);
    }

    
    @RequestMapping(value = "/proctorRole", method = GET, produces = APPLICATION_JSON_VALUE)
    @ResponseBody
    public SearchResponse<ProctorRole> search(final HttpServletRequest request, final HttpServletResponse response) {

        ProctorRoleSearchRequest searchRequest = new ProctorRoleSearchRequest(request.getParameterMap());
        SearchResponse<ProctorRole> searchResponse;
        if (searchRequest.isValid()) {
            searchResponse = proctorRoleService.searchProctorRoles(searchRequest);
        } else {
            throw new RestException("proctorRole.search.invalidSearchCriteria");
        }
        return searchResponse;
    }

}
