/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testadmin.rest;

import java.util.Collection;
import java.util.Map;

import org.opentestsystem.delivery.testadmin.domain.ParticipationSummaryRequest;
import org.opentestsystem.delivery.testadmin.domain.TestAdminReport;
import org.opentestsystem.delivery.testadmin.service.ParticipationDetailReportService;
import org.opentestsystem.delivery.testreg.domain.Assessment;
import org.opentestsystem.delivery.testreg.domain.HierarchyLevel;
import org.opentestsystem.shared.progman.client.domain.TenantType;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.annotation.Secured;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@Controller
public class ParticipationSummaryReportController extends TestAdminReportController {

    @Autowired
    ParticipationDetailReportService detailReportService;

    /**
     * To create the Summary PDF report
     * 
     * @param ParticipationSummaryRequest
     * @param response HttpServletResponse
     */
    @RequestMapping(value = "/participationSummaryReport", method = RequestMethod.GET)
    @Secured({ "ROLE_ParticipationSummaryReport Read" })
    public void createParticipationSummaryReport(@ModelAttribute final ParticipationSummaryRequest request, final Model model) {

        Map<String, Assessment> testNames = getTenantAssessment(request.getTenantId(), request.getTenantType(), request.getAssessmentId());
        if(testNames.size () == 0 && !request.getTenantType ().equals (TenantType.STATE.name ())){
          testNames = getAssessment(request.getTenantId (), request.getTenantType (), request.getAssessmentId (), request.getEntityId (), request.getEntityType (), testNames);
        }
        Assessment testName = null;
        if (request.getAssessmentId() != null && !request.getAssessmentId().isEmpty()) {
            testName = testNames.get(request.getAssessmentId());
        }
        // if the testNames are empty need to throw the error
        final Collection<TestAdminReport> summaryList = this.participationService.buildParticipationReport(request.getEntityType(), request.getEntityId(),
                HierarchyLevel.valueOf(request.getLevelOfReport()),
                testNames, request.getOpportunity());
        model.addAttribute(REPORT_TYPE, "PARTICIPATION_" + request.getLevelOfReport() + "_REPORT");
        model.addAttribute(DATA_LIST, summaryList);
        model.addAttribute(LEVEL_OF_REPORT, request.getLevelOfReport());

        model.addAttribute(HEADER_MESSAGE, buildHeaderMessage(SUMMARY_REPORT_HEADER, request.getTenantId(), request.getEntityId(), request.getEntityType(), testName, request.getLevelOfReport()));

    }

}
