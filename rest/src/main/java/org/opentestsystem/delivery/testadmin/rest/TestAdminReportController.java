/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testadmin.rest;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.joda.time.DateTime;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.opentestsystem.delivery.testadmin.service.ParticipationSummaryReportService;
import org.opentestsystem.delivery.testreg.domain.ARTHelpers;
import org.opentestsystem.delivery.testreg.domain.Assessment;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.HierarchyLevel;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.persistence.AssessmentRepository;
import org.opentestsystem.delivery.testreg.service.AssessmentService;
import org.opentestsystem.delivery.testreg.service.EntityNameService;
import org.opentestsystem.delivery.testreg.service.Sb11EntityRepositoryService;
import org.opentestsystem.delivery.testreg.service.TestRegPersister;
import org.opentestsystem.shared.progman.client.domain.Tenant;
import org.opentestsystem.shared.progman.client.domain.TenantType;
import org.opentestsystem.shared.security.domain.SbacEntity;
import org.opentestsystem.shared.security.service.TenancyService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.CollectionUtils;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.common.collect.Sets;

public class TestAdminReportController extends TestAdminBaseController {

    protected static final String DATA_LIST = "DATA_LIST";
    protected static final String REPORT_TYPE = "REPORT_TYPE";
    protected static final String LEVEL_OF_REPORT = "LEVEL_OF_REPORT";
    protected static final String HEADER_MESSAGE = "HEADER_MESSAGE";
    protected static final String SUMMARY_REPORT_HEADER = "Participation Summary Report";
    protected static final String DETAIL_REPORT_HEADER = "Student Participation Report";
    protected static final String PROCTOR_SCHEDULE_REPORT_HEADER = "Proctor Schedule Report";
    protected static final String STUDENT_SCHEDULE_REPORT_HEADER = "Student Schedule Report";
    private static final DateTimeFormatter dateFormat = DateTimeFormat.forPattern("yyyy-MM-dd");

    @Autowired
    protected ParticipationSummaryReportService participationService;

    @Autowired
    protected TestRegPersister entityService;

    @Autowired
    EntityNameService entityNameService;
    
    @Autowired
    private Sb11EntityRepositoryService sb11EntityService;
    
    @Autowired
    private TenancyService tenancyService;
    
    @Autowired
    private AssessmentService assessmentService;


    protected Map<String, Assessment> getTenantAssessment(final String tenantId, final String tenantType, final String assessmentId) {
        Map<String, Assessment> testNames = null;
        if (assessmentId == null || assessmentId.isEmpty()) {
            testNames = participationService.findAssessmentsByTenantId(tenantId, tenantType);
        } else {
            Assessment assessment = entityService.findById(assessmentId, FormatType.ASSESSMENT);
            testNames = Maps.newHashMap();
            testNames.put(assessment.getId(), assessment);
        }
        return testNames;
    }
    
    protected Map<String, Assessment> getAssessment(final String tenantId, final String tenantType, final String assessmentId, final String entityId, final String entityType, Map<String, Assessment> testNames) {
      List<Assessment> assessments = new ArrayList<Assessment> ();
      List<Tenant> tenantsForAssessment = Lists.newArrayList();
      if (assessmentId == null || assessmentId.isEmpty()) {
        Sb11Entity entity = this.entityService.findById(entityId, FormatType.valueOf(entityType));
        
        // create the initial set 
           final Set<SbacEntity> possibleTenants = Sets.newHashSet(new SbacEntity(entity.getTenantType (), entity.getEntityId (), entity.getEntityName ()));
           while (entity != null) {
               if (entity.getParentEntityType() != null) {
                   final TenantType tenantTypes = convertHierarchyLevelToTenantType(entity.getParentEntityType());
                   if (tenantTypes != null) {
                       possibleTenants.add(new SbacEntity(tenantTypes, entity.getParentEntityId(), "nothing"));
                   }
               }
               entity = entity.getParentEntityId() != null ? this.sb11EntityService.getParentEntity(entity) : null;
           }

           // filter assessments returned by tenant. need to find tenant for the student
           // entity name is just hardcoded because the tenancy service just checks to see if it exists and doesn't use it for anything
           // this gets around having to make another db call to find the actual entity name
           if (!CollectionUtils.isEmpty(possibleTenants)) {
               tenantsForAssessment = this.tenancyService.getApplicableTenants(possibleTenants);
           }

           final List<String> tenantIdsForAssessment = Lists.newArrayList();

           if (!CollectionUtils.isEmpty(tenantsForAssessment)) {
               tenantIdsForAssessment.addAll(Lists.transform(tenantsForAssessment, ARTHelpers.TENANT_ID_TRANSFORMER));
           }
           
           if (testNames.size () == 0) {
             for(String tenId : tenantIdsForAssessment){
               assessments.addAll(assessmentService.findByTenantId (tenId));
             }
             for (final Assessment assessment : assessments) {
               testNames.put (assessment.getId (), assessment);
             }
             return testNames;
           }
     
           else {
             return testNames;
           }
      } else {
          Assessment assessment = entityService.findById(assessmentId, FormatType.ASSESSMENT);
          testNames = Maps.newHashMap();
          testNames.put(assessment.getId(), assessment);
      }
      return testNames;
  }

    protected String buildHeaderMessage(final String message, final String tenantId, final String entityId, final String entityType,
            final Assessment assessment, final String levelOfReport) {
        Map<String, String> entityNames = entityNameService.getEntityNameMap(tenantId);
        Sb11Entity entity = entityService.findById(entityId, FormatType.valueOf(entityType));
        StringBuilder headerString = new StringBuilder();
        headerString.append(message);
        if (levelOfReport != null) {
            headerString.append(", ");

            headerString.append("Level of Report: " + entityNames.get(FormatType.valueOf(levelOfReport).toString()));
        }

        headerString.append(", ");

        headerString.append(entityNames.get(entity.getFormatType().toString()) + " : " + entity.getEntityName());
        headerString.append(", ");

        if (assessment != null) {
            headerString.append("Test: " + assessment.getTestName());
        } else {
            headerString.append("All Tests");
        }
        return headerString.toString();
    }

    protected String buildSchedulesHeaderMessage(final String message, final String tenantId, final String entityId,
            final DateTime startDate, final DateTime endDate) {
        Map<String, String> entityNames = entityNameService.getEntityNameMap(tenantId);
        Sb11Entity entity = entityService.findById(entityId, FormatType.INSTITUTION);
        StringBuilder headerString = new StringBuilder();
        headerString.append(message);
        headerString.append(", ");

        headerString.append(entityNames.get(entity.getFormatType().toString()) + " : " + entity.getEntityName());
        headerString.append(", ");
        headerString.append("Start Date: " + dateFormat.print(startDate));
        headerString.append(" , ");
        headerString.append("End Date: " + dateFormat.print(endDate));
        headerString.append("\n");
        return headerString.toString();
    }
    
    private TenantType convertHierarchyLevelToTenantType(final HierarchyLevel level) {
      TenantType converted = null;

      switch (level) {
      case DISTRICT:
          converted = TenantType.DISTRICT;
          break;
      case GROUPOFDISTRICTS:
          converted = TenantType.DISTRICT_GROUP;
          break;
      case GROUPOFINSTITUTIONS:
          converted = TenantType.INSTITUTION_GROUP;
          break;
      case GROUPOFSTATES:
          converted = TenantType.STATE_GROUP;
          break;
      case STATE:
          converted = TenantType.STATE;
          break;
      default:
          converted = null;
          break;
      }

      return converted;
  }
}
