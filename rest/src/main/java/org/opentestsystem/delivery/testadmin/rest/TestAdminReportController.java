/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testadmin.rest;

import java.util.Map;

import org.joda.time.DateTime;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.opentestsystem.delivery.testadmin.service.ParticipationSummaryReportService;
import org.opentestsystem.delivery.testreg.domain.Assessment;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.service.EntityNameService;
import org.opentestsystem.delivery.testreg.service.TestRegPersister;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.collect.Maps;

public class TestAdminReportController extends TestAdminBaseController {

    protected static final String DATA_LIST = "DATA_LIST";
    protected static final String REPORT_TYPE = "REPORT_TYPE";
    protected static final String LEVEL_OF_REPORT = "LEVEL_OF_REPORT";
    protected static final String HEADER_MESSAGE = "HEADER_MESSAGE";
    protected static final String SUMMARY_REPORT_HEADER = "Participation Summary Report";
    protected static final String DETAIL_REPORT_HEADER = "Student Participation Report";
    protected static final String PROCTOR_SCHEDULE_REPORT_HEADER = "Proctor Schedule Report";
    protected static final String STUDENT_SCHEDULE_REPORT_HEADER = "Student Schedule Report";
    private static final DateTimeFormatter dateFormat = DateTimeFormat.forPattern("yyyy-MM-dd");

    @Autowired
    protected ParticipationSummaryReportService participationService;

    @Autowired
    protected TestRegPersister entityService;

    @Autowired
    EntityNameService entityNameService;

    protected Map<String, Assessment> getTenantAssessment(final String tenantId, final String tenantType, final String assessmentId) {
        Map<String, Assessment> testNames = null;
        if (assessmentId == null || assessmentId.isEmpty()) {
            testNames = participationService.findAssessmentsByTenantId(tenantId, tenantType);
        } else {
            Assessment assessment = entityService.findById(assessmentId, FormatType.ASSESSMENT);
            testNames = Maps.newHashMap();
            testNames.put(assessment.getId(), assessment);
        }
        return testNames;
    }

    protected String buildHeaderMessage(final String message, final String tenantId, final String entityId, final String entityType,
            final Assessment assessment, final String levelOfReport) {
        Map<String, String> entityNames = entityNameService.getEntityNameMap(tenantId);
        Sb11Entity entity = entityService.findById(entityId, FormatType.valueOf(entityType));
        StringBuilder headerString = new StringBuilder();
        headerString.append(message);
        if (levelOfReport != null) {
            headerString.append(", ");

            headerString.append("Level of Report: " + entityNames.get(FormatType.valueOf(levelOfReport).toString()));
        }

        headerString.append(", ");

        headerString.append(entityNames.get(entity.getFormatType().toString()) + " : " + entity.getEntityName());
        headerString.append(", ");

        if (assessment != null) {
            headerString.append("Test: " + assessment.getTestName());
        } else {
            headerString.append("All Tests");
        }
        return headerString.toString();
    }

    protected String buildSchedulesHeaderMessage(final String message, final String tenantId, final String entityId,
            final DateTime startDate, final DateTime endDate) {
        Map<String, String> entityNames = entityNameService.getEntityNameMap(tenantId);
        Sb11Entity entity = entityService.findById(entityId, FormatType.INSTITUTION);
        StringBuilder headerString = new StringBuilder();
        headerString.append(message);
        headerString.append(", ");

        headerString.append(entityNames.get(entity.getFormatType().toString()) + " : " + entity.getEntityName());
        headerString.append(", ");
        headerString.append("Start Date: " + dateFormat.print(startDate));
        headerString.append(" , ");
        headerString.append("End Date: " + dateFormat.print(endDate));
        headerString.append("\n");
        return headerString.toString();
    }
}
