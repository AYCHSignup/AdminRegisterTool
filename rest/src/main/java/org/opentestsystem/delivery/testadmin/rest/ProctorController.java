/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testadmin.rest;

import static org.springframework.http.HttpStatus.OK;
import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;
import static org.springframework.web.bind.annotation.RequestMethod.POST;
import static org.springframework.web.bind.annotation.RequestMethod.PUT;

import java.util.List;

import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.apache.commons.lang.StringUtils;
import org.opentestsystem.delivery.testadmin.domain.Proctor;
import org.opentestsystem.delivery.testadmin.service.ProctorService;
import org.opentestsystem.delivery.testreg.service.TestRegPersister;
import org.opentestsystem.shared.exception.LocalizedException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.access.annotation.Secured;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

@Controller
public class ProctorController extends TestAdminBaseController {

    @Autowired
    private ProctorService proctorService;
        
    @Autowired
    private TestRegPersister userService;
    
    @ResponseStatus(HttpStatus.CREATED)
    @RequestMapping(value = "/proctor", method = POST, consumes = APPLICATION_JSON_VALUE, produces = APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Proctor Modify" })
    @ResponseBody
    public Proctor save(@RequestBody @Valid final Proctor proctor, final HttpServletResponse response) {
        Proctor proctorSaved = proctorService.saveProctor(proctor);
        response.setHeader("Location", proctorSaved.getUrl());
        return proctorSaved;
    }
    
    @ResponseStatus(OK)
    @RequestMapping(value = "/proctor/{id}", method = PUT, consumes = APPLICATION_JSON_VALUE, produces = APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Proctor Modify" })
    @ResponseBody
    public Proctor update(@PathVariable final String id, @RequestBody @Valid final Proctor proctor,
            final HttpServletResponse response) {
        if (proctor == null || StringUtils.isEmpty(proctor.getId()) || !id.equals(proctor.getId())) {
            throw new LocalizedException("proctorRole.invalid.id", new String[] { "ProctorRole" });
        } else {
            Proctor updatedproctor = proctorService.saveProctor(proctor);
            response.setHeader("Location", updatedproctor.getUrl());
            return updatedproctor;
        }
    }
    
    /**
     * Find user by id.
     *
     * @param id user mongo id
     * @return User user
     */
    @RequestMapping(value = "/proctor/{userId}", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Proctor Read" })
    @ResponseBody
    public Proctor findProctorByUserId(@PathVariable final String userId) {
        return proctorService.findProctorByUserId(userId);
    }
    
    @RequestMapping(value = "/proctor/institution/{institutionMongoId}", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Proctor Read" })
    @ResponseBody
    public List<Proctor> findProctorByInstitution(@PathVariable final String institutionMongoId) {
        List<Proctor> list = proctorService.findProctorsByInstitution(institutionMongoId);
        return list;
    }
}
