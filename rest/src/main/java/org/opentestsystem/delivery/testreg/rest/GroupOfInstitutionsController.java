/*******************************************************************************
 /*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.rest;

import org.apache.commons.lang.StringUtils;
import org.opentestsystem.delivery.testreg.domain.AddOperation;
import org.opentestsystem.delivery.testreg.domain.DeleteOperation;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.GroupOfInstitutionsEntity;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.domain.UIValidationGroup;
import org.opentestsystem.delivery.testreg.domain.UpdateOperation;
import org.opentestsystem.delivery.testreg.domain.search.GroupOfInstitutionsEntitySearchRequest;
import org.opentestsystem.delivery.testreg.persistence.criteria.Sb11ObjectIdConverters.ObjectIdToGroupOfInstitutionEntityConverter;
import org.opentestsystem.delivery.testreg.service.Sb11EntityRepositoryService;
import org.opentestsystem.delivery.testreg.service.TestRegPersister;
import org.opentestsystem.delivery.testreg.upload.validation.ValidatedPathVariable;
import org.opentestsystem.shared.exception.LocalizedException;
import org.opentestsystem.shared.exception.RestException;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.opentestsystem.shared.web.AbstractRestController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.access.annotation.Secured;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.List;

/**
 * Rest controller for CRUD operations on groupOfInstitutionsEntity.
 */
@Controller
public class GroupOfInstitutionsController extends AbstractRestController {

    @Autowired
    private TestRegPersister testRegPersister;

    @Autowired
    private Sb11EntityRepositoryService sb11EntityService;

    /**
     * Find GroupOfInstitutions by id.
     *
     * @param id GroupOfInstitutions mongo id
     * @return groupOfInstitutionsEntity GroupOfInstitutions
     */
    @RequestMapping(value = "/groupofinstitutions/{id}", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Entity Read" })
    @ResponseBody
    public GroupOfInstitutionsEntity findGroupOfInstitutionsById(@PathVariable final String id) {
        return testRegPersister.findById(id, GroupOfInstitutionsEntity.FORMAT_TYPE);
    }

    /**
     * Save GroupOfInstitutions entity.
     *
     * @param groupOfInstitutionsEntity unsaved GroupOfInstitutions entity
     * @param response                  HttpServlet response
     * @return groupOfInstitutionsEntity saved GroupOfInstitutions
     */
    @ResponseStatus(HttpStatus.CREATED)
    @RequestMapping(value = "/groupofinstitutions", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Entity Modify" })
    @ResponseBody
    public GroupOfInstitutionsEntity saveGroupOfInstitutions(@RequestBody @Validated({ UIValidationGroup.class,
            AddOperation.class }) final GroupOfInstitutionsEntity groupOfInstitutionsEntity,
            final HttpServletResponse response) {
        GroupOfInstitutionsEntity savedEntity = testRegPersister.saveDomainObject(groupOfInstitutionsEntity);
        response.setHeader("Location", savedEntity.getUrl());
        return savedEntity;
    }

    /**
     * Update GroupOfInstitutions entity.
     *
     * @param id                        GroupOfInstitutions id
     * @param groupOfInstitutionsEntity to be updated GroupOfInstitutions mongo entity
     * @param response                  HttpServlet response
     * @return groupOfInstitutionsEntity updated GroupOfInstitutions
     */
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = "/groupofinstitutions/{id}", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Entity Modify" })
    @ResponseBody
    public GroupOfInstitutionsEntity updateGroupOfInstitutions(
            @PathVariable final String id,
            @RequestBody @Validated({ UIValidationGroup.class, UpdateOperation.class }) final GroupOfInstitutionsEntity groupOfInstitutionsEntity,
            final HttpServletResponse response) {
        if (groupOfInstitutionsEntity == null || StringUtils.isEmpty(groupOfInstitutionsEntity.getId())
                || !id.equals(groupOfInstitutionsEntity.getId())) {
            throw new LocalizedException("entity.invalid.id", new String[] { "GroupOfInstitutions" });

        } else {
            GroupOfInstitutionsEntity savedEntity = testRegPersister.updateDomainObject(groupOfInstitutionsEntity);
            response.setHeader("Location", savedEntity.getUrl());
            return savedEntity;
        }
    }

    /**
     * Delete GroupOfInstitutions. <br>
     * <b>Important:</b> <br>
     * {@link ValidatedPathVariable} would resolve id to {@link GroupOfInstitutionsEntity} by calling {@link ObjectIdToGroupOfInstitutionEntityConverter}. <br>
     * <br>
     * {@linkplain Validated} with hints {@code UIValidationGroup} and {@code DeleteOperation} calls Validator using binders. <br>
     *
     * @param id GroupOfInstitutions mongo id
     */
    @ResponseStatus(HttpStatus.NO_CONTENT)
    @RequestMapping(value = "/groupofinstitutions/{id}", method = RequestMethod.DELETE)
    @Secured({ "ROLE_Entity Modify" })
    public void removeGroupOfInstitutions(@ValidatedPathVariable @Validated({ UIValidationGroup.class, DeleteOperation.class }) final GroupOfInstitutionsEntity entity) {
        testRegPersister.deleteDomainObject(entity.getId(), GroupOfInstitutionsEntity.FORMAT_TYPE);
    }

    /**
     * Search GroupOfInstitutionss by search criteria.
     *
     * @param request  HttpServlet request
     * @param response HttpServlet response
     * @return SearchResponse containing GroupOfInstitutions entities
     */
    @RequestMapping(value = "/groupofinstitution", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Entity Read" })
    @ResponseBody
    public SearchResponse<GroupOfInstitutionsEntity> searchGroupOfInstitutions(final HttpServletRequest request,
            final HttpServletResponse response) {
        GroupOfInstitutionsEntitySearchRequest searchRequest = new GroupOfInstitutionsEntitySearchRequest(
                request.getParameterMap());
        SearchResponse<GroupOfInstitutionsEntity> searchResponse;
        if (searchRequest.isValid()) {
            searchResponse = testRegPersister.searchDomainObjects(searchRequest, GroupOfInstitutionsEntity.FORMAT_TYPE);
        } else {
            throw new RestException("entity.search.invalidSearchCriteria");
        }
        return searchResponse;
    }

    /**
     * Find GroupOfInstitutions
     * Append ".xls" to the URL to get data in Excel format
     * Append ".csv" to the URL to get data in CSV format
     */
    @RequestMapping(value = "/groupofinstitutions", method = RequestMethod.GET)
    @Secured({ "ROLE_Entity Read" })
    public void findGroupOfInstitutions(final HttpServletRequest request, final Model model) throws Exception {
        Sb11EntityControllerHelper.findEntities(request, model, FormatType.GROUPOFINSTITUTIONS, testRegPersister);
    }

    /**
     * Find Parents
     */
    @RequestMapping(value = "/groupofinstitutions/parents", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Entity Read" })
    @ResponseBody
    public List<Sb11Entity> findParents(final HttpServletRequest request) throws Exception {
        return Sb11EntityControllerHelper.findParentEntities(request, null, FormatType.GROUPOFINSTITUTIONS, testRegPersister, sb11EntityService);
    }
}
