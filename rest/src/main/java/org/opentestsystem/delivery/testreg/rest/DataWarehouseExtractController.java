/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.rest;

import org.opentestsystem.delivery.testreg.domain.warehouse.DwCallbackObject;
import org.opentestsystem.delivery.testreg.transformer.DwBatchHandler;
import org.opentestsystem.delivery.testreg.transformer.DwDataGenerator;
import org.opentestsystem.delivery.testreg.transformer.DwGenStarter;
import org.opentestsystem.shared.web.AbstractRestController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.access.annotation.Secured;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

import java.util.List;
import java.util.UUID;

@Controller
public class DataWarehouseExtractController extends AbstractRestController {

    @Autowired
    private DwGenStarter dwGenStarter;

    @Autowired
    private DwDataGenerator dwDataGenerator;

    @Autowired
    private DwBatchHandler dwBatchHandler;

    /**
     * A hook to kick off the data warehouse extract process. Just a simple GET request to a URI with no arguments
     * expected.
     * This will generate one extract for each academic year of data we have in the data store.
     */
    @ResponseStatus(HttpStatus.NO_CONTENT)
    @RequestMapping(value = "/datawarehouse/extract", method = RequestMethod.GET)
    @Secured({ "ROLE_Warehouse Extract Admin" })
    public void startExtract() {
        List<String> academicYears = dwDataGenerator.findUniqueAcademicYears();
        for (String year : academicYears) {
            dwGenStarter.kickoffDwProcess(year);
        }
    }

    /**
     * Used as a callback for the Data Warehouse to tell Test Registration the status of a file extract that was sent
     * from Test Registration to the Data Warehouse
     *
     * @param callbackObject
     */
    @ResponseStatus(value = HttpStatus.OK)
    @RequestMapping(value = "/datawarehouse/extract/status", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE)
    public void extractCallback(@RequestBody final DwCallbackObject callbackObject) {
        dwBatchHandler.handleCallback(callbackObject);
    }

    @ResponseBody
    @RequestMapping(value = "/datawarehouse/guid", method = RequestMethod.GET, produces = MediaType.TEXT_PLAIN_VALUE)
    public String generateGuid() {
        return UUID.randomUUID().toString();
    }
}
