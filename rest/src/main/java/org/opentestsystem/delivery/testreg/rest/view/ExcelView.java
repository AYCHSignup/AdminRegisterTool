/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.rest.view;

import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.collections.CollectionUtils;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.domain.StudentGroup;
import org.opentestsystem.delivery.testreg.domain.TestRegistrationBase;
import org.opentestsystem.delivery.testreg.domain.User;
import org.opentestsystem.delivery.testreg.domain.User.RoleAssociation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.servlet.view.document.AbstractExcelView;

/**
 * This class builds an Excel spreadsheet document using Apache POI library.
 */

public class ExcelView extends AbstractExcelView {

    private static final String DATA_LIST = "DATA_LIST";
    private static final String FORMAT_TYPE = "FORMAT_TYPE";

    @Resource(name = "headersMap")
    private Map<String, String[]> headersMap;
    
    @Autowired
    private Transformer<TestRegistrationBase, String[]> testRegistrationViewTransformer;
    
    @Autowired
    private Transformer<User.RoleAssociation, String[]> userRoleAssociationEntityExportTransformer;
    
    @Autowired
    private Transformer<Student, String[][]> studentEntityExportTransformer;
    
    @Autowired
    private Transformer<StudentGroup, String[]> studentGroupEntityExportTransformer;

    @SuppressWarnings("unchecked")
    @Override
    protected void buildExcelDocument(final Map<String, Object> model, final HSSFWorkbook workbook,
            final HttpServletRequest request, HttpServletResponse response) {
        // get data model which is passed by the Spring container
        List<TestRegistrationBase> entityList = (List<TestRegistrationBase>) model.get(DATA_LIST);
        String formatType = ((String) model.get(FORMAT_TYPE)).toUpperCase();

        Sheet sheet = workbook.createSheet(formatType);
        sheet.setDefaultColumnWidth(30);

        String headerColumns[] = headersMap.get(formatType);
        Row header = sheet.createRow(0);
        for (int i = 0; i < headerColumns.length; i++) {
            Cell cell = header.createCell(i);
            cell.setCellValue(headerColumns[i]);
        }
        // DataRow Begin
        if (CollectionUtils.isNotEmpty(entityList)) {
            int rowCount = 1;
            for (TestRegistrationBase entity : entityList) {
                //if format is user then we need to customize export to include role associations as separate rows               
                switch(FormatType.valueOf(formatType)) {
                    case USER:
                        rowCount = exportUser(sheet, rowCount, entity);
                        break;
                    case STUDENTGROUP:
                        rowCount = exportStudentGroup(sheet, rowCount, entity);
                        break;
                    case STUDENT:
                        rowCount = exportStudent(sheet, rowCount, (Student)entity);
                        break;
                    default:
                        Row rowData = sheet.createRow(rowCount);
                        String[] columnData = testRegistrationViewTransformer.transform(entity);
                        addData(rowData, 0, columnData.length, columnData);
                }
                rowCount++;
            }
        }
    }
    
    private int exportStudent(Sheet sheet, int rowCount, Student entity) {
        String[][] columnDataArray = studentEntityExportTransformer.transform(entity);
        
        if(columnDataArray !=null) {
            for(String[] columnData: columnDataArray) {
                Row roleRowData = sheet.createRow(rowCount);
                addData(roleRowData, 0, columnData.length, columnData);
            }
        }
        return rowCount;
    }

    private int exportStudentGroup(Sheet sheet, int rowCount, TestRegistrationBase entity) {
        StudentGroup studentGroup = (StudentGroup) entity;
        String[] columnData = studentGroupEntityExportTransformer.transform(studentGroup);
        //add students
        if (CollectionUtils.isNotEmpty(studentGroup.getStudentIds())) {
            for (String studentId : studentGroup.getStudentIds()) {
                Row roleRowData = sheet.createRow(rowCount);
                columnData[3] = studentId;
                addData(roleRowData, 0, columnData.length, columnData);
                rowCount++;
            }
            rowCount--;
        }
        return rowCount;
    }

    private int exportUser(Sheet sheet, int rowCount, TestRegistrationBase entity) {
        User user = (User) entity;
        String[] columnData = user.toStringArray();
        //add role association
        if (CollectionUtils.isNotEmpty(user.getRoleAssociations())) {
            for (RoleAssociation role : user.getRoleAssociations()) {
                Row roleRowData = sheet.createRow(rowCount);
                String[] roleData = userRoleAssociationEntityExportTransformer.transform(role);
                addData(roleRowData, 0, columnData.length, columnData);
                addData(roleRowData, columnData.length, roleData.length + columnData.length, roleData);
                rowCount++;
            }
            rowCount--;
        } else {
            Row rowData = sheet.createRow(rowCount);
            addData(rowData, 0, columnData.length, columnData);
        }
        return rowCount;
    }

    private void addData(Row rowData, int initValue, int maxValue, String[] columnData) {
        for (int i = initValue; i < maxValue; i++) {
            Cell cell = rowData.createCell(i);
            cell.setCellType(Cell.CELL_TYPE_STRING);
            cell.setCellValue(columnData[i - initValue]);
        }
    }

}
