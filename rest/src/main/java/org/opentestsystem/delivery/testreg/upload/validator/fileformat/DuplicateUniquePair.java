/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.upload.validator.fileformat;

import static org.apache.commons.collections.ListUtils.retainAll;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.opentestsystem.delivery.testreg.upload.DataRecord;
import org.opentestsystem.delivery.testreg.upload.RowMetadata;

public class DuplicateUniquePair {
    private List<DataRecord> duplicates;
    private Set<DataRecord>  uniqueRecordSet;
    
    public DuplicateUniquePair(List<DataRecord> inDuplicates, Set<DataRecord>  inUniqueRecords) {
        duplicates = inDuplicates;
        uniqueRecordSet = inUniqueRecords;
    }
    
    public List<DataRecord> getDuplicates() {
        return duplicates;
    }
    
    public Set<DataRecord> getUniqueRecordSet() {
        return uniqueRecordSet;
    }
    
    public boolean hasDuplicates() {
        return !duplicates.isEmpty();
    }
    
    @SuppressWarnings("unchecked")
    public List<Integer[]> getDuplicateRowNumbers() {
        Map<DataRecord, List<Integer>> dataRecordDuplicateRowMap = new HashMap<DataRecord, List<Integer>>();
        Iterator<DataRecord> it = getUniqueRecordSet().iterator();
        while(it.hasNext()) {
            
            DataRecord record = it.next();
            
            if(getDuplicates().contains(record)) {
                
                if(dataRecordDuplicateRowMap.get(record) !=null) {
                    dataRecordDuplicateRowMap.get(record).add(record.getRowMetadata().getRowNum());
                } else {
                    List<Integer> recordNumbers = new ArrayList<Integer>();
                    recordNumbers.add(getRowNumber(record.getRowMetadata()));
                    recordNumbers.addAll(getRowNumbers(retainAll(getDuplicates(), Arrays.asList(record))));
                    dataRecordDuplicateRowMap.put(record, recordNumbers);
                }
            }
        }
        return getDuplicateRowNumber(dataRecordDuplicateRowMap);
    }
    
    private List<Integer> getRowNumbers(List<DataRecord> recordList) {
        List<Integer> rowNumbers = new ArrayList<Integer>();
        for(DataRecord record: recordList) {
            rowNumbers.add(getRowNumber(record.getRowMetadata()));
        }
        return rowNumbers;
        
    }
    
    private List<Integer[]> getDuplicateRowNumber(Map<DataRecord, List<Integer>> map) {
        List<Integer[]> duplicateRowArray = new ArrayList<Integer[]>();
        
        for(List<Integer> dups: map.values()) {
            duplicateRowArray.add(dups.toArray(new Integer[dups.size()]));
        }
        return duplicateRowArray;
    }
    
    private int getRowNumber(RowMetadata rowMetadata) {
        return rowMetadata.getRowNum();
    }
}