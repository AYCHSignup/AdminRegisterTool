/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.upload.parser;

import static org.opentestsystem.delivery.testreg.upload.ExcelUtils.getRowNum;
import static org.opentestsystem.delivery.testreg.upload.parser.ParserTextUtils.isEmptyRecord;
import static org.opentestsystem.delivery.testreg.upload.parser.ParserTextUtils.padEmptyIfNoColumnAtEnd;
import static org.opentestsystem.delivery.testreg.upload.parser.ParserTextUtils.trimRecords;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.upload.DataRecord;
import org.opentestsystem.delivery.testreg.upload.ExcelUtils;
import org.opentestsystem.delivery.testreg.upload.ExcelUtils.ExcelRowMapper;
import org.opentestsystem.delivery.testreg.upload.ExcelUtils.ExcelWorksheetProcessor;
import org.opentestsystem.delivery.testreg.upload.FileDataRecord;
import org.opentestsystem.delivery.testreg.upload.FileHeaderRecord;
import org.springframework.beans.factory.annotation.Autowired;

public class ExcelFileUploadParser implements UploadFileParser<Map<String, List<DataRecord>>> {

    @Autowired
    ExcelUtils excelUtils;

    private boolean strict = true;

    private boolean ignoreEmptyRows = false;

    private boolean trim = true;

    @Override
    public ParserResult<Map<String, List<DataRecord>>> parse(final InputStream uploadedFile, final String formatType) throws Exception {

        final Map<String, List<DataRecord>> sheetDataRecordsMap = new HashMap<String, List<DataRecord>>();
        final List<Integer> ignoredRowNums = new ArrayList<>();

        this.excelUtils.setIgnoreEmptyRows(this.ignoreEmptyRows);
        this.excelUtils.processExcelFile(uploadedFile, new ExcelWorksheetProcessor() {
            @Override
            public void process(final Sheet sheet) {
                final List<DataRecord> recordsList = new ArrayList<DataRecord>();

                ExcelFileUploadParser.this.excelUtils.iterateRows(sheet, new ExcelRowMapper() {

                    String format = formatType;
                    int numberOfHeaders;

                    @Override
                    public boolean mapRow(final Row row) {
                        final String[] records = ExcelFileUploadParser.this.excelUtils.getRecordsWithNullRowsAsBlank(row);
                        if (ExcelFileUploadParser.this.strict && records.length == 0) {
                            throw new RuntimeException("Blank Rows found on the excel");
                        }

                        if (getRowNum(row) == HEADER_ROW) {
                            this.numberOfHeaders = records.length;
                            recordsList.add(new FileHeaderRecord(records));
                            sheetDataRecordsMap.put(this.format, recordsList);

                        } else {
                            /**
                             * This try-catch block is for optimization. If the format is Illegal why bother caching the
                             * records for processing !!!
                             */
                            try {
                                FormatType.valueOf(this.format);
                                if (!(ExcelFileUploadParser.this.ignoreEmptyRows && isEmptyRecord(records))) {
                                    final String[] recordsForMap = ExcelFileUploadParser.this.trim ? trimRecords(records) : records;
                                    sheetDataRecordsMap.get(this.format).add(new FileDataRecord(row, padEmptyIfNoColumnAtEnd(this.numberOfHeaders, recordsForMap)));
                                } else {
                                    ignoredRowNums.add(getRowNum(row));
                                }
                            } catch (final IllegalArgumentException illae) {
                                /*
                                 * Absorb the exception. This is handled by code elsewhere.
                                 */
                                return false; // Exit mapping the row
                            }

                        }
                        return true;
                    }
                }, false, false);
            }
        });
        return new ParserResultImpl<Map<String, List<DataRecord>>>(ignoredRowNums, sheetDataRecordsMap);
    }

    public void setStrict(final boolean strict) {
        this.strict = strict;
    }

    public void setIgnoreEmptyRows(final boolean ignoreEmptyRows) {
        this.ignoreEmptyRows = ignoreEmptyRows;
    }

    public void setTrimRecords(final boolean trimValue) {
        this.trim = trimValue;
    }
}
