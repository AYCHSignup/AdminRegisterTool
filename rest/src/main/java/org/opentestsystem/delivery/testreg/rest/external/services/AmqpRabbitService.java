package org.opentestsystem.delivery.testreg.rest.external.services;

import org.opentestsystem.delivery.testreg.domain.amqp.StudentSecurity;
import org.opentestsystem.delivery.testreg.rest.external.mappers.StudentMapper;
import org.opentestsystem.delivery.testreg.rest.external.models.StudentBatchDto;
import org.opentestsystem.delivery.testreg.rest.external.models.StudentDeleteBatchDto;
import org.opentestsystem.delivery.testreg.rest.external.models.StudentDeleteDto;
import org.opentestsystem.delivery.testreg.rest.external.models.StudentDto;
import org.opentestsystem.delivery.testreg.service.impl.amqp.Receiver;
import org.opentestsystem.shared.security.domain.SbacUser;
import org.springframework.amqp.core.Binding;
import org.springframework.amqp.core.BindingBuilder;
import org.springframework.amqp.core.Queue;
import org.springframework.amqp.core.TopicExchange;
import org.springframework.amqp.rabbit.connection.ConnectionFactory;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer;
import org.springframework.amqp.rabbit.listener.adapter.MessageListenerAdapter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;

import java.util.List;

/**
 * Created by fairway on 6/27/16.
 */

@Service
public class AmqpRabbitService {

    final static String queueName = "student";

    @Autowired
    RabbitTemplate rabbitTemplate;

    @Bean
    Queue queue() {
        return new Queue(queueName, false);
    }

    @Bean
    TopicExchange exchange() {
        return new TopicExchange("student-exchange");
    }

    @Bean
    Binding binding(Queue queue, TopicExchange exchange) {
        return BindingBuilder.bind(queue).to(exchange).with(queueName);
    }

    @Bean
    SimpleMessageListenerContainer container(ConnectionFactory connectionFactory, MessageListenerAdapter listenerAdapter) {
        SimpleMessageListenerContainer container = new SimpleMessageListenerContainer();
        container.setConnectionFactory(connectionFactory);
        container.setQueueNames(queueName);
        container.setMessageListener(listenerAdapter);
        return container;
    }

    @Bean
    Receiver receiver() {
        return new Receiver();
    }

    @Bean
    MessageListenerAdapter listenerAdapter(Receiver receiver) {
        return new MessageListenerAdapter(receiver, "receiveMessage");
    }

    public void sendUpsert(List<StudentDto> studentDtos, String batchId, String stateCode) throws Exception {
        for(StudentDto studentDto : studentDtos) {
            send(new StudentBatchDto(studentDto, batchId, stateCode));
        }
    }

    public void sendDelete(List<StudentDeleteDto> studentDeleteDtos, String batchId) throws Exception {
        for(StudentDeleteDto studentDeleteDto : studentDeleteDtos) {
            send(new StudentDeleteBatchDto(studentDeleteDto, batchId));
        }
    }

    private void send(StudentDeleteBatchDto studentDeleteBatchDto) throws Exception {
        studentDeleteBatchDto.setStudentSecurity(getSecurity());
        rabbitTemplate.convertAndSend(queueName, StudentMapper.MapTo(studentDeleteBatchDto));
    }

    private void send(StudentBatchDto studentBatchDto) throws Exception {
        studentBatchDto.setStudentSecurity(getSecurity());
        rabbitTemplate.convertAndSend(queueName, StudentMapper.MapTo(studentBatchDto));
    }

    public StudentSecurity getSecurity() {
        SbacUser user = (SbacUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
        StudentSecurity studentSecurity = new StudentSecurity();
        studentSecurity.setUserName(user.getUsername());
        studentSecurity.setSbacRoles(user.getRoles());
        return studentSecurity;
    }
}
