/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.rest;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.opentestsystem.delivery.testreg.domain.ClientEntity;
import org.opentestsystem.delivery.testreg.domain.UIValidationGroup;
import org.opentestsystem.delivery.testreg.domain.UpdateOperation;
import org.opentestsystem.delivery.testreg.service.TestRegPersister;
import org.opentestsystem.delivery.testreg.transformer.domain.DwConfigs;
import org.opentestsystem.shared.web.AbstractRestController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.http.MediaType;
import org.springframework.security.access.annotation.Secured;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
public class ClientController extends AbstractRestController {

    private static final String DATA_LIST = "DATA_LIST";
    private static final String FORMAT_TYPE = "FORMAT_TYPE";

    @Autowired
    private TestRegPersister entityService;

    @Autowired
    private DwConfigs dwConfigs;

    @Value("${exportLimit:9999}")
    private String exportLimit;

    /**
     * Gets All Client.
     * 
     * @return List of Client objects.
     */
    @RequestMapping(value = "/clients", method = RequestMethod.GET)
    @Secured({ "ROLE_Entity Read" })
    public void findAllClients(HttpServletRequest request, Model model) {
        List<ClientEntity> clientEntityList = entityService.findAll(ClientEntity.FORMAT_TYPE);
        model.addAttribute(FORMAT_TYPE, ClientEntity.FORMAT_TYPE.toString());
        for (ClientEntity client : clientEntityList) {

            client.setSbacExportTypes(dwConfigs.getSbacConfig().getAssessmentTypesForExport());
            client.setLocalExportTypes(dwConfigs.getLocalConfig() == null ? null : dwConfigs.getLocalConfig()
                    .getAssessmentTypesForExport());

        }
        model.addAttribute(DATA_LIST, clientEntityList);
    }

    /**
     * Find Client by id.
     * 
     * @param id
     * @return ClientEntity clientEntity
     */
    @RequestMapping(value = "/clients/{id}", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Entity Read" })
    @ResponseBody
    public ClientEntity findClientEntityById(@PathVariable final String id) {
        ClientEntity clientEntity = entityService.findById(id, ClientEntity.FORMAT_TYPE);

        clientEntity.setSbacExportTypes(dwConfigs.getSbacConfig().getAssessmentTypesForExport());
        clientEntity.setLocalExportTypes(dwConfigs.getLocalConfig() == null ? null : dwConfigs.getLocalConfig()
                .getAssessmentTypesForExport());

        return clientEntity;
    }

    /**
     * Return TestReg Client.Client always return one per Deployment.
     * 
     * @return ClientEntity clientEntity
     */
    @RequestMapping(value = "/client", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Entity Read" })
    @ResponseBody
    @Cacheable("Testreg.Client")
    public ClientEntity getClientEntity() {
        ClientEntity clientEntity = null;
        List<ClientEntity> clientEntityList = entityService.findAll(ClientEntity.FORMAT_TYPE);
        if (clientEntityList != null && clientEntityList.size() > 0) {
            clientEntity = clientEntityList.get(0);

            clientEntity.setSbacExportTypes(dwConfigs.getSbacConfig().getAssessmentTypesForExport());
            clientEntity.setLocalExportTypes(dwConfigs.getLocalConfig() == null ? null : dwConfigs.getLocalConfig()
                    .getAssessmentTypesForExport());
        }
        return clientEntity;
    }

    /**
     * Update Client by id.
     * 
     * @param id
     * @return ClientEntity clientEntity
     */
    @RequestMapping(value = "/client/{id}", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Client Administrator" })
    @ResponseBody
    @CacheEvict(value = "Testreg.Client", beforeInvocation = true, allEntries = true)
    @Cacheable("Testreg.Client")
    public ClientEntity updateClientEntity(@PathVariable final String id, @RequestBody @Validated({
            UIValidationGroup.class, UpdateOperation.class }) final ClientEntity clientEntity,
            final HttpServletResponse response) {

        ClientEntity retVal = entityService.updateDomainObject(clientEntity);

        retVal.setSbacExportTypes(dwConfigs.getSbacConfig().getAssessmentTypesForExport());
        retVal.setLocalExportTypes(dwConfigs.getLocalConfig() == null ? null : dwConfigs.getLocalConfig()
                .getAssessmentTypesForExport());

        return retVal;
    }

    /**
     * Find Client by id.
     * 
     * @param id
     * @return ClientEntity clientEntity
     */
    @RequestMapping(value = "/client/exportConfig", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Entity Read" })
    @ResponseBody
    public String getExportAllConfig() {
        return exportLimit;
    }
}
