/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.rest;

import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.opentestsystem.delivery.testreg.domain.EntityCrosswalk;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.service.EntityCrosswalkService;
import org.opentestsystem.shared.web.AbstractRestController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;

@Controller
public class EntityCrosswalkController extends AbstractRestController {

    @Resource(name = "defaultCrosswalkMap")
    private Map<FormatType, List<String>> defaultCrosswalkMap;

    @Autowired
    private EntityCrosswalkService entityCrosswalkService;

    @RequestMapping(value = "/crosswalkMap", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public Map<FormatType, Map<String, String>> getCrosswalkMap() {
        Map<FormatType, Map<String, String>> crosswalkMap = Maps.newHashMap();

        for (FormatType formatType : FormatType.values()) {
            // First populate the map with default values. The idea here is to replace the default values with what is available from
            // db later. So if nothing is found for a column, default mapping stays.
            crosswalkMap.put(formatType, getDefaultMap(defaultCrosswalkMap.get(formatType)));

            crosswalkMap.get(formatType).putAll((entityCrosswalkService.getFormatType(formatType)));

        }
        return crosswalkMap;
    }

    // This endpoint is not directly used anywhere. It can be called when anyone wanted to bootstrap EntityCrosswalk collection prior
    // to modifying them for their needs. Calling this service will not wipe any existing data for the format type.
    @RequestMapping(value = "/loadCrosswalks", method = RequestMethod.GET)
    @ResponseBody
    public Map<String, Integer> loadCrosswalks() {
        int count = 0;
        for (FormatType formatType : FormatType.values()) {
            List<EntityCrosswalk> crosswalkInDB = entityCrosswalkService.findByFormatType(formatType);
            if (crosswalkInDB == null || crosswalkInDB.isEmpty()) {
                crosswalkInDB = entityCrosswalkService.saveCrosswalkList(getEntityCrosswalks(formatType, defaultCrosswalkMap.get(formatType)));
                count += crosswalkInDB.size();
            }
        }
        Map<String, Integer> result = Maps.newHashMap();
        result.put("Success", count);
        return result;
    }

    private List<EntityCrosswalk> getEntityCrosswalks(final FormatType formatType, final List<String> list) {
        List<EntityCrosswalk> entityCrosswalkList = Lists.newArrayList();

        for (String colName : list) {
            entityCrosswalkList.add(new EntityCrosswalk(formatType, colName, colName));
        }
        return entityCrosswalkList;
    }

    private Map<String, String> getDefaultMap(final List<String> columnList) {
        Map<String, String> map = Maps.newHashMap();

        for (String column : columnList) {
            map.put(column, column);
        }
        return map;
    }
}
