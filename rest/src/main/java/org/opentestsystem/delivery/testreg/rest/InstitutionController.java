/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.rest;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.opentestsystem.delivery.testreg.domain.AddOperation;
import org.opentestsystem.delivery.testreg.domain.DeleteOperation;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.GroupOfInstitutionsEntity;
import org.opentestsystem.delivery.testreg.domain.HierarchyLevel;
import org.opentestsystem.delivery.testreg.domain.InstitutionEntity;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.domain.UIValidationGroup;
import org.opentestsystem.delivery.testreg.domain.UpdateOperation;
import org.opentestsystem.delivery.testreg.domain.search.InstitutionEntitySearchRequest;
import org.opentestsystem.delivery.testreg.persistence.criteria.Sb11ObjectIdConverters.ObjectIdToInstitutionEntityConverter;
import org.opentestsystem.delivery.testreg.service.Sb11EntityRepositoryService;
import org.opentestsystem.delivery.testreg.service.StudentService;
import org.opentestsystem.delivery.testreg.service.TestRegPersister;
import org.opentestsystem.delivery.testreg.upload.validation.ValidatedPathVariable;
import org.opentestsystem.shared.exception.LocalizedException;
import org.opentestsystem.shared.exception.RestException;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.opentestsystem.shared.web.AbstractRestController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.access.annotation.Secured;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

import com.google.common.base.Function;
import com.google.common.collect.FluentIterable;

@Controller
public class InstitutionController extends AbstractRestController {

    private static final String DISTRICT_ID = "districtId";

    @Autowired
    private TestRegPersister testRegPersister;

    @Autowired
    private StudentService studentService;

    @Autowired
    private Sb11EntityRepositoryService sb11EntityService;

    /**
     * Can query the institution endpoint with query parameters in a querystring. or with JSON Valid parameters are:
     * institution id, institution name
     * 
     * @param request
     *        HttpServletRequest
     * @param response
     *        HttpServletResponse
     * @return SearchResponse<Sb11Entity>
     */
    @RequestMapping(value = "/institution", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Entity Read" })
    @ResponseBody
    public SearchResponse<Sb11Entity> searchInstitutes(final HttpServletRequest request,
            final HttpServletResponse response) {

        InstitutionEntitySearchRequest searchRequest = new InstitutionEntitySearchRequest(request.getParameterMap());
        SearchResponse<Sb11Entity> searchResponse;
        if (searchRequest.isValid()) {
            searchResponse = testRegPersister.searchDomainObjects(searchRequest, InstitutionEntity.FORMAT_TYPE);
        } else {
            throw new RestException("entity.search.invalidSearchCriteria");
        }
        return searchResponse;
    }

    /**
     * Creates Institute.
     * 
     * @param institution
     *        to be saved.
     * @param response
     *        HttpServletResponse.
     * @return InstituteEntity newly created institution object.
     */
    @ResponseStatus(HttpStatus.CREATED)
    @RequestMapping(value = "/institution", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Entity Modify" })
    @ResponseBody
    public InstitutionEntity saveInstitute(
            @RequestBody @Validated({ UIValidationGroup.class, AddOperation.class }) final InstitutionEntity institution,
            final HttpServletResponse response) {
        return testRegPersister.saveDomainObject(institution);
    }

    /**
     * Edit Institute.
     * 
     * @param institution
     *        to be saved.
     * @param response
     *        HttpServletResponse.
     * @return InstituteEntity updated institution object.
     */
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = "/institution/{institutionId}", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Entity Modify" })
    @ResponseBody
    public InstitutionEntity editInstitute(@PathVariable final String institutionId, @RequestBody @Validated({
        UIValidationGroup.class, UpdateOperation.class }) final InstitutionEntity institution,
        final HttpServletResponse response) {
        if (institution == null || StringUtils.isEmpty(institution.getId())
                || !institutionId.equals(institution.getId())) {
            throw new LocalizedException("entity.invalid.id", new String[] { "Institution" });
        } else {
            return testRegPersister.updateDomainObject(institution);
        }
    }

    /**
     * Delete Institute. <br>
     * <b>Important:</b> <br>
     * {@link ValidatedPathVariable} would resolve institutionId to {@link InstitutionEntity} by calling {@link ObjectIdToInstitutionEntityConverter}. <br>
     * {@linkplain Validated} with hints {@code UIValidationGroup} and {@code DeleteOperation} calls Validator using
     * binders. <br>
     * 
     * @param id
     *        institution Id.
     */
    @ResponseStatus(HttpStatus.NO_CONTENT)
    @RequestMapping(value = "/institution/{institutionId}", method = RequestMethod.DELETE)
    @Secured({ "ROLE_Entity Modify" })
    public void deleteInstitute(
            @ValidatedPathVariable @Validated({ UIValidationGroup.class, DeleteOperation.class }) final InstitutionEntity entity) {
        testRegPersister.deleteDomainObject(entity.getId(), InstitutionEntity.FORMAT_TYPE);
    }

    /**
     * find Institute by id.
     * 
     * @param id
     *        .
     * @param response
     *        HttpServletResponse.
     * @return InstituteEntity for given institution Id.
     */
    @RequestMapping(value = "/institution/{institutionId}", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Entity Read" })
    @ResponseBody
    public InstitutionEntity findById(@PathVariable final String institutionId) {
        return testRegPersister.findById(institutionId, InstitutionEntity.FORMAT_TYPE);
    }

    /**
     * Find institutions by district id. ex: /institution?districtId=12345
     * 
     * @param districtId
     * @param request
     * @param response
     * @return List of institution entities
     */
    @RequestMapping(value = "/institution", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE, params = DISTRICT_ID)
    @Secured({ "ROLE_Entity Read" })
    @ResponseBody
    public List<InstitutionEntity> findInstitutionByDistrictId(@RequestParam(DISTRICT_ID) final String districtId,
            final HttpServletRequest request, final HttpServletResponse response) {
        List<InstitutionEntity> institutionEntityList = sb11EntityService.findAllByParentEntityTypeAndParentEntityId(
                HierarchyLevel.DISTRICT.toString(), districtId, InstitutionEntity.FORMAT_TYPE);
        // find group of institutions for that district and then find institutions matching that group of institutions
        // as parent
        List<GroupOfInstitutionsEntity> gois = sb11EntityService.findAllByParentEntityTypeAndParentEntityId(
                HierarchyLevel.DISTRICT.toString(), districtId, GroupOfInstitutionsEntity.FORMAT_TYPE);
        for (GroupOfInstitutionsEntity goi : gois) {
            List<InstitutionEntity> institutionsWithGOIParent = sb11EntityService
                    .findAllByParentEntityTypeAndParentEntityId(HierarchyLevel.GROUPOFINSTITUTIONS.toString(),
                            goi.getEntityId(), InstitutionEntity.FORMAT_TYPE);
            institutionEntityList.addAll(institutionsWithGOIParent);
        }
        return institutionEntityList;
    }

    /**
     * Find grades of students associated to the institution
     * 
     * @param institutionId
     * @param request
     * @param response
     * @return List of grades
     */
    @RequestMapping(value = "/institution/{institutionId}/state/{stateId}/grades", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    // TODO uncomment after AIR testing
    // @Secured({ "ROLE_Entity Read" })
    @ResponseBody
    public Set<String> findInstitutionGrades(@PathVariable final String institutionId,
            @PathVariable final String stateId, final HttpServletRequest request, final HttpServletResponse response) {
        List<Student> students = studentService.findByInstitutionIdentifierAndStateAbbreviation(institutionId, stateId);
        // transform into grades
        Set<String> grades = FluentIterable.from(students).transform(new Function<Student, String>() {
            @Override
            public String apply(final Student input) {
                return input.getGradeLevelWhenAssessed().toString();
            }
        }).toSet();
        return grades;
    }

    /**
     * Find Institutions Append ".xls" to the URL to get data in Excel format Append ".csv" to the URL to get data in
     * CSV format
     */
    @RequestMapping(value = "/institutions", method = RequestMethod.GET)
    // TODO uncomment after AIR testing
    // @Secured({ "ROLE_Entity Read" })
    public void findInstitutions(final HttpServletRequest request, final Model model) throws Exception {
        Sb11EntityControllerHelper.findEntities(request, model, FormatType.INSTITUTION, testRegPersister);
    }

    /**
     * Find Parents
     */
    @RequestMapping(value = "/institutions/parents", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Entity Read" })
    @ResponseBody
    public List<Sb11Entity> findParents(final HttpServletRequest request) throws Exception {
        return Sb11EntityControllerHelper.findParentEntities(request, null, FormatType.INSTITUTION, testRegPersister,
                sb11EntityService);
    }

    /**
     * Can query the institution endpoint with query parameters in a querystring. or with JSON Valid parameters are:
     * institution id, institution name
     * 
     * @param request
     *        HttpServletRequest
     * @param response
     *        HttpServletResponse
     * @return SearchResponse<Sb11Entity>
     */
    @RequestMapping(value = "/institutions/parentInstitutions", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Entity Read" })
    @ResponseBody
    public SearchResponse<Sb11Entity> searchInstitutionsWithGroups(final HttpServletRequest request,
            final HttpServletResponse response) {

        InstitutionEntitySearchRequest searchRequest = new InstitutionEntitySearchRequest(request.getParameterMap());
        SearchResponse<Sb11Entity> searchResponse = testRegPersister.searchDomainObjects(searchRequest, InstitutionEntity.FORMAT_TYPE);
        SearchResponse<Sb11Entity> groupOfSearchResponse = testRegPersister.searchDomainObjects(searchRequest, GroupOfInstitutionsEntity.FORMAT_TYPE);
        List<Sb11Entity> grpInstituionList = groupOfSearchResponse.getSearchResults();
        if (grpInstituionList != null && grpInstituionList.size() > 0) {
            Map<String, String[]> searchParams = getParamsForInstitutionByGroup(grpInstituionList);
            InstitutionEntitySearchRequest grpSearchRequest = new InstitutionEntitySearchRequest(searchParams);
            SearchResponse<Sb11Entity> searchResponseForGrp = testRegPersister.searchDomainObjects(grpSearchRequest, InstitutionEntity.FORMAT_TYPE);
            searchResponse.getSearchResults().addAll(searchResponseForGrp.getSearchResults());
        }

        return searchResponse;
    }

    private Map<String, String[]> getParamsForInstitutionByGroup(List<Sb11Entity> entityList) {
        Map<String, String[]> searchParams = new HashMap<String, String[]>();
        String[] searchData = new String[entityList.size()];
        for (int i = 0; i < entityList.size(); i++) {
            searchData[i] = entityList.get(i).getId();
        }
        searchParams.put(InstitutionEntitySearchRequest.SEARCH_KEY_PARENT_ID, searchData);
        return searchParams;

    }
}
