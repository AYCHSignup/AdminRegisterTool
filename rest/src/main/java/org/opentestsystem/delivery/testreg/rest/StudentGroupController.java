/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.rest;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.opentestsystem.delivery.testreg.domain.StudentGroup;
import org.opentestsystem.delivery.testreg.domain.UIValidationGroup;
import org.opentestsystem.delivery.testreg.domain.UpdateOperation;
import org.opentestsystem.delivery.testreg.domain.User;
import org.opentestsystem.delivery.testreg.domain.search.StudentGroupSearchRequest;
import org.opentestsystem.delivery.testreg.service.TestRegPersister;
import org.opentestsystem.delivery.testreg.service.UserService;
import org.opentestsystem.shared.exception.LocalizedException;
import org.opentestsystem.shared.exception.RestException;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.opentestsystem.shared.web.AbstractRestController;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.access.annotation.Secured;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

@Controller
public class StudentGroupController extends AbstractRestController {

    @SuppressWarnings("unused")
    private static final Logger LOGGER = LoggerFactory.getLogger(StudentGroupController.class);

    private static final String DATA_LIST = "DATA_LIST";
    private static final String FORMAT_TYPE = "FORMAT_TYPE";

    @Autowired
    private TestRegPersister studentGroupService;

    @Autowired
    private UserService userService;

    /**
     * Find studentGroup by id.
     * 
     * @param id studentGroup mongo id
     * @return StudentGroup studentGroup
     */
    @RequestMapping(value = "/studentGroup/{id}", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_StudentGroup Read" })
    @ResponseBody
    public StudentGroup findStudentGroupById(@PathVariable final String id) {
        return this.studentGroupService.findById(id, StudentGroup.FORMAT_TYPE);
    }

    /**
     * Save studentGroup.
     * 
     * @param studentGroup unsaved studentGroup
     * @param response HttpServlet response
     * @return StudentGroup saved studentGroup
     */
    @ResponseStatus(HttpStatus.CREATED)
    @RequestMapping(value = "/studentGroup", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_StudentGroup Modify" })
    @ResponseBody
    public StudentGroup saveStudentGroup(@RequestBody @Validated({ UIValidationGroup.class, UpdateOperation.class }) final StudentGroup studentGroup,
            final HttpServletResponse response) {
        final StudentGroup savedStudentGroup = this.studentGroupService.saveDomainObject(studentGroup);
        response.setHeader("Location", savedStudentGroup.getUrl());
        return savedStudentGroup;
    }

    /**
     * Update StudentGroup.
     * 
     * @param id studentGroup mongo id
     * @param studentGroup to be updated
     * @param response HttpServlet response
     * @return StudentGroup updated studentGroup
     */
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = "/studentGroup/{id}", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_StudentGroup Modify" })
    @ResponseBody
    public StudentGroup editStudentGroup(@PathVariable final String id, @RequestBody @Validated({ UIValidationGroup.class,
            UpdateOperation.class }) final StudentGroup studentGroup, final HttpServletResponse response) {
        if (studentGroup == null || StringUtils.isEmpty(studentGroup.getId()) || !id.equals(studentGroup.getId())) {
            throw new LocalizedException("nonentity.invalid.id", new String[] { "StudentGroup" });
        } else {
            final StudentGroup savedEntity = this.studentGroupService.saveDomainObject(studentGroup);
            response.setHeader("Location", savedEntity.getUrl());
            return savedEntity;
        }
    }

    /**
     * Delete studentGroup.
     * 
     * @param id mongo id
     */
    @ResponseStatus(HttpStatus.NO_CONTENT)
    @RequestMapping(value = "/studentGroup/{id}", method = RequestMethod.DELETE)
    @Secured({ "ROLE_StudentGroup Modify" })
    public void deleteStudentGroup(@PathVariable final String id) {
        this.studentGroupService.deleteDomainObject(id, StudentGroup.FORMAT_TYPE);
    }

    /**
     * Search studentGroups by search criteria.
     * 
     * @param request HttpServlet request
     * @param response HttpServlet response
     * @return SearchResponse containing studentGroups
     */
    @RequestMapping(value = "/studentGroups", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_StudentGroup Read" })
    @ResponseBody
    public SearchResponse<StudentGroup> searchStudentGroup(final HttpServletRequest request, final HttpServletResponse response) {
        final StudentGroupSearchRequest searchRequest = new StudentGroupSearchRequest(request.getParameterMap());
        SearchResponse<StudentGroup> searchResponse;
        if (searchRequest.isValid()) {
            searchResponse = this.studentGroupService.searchDomainObjects(searchRequest, StudentGroup.FORMAT_TYPE);
            // load reference data
            for (final StudentGroup studentGroup : searchResponse.getSearchResults()) {
                final User user = this.userService.findByEmail(studentGroup.getOwnerEmail());
                if (user != null) {
                  studentGroup.setOwnerFirstName(user.getFirstName());
                  studentGroup.setOwnerLastName(user.getLastName());
                }
            }
            return searchResponse;
        }
        throw new RestException("nonentity.search.invalidSearchCriteria");
    }

    /**
     * Export StudentGroup Data into Excel or CSV based on path extensions
     * 
     * @param model ModelMap.
     */
    @RequestMapping(value = "/studentGroups", method = RequestMethod.GET)
    @Secured({ "ROLE_StudentGroup Read" })
    public void exportToFiles(final HttpServletRequest request, final Model model) throws Exception {
        List<StudentGroup> studentGroupList = null;
        if (request.getParameterMap() != null) {
            final StudentGroupSearchRequest searchRequest = new StudentGroupSearchRequest(request.getParameterMap());
            final SearchResponse<StudentGroup> searchResponse = this.studentGroupService.searchDomainObjects(searchRequest, StudentGroup.FORMAT_TYPE);
            studentGroupList = searchResponse.getSearchResults();
        }
        if (model != null) {
            model.addAttribute(FORMAT_TYPE, StudentGroup.FORMAT_TYPE.toString());
            model.addAttribute(DATA_LIST, studentGroupList);
        }
    }
}
