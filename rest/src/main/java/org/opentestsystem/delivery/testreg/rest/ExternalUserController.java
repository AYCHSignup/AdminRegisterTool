/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2016 Regents of the University of California
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 *
 * SmarterApp Open Source Assessment Software Project: http://smarterapp.org
 * Developed by Fairway Technologies, Inc. (http://fairwaytech.com)
 * for the Smarter Balanced Assessment Consortium (http://smarterbalanced.org)
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.rest;

import io.swagger.annotations.*;
import org.opentestsystem.delivery.testreg.domain.User;
import org.opentestsystem.delivery.testreg.domain.UserPasswordReset;
import org.opentestsystem.delivery.testreg.domain.UserUpsert;
import org.opentestsystem.delivery.testreg.rest.external.mappers.UserMapper;
import org.opentestsystem.delivery.testreg.rest.external.models.UserDto;
import org.opentestsystem.delivery.testreg.service.ExternalUserService;
import org.opentestsystem.delivery.testreg.service.UserService;
import org.opentestsystem.shared.web.AbstractRestController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.security.access.annotation.Secured;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

/**
 * Created by fairway on 8/23/16.
 */

@Controller
@Api(tags = "ExternalUser", description = "Management")
public class ExternalUserController extends AbstractRestController {

    @Autowired
    public ExternalUserController(UserService userService, ExternalUserService externalUserService) {
        this.userService = userService;
        this.externalUserService = externalUserService;
    }

    private UserService userService;

    private ExternalUserService externalUserService;


    @RequestMapping(value = "/external/user/{email:.+}/details", method = RequestMethod.GET)
    @Secured({ "ROLE_User Read" })
    @ResponseBody
    @ApiOperation(value="Find user by email")
    @ApiResponses(value = {
            @ApiResponse(code = 200, message="User found"),
            @ApiResponse(code = 404, message="User does not exist")
    })
    public UserDto findUserById(@PathVariable final String email, final HttpServletResponse response) {
        User user = userService.findByEmail(email);
        if(user == null) {
            response.setStatus(HttpServletResponse.SC_NOT_FOUND);
            return null;
        }
        return UserMapper.mapFrom(user);
    }

    @RequestMapping(value = "/external/user", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_User Modify" })
    @ResponseBody
    @ApiOperation(value="Insert or update user")
    @ApiResponses(value = {
            @ApiResponse(code = 201, message="User created", responseHeaders = { @ResponseHeader(name = "Location", description = "The URL to retrieve created resource", response = String.class) }),
            @ApiResponse(code = 204, message="User updated", responseHeaders = { @ResponseHeader(name = "Location", description = "The URL to retrieve created resource", response = String.class) })
    })
    public UserDto saveStudent(@RequestBody final UserDto userDto, final HttpServletRequest request, final HttpServletResponse response) throws IOException {
        UserUpsert userUpsert = externalUserService.upsertUser(UserMapper.mapTo(userDto));
        response.setStatus(userUpsert.isInsert() ? HttpServletResponse.SC_CREATED : HttpServletResponse.SC_NO_CONTENT);
        response.setHeader("Location", request.getRequestURL().toString() + "/" + userUpsert.getUser().getEmail() + "/details");
        return UserMapper.mapFrom(userUpsert.getUser());
    }

    @RequestMapping(value = "external/user", method = RequestMethod.DELETE)
    @Secured({ "ROLE_User Modify" })
    @ApiOperation(value="Delete a user")
    @ApiResponses(value = {
            @ApiResponse(code = 204, message="User deleted"),
            @ApiResponse(code = 404, message="User does not exist")
    })
    public void deleteStudent(@RequestBody final String email, final HttpServletResponse response) {
        response.setStatus(externalUserService.deleteUser(email) ? HttpServletResponse.SC_NO_CONTENT : HttpServletResponse.SC_NOT_FOUND);
    }

    @RequestMapping(value = "/external/user/reset", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_User Modify" })
    @ResponseBody
    @ApiOperation(value="Update user password")
    @ApiResponses(value = { @ApiResponse(code = 204, message="User updated", responseHeaders = { @ResponseHeader(name = "Location", description = "The URL to retrieve created resource", response = String.class) }) })
    public UserDto updateStudentPassword(@RequestBody final UserPasswordReset userPasswordReset, final HttpServletRequest request, final HttpServletResponse response) throws IOException {
        return UserMapper.mapFrom(externalUserService.resetPassword(userPasswordReset));
    }

}
