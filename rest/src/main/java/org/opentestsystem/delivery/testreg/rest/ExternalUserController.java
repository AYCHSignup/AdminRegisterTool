/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2016 Regents of the University of California
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 *
 * SmarterApp Open Source Assessment Software Project: http://smarterapp.org
 * Developed by Fairway Technologies, Inc. (http://fairwaytech.com)
 * for the Smarter Balanced Assessment Consortium (http://smarterbalanced.org)
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.rest;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import org.opentestsystem.delivery.testreg.domain.User;
import org.opentestsystem.delivery.testreg.rest.external.mappers.UserMapper;
import org.opentestsystem.delivery.testreg.rest.external.models.UserDto;
import org.opentestsystem.delivery.testreg.service.UserService;
import org.opentestsystem.shared.web.AbstractRestController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.security.access.annotation.Secured;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.servlet.http.HttpServletResponse;

/**
 * Created by fairway on 8/23/16.
 */

@Controller
@Api(tags = "User", description = "Management")
public class ExternalUserController extends AbstractRestController {

    @Autowired
    private UserService userService;


    @RequestMapping(value = "/external/user/{email}", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_User Read" })
    @ResponseBody
    @ApiOperation(value="Find user by email")
    @ApiResponses(value = {
            @ApiResponse(code = 200, message="User found"),
            @ApiResponse(code = 404, message="User does not exist")
    })
    public UserDto findUserById(@PathVariable final String email, final HttpServletResponse response) {
        User user = userService.findByEmail(email);
        if(user == null) {
            response.setStatus(HttpServletResponse.SC_NOT_FOUND);
            return null;
        }
        return UserMapper.mapFrom(user);
    }

}
