/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.upload;

import java.util.Arrays;
import java.util.List;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;
import org.apache.poi.ss.usermodel.Row;

public class FileDataRecord implements DataRecord {

    private final String[] columns;

    private final RowMetadata rowMetadata;

    public FileDataRecord(final Row row, final List<String> columnData) {
        this(new RowMetadataImpl(row), columnData);
    }

    public FileDataRecord(final RowMetadata rowMetadata, final List<String> columnData) {
        this.rowMetadata = rowMetadata;
        this.columns = columnData.toArray(new String[columnData.size()]);
    }

    public FileDataRecord(final RowMetadata rowMetadata, final String[] columnData) {
        this(rowMetadata, Arrays.asList(columnData));
    }

    public FileDataRecord(final int rowNum, final String[] rowData) {
        this(new RowMetadataImpl(rowNum, null), rowData);
    }

    public FileDataRecord(final Row row, final Object[] columnData) {
        this(row, Arrays.asList(columnData).toArray(new String[columnData.length]));
    }

    public FileDataRecord(final Row row, final String[] columnData) {
        this.rowMetadata = new RowMetadataImpl(row);
        this.columns = columnData;
    }

    @Override
    public String[] getColumns() {
        return this.columns;
    }

    /**
     * Returns value for that column. Column numbers are zero based. Returns null when no column is found.
     * 
     * @param columnNum
     *        Column Number
     * @return Value of the column
     */
    public String getColumnAt(final int columnNum) {
        String value = null;

        if (columnNum < this.columns.length) {
            value = getColumns()[columnNum];
        }
        return value;
    }

    @Override
    public RowMetadata getRowMetadata() {
        return this.rowMetadata;
    }

    public int getLength() {
        return this.columns.length;
    }

    @Override
    public int hashCode() {
        final int initialValue = 25; // Random odd number
        final int multiplier = 49; // Random Odd number

        return new HashCodeBuilder(initialValue, multiplier).append(getColumns()).hashCode();
    }

    @Override
    public boolean equals(final Object inRecord) {
        if (inRecord == this) {
            return true;
        }

        if (!(inRecord instanceof DataRecord)) {
            return false;
        }

        final DataRecord inDataRecord = (DataRecord) inRecord;

        return new EqualsBuilder().append(getColumns(), inDataRecord.getColumns()).isEquals();
    }

    @Override
    public String toString() {
        return ToStringBuilder.reflectionToString(this, ToStringStyle.SHORT_PREFIX_STYLE);
    }
}
