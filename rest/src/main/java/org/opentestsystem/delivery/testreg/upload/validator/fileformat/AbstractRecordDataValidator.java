/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.upload.validator.fileformat;

import org.apache.commons.lang.ArrayUtils;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.TestRegistrationBase;
import org.opentestsystem.delivery.testreg.upload.DataRecord;
import org.opentestsystem.delivery.testreg.upload.FileDataRecord;
import org.opentestsystem.delivery.testreg.upload.FileHeaderRecord;
import org.opentestsystem.delivery.testreg.upload.FileUploadUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.Errors;
import org.springframework.validation.Validator;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import static org.opentestsystem.delivery.testreg.domain.AnnotationHelper.*;
import static org.opentestsystem.delivery.testreg.domain.Sb11EntityUtils.*;
import static org.opentestsystem.delivery.testreg.upload.validator.FileValidationUtils.*;

public abstract class AbstractRecordDataValidator implements Validator {

    private String datasetName;

    protected String[] headers;

    private boolean validateDuplicates = true;

    @Autowired
    protected FileUploadUtils fileUploadUtils;

    @Autowired
    private DuplicateRecordProcessor duplicateRecordProcessor;

    protected AbstractRecordDataValidator(String recordDataName) {
        datasetName = recordDataName;
    }

    @Override
    public boolean supports(Class<?> clazz) {
        return ArrayList.class.isAssignableFrom(clazz);
    }

    @Override
    public void validate(Object target, Errors errors) {

        Iterator<DataRecord> recordsIterator = null;
        boolean hasGlobalErrors = false;

        @SuppressWarnings("unchecked")
        List<DataRecord> recordsList = ((List<DataRecord>) target);

        //check for duplicate NCESID if format is DISTRICT or INSTITUTION
        if (isNCESIDDupCheckRequired()) {
            Map<String, List<Integer>> duplicateNcesIds = duplicateRecordProcessor.getDuplicateNCESIds(recordsList, FormatType.valueOf(datasetName));

            if (!duplicateNcesIds.isEmpty()) {
                hasGlobalErrors = true;
                FileDataRecord record = (FileDataRecord) recordsList.get(0);
                TestRegistrationBase sb11Entity = fileUploadUtils.getDomainObject(FormatType.valueOf(datasetName), record.getColumns());
                for (Map.Entry<String, List<Integer>> entry : duplicateNcesIds.entrySet()) {
                    String label = getFieldLabel(sb11Entity, "nationwideIdentifier");
                    rejectValue(errors,
                            getDatasetName(),
                            null,
                            null,
                            "Duplicate " + getHumanReadableName(label) + " " + entry.getKey() + " found in rows " + entry.getValue());
                }
            }
        }
        if (validateDuplicates) {

            DuplicateUniquePair duplicateUniquePair = duplicateRecordProcessor.processDuplicates(recordsList);
            
            /*
             * Check for Duplicates. If found, reject them as global errors and have user correct the input.
             */
            if (duplicateUniquePair.hasDuplicates()) {
                hasGlobalErrors = true;
                
                /*
                 * Duplicates are found. Get the row numbers and add error messages for each data record that has duplicates.
                 */
                for (Integer[] dupRows : duplicateRecordProcessor.getDuplicateRowNumbers(duplicateUniquePair)) {
                    rejectValue(errors,
                            getDatasetName(),
                            null,
                            null,
                            "Duplicates records found matching in rows " + ArrayUtils.toString(dupRows));
                }
            } else {
                recordsIterator = duplicateUniquePair.getUniqueRecordSet().iterator();
            }

        } else {
            recordsIterator = recordsList.iterator();

        }

        if (!hasGlobalErrors) {
            // Validate Header Record
            boolean isValidHeader = isValidHeader((FileHeaderRecord) recordsIterator.next(), errors);

            while (isValidHeader && recordsIterator.hasNext()) {
                FileDataRecord record = (FileDataRecord) recordsIterator.next();
                // Validate Data Format otherwise
                if (isValidFormat(record, errors)) {//If no field errors, then do business rule validation
                    isValidData(record, errors);
                }
            }
        }
    }

    public void setHeaders(String[] headers) {
        this.headers = headers;
    }

    public void setValidateDuplicates(boolean validateDuplicates) {
        this.validateDuplicates = validateDuplicates;
    }

    private boolean isNCESIDDupCheckRequired() {
        FormatType format = FormatType.valueOf(datasetName);
        if (format == FormatType.DISTRICT || format == FormatType.INSTITUTION) {
            return true;
        }
        return false;
    }

    protected abstract boolean isValidHeader(FileHeaderRecord record, Errors errors);

    protected abstract boolean isValidFormat(FileDataRecord record, Errors error);

    protected abstract boolean isValidData(FileDataRecord record, Errors errors);

    public String getDatasetName() {
        return datasetName;
    }
}
