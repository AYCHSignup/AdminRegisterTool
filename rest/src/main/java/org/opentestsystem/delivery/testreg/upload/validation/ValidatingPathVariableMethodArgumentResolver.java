/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.upload.validation;

import java.util.Map;

import org.springframework.beans.SimpleTypeConverter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.Conventions;
import org.springframework.core.MethodParameter;
import org.springframework.core.annotation.AnnotationUtils;
import org.springframework.core.convert.ConversionService;
import org.springframework.validation.BindingResult;
import org.springframework.validation.Errors;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.support.WebDataBinderFactory;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.context.request.RequestAttributes;
import org.springframework.web.method.support.HandlerMethodArgumentResolver;
import org.springframework.web.method.support.ModelAndViewContainer;
import org.springframework.web.servlet.HandlerMapping;

import com.google.common.collect.Lists;

/**
 * Resolves the method argument annotated with {@code @ValidatedPathVariable}.
 * This is a custom argument resolver which validates an argument when annotated with {@code @org.springframework.validation.annotation.Validated}. In case of validation failure, a
 * {@link MethodArgumentNotValidException} is raised.
 * It uses internal Conventions to resolve the parameter name
 */
public class ValidatingPathVariableMethodArgumentResolver implements HandlerMethodArgumentResolver {

    private final SimpleTypeConverter typeConverter;

    @Autowired
    public ValidatingPathVariableMethodArgumentResolver(final ConversionService conversionService) {
        this.typeConverter = new SimpleTypeConverter();
        this.typeConverter.setConversionService(conversionService);
    }

    @Override
    public boolean supportsParameter(final MethodParameter parameter) {
        if (!parameter.hasParameterAnnotation(ValidatedPathVariable.class)) {
            return false;
        }
        return true;
    }

    @Override
    public Object resolveArgument(final MethodParameter parameter, final ModelAndViewContainer mavContainer,
            final NativeWebRequest webRequest, final WebDataBinderFactory binderFactory) throws Exception {

        // Convert argument if necessary
        final Object arg = this.typeConverter.convertIfNecessary(resolveName(parameter, webRequest), parameter.getParameterType(), parameter);

        if (arg != null) {
            final WebDataBinder binder = binderFactory.createBinder(webRequest, arg, Conventions.getVariableNameForParameter(parameter));
            validate(binder, parameter);
        }

        return arg;
    }

    protected Object resolveName(final MethodParameter parameter, final NativeWebRequest request) throws Exception {
        @SuppressWarnings("unchecked")
        final Map<String, String> uriTemplateVars =
                (Map<String, String>) request.getAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST);

        return uriTemplateVars != null ? Lists.newArrayList(uriTemplateVars.values()).get(0) : null;
    }

    private void validate(final WebDataBinder binder, final MethodParameter parameter) throws Exception, MethodArgumentNotValidException {
        final Validated validated = parameter.getParameterAnnotation(Validated.class);
        if (validated != null) {
            final Object hints = AnnotationUtils.getValue(validated);
            binder.validate(hints instanceof Object[] ? (Object[]) hints : new Object[] { hints });
            final BindingResult bindingResult = binder.getBindingResult();
            if (bindingResult.hasErrors()) {
                if (isBindExceptionRequired(binder, parameter)) {
                    throw new MethodArgumentNotValidException(parameter, bindingResult);
                }
            }
        }
    }

    /**
     * Whether to raise a {@link MethodArgumentNotValidException} on validation errors.
     * 
     * @param binder the data binder used to perform data binding
     * @param parameter the method argument
     * @return {@code true} if the next method argument is not of type {@link Errors}.
     */
    private boolean isBindExceptionRequired(final WebDataBinder binder, final MethodParameter parameter) {
        final int i = parameter.getParameterIndex();
        final Class<?>[] paramTypes = parameter.getMethod().getParameterTypes();
        final boolean hasBindingResult = paramTypes.length > i + 1 && Errors.class.isAssignableFrom(paramTypes[i + 1]);

        return !hasBindingResult;
    }
}
