package org.opentestsystem.delivery.testreg.rest.external.validation;

import org.apache.commons.lang.StringUtils;
import org.opentestsystem.delivery.testreg.rest.external.models.StudentDto;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;

/**
 * Created by fairway on 6/21/16.
 */
public class StudentValidator {

    private static final String DATE_FORMAT = "yyyy-MM-dd";

    public static boolean isLessThanOrEqualToLength(String property, int maxLength) {
        return property.length() <= maxLength;
    }

    public static boolean isGreaterThanOrEqualToLength(String property, int minLength) {
        return minLength <= property.length();
    }

    public static boolean isAlphanumeric(String property) {
        return StringUtils.isAlphanumeric(property);
    }

    public static boolean matchesValueInCollection(String property, Iterable<String> collection) {
        for(String x : collection) {
            if(x.equalsIgnoreCase(property)) return true;
        }
        return false;
    }

    public static boolean isNullEmptyOrWhitespace(String property) {
        return property == null || property.trim().isEmpty();
    }

    public static boolean isValidDate(String property, String format) {
        Date date = null;
        try {
            SimpleDateFormat dateFormat = new SimpleDateFormat(format);
            date = dateFormat.parse(property);
            if (!property.equals(dateFormat.format(date))) {
                date = null;
            }
        } finally {
            return date != null;
        }
    }

    //End Generally Useful Modifiers

    //Convert from StudentDto to Student
    public static List<String> retrieveStringValidationErrors(StudentDto studentDto) {
        List<String> errors = new ArrayList<>();

//        if(studentDto.getStateAbbreviation().length() != 2) {
//            errors.add("State Code");
//        }
//        if(studentDto.getSex().compareToIgnoreCase("male") != 0
//                && studentDto.getSex().compareToIgnoreCase("female") != 0) {
//            errors.add("Sex");
//        }

        return errors;
    }

    public static List<String> retrieveDateValidationErrors(StudentDto studentDto) {
        ArrayList<String> errors = new ArrayList<>();

//        if(studentDto.getBirthDate() == null) {
//            errors.add("Birthdate");
//        }
//        if(studentDto.getFirstEntryDateIntoUsSchool() == null) {
//            errors.add("First entry date into US school");
//        }
//        if(studentDto.getBirthDate() != null && studentDto.getFirstEntryDateIntoUsSchool() != null
//                && studentDto.getFirstEntryDateIntoUsSchool().compareTo(studentDto.getBirthDate()) < 0) {
//            errors.add("First Entry Date Into US School should always be after the year of birth date");
//        }

        return errors;
    }

    public static List<String> validateStudentDto(StudentDto studentDto) {
        ArrayList<String> errors = new ArrayList<>();
        errors.addAll(StudentValidator.retrieveStringValidationErrors(studentDto));
        errors.addAll(StudentValidator.retrieveDateValidationErrors(studentDto));
        return errors;
    }

}
