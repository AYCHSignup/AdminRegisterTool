package org.opentestsystem.delivery.testreg.rest;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.domain.Sb11SuperEntity;
import org.opentestsystem.delivery.testreg.domain.search.AbstractTestRegEntitySearchRequest;
import org.opentestsystem.delivery.testreg.domain.search.DistrictEntitySearchRequest;
import org.opentestsystem.delivery.testreg.domain.search.GroupOfDistrictsEntitySearchRequest;
import org.opentestsystem.delivery.testreg.domain.search.GroupOfInstitutionsEntitySearchRequest;
import org.opentestsystem.delivery.testreg.domain.search.GroupOfStatesEntitySearchRequest;
import org.opentestsystem.delivery.testreg.domain.search.InstitutionEntitySearchRequest;
import org.opentestsystem.delivery.testreg.domain.search.StateEntitySearchRequest;
import org.opentestsystem.delivery.testreg.service.Sb11EntityRepositoryService;
import org.opentestsystem.delivery.testreg.service.TestRegPersister;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.ui.Model;

/*******************************************************************************
 * Educational Online Test Delivery System Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0 See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
public class Sb11EntityControllerHelper {

    private static final String FORMAT_TYPE = "FORMAT_TYPE";
    private static final String DATA_LIST = "DATA_LIST";

    public static List<Sb11Entity> findEntities(final HttpServletRequest request, final Model model,
            final FormatType formatType, final TestRegPersister testRegPersister) throws Exception {
        List<Sb11Entity> entityList = null;
        if (request.getParameterMap() != null) {
            AbstractTestRegEntitySearchRequest searchRequest = getSearchRequest(request, formatType);
            SearchResponse<Sb11Entity> searchResponse = testRegPersister.searchDomainObjects(searchRequest, formatType);
            entityList = searchResponse.getSearchResults();
        }
        if (model != null) {
            model.addAttribute(FORMAT_TYPE, formatType.toString());
            model.addAttribute(DATA_LIST, entityList);
        }
        return entityList;
    }

    // returns a distinct list of all parent entities from the search results above
    @SuppressWarnings("unchecked")
    public static List<Sb11Entity> findParentEntities(final HttpServletRequest request, final Model model,
            final FormatType formatType, final TestRegPersister testRegPersister,
            final Sb11EntityRepositoryService entityService) throws Exception {
        List<Sb11Entity> entityList = findEntities(request, null, formatType, testRegPersister);
        Map<String, Sb11Entity> parentEntityMap = new HashMap<>();
        for (Sb11Entity sb11Entity : entityList) {
            Sb11Entity parentEntity = null;
            if (Sb11SuperEntity.class.isAssignableFrom(sb11Entity.getParentEntityType().getEntityClass())) {
                parentEntity = entityService.findByEntityId(sb11Entity.getParentEntityId(),
                        (Class<Sb11SuperEntity>) sb11Entity.getParentEntityType().getEntityClass());
            } else {
                String stateAbbreviation = sb11Entity.getStateAbbreviation();
                parentEntity = entityService.findByEntityIdAndStateAbbreviation(sb11Entity.getParentEntityId(),
                        stateAbbreviation, sb11Entity.getParentEntityType().getEntityClass());
            }
            if (parentEntity != null) {
                parentEntityMap.put(parentEntity.getId(), parentEntity);
            }
        }
        List<Sb11Entity> parentEntities = new ArrayList<>(parentEntityMap.values());
        if (model != null) {
            model.addAttribute(DATA_LIST, parentEntities);
        }
        return parentEntities;
    }

    private static AbstractTestRegEntitySearchRequest getSearchRequest(final HttpServletRequest request,
            final FormatType formatType) {
        if (formatType == FormatType.GROUPOFSTATES) {
            return new GroupOfStatesEntitySearchRequest(request.getParameterMap());
        } else if (formatType == FormatType.STATE) {
            return new StateEntitySearchRequest(request.getParameterMap());
        } else if (formatType == FormatType.GROUPOFDISTRICTS) {
            return new GroupOfDistrictsEntitySearchRequest(request.getParameterMap());
        } else if (formatType == FormatType.DISTRICT) {
            return new DistrictEntitySearchRequest(request.getParameterMap());
        } else if (formatType == FormatType.GROUPOFINSTITUTIONS) {
            return new GroupOfInstitutionsEntitySearchRequest(request.getParameterMap());
        } else if (formatType == FormatType.INSTITUTION) {
            return new InstitutionEntitySearchRequest(request.getParameterMap());
        } else {
            throw new RuntimeException("Could not construct search request! Invalid FormatType: " + formatType);
        }
    }
}
