/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.rest;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.opentestsystem.delivery.testreg.domain.AddOperation;
import org.opentestsystem.delivery.testreg.domain.DeleteOperation;
import org.opentestsystem.delivery.testreg.domain.DistrictEntity;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.GroupOfDistrictsEntity;
import org.opentestsystem.delivery.testreg.domain.HierarchyLevel;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.domain.UIValidationGroup;
import org.opentestsystem.delivery.testreg.domain.UpdateOperation;
import org.opentestsystem.delivery.testreg.domain.search.DistrictEntitySearchRequest;
import org.opentestsystem.delivery.testreg.persistence.criteria.Sb11ObjectIdConverters.ObjectIdToDistrictEntityConverter;
import org.opentestsystem.delivery.testreg.service.Sb11EntityRepositoryService;
import org.opentestsystem.delivery.testreg.service.TestRegPersister;
import org.opentestsystem.delivery.testreg.upload.validation.ValidatedPathVariable;
import org.opentestsystem.shared.exception.LocalizedException;
import org.opentestsystem.shared.exception.RestException;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.opentestsystem.shared.web.AbstractRestController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.access.annotation.Secured;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

/**
 * Rest controller for CRUD operations on District Entity.
 */
@Controller
public class DistrictController extends AbstractRestController {

    private static final String STATE_ID = "stateId";

    @Autowired
    private TestRegPersister testRegPersister;

    @Autowired
    private Sb11EntityRepositoryService sb11EntityService;

    /**
     * Find district by id.
     * 
     * @param districtId
     *            district id
     * @return DistrictEntity district
     */
    @RequestMapping(value = "/district/{districtId}", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Entity Read" })
    @ResponseBody
    public DistrictEntity findDistrictById(@PathVariable final String districtId) {
        DistrictEntity districtEntity = testRegPersister.findById(districtId, DistrictEntity.FORMAT_TYPE);
        return districtEntity;
    }

    /**
     * Save district entity.
     * 
     * @param districtEntity
     *            unsaved district entity
     * @param response
     *            HttpServlet response
     * @return DistrictEntity saved district
     */
    @ResponseStatus(HttpStatus.CREATED)
    @RequestMapping(value = "/district", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Entity Modify" })
    @ResponseBody
    public DistrictEntity saveDistrict(
            @RequestBody @Validated({ UIValidationGroup.class, AddOperation.class }) final DistrictEntity districtEntity,
            final HttpServletResponse response) {
        DistrictEntity savedEntity = testRegPersister.saveDomainObject(districtEntity);
        response.setHeader("Location", savedEntity.getUrl());
        return savedEntity;
    }

    /**
     * Update district entity.
     * 
     * @param districtId
     *            district id
     * @param districtEntity
     *            to be updated district entity
     * @param response
     *            HttpServlet response
     * @return DistrictEntity updated district
     */
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = "/district/{districtId}", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Entity Modify" })
    @ResponseBody
    public DistrictEntity updateDistrict(@PathVariable final String districtId, @RequestBody @Validated({
            UIValidationGroup.class, UpdateOperation.class }) final DistrictEntity districtEntity,
            final HttpServletResponse response) {
        if (districtEntity == null || StringUtils.isEmpty(districtEntity.getId())
                || !districtId.equals(districtEntity.getId())) {
            throw new LocalizedException("entity.invalid.id", new String[] { "District" });
        } else {
            DistrictEntity savedEntity = testRegPersister.updateDomainObject(districtEntity);
            response.setHeader("Location", savedEntity.getUrl());
            return savedEntity;
        }
    }

    /**
     * Delete district. <br>
     * <b>Important:</b> <br>
     * {@link ValidatedPathVariable} would resolve districtId to {@link DistrictEntity} by calling
     * {@link ObjectIdToDistrictEntityConverter}. <br>
     * {@linkplain Validated} with hints {@code UIValidationGroup} and {@code DeleteOperation} calls Validator using
     * binders. <br>
     * 
     * @param districtId
     *            district id
     */
    @ResponseStatus(HttpStatus.NO_CONTENT)
    @RequestMapping(value = "/district/{districtId}", method = RequestMethod.DELETE)
    @Secured({ "ROLE_Entity Modify" })
    public void removeDistrict(
            @ValidatedPathVariable @Validated({ UIValidationGroup.class, DeleteOperation.class }) final DistrictEntity entity) {
        if (entity == null) {
            throw new LocalizedException("entity.invalid.id", new String[] { "District" });
        } else {
            testRegPersister.deleteDomainObject(entity.getId(), DistrictEntity.FORMAT_TYPE);
        }
    }

    /**
     * Search districts by search criteria.
     * 
     * @param request
     *            HttpServlet request
     * @param response
     *            HttpServlet response
     * @return SearchResponse containing district entities
     */
    @RequestMapping(value = "/district", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Entity Read" })
    @ResponseBody
    public SearchResponse<DistrictEntity> searchDistrict(final HttpServletRequest request,
            final HttpServletResponse response) {
        DistrictEntitySearchRequest searchRequest = new DistrictEntitySearchRequest(request.getParameterMap());
        SearchResponse<DistrictEntity> searchResponse;
        if (searchRequest.isValid()) {
            searchResponse = testRegPersister.searchDomainObjects(searchRequest, DistrictEntity.FORMAT_TYPE);
        } else {
            throw new RestException("entity.search.invalidSearchCriteria");
        }
        return searchResponse;
    }

    /**
     * Find Districts by state id. ex: district?stateId=12345
     * 
     * @param stateId
     * @param request
     * @param response
     * @return List of district entities
     */
    @RequestMapping(value = "/district", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE, params = STATE_ID)
    @Secured({ "ROLE_Entity Read" })
    @ResponseBody
    public List<DistrictEntity> findDistrictByStateId(@RequestParam(STATE_ID) String stateId,
            final HttpServletRequest request, final HttpServletResponse response) {
        List<DistrictEntity> districtEntityList = sb11EntityService.findAllByParentEntityTypeAndParentEntityId(
                HierarchyLevel.STATE.toString(), stateId, DistrictEntity.FORMAT_TYPE);
        // find group of districts for that state and then find districts matching that group of districts as parent
        List<GroupOfDistrictsEntity> gods = sb11EntityService.findAllByParentEntityTypeAndParentEntityId(
                HierarchyLevel.STATE.toString(), stateId, GroupOfDistrictsEntity.FORMAT_TYPE);
        for (GroupOfDistrictsEntity god : gods) {
            List<DistrictEntity> districtsWithGODParent = sb11EntityService.findAllByParentEntityTypeAndParentEntityId(
                    HierarchyLevel.GROUPOFDISTRICTS.toString(), god.getEntityId(), DistrictEntity.FORMAT_TYPE);
            districtEntityList.addAll(districtsWithGODParent);
        }
        return districtEntityList;
    }

    /**
     * Find Districts Append ".xls" to the URL to get data in Excel format Append ".csv" to the URL to get data in CSV
     * format
     */
    @RequestMapping(value = "/districts", method = RequestMethod.GET)
    // TODO uncomment after AIR testing
    // @Secured({ "ROLE_Entity Read" })
    public void findDistricts(HttpServletRequest request, Model model) throws Exception {
        Sb11EntityControllerHelper.findEntities(request, model, FormatType.DISTRICT, testRegPersister);
    }

    /**
     * Find Parents
     */
    @RequestMapping(value = "/districts/parents", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Entity Read" })
    @ResponseBody
    public List<Sb11Entity> findParents(final HttpServletRequest request) throws Exception {
        return Sb11EntityControllerHelper.findParentEntities(request, null, FormatType.DISTRICT, testRegPersister,
                sb11EntityService);
    }
}
