/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.rest;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.service.MasterResourceAccommodationService;
import org.springframework.beans.factory.annotation.Autowired;

public class TextBasedTemplateCreator implements TemplateCreator {

    private String delimiter;

    @Resource(name = "templateDownloadMap")
    private Map<FormatType, List<String>> templateDownloadMap;
    
    @Autowired
    private MasterResourceAccommodationService masterResourceAccommodationService;

    public TextBasedTemplateCreator(FileType fileType) {
        switch (fileType) {
            case CSV:
                delimiter = ",";
                break;
            case TXT:
                delimiter = "\t";
                break;
            default:
                throw new RuntimeException("Unsupported Class for the type " + fileType.name());
        }
    }

    @Override
    public InputStream createTemplate(FormatType formatType) throws Exception {
        StringBuilder template = new StringBuilder();
        List<String> headerNames = new ArrayList<String>();
        if(formatType.equals (FormatType.DESIGNATEDSUPPORTSANDACCOMMODATIONS)){
          Map<FormatType, List<String>> headers = masterResourceAccommodationService.getAllCodes ();
          headerNames = headers.get (formatType);
        }else{
          headerNames = templateDownloadMap.get(formatType);
        }
        for (String columnName : headerNames) {
            template.append(columnName).append(delimiter);
        }

        template.deleteCharAt(template.length() - 1); // Remove delimiter appended at the end
        template.append("\r\n");
        return new ByteArrayInputStream(template.toString().getBytes());
    }
}
