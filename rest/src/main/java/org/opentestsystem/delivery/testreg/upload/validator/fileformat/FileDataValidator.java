/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.upload.validator.fileformat;

import java.util.List;

import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.TestRegistrationBase;
import org.opentestsystem.delivery.testreg.persistence.criteria.BusinessValidator;
import org.opentestsystem.delivery.testreg.persistence.criteria.Sb11BusinessValidatorFactory;
import org.opentestsystem.delivery.testreg.upload.FileDataRecord;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.BindingResult;
import org.springframework.validation.Errors;
import org.springframework.validation.FieldError;
import org.springframework.validation.ObjectError;

public class FileDataValidator extends FileFormatValidator {

    @Autowired
    protected Sb11BusinessValidatorFactory businessValidatorFactory;

    @Autowired
    protected BusinessValidator<TestRegistrationBase> fileUploadSecurityValidator;

    protected FileDataValidator(final String datasetName) {
        super(FormatType.valueOf(datasetName));
    }

    @SuppressWarnings({ "unchecked", "rawtypes" })
    @Override
    protected boolean isValidData(final FileDataRecord record, final Errors errors) {
        TestRegistrationBase sb11Entity = fileUploadUtils.getDomainObject(getFormat(), record);
        BusinessValidator<TestRegistrationBase> businessValidator = businessValidatorFactory
                .getBusinessValidator(sb11Entity);
        List<? extends ObjectError> objectErrors = businessValidator.validate(sb11Entity);
        objectErrors.addAll((List) fileUploadSecurityValidator.validate(sb11Entity));
        return (businessValidator == null) ? true : !processBusinessViolations(record, errors, objectErrors);
    }

    private boolean processBusinessViolations(final FileDataRecord record, final Errors errors,
            final List<? extends ObjectError> objectErrors) {
        boolean hasErrors = false;
        for (ObjectError objectError : objectErrors) {
            if (objectError instanceof FieldError) {
                hasErrors = true;
                FieldError fieldError = (FieldError) objectError;
                ((BindingResult) errors).addError(new FieldError(getDatasetName(), fieldError.getField(), fieldError
                        .getRejectedValue(), fieldError.isBindingFailure(), fieldError.getCodes(),
                        new Object[] { record.getRowMetadata() }, fieldError.getDefaultMessage()));
            }
        }
        return hasErrors;
    }
}
