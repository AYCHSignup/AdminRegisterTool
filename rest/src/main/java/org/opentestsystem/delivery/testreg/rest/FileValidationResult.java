/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.rest;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import org.springframework.util.CollectionUtils;

/**
 * Describes Validation Result. This can contain list of fatal errors, record errors or warning.
 */
public class FileValidationResult implements Serializable {

    private static final long serialVersionUID = -9053292504970013937L;

    private String formatType;
    private List<ValidationMessage> fatalErrors;
    private List<ValidationMessage> recordErrors;
    private List<ValidationMessage> warnings;
    private int fatalErrorsTotalCount;
    private int recordErrorsTotalCount;
    private int warningsTotalCount;

    /**
     * @return the formatType
     */
    public String getFormatType() {
        return this.formatType;
    }

    /**
     * @param formatType the formatType to set
     */
    public void setFormatType(final String formatType) {
        this.formatType = formatType;
    }

    /**
     * @return the fatalErrors
     */
    public List<ValidationMessage> getFatalErrors() {
        return this.fatalErrors;
    }

    /**
     * @param fatalErrors the fatalErrors to set
     */
    public void setFatalErrors(final List<ValidationMessage> fatalErrors) {
        this.fatalErrors = fatalErrors;
    }

    /**
     * @return the recordErrors
     */
    public List<ValidationMessage> getRecordErrors() {
        return this.recordErrors;
    }

    /**
     * @param recordErrors the recordErrors to set
     */
    public void setRecordErrors(final List<ValidationMessage> recordErrors) {
        this.recordErrors = recordErrors;
    }

    /**
     * @return the warnings
     */
    public List<ValidationMessage> getWarnings() {
        return this.warnings;
    }

    /**
     * @param warnings the warnings to set
     */
    public void setWarnings(final List<ValidationMessage> warnings) {
        this.warnings = warnings;
    }

    public int getFatalErrorsTotalCount() {
        return this.fatalErrorsTotalCount;
    }

    public void setFatalErrorsTotalCount(final int fatalErrorsTotalCount) {
        this.fatalErrorsTotalCount = fatalErrorsTotalCount;
    }

    public int getRecordErrorsTotalCount() {
        return this.recordErrorsTotalCount;
    }

    public void setRecordErrorsTotalCount(final int recordErrorsTotalCount) {
        this.recordErrorsTotalCount = recordErrorsTotalCount;
    }

    public int getWarningsTotalCount() {
        return this.warningsTotalCount;
    }

    public void setWarningsTotalCount(final int warningsTotalCount) {
        this.warningsTotalCount = warningsTotalCount;
    }

    private void addFatalError(final ValidationMessage error) {
        if (null == this.fatalErrors) {
            this.fatalErrors = new ArrayList<ValidationMessage>();
        }
        this.fatalErrors.add(error);
    }

    private void addRecordError(final ValidationMessage error) {
        if (null == this.recordErrors) {
            this.recordErrors = new ArrayList<ValidationMessage>();
        }
        this.recordErrors.add(error);
    }

    private void addWarning(final ValidationMessage error) {
        if (null == this.warnings) {
            this.warnings = new ArrayList<ValidationMessage>();
        }
        this.warnings.add(error);
    }

    public boolean hasFatalErrors() {
        return exists(this.fatalErrors);
    }

    public boolean hasRecordErrors() {
        return exists(this.recordErrors);
    }

    public boolean hasWarnings() {
        return exists(this.warnings);
    }

    /**
     * Add error to error list based on error type.
     * 
     * @param error validation error
     */
    public void addError(final ValidationMessage error) {
        switch (error.getType()) {
        case FATAL_ERROR:
            addFatalError(error);
            break;
        case RECORD_ERROR:
            addRecordError(error);
            break;
        case WARNING:
            addWarning(error);
            break;
        default:
            addRecordError(error);
            break;
        }
    }

    /**
     * Common method to check whether specific type of validation message exists.
     * 
     * @param messages validation messages
     * @return boolean true if exists, false otherwise
     */
    private boolean exists(final List<ValidationMessage> messages) {
        return !CollectionUtils.isEmpty(messages);
    }
}
