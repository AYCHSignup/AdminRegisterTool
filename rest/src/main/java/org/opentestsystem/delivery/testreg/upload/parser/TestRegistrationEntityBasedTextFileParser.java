/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.upload.parser;

import static org.opentestsystem.delivery.testreg.upload.parser.ParserTextUtils.areAllElementsNull;
import static org.opentestsystem.delivery.testreg.upload.parser.ParserTextUtils.padEmptyTextIfNoColumnAtEnd;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.TestRegistrationBase;
import org.opentestsystem.delivery.testreg.upload.FileUploadUtils;
import org.opentestsystem.delivery.testreg.upload.TextFileUtils;
import org.opentestsystem.delivery.testreg.upload.TextFileUtils.LineMapper;
import org.springframework.beans.factory.annotation.Autowired;

public class TestRegistrationEntityBasedTextFileParser implements UploadFileParser<Map<FormatType, List<TestRegistrationBase>>> {
    
    private TextFileUtils textFileUtils = new TextFileUtils();
    
    @Autowired
    private FileUploadUtils fileUploadUtils;

    @Override
    public ParserResult<Map<FormatType, List<TestRegistrationBase>>> parse(InputStream uploadFile) throws Exception {
        final List<TestRegistrationBase>                  rows = new ArrayList<TestRegistrationBase>();
        final Map<FormatType, List<TestRegistrationBase>> convertedMap = new HashMap<FormatType, List<TestRegistrationBase>>();
        
        final List<Integer> ignoredRows = new ArrayList<>();
        
        // need to move format type outside the line mapper so that we can hold on to the format type
        // made it a one element array because you cannot reference a non-final variable from within line mapper
        // and furthermore, you cannot change the value, but you can change an element in an array
        final FormatType[] formatType = new FormatType[1];

        textFileUtils.processTextFile(uploadFile, new LineMapper() {
            int totalHeaders;
            final static String splitRegEx = "(\\t)|(,)";
            @Override
            public boolean mapLine(final String line, final int lineNumber) {

                if (lineNumber == FORMAT_TYPE_ROW) { // Considering the first row data will have the Type
                    formatType[0] = FormatType.valueOf(line);

                } else if (lineNumber == HEADER_ROW) {
                    totalHeaders = line.trim().split(splitRegEx).length;

                } else {
                    String[] columnValues = line.trim().split(splitRegEx);
                    if (!areAllElementsNull(columnValues)) { // ignore rows where all parsed values are blank
                        try {
                            convertedMap.put(formatType[0], fileUploadUtils.entityType(formatType[0], rows, padEmptyTextIfNoColumnAtEnd(totalHeaders, columnValues)));
                        } catch (Exception e) {
                            throw new RuntimeException(e);
                        }
                    } else {
                        ignoredRows.add(lineNumber);
                    }
                }
                return true;
            }
        });
        if(convertedMap.isEmpty()) {
            convertedMap.put(formatType[0], new ArrayList<TestRegistrationBase>());
        }
        return new ParserResultImpl<Map<FormatType,List<TestRegistrationBase>>>(ignoredRows, convertedMap);
    }

}
