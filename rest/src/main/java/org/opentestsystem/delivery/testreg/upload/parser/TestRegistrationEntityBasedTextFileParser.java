/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.upload.parser;

import static org.opentestsystem.delivery.testreg.upload.parser.ParserTextUtils.areAllElementsNull;
import static org.opentestsystem.delivery.testreg.upload.parser.ParserTextUtils.padEmptyTextIfNoColumnAtEnd;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.TestRegistrationBase;
import org.opentestsystem.delivery.testreg.rest.FilePreviewHelper;
import org.opentestsystem.delivery.testreg.upload.FileUploadUtils;
import org.opentestsystem.delivery.testreg.upload.TextFileUtils;
import org.opentestsystem.delivery.testreg.upload.TextFileUtils.LineMapper;
import org.springframework.beans.factory.annotation.Autowired;

public class TestRegistrationEntityBasedTextFileParser implements UploadFileParser<Map<FormatType, List<TestRegistrationBase>>> {

    private final TextFileUtils textFileUtils = new TextFileUtils();

    @Autowired
    private FileUploadUtils fileUploadUtils;

    @Override
    public ParserResult<Map<FormatType, List<TestRegistrationBase>>> parse(final InputStream uploadFile, final String formatType) throws Exception {
        final List<TestRegistrationBase> rows = new ArrayList<TestRegistrationBase>();
        final Map<FormatType, List<TestRegistrationBase>> convertedMap = new HashMap<FormatType, List<TestRegistrationBase>>();

        final List<Integer> ignoredRows = new ArrayList<>();

        this.textFileUtils.processTextFile(uploadFile, formatType, new LineMapper() {
            int totalHeaders;
            // Regular expression ensures that a split occurs only at commas which are followed by an even (or zero) number of quotes
            final static String splitRegEx = "(\\t)|(,)(?=([^\"]*\"[^\"]*\")*[^\"]*$)";

            @Override
            public boolean mapLine(final String line, final int lineNumber, final String formatType) {

                if (lineNumber == HEADER_ROW) {
                    this.totalHeaders = line.trim().split(splitRegEx).length;

                } else {
                    final String[] columnValues = line.trim().split(splitRegEx);
                    for (int i = 0; i < columnValues.length; i++) {
                      columnValues[i] = FilePreviewHelper.removeExtraneousQuotes (columnValues[i]);
                    }
                    if (!areAllElementsNull(columnValues)) { // ignore rows where all parsed values are blank
                        try {
                            convertedMap.put(
                                    FormatType.valueOf(formatType),
                                    TestRegistrationEntityBasedTextFileParser.this.fileUploadUtils.entityType(FormatType.valueOf(formatType), rows,
                                            padEmptyTextIfNoColumnAtEnd(this.totalHeaders, columnValues)));
                        } catch (final Exception e) {
                            throw new RuntimeException(e);
                        }
                    } else {
                        ignoredRows.add(lineNumber);
                    }
                }
                return true;
            }
        });
        if (convertedMap.isEmpty()) {
            convertedMap.put(FormatType.valueOf(formatType), new ArrayList<TestRegistrationBase>());
        }
        return new ParserResultImpl<Map<FormatType, List<TestRegistrationBase>>>(ignoredRows, convertedMap);
    }

}
