/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.rest;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.opentestsystem.delivery.testreg.domain.AddOperation;
import org.opentestsystem.delivery.testreg.domain.Assessment;
import org.opentestsystem.delivery.testreg.domain.Assessment.AssessmentType;
import org.opentestsystem.delivery.testreg.domain.ARTHelpers;
import org.opentestsystem.delivery.testreg.domain.AssessmentValidationGroup;
import org.opentestsystem.delivery.testreg.domain.ExportAssessment;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.HierarchyLevel;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.domain.UpdateOperation;
import org.opentestsystem.delivery.testreg.domain.User;
import org.opentestsystem.delivery.testreg.domain.search.AssessmentSearchRequest;
import org.opentestsystem.delivery.testreg.service.AssessmentService;
import org.opentestsystem.delivery.testreg.service.Sb11EntityRepositoryService;
import org.opentestsystem.delivery.testreg.service.TestOpportunityUpdaterService;
import org.opentestsystem.delivery.testreg.service.TestRegPersister;
import org.opentestsystem.delivery.testreg.upload.validation.ValidatedPathVariable;
import org.opentestsystem.shared.exception.LocalizedException;
import org.opentestsystem.shared.exception.RestException;
import org.opentestsystem.shared.progman.client.domain.Tenant;
import org.opentestsystem.shared.progman.client.domain.TenantType;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.opentestsystem.shared.security.domain.SbacEntity;
import org.opentestsystem.shared.security.domain.SbacUser;
import org.opentestsystem.shared.security.service.TenancyService;
import org.opentestsystem.shared.security.service.UserService;
import org.opentestsystem.shared.web.AbstractRestController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.access.annotation.Secured;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.util.CollectionUtils;

import com.google.common.collect.Lists;
import com.google.common.collect.Sets;

@Controller
public class AssessmentController extends AbstractRestController {

    @Autowired
    private AssessmentService assessmentService;

    @Autowired
    private TestRegPersister sb11Entity;
    
    @Autowired
    private UserService userService;
    
    @Autowired
    private TenancyService tenancyService;

    @Autowired
    private TestOpportunityUpdaterService testOpportunityUpdaterService;
    
    @Autowired
    private Sb11EntityRepositoryService sb11EntityService;

    private static final String DATA_LIST = "DATA_LIST";
    private static final String FORMAT_TYPE = "FORMAT_TYPE";

    /**
     * Find assessment by id.
     * 
     * @param id assessment mongo id
     * @return Assessment assessment
     */
    @RequestMapping(value = "/assessment/{id}", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Assessment Read" })
    @ResponseBody
    public Assessment findAssessmentById(@PathVariable final String id) {
        return sb11Entity.findById(id, FormatType.ASSESSMENT);
    }

    /**
     * Save assessment.
     * 
     * @param assessment unsaved assessment
     * @param response HttpServlet response
     * @return Assessment saved assessment
     */
    @ResponseStatus(HttpStatus.CREATED)
    @RequestMapping(value = "/assessment", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Assessment Modify" })
    @ResponseBody
    public Assessment saveAssessment(
            @RequestBody @Validated({ AssessmentValidationGroup.class, AddOperation.class }) final Assessment assessment,
            final HttpServletResponse response) {
        Assessment savedAssessment = sb11Entity.saveDomainObject(assessment);
        response.setHeader("Location", savedAssessment.getUrl());
        return savedAssessment;
    }

    /**
     * Update Assessment.
     * 
     * @param id assessment mongo id
     * @param assessment to be updated
     * @param response HttpServlet response
     * @return Assessment updated assessment
     */
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = "/assessment/{id}", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Assessment Modify" })
    @ResponseBody
    public Assessment editAssessment(@PathVariable final String id, @RequestBody @Validated({
            AssessmentValidationGroup.class, UpdateOperation.class }) final Assessment assessment,
            final HttpServletResponse response) {
        if (assessment == null || StringUtils.isEmpty(assessment.getId()) || !id.equals(assessment.getId())) {
            throw new LocalizedException("nonentity.invalid.id", new String[] { "Assessment" });
        } else {
            testOpportunityUpdaterService.updateMaxTestOpportunities(assessment);
            Assessment savedEntity = sb11Entity.updateDomainObject(assessment);
            response.setHeader("Location", savedEntity.getUrl());
            return savedEntity;
        }
    }

    /**
     * Delete assessment.
     * 
     * @param id mongo id
     */
    @ResponseStatus(HttpStatus.NO_CONTENT)
    @RequestMapping(value = "/assessment/{id}", method = RequestMethod.DELETE)
    @Secured({ "ROLE_Assessment Import" })
    public void deleteAssessment(@ValidatedPathVariable final String id) {
        sb11Entity.deleteDomainObject(id, FormatType.ASSESSMENT);
    }

    /**
     * Search assessments by search criteria.
     * 
     * @param request HttpServlet request
     * @param response HttpServlet response
     * @return SearchResponse containing assessments
     */
    @RequestMapping(value = "/assessment", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Assessment Read" })
    @ResponseBody
    public SearchResponse<Assessment> searchAssessment(final HttpServletRequest request,
            final HttpServletResponse response) {
        AssessmentSearchRequest searchRequest = new AssessmentSearchRequest(request.getParameterMap());
        SearchResponse<Assessment> searchResponse;
        if (searchRequest.isValid()) {
            searchResponse = sb11Entity.searchDomainObjects(searchRequest, FormatType.ASSESSMENT);
        } else {
            throw new RestException("nonentity.search.invalidSearchCriteria");
        }
        return searchResponse;
    }

    /**
     * Export Assessment Data into Excel or CSV based on path extensions
     * 
     * @param model ModelMap.
     */
    @RequestMapping(value = "/assessments", method = RequestMethod.GET)
    @Secured({ "ROLE_Assessment Read" })
    public void exportToFiles(final HttpServletRequest request, final Model model) throws Exception {
        List<Assessment> assessmentList = null;
        if (request.getParameterMap() != null) {
            AssessmentSearchRequest searchRequest = new AssessmentSearchRequest(request.getParameterMap());
            SearchResponse<Assessment> searchResponse = sb11Entity.searchDomainObjects(searchRequest, FormatType.ASSESSMENT);
            assessmentList = searchResponse.getSearchResults();
        }
        if (model != null) {
            ExportAssessment exportAssessment = new ExportAssessment(assessmentList);
            model.addAttribute(FORMAT_TYPE, Assessment.FORMAT_TYPE.toString());
            model.addAttribute(DATA_LIST, exportAssessment.getIndividualizedTestWindowAssessment());
        }
    }

    @RequestMapping(value = "/assessment/types", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @ResponseBody
    public Set<AssessmentType> getAssessmentTypes() {

        return Assessment.AssessmentType.getAllTypes();
    }

    /**
     * Find assessment by id.
     * 
     * @return long MaxOpportunities
     */
    @RequestMapping(value = "/assessment/maxOpportunities", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @ResponseBody
    public Integer getMaxOpportunities() {
        return assessmentService.findMaxOpportunities();
    }
    
    /**
     * Get all the Assessments based on Tenant type
     *  
     * @param request HttpServlet request
     * @param response HttpServlet response
     * @return SearchResponse containing assessments
     */
    @RequestMapping(value = "/assessmentsByTenantId/{tenantId}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Assessment Read" })
    @ResponseBody
    public List<Assessment> getAssessmentsByTenantId(final HttpServletRequest request,
            final HttpServletResponse response, @PathVariable final String tenantId) {
      List<Tenant> tenantsForAssessment = Lists.newArrayList();
      List<Assessment> assessments = new ArrayList<Assessment> ();
      SbacUser sUser = userService.getCurrentUser();
      User user = sb11Entity.findById(sUser.getUniqueId (), FormatType.USER);
      Sb11Entity resEntity = null;
      if(user.getRoleAssociations() != null) {
        List<User.RoleAssociation> roles = user.getRoleAssociations();
        for (User.RoleAssociation role : roles) {
          if(role.getAssociatedEntityMongoId() != null) {
            resEntity = sb11Entity.findById(role.getAssociatedEntityMongoId(), FormatType.valueOf(role.getLevel().toString()));
            if(tenantId.equalsIgnoreCase (resEntity.getEntityId ())){
              break;
            }
          }
        }
      }
      final Set<SbacEntity> possibleTenants = Sets.newHashSet(new SbacEntity(resEntity.getTenantType (), resEntity.getEntityId (), resEntity.getEntityName ()));
      while (resEntity != null) {
        if (resEntity.getParentEntityType() != null) {
          final TenantType tenantTypes = convertHierarchyLevelToTenantType(resEntity.getParentEntityType());
          if (tenantTypes != null) {
            possibleTenants.add(new SbacEntity(tenantTypes, resEntity.getParentEntityId(), "nothing"));
          }
        }
        resEntity = resEntity.getParentEntityId() != null ? this.sb11EntityService.getParentEntity(resEntity) : null;
      }
      if (!CollectionUtils.isEmpty(possibleTenants)) {
        tenantsForAssessment = this.tenancyService.getApplicableTenants(possibleTenants);
      }
      final List<String> tenantIdsForAssessment = Lists.newArrayList();

      if (!CollectionUtils.isEmpty(tenantsForAssessment)) {
        tenantIdsForAssessment.addAll(Lists.transform(tenantsForAssessment, ARTHelpers.TENANT_ID_TRANSFORMER));
      }
      for(String tenId : tenantIdsForAssessment){
        assessments.addAll(assessmentService.findByTenantId (tenId));

      }
      return assessments;
    }
    
    private TenantType convertHierarchyLevelToTenantType(final HierarchyLevel level) {
      TenantType converted = null;

      switch (level) {
      case DISTRICT:
          converted = TenantType.DISTRICT;
          break;
      case GROUPOFDISTRICTS:
          converted = TenantType.DISTRICT_GROUP;
          break;
      case GROUPOFINSTITUTIONS:
          converted = TenantType.INSTITUTION_GROUP;
          break;
      case GROUPOFSTATES:
          converted = TenantType.STATE_GROUP;
          break;
      case STATE:
          converted = TenantType.STATE;
          break;
      default:
          converted = null;
          break;
      }

      return converted;
  }
}
