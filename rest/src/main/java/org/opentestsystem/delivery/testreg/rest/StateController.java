/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.rest;

import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.bson.types.ObjectId;
import org.opentestsystem.delivery.testreg.domain.AddOperation;
import org.opentestsystem.delivery.testreg.domain.DeleteOperation;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.domain.StateEntity;
import org.opentestsystem.delivery.testreg.domain.UIValidationGroup;
import org.opentestsystem.delivery.testreg.domain.UpdateOperation;
import org.opentestsystem.delivery.testreg.domain.search.StateEntitySearchRequest;
import org.opentestsystem.delivery.testreg.persistence.criteria.Sb11ObjectIdConverters.ObjectIdToStateEntityConverter;
import org.opentestsystem.delivery.testreg.service.Sb11EntityRepositoryService;
import org.opentestsystem.delivery.testreg.service.StateService;
import org.opentestsystem.delivery.testreg.service.TestRegPersister;
import org.opentestsystem.delivery.testreg.upload.validation.ValidatedPathVariable;
import org.opentestsystem.shared.exception.LocalizedException;
import org.opentestsystem.shared.exception.RestException;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.opentestsystem.shared.web.AbstractRestController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.access.annotation.Secured;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;


@Controller
public class StateController extends AbstractRestController {

    private static final String FORMAT_TYPE = "FORMAT_TYPE";
    private static final String DATA_LIST = "DATA_LIST";
  
    @Resource(name = "stateMap")
    private Map<String, String> stateMap;

    @Autowired
    private TestRegPersister testRegPersister;

    @Autowired
    private Sb11EntityRepositoryService sb11EntityService;
 
    @Autowired
    private StateService stateService;

    /**
     * Can query the /state endpoint with query parameters in a querystring. or with JSON Valid parameters are: state
     * id, state name
     *
     * @param request  HttpServletRequest
     * @param response HttpServletResponse
     * @return SearchResponse<Sb11Entity>
     */
    @RequestMapping(value = "/state", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Entity Read" })
    @ResponseBody
    public SearchResponse<Sb11Entity> searchStates(final HttpServletRequest request, final HttpServletResponse response) {
        StateEntitySearchRequest searchRequest = new StateEntitySearchRequest(request.getParameterMap());
        SearchResponse<Sb11Entity> searchResponse;
        if (searchRequest.isValid()) {
            searchResponse = testRegPersister.searchDomainObjects(searchRequest, StateEntity.FORMAT_TYPE);
        } else {
            throw new RestException("entity.search.invalidSearchCriteria");
        }
        return searchResponse;
    }

    /**
     * Creates State.
     *
     * @param state    to be saved.
     * @param response HttpServletResponse.
     * @return StateEntity newly created state object.
     */
    @ResponseStatus(HttpStatus.CREATED)
    @RequestMapping(value = "/state", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Entity Modify" })
    @ResponseBody
    public StateEntity saveState(
            @RequestBody @Validated({ UIValidationGroup.class, AddOperation.class }) final StateEntity state,
            final HttpServletResponse response) {
        StateEntity savedEntity = testRegPersister.saveDomainObject(state);
        response.setHeader("Location", savedEntity.getUrl());
        return savedEntity;
    }

    /**
     * Creates State.
     *
     * @param state    to be saved.
     * @param response HttpServletResponse.
     * @return StateEntity updated state object.
     */
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = "/state/{stateId}", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Entity Modify" })
    @ResponseBody
    public StateEntity editState(@PathVariable final String stateId, @RequestBody @Validated({ UIValidationGroup.class,
            UpdateOperation.class }) final StateEntity state, final HttpServletResponse response) {
        if (state == null || StringUtils.isEmpty(state.getId()) || !stateId.equals(state.getId())) {
            throw new LocalizedException("entity.invalid.id", new String[] { "State" });
        } else {
            StateEntity savedEntity = testRegPersister.updateDomainObject(state);
            response.setHeader("Location", savedEntity.getUrl());
            return savedEntity;
        }
    }

    /**
     * Delete State. <br>
     * <b>Important:</b> <br>
     * {@link ValidatedPathVariable} would resolve stateId to {@link StateEntity} by calling {@link ObjectIdToStateEntityConverter}. <br>
     * <br>
     * {@linkplain Validated} with hints {@code UIValidationGroup} and {@code DeleteOperation} calls Validator using binders.
     *
     * @param entity
     */
    @ResponseStatus(HttpStatus.NO_CONTENT)
    @RequestMapping(value = "/state/{stateId}", method = RequestMethod.DELETE)
    @Secured({ "ROLE_Entity Modify" })
    public void deleteState(@ValidatedPathVariable @Validated({ UIValidationGroup.class, DeleteOperation.class }) final StateEntity entity) {
        testRegPersister.deleteDomainObject(entity.getId(), StateEntity.FORMAT_TYPE);
    }

    /**
     * Find State by id.
     *
     * @param stateId
     * @return StateEntity by given state Id.
     */
    @RequestMapping(value = "/state/{stateId}", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Entity Read" })
    @ResponseBody
    public StateEntity findById(@PathVariable final ObjectId stateId) {
        StateEntity stateEntity = testRegPersister.findById(stateId.toString(), StateEntity.FORMAT_TYPE);
        return stateEntity;
    }

    @RequestMapping(value = "/states/lookup", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Entity Read" })
    @ResponseBody
    public List<StateEntity> findAllStates(final HttpServletRequest request) {
        List<StateEntity> stateEntityList = testRegPersister.findAll(StateEntity.FORMAT_TYPE);
        if (request.getParameterMap() != null && request.getParameterMap().get("static") != null) {
            for (String stateAbbreviation : stateMap.keySet()) {
                if (!doesStateExist(stateAbbreviation, stateEntityList)) {
                    stateEntityList.add(new StateEntity(stateAbbreviation, stateMap.get(stateAbbreviation)));
                }
            }
        }
        return stateEntityList;
    }

    /**
     * Find States
     * Append ".xls" to the URL to get data in Excel format
     * Append ".csv" to the URL to get data in CSV format
     */
    @RequestMapping(value = "/states", method = RequestMethod.GET)
    @Secured({ "ROLE_Entity Read" })
    public void findStates(final HttpServletRequest request, final Model model) throws Exception {
        List<StateEntity> stateEntities = null;
        if (request.getParameterMap() != null) {
            StateEntitySearchRequest searchRequest = new StateEntitySearchRequest(request.getParameterMap());
            SearchResponse<StateEntity> searchResponse = testRegPersister.searchDomainObjects(searchRequest,  FormatType.STATE);
            stateEntities = searchResponse.getSearchResults();
        } 
        List<StateEntity> mergedStateEntites =  stateService.mergeWithNonAccessStatesInTenancy(stateEntities);
        if (model != null) {
            model.addAttribute(FORMAT_TYPE, FormatType.STATE.toString());
            model.addAttribute(DATA_LIST, mergedStateEntites);
        }
    }
    
    /**
     * Find Parents
     */
    @RequestMapping(value = "/states/parents", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Entity Read" })
    @ResponseBody
    public List<Sb11Entity> findParents(final HttpServletRequest request) throws Exception {
        return Sb11EntityControllerHelper.findParentEntities(request, null, FormatType.STATE, testRegPersister, sb11EntityService);
    }

    private boolean doesStateExist(final String key, final List<StateEntity> stateEntityList) {
        for (StateEntity state : stateEntityList) {
            if (state.getEntityId().equals(key)) {
                return true;
            }
        }
        return false;
    }

}
