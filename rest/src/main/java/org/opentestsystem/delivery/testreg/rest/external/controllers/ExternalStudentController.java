package org.opentestsystem.delivery.testreg.rest.external.controllers;

import org.opentestsystem.delivery.testreg.domain.StudentBatchStatus;
import org.opentestsystem.delivery.testreg.domain.StudentUpsert;
import org.opentestsystem.delivery.testreg.rest.external.mappers.StudentMapper;
import org.opentestsystem.delivery.testreg.rest.external.models.StudentDeleteDto;
import org.opentestsystem.delivery.testreg.rest.external.models.StudentDto;
import org.opentestsystem.delivery.testreg.rest.external.services.AmqpRabbitService;
import org.opentestsystem.delivery.testreg.service.ExternalStudentService;
import org.opentestsystem.delivery.testreg.service.StudentBatchStatusService;
import org.opentestsystem.delivery.testreg.service.StudentService;
import org.opentestsystem.shared.web.AbstractRestController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.access.annotation.Secured;
import org.springframework.security.oauth2.common.exceptions.UnauthorizedUserException;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;

/**
 * Created by fairway on 6/17/16.
 */
@Controller
public class ExternalStudentController extends AbstractRestController {

    @Autowired
    private StudentService studentService;

    @Autowired
    private AmqpRabbitService amqpService;

    @Autowired
    private StudentBatchStatusService studentBatchStatusService;

    @Autowired
    private ExternalStudentService externalStudentService;

    @RequestMapping(value = "/external/student/{stateCode}/{id}", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Student Read" })
    @ResponseBody
    public StudentDto findStudentById(@PathVariable final String stateCode, @PathVariable final String id) {
         return StudentMapper.mapFrom(studentService.findByStudentIdAndStateAbbreviation(id, stateCode));
    }

    @RequestMapping(value = "/external/student/{stateCode}", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Student Modify" })
    @ResponseBody
    public StudentDto saveStudent(@PathVariable final String stateCode, @RequestBody final StudentDto studentDto, final HttpServletResponse response) throws IOException {
        StudentUpsert studentUpsert = externalStudentService.upsertStudent(StudentMapper.mapTo(studentDto), stateCode);
        response.setStatus(studentUpsert.isInsert() ? HttpServletResponse.SC_CREATED : HttpServletResponse.SC_NO_CONTENT);
        response.setHeader("Location", studentUpsert.getStudent().getUrl());
        return StudentMapper.mapFrom(studentUpsert.getStudent());
    }

    @ResponseStatus(HttpStatus.NO_CONTENT)
    @RequestMapping(value = "external/student/{stateCode}/{id}", method = RequestMethod.DELETE)
    @Secured({ "ROLE_Student Modify" })
    public void deleteStudent(@PathVariable final String stateCode, @PathVariable final String id) {
        externalStudentService.deleteStudent(id, stateCode);
    }

    @ResponseStatus(HttpStatus.NO_CONTENT)
    @RequestMapping(value = "external/student/{stateCode}/batch", method = RequestMethod.DELETE)
    @Secured({ "ROLE_Student Modify" })
    public void deleteStudents(@PathVariable final String stateCode, @RequestBody final List<StudentDeleteDto> studentsToDelete, final HttpServletRequest request, final HttpServletResponse response) throws Exception {
        response.setStatus(HttpServletResponse.SC_ACCEPTED);
        String batchId =  studentBatchStatusService.createStudentBatchStatus(studentsToDelete.size(), false, request.getUserPrincipal().getName(), stateCode);
        amqpService.sendDelete(studentsToDelete, batchId);
        response.setHeader("Location", request.getRequestURL().toString().replace("/"+stateCode + "", "") + "/" + batchId);
    }

    @RequestMapping(value = "/external/student/batch/{batchId}", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Student Read" })
    @ResponseBody
    public StudentBatchStatus findBatchById(@PathVariable final String batchId, final HttpServletRequest request)  {
        StudentBatchStatus status =  studentBatchStatusService.getStudentBatchStatus(batchId);
        if(request.getUserPrincipal().getName().compareTo(status.getSubmittedBy()) == 0) return status;
        throw new UnauthorizedUserException("Only the user that submitted a batch may view the status of that batch.");
    }

    @RequestMapping(value = "/external/student/{stateCode}/batch", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Student Modify" })
    @ResponseBody
    public void saveStudents(@PathVariable final String stateCode, @RequestBody final List<StudentDto> studentDtos, final HttpServletRequest request, final HttpServletResponse response) throws Exception {
        response.setStatus(HttpServletResponse.SC_ACCEPTED);
        String batchId = studentBatchStatusService.createStudentBatchStatus(studentDtos.size(), true, request.getUserPrincipal().getName(), stateCode);
        amqpService.sendUpsert(studentDtos, batchId, stateCode);
        response.setHeader("Location", request.getRequestURL().toString().replace("/"+stateCode + "", "") + "/" + batchId);
    }
}
