package org.opentestsystem.delivery.testreg.rest.external.controllers;

import org.opentestsystem.delivery.testadmin.service.TestStatusService;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.rest.external.mappers.StudentMapper;
import org.opentestsystem.delivery.testreg.rest.external.models.StudentDto;
import org.opentestsystem.delivery.testreg.rest.external.validation.StudentValidator;
import org.opentestsystem.delivery.testreg.service.StudentService;
import org.opentestsystem.delivery.testreg.service.TestRegPersister;
import org.opentestsystem.shared.web.AbstractRestController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;

/**
 * Created by fairway on 6/17/16.
 */
@Controller
public class ExternalStudentController extends AbstractRestController {

    @Autowired
    private TestRegPersister studentRepository;

    @Autowired
    private TestStatusService testStatusService;

    @Autowired
    private StudentService studentService;

    @RequestMapping(value = "/external/student/{stateCode}/{id}", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    //@Secured({ "ROLE_Student Read" })
    @ResponseBody
    public StudentDto findStudentById(@PathVariable final String stateCode, @PathVariable final String id) {
         return StudentMapper.mapFrom(studentService.findByStudentIdAndStateAbbreviation(id, stateCode));
    }

    //TODO: Look into creating a new service for upserting instead of GET - POST
    @RequestMapping(value = "/external/student", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = { MediaType.APPLICATION_JSON_VALUE })
    //@Secured({ "ROLE_Student Modify" })
    @ResponseBody
    public StudentDto saveStudent(@RequestBody final StudentDto studentDto, final HttpServletResponse response) throws IOException {
        List<String> errors = StudentValidator.validateStudentDto(studentDto);
        if(!errors.isEmpty()) {
            response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
            response.getWriter().write(errors.toString());
            response.getWriter().flush();
            return null;
        }
        Student existingStudent = studentService.findByStudentIdAndStateAbbreviation(studentDto.getSsid(), studentDto.getStateAbbreviation());
        int statusCode = existingStudent == null ? HttpServletResponse.SC_CREATED : HttpServletResponse.SC_NO_CONTENT;
        response.setStatus(statusCode);
        Student studentToSave = StudentMapper.mapTo(studentDto);
        if(existingStudent != null) studentToSave.setId(existingStudent.getId());
        Student savedStudent = studentRepository.saveDomainObject(studentToSave);
        response.setHeader("Location", savedStudent.getUrl());
        return StudentMapper.mapFrom(savedStudent);
    }

    @ResponseStatus(HttpStatus.NO_CONTENT)
    @RequestMapping(value = "external/student/{stateCode}/{id}", method = RequestMethod.DELETE)
    //@Secured({ "ROLE_Student Modify" })
    public void deleteStudent(@PathVariable final String stateCode, @PathVariable final String id) {
        Student student = studentService.findByStudentIdAndStateAbbreviation(id, stateCode);
        testStatusService.deleteTestStatus(id, stateCode);
        studentRepository.deleteDomainObject(student.getId(), FormatType.STUDENT);
    }

    @ResponseStatus(HttpStatus.NO_CONTENT)
    @RequestMapping(value = "external/student/batch", method = RequestMethod.DELETE)
    //@Secured({ "ROLE_Student Modify" })
    public void deleteStudents(@RequestBody final List<String> studentsToDelete) {

    }

    @RequestMapping(value = "/external/student/batch/{id}", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    //@Secured({ "ROLE_Student Read" })
    @ResponseBody
    public StudentDto findBatchById(@PathVariable final String id) {
        return null;
    }

    @RequestMapping(value = "/external/student/batch", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = { MediaType.APPLICATION_JSON_VALUE })
    //@Secured({ "ROLE_Student Modify" })
    @ResponseBody
    public StudentDto saveStudents(@RequestBody final List<StudentDto> studentDtos, final HttpServletResponse response) throws IOException {
        return null;
    }
}
