package org.opentestsystem.delivery.testreg.rest.external.controllers;

import org.opentestsystem.delivery.testadmin.service.TestStatusService;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.domain.UIValidationGroup;
import org.opentestsystem.delivery.testreg.domain.UpdateOperation;
import org.opentestsystem.delivery.testreg.rest.external.mappers.StudentMapper;
import org.opentestsystem.delivery.testreg.rest.external.models.StudentDto;
import org.opentestsystem.delivery.testreg.service.StudentService;
import org.opentestsystem.delivery.testreg.service.TestRegPersister;
import org.opentestsystem.shared.web.AbstractRestController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletResponse;
import java.util.UUID;

/**
 * Created by fairway on 6/17/16.
 */
@Controller
public class ExternalStudentController extends AbstractRestController {

    @Autowired
    private TestRegPersister studentRepository;

    @Autowired
    private TestStatusService testStatusService;

    @Autowired
    private StudentService studentService;

    @RequestMapping(value = "/external/student/{stateCode}/{id}", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    //@Secured({ "ROLE_Student Read" })
    @ResponseBody
    public StudentDto findStudentById(@PathVariable final String stateCode, @PathVariable final String id) {
         return StudentMapper.mapFrom(studentService.findByStudentIdAndStateAbbreviation(id, stateCode));
    }

    @ResponseStatus(HttpStatus.CREATED)
    @RequestMapping(value = "/external/student", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = { MediaType.APPLICATION_JSON_VALUE })
    //@Secured({ "ROLE_Student Modify" })
    @ResponseBody
    public StudentDto saveStudent(@RequestBody @Validated({ UIValidationGroup.class, UpdateOperation.class }) final StudentDto studentDto,
            final HttpServletResponse response) {
        Student savedStudent= studentRepository.saveDomainObject(StudentMapper.mapTo(studentDto));
        response.setHeader("Location", savedStudent.getUrl());
        return StudentMapper.mapFrom(savedStudent);
    }

    @ResponseStatus(HttpStatus.NO_CONTENT)
    @RequestMapping(value = "external/student/{stateCode}/{id}", method = RequestMethod.DELETE)
    //@Secured({ "ROLE_Student Modify" })
    public void deleteStudent(@PathVariable final String stateCode, @PathVariable final String id) {
        Student student = studentService.findByStudentIdAndStateAbbreviation(id, stateCode);
        testStatusService.deleteTestStatus(id, stateCode);
        studentRepository.deleteDomainObject(student.getId(), FormatType.STUDENT);
    }
}
