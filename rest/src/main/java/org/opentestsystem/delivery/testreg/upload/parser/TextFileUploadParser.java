/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.upload.parser;

import static org.opentestsystem.delivery.testreg.upload.parser.ParserTextUtils.areAllElementsNull;
import static org.opentestsystem.delivery.testreg.upload.parser.ParserTextUtils.trimRecords;
import static org.opentestsystem.delivery.testreg.upload.parser.ParserTextUtils.padEmptyTextIfNoColumnAtEnd;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.opentestsystem.delivery.testreg.upload.DataRecord;
import org.opentestsystem.delivery.testreg.upload.FileDataRecord;
import org.opentestsystem.delivery.testreg.upload.FileHeaderRecord;
import org.opentestsystem.delivery.testreg.upload.TextFileUtils;
import org.opentestsystem.delivery.testreg.upload.TextFileUtils.LineMapper;

public class TextFileUploadParser implements UploadFileParser<Map<String, List<DataRecord>>> {

    private String delimiter;
    
    private boolean trim = true;
    
    @Override
    public ParserResult<Map<String, List<DataRecord>>> parse(InputStream uploadFile) throws Exception {

        TextFileUtils textFileUtils = new TextFileUtils();
        final Map<String, List<DataRecord>> recordMap = new HashMap<String, List<DataRecord>>();
        final List<Integer> ignoredRowNums = new ArrayList<>();

        textFileUtils.processTextFile(uploadFile, new LineMapper() {

            List<DataRecord> recordsList = new ArrayList<DataRecord>();
            String formatType = null;
            int    numberOfHeaders;
            
            @Override
            public boolean mapLine(String line, int lineNumber) {
                if (lineNumber == FORMAT_TYPE_ROW) {// FormatType
                    formatType = line;

                } else if (lineNumber == HEADER_ROW) {// Header
                    String[] headers = getColumnValues(line);
                    numberOfHeaders = headers.length;
                    recordsList.add(new FileHeaderRecord(headers));
                    recordMap.put(formatType, recordsList);

                } else {

                    String[] rowvals = getColumnValues(line);
                    if (!areAllElementsNull(rowvals)) { // ignore blank rows
                        String[] rowValsForMap = trim ? trimRecords(rowvals): rowvals;
                        recordMap.get(formatType).add(new FileDataRecord(lineNumber, padEmptyTextIfNoColumnAtEnd(numberOfHeaders, rowValsForMap)));
                    } else {
                        ignoredRowNums.add(lineNumber);
                    }

                }
                recordMap.put(formatType, recordsList);
                return true; // Keep mapping
            }
        });
        return new ParserResultImpl<Map<String,List<DataRecord>>>(ignoredRowNums, recordMap);
    }

    private String[] getColumnValues(String columnString) {
        return columnString.split(delimiter);
    }    

    public void setDelimiter(String delimiter) {
        this.delimiter = delimiter;
    }
    
    public void setTrimRecords(boolean trimValue) {
        trim = trimValue;
    }
}
