package org.opentestsystem.delivery.testreg.rest;

import com.google.common.base.Predicate;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.web.bind.annotation.RequestMethod;
import springfox.documentation.builders.ParameterBuilder;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.builders.ResponseMessageBuilder;
import springfox.documentation.schema.ModelRef;
import springfox.documentation.service.*;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;
import springfox.documentation.builders.PathSelectors;

import java.util.ArrayList;
import java.util.List;

@EnableSwagger2
public class ApplicationSwaggerConfig {
    @Value("${oauth.access.url}")
    private String oauthAccessUrl;

    @Bean
    public Docket externalStudentDocket() {
        return new Docket(DocumentationType.SWAGGER_2)
                .select()
                    .apis(RequestHandlerSelectors.any())
                    .paths(paths())
                    .build()
                .apiInfo(getApiInfo())
                .globalOperationParameters(getGlobalParameters())
                .useDefaultResponseMessages(false)
                .globalResponseMessage(RequestMethod.DELETE,
                        getCommonStatusCodes())
                .globalResponseMessage(RequestMethod.POST,
                        getCommonStatusCodes())
                .globalResponseMessage(RequestMethod.GET,
                        getCommonStatusCodes())
                ;
    }

    private List<ResponseMessage> getCommonStatusCodes() {
        List<ResponseMessage> globalResponseMessages = new ArrayList<>();
        globalResponseMessages.add(new ResponseMessageBuilder()
                .code(400)
                .message("An error occurred")
                .build());
        globalResponseMessages.add(new ResponseMessageBuilder()
                .code(403)
                .message("Forbidden: Resource may only be accessed via secure HTTPS")
                .build());
        globalResponseMessages.add(new ResponseMessageBuilder()
                .code(401)
                .message("Unauthorized")
                .build());
        return globalResponseMessages;
    }

    private List<Parameter> getGlobalParameters() {
        List<Parameter> parameters = new ArrayList<>();

        parameters.add(
                new ParameterBuilder()
                    .name("Authorization")
                    .description("OAuth2 bearer token.  Example: 'Bearer 441f6640-6fb3-40ab-9ba0-b7dc8548e641'")
                    .modelRef(new ModelRef("string"))
                    .parameterType("header")
                    .required(true)
                    .build()
        );

        return parameters;
    }

    private Predicate<String> paths() {
        return PathSelectors.regex("^/external/.*$");
    }

    private ApiInfo getApiInfo() {
        return new ApiInfo(
                "Student API",
                getDescription(),
                "1.0.0",
                "",
                "",
                "AIR Open Source License",
                "http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf"
        );
    }

    private String getDescription() {
        return "Manage students individually or in batches.\n\n" +
                "Authorization: An OAuth2 bearer token must be included as an Authorization header to each request\n\n" +
                "You can retrieve a bearer token by submitting a Password grant_type to " + oauthAccessUrl + "\n\n" +
                "A sample CURL command is as follows: \n" +
                "<pre>curl -i -X POST \\\n" +
                "   -H \"Content-Type:application/x-www-form-urlencoded\" \\\n" +
                "   -d \"client_id=pm\" \\\n" +
                "   -d \"client_secret=sbac12345\" \\\n" +
                "   -d \"grant_type=password\" \\\n" +
                "   -d \"password=passwordhere\" \\\n" +
                "   -d \"username=user@example.com\" \\\n" +
                " '" + oauthAccessUrl + "'</pre>";
    }
}
