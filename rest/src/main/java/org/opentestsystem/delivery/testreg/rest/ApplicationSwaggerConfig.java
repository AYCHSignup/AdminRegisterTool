package org.opentestsystem.delivery.testreg.rest;

import com.google.common.base.Predicate;
import org.springframework.context.annotation.Bean;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.*;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spi.service.contexts.SecurityContext;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;
import springfox.documentation.builders.PathSelectors;

import java.util.ArrayList;
import java.util.List;

@EnableSwagger2
public class ApplicationSwaggerConfig {
    @Bean
    public Docket externalStudentDocket() {
        return new Docket(DocumentationType.SWAGGER_2)
                .select()
                    .apis(RequestHandlerSelectors.any())
                    .paths(paths())
                    .build()
                .apiInfo(getApiInfo())
                .securitySchemes(getSecuritySchemes())
                .securityContexts(getSecurityContexts())
                .tags(
                        new Tag("Student Service", "All APIs related to students")
                )
                ;
    }

    private Predicate<String> paths() {
        return PathSelectors.regex("^/external/.*$");
    }

    private ApiInfo getApiInfo() {
        return new ApiInfo(
                "Student API",
                "Manage students individually or in batches",
                "1.0",
                "",
                "",
                "AIR Open Source License",
                "http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf"
        );
    }

    private List<SecurityScheme> getSecuritySchemes() {
        List<GrantType> grantTypes = new ArrayList<GrantType>();
        ImplicitGrant implicitGrant = new ImplicitGrant(new LoginEndpoint("https://sso-test.com/oauth/token"), "access_token");
        grantTypes.add(implicitGrant);

        List<SecurityScheme> response = new ArrayList<>();
        OAuth auth = new OAuth("OAUTH2", getAuthScopes(), grantTypes);
        response.add(auth);

        return response;
    }

    private List<AuthorizationScope> getAuthScopes() {
        List<AuthorizationScope> scopes = new ArrayList<>();
        scopes.add(new AuthorizationScope("ECHO_GET_MSG", "see echo"));

        return scopes;
    }

    private List<SecurityContext> getSecurityContexts() {
        List<SecurityReference> refs = new ArrayList<>();
        refs.add(new SecurityReference("asdf", getAuthScopes().toArray(new AuthorizationScope[0])));

        List<SecurityContext> context = new ArrayList<>();
        context.add(
                SecurityContext.builder()
                        .securityReferences(refs)
                        .forPaths(PathSelectors.any())
                        .build()

        );

        return context;
    }
}
