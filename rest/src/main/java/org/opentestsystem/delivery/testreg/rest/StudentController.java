/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/

package org.opentestsystem.delivery.testreg.rest;


import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.opentestsystem.delivery.testadmin.service.TestStatusService;
import org.opentestsystem.delivery.testreg.domain.Assessment;
import org.opentestsystem.delivery.testreg.domain.DeleteOperation;
import org.opentestsystem.delivery.testreg.domain.EligibleStudent;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.MasterResourceAccommodation;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.domain.UIValidationGroup;
import org.opentestsystem.delivery.testreg.domain.UpdateOperation;
import org.opentestsystem.delivery.testreg.domain.search.EligibleStudentSearchRequest;
import org.opentestsystem.delivery.testreg.domain.search.StudentSearchRequest;
import org.opentestsystem.delivery.testreg.service.AccommodationCacheService;
import org.opentestsystem.delivery.testreg.service.EligibilityService;
import org.opentestsystem.delivery.testreg.service.MasterResourceAccommodationService;
import org.opentestsystem.delivery.testreg.service.TestRegPersister;
import org.opentestsystem.delivery.testreg.upload.validation.ValidatedPathVariable;
import org.opentestsystem.shared.exception.LocalizedException;
import org.opentestsystem.shared.exception.RestException;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.opentestsystem.shared.web.AbstractRestController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.access.annotation.Secured;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

@Controller
public class StudentController extends AbstractRestController {

    private static final String DATA_LIST = "DATA_LIST";
    private static final String FORMAT_TYPE = "FORMAT_TYPE";
	private static final String EXPORT_TYPE = "EXPORT_TYPE";

    @Autowired
    private TestRegPersister studentService;

    @Autowired
    private EligibilityService eligibilityService;
    
    @Autowired
    private TestStatusService testStatusService;
    
    @Autowired
    private AccommodationCacheService accommodationCacheService;
    
    @Autowired 
    private MasterResourceAccommodationService masterResourceAccommodationService;


    @Resource(name = "languageMap")
    private Map<String, String> languageMap;

    @Resource(name = "gradeLevel")
    private Map<String, String> gradeLevel;

    /**
     * Find student by id.
     *
     * @param id
     *        student mongo id
     * @return Student student
     */
    @RequestMapping(value = "/student/{id}", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Student Read" })
    @ResponseBody
    public Student findStudentById(@PathVariable final String id) {
        return studentService.findById(id, FormatType.STUDENT);
    }

    /**
     * Save student.
     *
     * @param student
     *        unsaved student
     * @param response
     *        HttpServlet response
     * @return Student saved student
     */
    @ResponseStatus(HttpStatus.CREATED)
    @RequestMapping(value = "/student", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Student Modify" })
    @ResponseBody
    public Student saveStudent(
            @RequestBody @Validated({ UIValidationGroup.class, UpdateOperation.class }) final Student student,
            final HttpServletResponse response) {
        Student savedStudent= studentService.saveDomainObject(student);
        response.setHeader("Location", savedStudent.getUrl());
        return savedStudent;
    }

    /**
     * Update Student.
     *
     * @param id
     *        student mongo id
     * @param student
     *        to be updated
     * @param response
     *        HttpServlet response
     * @return Student updated student
     */
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = "/student/{id}", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Student Modify" })
    @ResponseBody
    public Student editStudent(@PathVariable final String id, @RequestBody @Validated({ UIValidationGroup.class,
        UpdateOperation.class }) final Student student, final HttpServletResponse response) {
        if (student == null || StringUtils.isEmpty(student.getId()) || !id.equals(student.getId())) {
            throw new LocalizedException("nonentity.invalid.id", new String[] { "Student" });
        } else {
            Student savedEntity = studentService.saveDomainObject(student);
            response.setHeader("Location", savedEntity.getUrl());
            return savedEntity;
        }

    }

    /**
     * Delete student.
     *
     * @param id
     *        Student mongo id
     */
    @ResponseStatus(HttpStatus.NO_CONTENT)
    @RequestMapping(value = "/student/{id}", method = RequestMethod.DELETE)
    @Secured({ "ROLE_Student Modify" })
    public void deleteStudent(
            @ValidatedPathVariable @Validated({ UIValidationGroup.class, DeleteOperation.class }) final String id) {
        Student student = studentService.findById(id, FormatType.STUDENT);
        testStatusService.deleteTestStatus (student.getEntityId (),student.getStateAbbreviation ()); 
        studentService.deleteDomainObject(id, FormatType.STUDENT);
    }

    /**
     * Search students by search criteria.
     *
     * @param request
     *        HttpServlet request
     * @param response
     *        HttpServlet response
     * @return SearchResponse containing students
     */
    @RequestMapping(value = "/student", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Student Read" })
    @ResponseBody
    public SearchResponse<Student> searchStudent(final HttpServletRequest request, final HttpServletResponse response) {

        if ("true".equals(request.getParameter("student.inValidAccommodationsSubject"))
                || "true".equals(request.getParameter("findEligibleStudents"))) {
            return searchEligibleStudentPopulation(request);
        }
        StudentSearchRequest searchRequest = new StudentSearchRequest(request.getParameterMap());
        SearchResponse<Student> searchResponse;
        if (searchRequest.isValid()) {
            searchResponse = studentService.searchDomainObjects(searchRequest, FormatType.STUDENT);
        } else {
            throw new RestException("nonentity.search.invalidSearchCriteria");
        }
        return searchResponse;
    }

    private SearchResponse<Student> searchEligibleStudentPopulation(final HttpServletRequest request) {
        SearchResponse<Student> searchResponse;
        EligibleStudentSearchRequest searchRequest = new EligibleStudentSearchRequest(request.getParameterMap());
        searchResponse = eligibilityService.findStudents(searchRequest);
        return searchResponse;
    }

    @RequestMapping(value = "/eligibleStudents", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public SearchResponse<EligibleStudent> searchEligibleStudent(final HttpServletRequest request, final HttpServletResponse response) {
        return eligibilityService.findEligibleStudents(new EligibleStudentSearchRequest(request.getParameterMap()));
    }

    /**
     * Export students/studentsPlusAccommodations/Accommodations/ExplicitEligibility Data into Excel or CSV depending on path extensions and exportType
     *
     * @param model       Model
     * @param exportType  type of search results we want to export 
     */
    @RequestMapping(value = "/students/{exportType}", method = RequestMethod.GET)
    @Secured({ "ROLE_Student Read" })
    public void exportToStudentFiles(final HttpServletRequest request, final Model model, @PathVariable final String exportType) throws Exception {
        List<Student> studentList = null;
        if ("true".equals(request.getParameter("student.inValidAccommodationsSubject"))) {
            studentList = searchEligibleStudentPopulation(request).getSearchResults();
        } else if (request.getParameterMap() != null) {
            StudentSearchRequest searchRequest = new StudentSearchRequest(request.getParameterMap());
            SearchResponse<Student> searchResponse = studentService.searchDomainObjects(searchRequest, Student.FORMAT_TYPE);
            studentList = searchResponse.getSearchResults();
        }
        if (model != null) {
            model.addAttribute(FORMAT_TYPE, Student.FORMAT_TYPE.toString());
            model.addAttribute(DATA_LIST, studentList);
            model.addAttribute(EXPORT_TYPE, exportType);
        }
    }

    /**
     * Find eligible assessments for a student by id.
     *
     * @param id
     *        student mongo id
     * @return Student student
     */
    @RequestMapping(value = "/student/{id}/eligibleAssessments", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Assessment Read" })
    @ResponseBody
    public List<Assessment> findEligibleAssessmentsForStudentById(@PathVariable final String id) {
        return eligibilityService.findEligibleAssessmentsByStudent(id);
    }

    @RequestMapping(value = "/student/languages", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Student Read" })
    @ResponseBody
    public Map<String, String> getLanguages() {
        return this.languageMap;
    }

    @RequestMapping(value = "/student/gradeLevel", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Student Read" })
    @ResponseBody
    public Map<String, String> getGradeLevel() {
        return this.gradeLevel;
    }
    
	/* Find accommodationResources by grade and subject
	 *
	 * @param subject and grade
	 *
	 * @return list of masterResourceAccommodations
	 */
    @RequestMapping(value = "/accomodationResource/{grade}/{subject}", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Student Read" })
    @ResponseBody
    public List<MasterResourceAccommodation> getAccommodationResources(@PathVariable final String subject,@PathVariable final String grade) {
        return accommodationCacheService.findBySubjectGrade (subject, grade);
    }
    
	/* get all accommodationResourceHeaderNames from masterResourceAccommodation 
	 *
	 * @return list of codes
	 */
    @RequestMapping(value = "/accomodationResourceHeaderNames", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Student Read" })
    @ResponseBody
    public List<String> getAccommodationResourceHeaderNames() {
        return masterResourceAccommodationService.getAccommodationResourceHeaderNames ();
    }
    
    @RequestMapping(value = "/accomodationResourceCodes", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Student Read" })
    @ResponseBody
    public List<String> getAccomodationResourceCodes() {
       return masterResourceAccommodationService.getAllOptionsCodes ();
    }
    
	/* get all multiSelectResources from masterResourceAccommodation 
	 *
	 * @return list of multiSelectResources codes
	 */
    @RequestMapping(value = "/accomodationMultiSelectTypes", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Student Read" })
    @ResponseBody
    public List<String> getAccomodationMultiSelectCodes() {
       return masterResourceAccommodationService.getMultiSelectResourceTypes ();
    }
    
	/* get all exclusiveoptions from masterResourceAccommodation 
	 *
	 * @return Map(code(key) with its corresponding exclusiveOption(value))
	 */
    @RequestMapping(value = "/mutuallyExclusiveOptions", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Student Read" })
    @ResponseBody
    public HashMap<String,List<String>> getAccommodationsExclusiveOptions() {
        return masterResourceAccommodationService.getMutuallyExclusiveOptions ();
    }
    
    /**
     * Find all default accommodations.
     * @return masterResourceAccommodations.
     */
    @RequestMapping(value = "/defaultaccommodations", method = RequestMethod.GET, produces = {MediaType.APPLICATION_JSON_VALUE })
    @ResponseBody
    public List<MasterResourceAccommodation> findAllMasterResourceAccommodations() {
        return masterResourceAccommodationService.findAll ();
    }
    
}
