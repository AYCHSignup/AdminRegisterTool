/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.upload.validator;

import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.opentestsystem.delivery.CachedClientEntity;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.ClientEntity;
import org.opentestsystem.delivery.testreg.upload.DataRecord;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.Errors;
import org.springframework.validation.ValidationUtils;
import org.springframework.validation.Validator;

public class FileUploadValidator implements Validator {

    @Resource
    private Map<String, Validator> formatValidatorMap;

    @Autowired
    private CachedClientEntity cachedClientEntity;
       
    @Override
    public boolean supports(Class<?> clazz) {
        return HashMap.class.isAssignableFrom(clazz);
    }

    @Override
    public void validate(Object target, Errors errors) {
        @SuppressWarnings("unchecked")
        Map<String, List<DataRecord>> recordsMap = (Map<String, List<DataRecord>>)target;
        
        Iterator<String> formatsForValidation = recordsMap.keySet().iterator();
        while(formatsForValidation.hasNext()) {
            
            String format = formatsForValidation.next();
            Validator formatValidator = formatValidatorMap.get(format);
            if(formatValidator == null) {
                errors.reject("file.invlaid.fileformat", "Invalid File Format '" + format + "' for upload");
                
            } else {
                //check for hidden formats, if format is valid but hidden then throw an error(JIRA#926)
                ClientEntity client = cachedClientEntity.getClient();
                if (client.isEntityHidden(FormatType.valueOf(format))) {
                    errors.reject("file.invlaid.fileformat", "Invalid File Format '" + format + "' for upload");   
                } else {                   
                    ValidationUtils.invokeValidator(formatValidator, recordsMap.get(format), errors);
                }
            }
        }
    }

    public void setFormatValidatorMap(Map<String, Validator> formatValidatorMap) {
        this.formatValidatorMap = formatValidatorMap;
    }
}
