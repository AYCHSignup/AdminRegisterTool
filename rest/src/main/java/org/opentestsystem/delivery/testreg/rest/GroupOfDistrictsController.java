/*******************************************************************************
 /*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.rest;

import org.apache.commons.lang.StringUtils;
import org.opentestsystem.delivery.testreg.domain.AddOperation;
import org.opentestsystem.delivery.testreg.domain.DeleteOperation;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.GroupOfDistrictsEntity;
import org.opentestsystem.delivery.testreg.domain.Sb11Entity;
import org.opentestsystem.delivery.testreg.domain.UIValidationGroup;
import org.opentestsystem.delivery.testreg.domain.UpdateOperation;
import org.opentestsystem.delivery.testreg.domain.search.GroupOfDistrictsEntitySearchRequest;
import org.opentestsystem.delivery.testreg.persistence.criteria.Sb11ObjectIdConverters.ObjectIdToGroupOfDistrictsEntityConverter;
import org.opentestsystem.delivery.testreg.service.Sb11EntityRepositoryService;
import org.opentestsystem.delivery.testreg.service.TestRegPersister;
import org.opentestsystem.delivery.testreg.upload.validation.ValidatedPathVariable;
import org.opentestsystem.shared.exception.LocalizedException;
import org.opentestsystem.shared.exception.RestException;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.opentestsystem.shared.web.AbstractRestController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.access.annotation.Secured;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.List;

/**
 * Rest controller for CRUD operations on groupOfDistrictsEntity.
 */
@Controller
public class GroupOfDistrictsController extends AbstractRestController {

    @Autowired
    private TestRegPersister testRegPersister;

    @Autowired
    private Sb11EntityRepositoryService sb11EntityService;

    /**
     * Find GroupOfDistricts by id.
     *
     * @param id GroupOfDistricts mongo id
     * @return groupOfDistrictsEntity GroupOfDistricts
     */
    @RequestMapping(value = "/groupofdistricts/{id}", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Entity Read" })
    @ResponseBody
    public GroupOfDistrictsEntity findGroupOfDistrictsById(@PathVariable final String id) {
        return testRegPersister.findById(id, GroupOfDistrictsEntity.FORMAT_TYPE);
    }

    /**
     * Save GroupOfDistricts entity.
     *
     * @param groupOfDistrictsEntity unsaved GroupOfDistricts entity
     * @param response               HttpServlet response
     * @return groupOfDistrictsEntity saved GroupOfDistricts
     */
    @ResponseStatus(HttpStatus.CREATED)
    @RequestMapping(value = "/groupofdistricts", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Entity Modify" })
    @ResponseBody
    public GroupOfDistrictsEntity saveGroupOfDistricts(@RequestBody @Validated({ UIValidationGroup.class,
            AddOperation.class }) final GroupOfDistrictsEntity groupOfDistrictsEntity,
            final HttpServletResponse response) {
        GroupOfDistrictsEntity savedEntity = testRegPersister.saveDomainObject(groupOfDistrictsEntity);
        response.setHeader("Location", savedEntity.getUrl());
        return savedEntity;
    }

    /**
     * Update GroupOfDistricts entity.
     *
     * @param id                     GroupOfDistricts id
     * @param groupOfDistrictsEntity to be updated GroupOfDistricts mongo entity
     * @param response               HttpServlet response
     * @return groupOfDistrictsEntity updated GroupOfDistricts
     */
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = "/groupofdistricts/{id}", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Entity Modify" })
    @ResponseBody
    public GroupOfDistrictsEntity updateGroupOfDistricts(@PathVariable final String id, @RequestBody @Validated({
            UIValidationGroup.class, UpdateOperation.class }) final GroupOfDistrictsEntity groupOfDistrictsEntity,
            final HttpServletResponse response) {
        if (groupOfDistrictsEntity == null || StringUtils.isEmpty(groupOfDistrictsEntity.getId())
                || !id.equals(groupOfDistrictsEntity.getId())) {
            throw new LocalizedException("entity.invalid.id", new String[] { "GroupOfDistricts" });
        } else {
            GroupOfDistrictsEntity savedEntity = testRegPersister.updateDomainObject(groupOfDistrictsEntity);
            response.setHeader("Location", savedEntity.getUrl());
            return savedEntity;
        }
    }

    /**
     * Delete GroupOfDistricts. <br>
     * <b>Important:</b> <br>
     * {@link ValidatedPathVariable} would resolve id to {@link GroupOfDistrictsEntity} by calling {@link ObjectIdToGroupOfDistrictsEntityConverter}. <br>
     * <br>
     * {@linkplain Validated} with hints {@code UIValidationGroup} and {@code DeleteOperation} calls Validator using binders. <br>
     *
     * @param id GroupOfDistricts mongo id
     */
    @ResponseStatus(HttpStatus.NO_CONTENT)
    @RequestMapping(value = "/groupofdistricts/{id}", method = RequestMethod.DELETE)
    @Secured({ "ROLE_Entity Modify" })
    public void removeGroupOfDistricts(@ValidatedPathVariable @Validated({ UIValidationGroup.class, DeleteOperation.class }) final GroupOfDistrictsEntity entity) {
        testRegPersister.deleteDomainObject(entity.getId(), GroupOfDistrictsEntity.FORMAT_TYPE);
    }

    /**
     * Search GroupOfDistrictss by search criteria.
     *
     * @param request  HttpServlet request
     * @param response HttpServlet response
     * @return SearchResponse containing GroupOfDistricts entities
     */
    @RequestMapping(value = "/groupofdistrict", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Entity Read" })
    @ResponseBody
    public SearchResponse<GroupOfDistrictsEntity> searchGroupOfDistricts(final HttpServletRequest request,
            final HttpServletResponse response) {
        GroupOfDistrictsEntitySearchRequest searchRequest = new GroupOfDistrictsEntitySearchRequest(
                request.getParameterMap());
        SearchResponse<GroupOfDistrictsEntity> searchResponse;
        if (searchRequest.isValid()) {
            searchResponse = testRegPersister.searchDomainObjects(searchRequest, GroupOfDistrictsEntity.FORMAT_TYPE);
        } else {
            throw new RestException("entity.search.invalidSearchCriteria");
        }
        return searchResponse;
    }

    /**
     * Find GroupOfDistricts
     * Append ".xls" to the URL to get data in Excel format
     * Append ".csv" to the URL to get data in CSV format
     */
    @RequestMapping(value = "/groupofdistricts", method = RequestMethod.GET)
    @Secured({ "ROLE_Entity Read" })
    public void findGroupOfDistricts(final HttpServletRequest request, final Model model) throws Exception {
        Sb11EntityControllerHelper.findEntities(request, model, FormatType.GROUPOFDISTRICTS, testRegPersister);
    }

    /**
     * Find Parents
     */
    @RequestMapping(value = "/groupofdistricts/parents", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Entity Read" })
    @ResponseBody
    public List<Sb11Entity> findParents(final HttpServletRequest request) throws Exception {
        return Sb11EntityControllerHelper.findParentEntities(request, null, FormatType.GROUPOFDISTRICTS, testRegPersister, sb11EntityService);
    }
}
